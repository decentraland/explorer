/*! decentraland-ecs@1.0.0 */(function(e,a){for(var i in a)e[i]=a[i]})(this,function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{enumerable:true,get:getter})}};__webpack_require__.r=function(exports){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(exports,"__esModule",{value:true})};__webpack_require__.t=function(value,mode){if(mode&1)value=__webpack_require__(value);if(mode&8)return value;if(mode&4&&typeof value==="object"&&value&&value.__esModule)return value;var ns=Object.create(null);__webpack_require__.r(ns);Object.defineProperty(ns,"default",{enumerable:true,value:value});if(mode&2&&typeof value!="string")for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s="./packages/decentraland-ecs/src/index.ts")}({"./packages/decentraland-ecs/src/decentraland/AnimationState.ts":
/*!**********************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/AnimationState.ts ***!
  \**********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nvar helpers_1 = __webpack_require__(/*! ../ecs/helpers */ "./packages/decentraland-ecs/src/ecs/helpers.ts");\nvar defaultParams = {\n    looping: true,\n    speed: 1.0,\n    weight: 1.0\n};\n/**\n * @public\n */\nvar AnimationState = /** @class */ (function (_super) {\n    __extends(AnimationState, _super);\n    function AnimationState(clip, params) {\n        if (params === void 0) { params = defaultParams; }\n        var _this = _super.call(this) || this;\n        // @internal\n        _this.isAnimationClip = true;\n        /**\n         * Does the animation loop?, default: true\n         */\n        _this.looping = defaultParams.looping;\n        /**\n         * Weight of the animation, values from 0 to 1, used to blend several animations. default: 1\n         */\n        _this.weight = defaultParams.weight;\n        /**\n         * Is the animation playing? default: true\n         */\n        _this.playing = false;\n        /**\n         * Does any anyone asked to reset the animation? default: false\n         */\n        _this.shouldReset = false;\n        /**\n         * The animation speed\n         */\n        _this.speed = defaultParams.speed;\n        // @internal\n        _this.name = helpers_1.newId(\'AnimClip\');\n        _this.clip = clip;\n        _this.setParams(__assign({}, params));\n        return _this;\n    }\n    /**\n     * Sets the clip parameters\n     */\n    AnimationState.prototype.setParams = function (params) {\n        this.looping = params.looping !== undefined ? params.looping : this.looping;\n        this.speed = params.speed || this.speed;\n        return this;\n    };\n    AnimationState.prototype.toJSON = function () {\n        var ret = JSON.parse(JSON.stringify(_super.prototype.toJSON.call(this)));\n        if (this.shouldReset) {\n            this.shouldReset = false;\n        }\n        return ret;\n    };\n    /**\n     * Starts the animation\n     */\n    AnimationState.prototype.play = function () {\n        this.playing = true;\n    };\n    /**\n     * Pauses the animation\n     */\n    AnimationState.prototype.pause = function () {\n        this.playing = false;\n    };\n    /**\n     * Resets the animation state to the frame 0\n     */\n    AnimationState.prototype.reset = function () {\n        this.shouldReset = true;\n    };\n    /**\n     * Resets and pauses the animation\n     */\n    AnimationState.prototype.stop = function () {\n        this.reset();\n        this.pause();\n    };\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], AnimationState.prototype, "clip", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AnimationState.prototype, "looping", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AnimationState.prototype, "weight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AnimationState.prototype, "playing", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AnimationState.prototype, "shouldReset", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AnimationState.prototype, "speed", void 0);\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], AnimationState.prototype, "name", void 0);\n    return AnimationState;\n}(Component_1.ObservableComponent));\nexports.AnimationState = AnimationState;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQW5pbWF0aW9uU3RhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVjZW50cmFsYW5kL0FuaW1hdGlvblN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOENBQXNEO0FBQ3RELDBDQUFzQztBQVN0QyxJQUFNLGFBQWEsR0FBb0U7SUFDckYsT0FBTyxFQUFFLElBQUk7SUFDYixLQUFLLEVBQUUsR0FBRztJQUNWLE1BQU0sRUFBRSxHQUFHO0NBQ1osQ0FBQTtBQUVEOztHQUVHO0FBQ0g7SUFBb0Msa0NBQW1CO0lBNENyRCx3QkFBWSxJQUFZLEVBQUUsTUFBdUM7UUFBdkMsdUJBQUEsRUFBQSxzQkFBdUM7UUFBakUsWUFDRSxpQkFBTyxTQUdSO1FBL0NELFlBQVk7UUFDTCxxQkFBZSxHQUFZLElBQUksQ0FBQTtRQVF0Qzs7V0FFRztRQUVJLGFBQU8sR0FBWSxhQUFhLENBQUMsT0FBTyxDQUFBO1FBRS9DOztXQUVHO1FBRUksWUFBTSxHQUFXLGFBQWEsQ0FBQyxNQUFNLENBQUE7UUFFNUM7O1dBRUc7UUFFSSxhQUFPLEdBQVksS0FBSyxDQUFBO1FBRS9COztXQUVHO1FBRUksaUJBQVcsR0FBWSxLQUFLLENBQUE7UUFFbkM7O1dBRUc7UUFFSSxXQUFLLEdBQVcsYUFBYSxDQUFDLEtBQUssQ0FBQTtRQUUxQyxZQUFZO1FBRUgsVUFBSSxHQUFXLGVBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUl2QyxLQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNoQixLQUFJLENBQUMsU0FBUyxjQUFNLE1BQU0sRUFBRyxDQUFBOztJQUMvQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxrQ0FBUyxHQUFULFVBQVUsTUFBdUI7UUFDL0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQTtRQUMzRSxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQTtRQUN2QyxPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFFRCwrQkFBTSxHQUFOO1FBQ0UsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFNLE1BQU0sV0FBRSxDQUFDLENBQUMsQ0FBQTtRQUN0RCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUE7U0FDekI7UUFDRCxPQUFPLEdBQUcsQ0FBQTtJQUNaLENBQUM7SUFFRDs7T0FFRztJQUNILDZCQUFJLEdBQUo7UUFDRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQTtJQUNyQixDQUFDO0lBRUQ7O09BRUc7SUFDSCw4QkFBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUE7SUFDdEIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsOEJBQUssR0FBTDtRQUNFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFBO0lBQ3pCLENBQUM7SUFFRDs7T0FFRztJQUNILDZCQUFJLEdBQUo7UUFDRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDWixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDZCxDQUFDO0lBdEZEO1FBREMsK0JBQW1CLENBQUMsUUFBUTtnREFDRDtJQU01QjtRQURDLCtCQUFtQixDQUFDLEtBQUs7bURBQ3FCO0lBTS9DO1FBREMsK0JBQW1CLENBQUMsS0FBSztrREFDa0I7SUFNNUM7UUFEQywrQkFBbUIsQ0FBQyxLQUFLO21EQUNLO0lBTS9CO1FBREMsK0JBQW1CLENBQUMsS0FBSzt1REFDUztJQU1uQztRQURDLCtCQUFtQixDQUFDLEtBQUs7aURBQ2dCO0lBSTFDO1FBREMsK0JBQW1CLENBQUMsUUFBUTtnREFDWTtJQXFEM0MscUJBQUM7Q0FBQSxBQS9GRCxDQUFvQywrQkFBbUIsR0ErRnREO0FBL0ZZLHdDQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZUNvbXBvbmVudCB9IGZyb20gJy4uL2Vjcy9Db21wb25lbnQnXG5pbXBvcnQgeyBuZXdJZCB9IGZyb20gJy4uL2Vjcy9oZWxwZXJzJ1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgQW5pbWF0aW9uUGFyYW1zID0ge1xuICBsb29waW5nPzogYm9vbGVhblxuICBzcGVlZD86IG51bWJlclxuICB3ZWlnaHQ/OiBudW1iZXJcbn1cblxuY29uc3QgZGVmYXVsdFBhcmFtczogUmVxdWlyZWQ8UGljazxBbmltYXRpb25QYXJhbXMsICdsb29waW5nJyB8ICdzcGVlZCcgfCAnd2VpZ2h0Jz4+ID0ge1xuICBsb29waW5nOiB0cnVlLFxuICBzcGVlZDogMS4wLFxuICB3ZWlnaHQ6IDEuMFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEFuaW1hdGlvblN0YXRlIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIC8vIEBpbnRlcm5hbFxuICBwdWJsaWMgaXNBbmltYXRpb25DbGlwOiBib29sZWFuID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBhbmltYXRpb24gaW4gdGhlIG1vZGVsXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICBwdWJsaWMgcmVhZG9ubHkgY2xpcDogc3RyaW5nXG5cbiAgLyoqXG4gICAqIERvZXMgdGhlIGFuaW1hdGlvbiBsb29wPywgZGVmYXVsdDogdHJ1ZVxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcHVibGljIGxvb3Bpbmc6IGJvb2xlYW4gPSBkZWZhdWx0UGFyYW1zLmxvb3BpbmdcblxuICAvKipcbiAgICogV2VpZ2h0IG9mIHRoZSBhbmltYXRpb24sIHZhbHVlcyBmcm9tIDAgdG8gMSwgdXNlZCB0byBibGVuZCBzZXZlcmFsIGFuaW1hdGlvbnMuIGRlZmF1bHQ6IDFcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHB1YmxpYyB3ZWlnaHQ6IG51bWJlciA9IGRlZmF1bHRQYXJhbXMud2VpZ2h0XG5cbiAgLyoqXG4gICAqIElzIHRoZSBhbmltYXRpb24gcGxheWluZz8gZGVmYXVsdDogdHJ1ZVxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcHVibGljIHBsYXlpbmc6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIC8qKlxuICAgKiBEb2VzIGFueSBhbnlvbmUgYXNrZWQgdG8gcmVzZXQgdGhlIGFuaW1hdGlvbj8gZGVmYXVsdDogZmFsc2VcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHB1YmxpYyBzaG91bGRSZXNldDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgLyoqXG4gICAqIFRoZSBhbmltYXRpb24gc3BlZWRcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHB1YmxpYyBzcGVlZDogbnVtYmVyID0gZGVmYXVsdFBhcmFtcy5zcGVlZFxuXG4gIC8vIEBpbnRlcm5hbFxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSBuYW1lOiBzdHJpbmcgPSBuZXdJZCgnQW5pbUNsaXAnKVxuXG4gIGNvbnN0cnVjdG9yKGNsaXA6IHN0cmluZywgcGFyYW1zOiBBbmltYXRpb25QYXJhbXMgPSBkZWZhdWx0UGFyYW1zKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuY2xpcCA9IGNsaXBcbiAgICB0aGlzLnNldFBhcmFtcyh7IC4uLnBhcmFtcyB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGNsaXAgcGFyYW1ldGVyc1xuICAgKi9cbiAgc2V0UGFyYW1zKHBhcmFtczogQW5pbWF0aW9uUGFyYW1zKSB7XG4gICAgdGhpcy5sb29waW5nID0gcGFyYW1zLmxvb3BpbmcgIT09IHVuZGVmaW5lZCA/IHBhcmFtcy5sb29waW5nIDogdGhpcy5sb29waW5nXG4gICAgdGhpcy5zcGVlZCA9IHBhcmFtcy5zcGVlZCB8fCB0aGlzLnNwZWVkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICBjb25zdCByZXQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN1cGVyLnRvSlNPTigpKSlcbiAgICBpZiAodGhpcy5zaG91bGRSZXNldCkge1xuICAgICAgdGhpcy5zaG91bGRSZXNldCA9IGZhbHNlXG4gICAgfVxuICAgIHJldHVybiByZXRcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIGFuaW1hdGlvblxuICAgKi9cbiAgcGxheSgpIHtcbiAgICB0aGlzLnBsYXlpbmcgPSB0cnVlXG4gIH1cblxuICAvKipcbiAgICogUGF1c2VzIHRoZSBhbmltYXRpb25cbiAgICovXG4gIHBhdXNlKCkge1xuICAgIHRoaXMucGxheWluZyA9IGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBhbmltYXRpb24gc3RhdGUgdG8gdGhlIGZyYW1lIDBcbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuc2hvdWxkUmVzZXQgPSB0cnVlXG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIGFuZCBwYXVzZXMgdGhlIGFuaW1hdGlvblxuICAgKi9cbiAgc3RvcCgpIHtcbiAgICB0aGlzLnJlc2V0KClcbiAgICB0aGlzLnBhdXNlKClcbiAgfVxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/AnimationState.ts?')},"./packages/decentraland-ecs/src/decentraland/Audio.ts":
/*!*************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Audio.ts ***!
  \*************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nvar Components_1 = __webpack_require__(/*! ./Components */ "./packages/decentraland-ecs/src/decentraland/Components.ts");\n/**\n * @public\n */\nvar AudioClip = /** @class */ (function (_super) {\n    __extends(AudioClip, _super);\n    function AudioClip(url) {\n        var _this = _super.call(this) || this;\n        /**\n         * Is this clip looping by default?\n         */\n        _this.loop = false;\n        /**\n         * Clip\'s master volume. This volume affects all the AudioSources.\n         * Valid ranges from 0 to 1\n         */\n        _this.volume = 1;\n        _this.url = url;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], AudioClip.prototype, "url", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AudioClip.prototype, "loop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AudioClip.prototype, "loadingCompleteEventId", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AudioClip.prototype, "volume", void 0);\n    AudioClip = __decorate([\n        Component_1.DisposableComponent(\'engine.AudioClip\', Components_1.CLASS_ID.AUDIO_CLIP)\n    ], AudioClip);\n    return AudioClip;\n}(Component_1.ObservableComponent));\nexports.AudioClip = AudioClip;\n/**\n * @public\n */\nvar AudioSource = /** @class */ (function (_super) {\n    __extends(AudioSource, _super);\n    function AudioSource(audioClip) {\n        var _this = _super.call(this) || this;\n        _this.audioClip = audioClip;\n        /**\n         * Is this clip looping by default?\n         */\n        _this.loop = false;\n        /**\n         * Clip\'s master volume. This volume affects all the AudioSources.\n         * Valid ranges from 0 to 1\n         */\n        _this.volume = 1;\n        /**\n         * Is this AudioSource playing?\n         */\n        _this.playing = false;\n        /**\n         * Pitch, default: 1.0, range from 0.0 to MaxFloat\n         */\n        _this.pitch = 1.0;\n        if (!(audioClip instanceof AudioClip)) {\n            throw new Error("Trying to create AudioSource(AudioClip) with an invalid AudioClip");\n        }\n        _this.audioClipId = Component_1.getComponentId(audioClip);\n        return _this;\n    }\n    /**\n     * Disables the looping and plays the current source once.\n     * If the sound was playing, it stops and starts over.\n     */\n    AudioSource.prototype.playOnce = function () {\n        this.playing = true;\n        this.dirty = true;\n        this.data.nonce = Math.random();\n        return this;\n    };\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], AudioSource.prototype, "audioClipId", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AudioSource.prototype, "loop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AudioSource.prototype, "volume", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AudioSource.prototype, "playing", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AudioSource.prototype, "pitch", void 0);\n    AudioSource = __decorate([\n        Component_1.Component(\'engine.AudioSource\', Components_1.CLASS_ID.AUDIO_SOURCE)\n    ], AudioSource);\n    return AudioSource;\n}(Component_1.ObservableComponent));\nexports.AudioSource = AudioSource;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXVkaW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVjZW50cmFsYW5kL0F1ZGlvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDhDQUFzRztBQUN0RywyQ0FBdUM7QUFFdkM7O0dBRUc7QUFFSDtJQUErQiw2QkFBbUI7SUFxQmhELG1CQUFZLEdBQVc7UUFBdkIsWUFDRSxpQkFBTyxTQUVSO1FBcEJEOztXQUVHO1FBRUgsVUFBSSxHQUFZLEtBQUssQ0FBQTtRQU1yQjs7O1dBR0c7UUFFSCxZQUFNLEdBQVcsQ0FBQyxDQUFBO1FBSWhCLEtBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBOztJQUNoQixDQUFDO0lBdEJEO1FBREMsK0JBQW1CLENBQUMsUUFBUTswQ0FDVDtJQU1wQjtRQURDLCtCQUFtQixDQUFDLEtBQUs7MkNBQ0w7SUFJckI7UUFEQywrQkFBbUIsQ0FBQyxLQUFLOzZEQUNLO0lBTy9CO1FBREMsK0JBQW1CLENBQUMsS0FBSzs2Q0FDUjtJQW5CUCxTQUFTO1FBRHJCLCtCQUFtQixDQUFDLGtCQUFrQixFQUFFLHFCQUFRLENBQUMsVUFBVSxDQUFDO09BQ2hELFNBQVMsQ0F5QnJCO0lBQUQsZ0JBQUM7Q0FBQSxBQXpCRCxDQUErQiwrQkFBbUIsR0F5QmpEO0FBekJZLDhCQUFTO0FBMkJ0Qjs7R0FFRztBQUVIO0lBQWlDLCtCQUFtQjtJQTZCbEQscUJBQTRCLFNBQW9CO1FBQWhELFlBQ0UsaUJBQU8sU0FLUjtRQU4yQixlQUFTLEdBQVQsU0FBUyxDQUFXO1FBekJoRDs7V0FFRztRQUVILFVBQUksR0FBWSxLQUFLLENBQUE7UUFFckI7OztXQUdHO1FBRUgsWUFBTSxHQUFXLENBQUMsQ0FBQTtRQUVsQjs7V0FFRztRQUVILGFBQU8sR0FBWSxLQUFLLENBQUE7UUFFeEI7O1dBRUc7UUFFSCxXQUFLLEdBQVcsR0FBRyxDQUFBO1FBSWpCLElBQUksQ0FBQyxDQUFDLFNBQVMsWUFBWSxTQUFTLENBQUMsRUFBRTtZQUNyQyxNQUFNLElBQUksS0FBSyxDQUFDLG1FQUFtRSxDQUFDLENBQUE7U0FDckY7UUFDRCxLQUFJLENBQUMsV0FBVyxHQUFHLDBCQUFjLENBQUMsU0FBZ0IsQ0FBQyxDQUFBOztJQUNyRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsOEJBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFBO1FBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUMvQixPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUE1Q0Q7UUFEQywrQkFBbUIsQ0FBQyxRQUFRO29EQUNEO0lBTTVCO1FBREMsK0JBQW1CLENBQUMsS0FBSzs2Q0FDTDtJQU9yQjtRQURDLCtCQUFtQixDQUFDLEtBQUs7K0NBQ1I7SUFNbEI7UUFEQywrQkFBbUIsQ0FBQyxLQUFLO2dEQUNGO0lBTXhCO1FBREMsK0JBQW1CLENBQUMsS0FBSzs4Q0FDUDtJQTNCUixXQUFXO1FBRHZCLHFCQUFTLENBQUMsb0JBQW9CLEVBQUUscUJBQVEsQ0FBQyxZQUFZLENBQUM7T0FDMUMsV0FBVyxDQStDdkI7SUFBRCxrQkFBQztDQUFBLEFBL0NELENBQWlDLCtCQUFtQixHQStDbkQ7QUEvQ1ksa0NBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXNwb3NhYmxlQ29tcG9uZW50LCBPYnNlcnZhYmxlQ29tcG9uZW50LCBDb21wb25lbnQsIGdldENvbXBvbmVudElkIH0gZnJvbSAnLi4vZWNzL0NvbXBvbmVudCdcbmltcG9ydCB7IENMQVNTX0lEIH0gZnJvbSAnLi9Db21wb25lbnRzJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5BdWRpb0NsaXAnLCBDTEFTU19JRC5BVURJT19DTElQKVxuZXhwb3J0IGNsYXNzIEF1ZGlvQ2xpcCBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB1cmw6IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBJcyB0aGlzIGNsaXAgbG9vcGluZyBieSBkZWZhdWx0P1xuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbG9vcDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgLy8gQGludGVybmFsXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGxvYWRpbmdDb21wbGV0ZUV2ZW50SWQ/OiBzdHJpbmdcblxuICAvKipcbiAgICogQ2xpcCdzIG1hc3RlciB2b2x1bWUuIFRoaXMgdm9sdW1lIGFmZmVjdHMgYWxsIHRoZSBBdWRpb1NvdXJjZXMuXG4gICAqIFZhbGlkIHJhbmdlcyBmcm9tIDAgdG8gMVxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdm9sdW1lOiBudW1iZXIgPSAxXG5cbiAgY29uc3RydWN0b3IodXJsOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy51cmwgPSB1cmxcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLkF1ZGlvU291cmNlJywgQ0xBU1NfSUQuQVVESU9fU09VUkNFKVxuZXhwb3J0IGNsYXNzIEF1ZGlvU291cmNlIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IGF1ZGlvQ2xpcElkOiBzdHJpbmdcblxuICAvKipcbiAgICogSXMgdGhpcyBjbGlwIGxvb3BpbmcgYnkgZGVmYXVsdD9cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGxvb3A6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIC8qKlxuICAgKiBDbGlwJ3MgbWFzdGVyIHZvbHVtZS4gVGhpcyB2b2x1bWUgYWZmZWN0cyBhbGwgdGhlIEF1ZGlvU291cmNlcy5cbiAgICogVmFsaWQgcmFuZ2VzIGZyb20gMCB0byAxXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2b2x1bWU6IG51bWJlciA9IDFcblxuICAvKipcbiAgICogSXMgdGhpcyBBdWRpb1NvdXJjZSBwbGF5aW5nP1xuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGxheWluZzogYm9vbGVhbiA9IGZhbHNlXG5cbiAgLyoqXG4gICAqIFBpdGNoLCBkZWZhdWx0OiAxLjAsIHJhbmdlIGZyb20gMC4wIHRvIE1heEZsb2F0XG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwaXRjaDogbnVtYmVyID0gMS4wXG5cbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGF1ZGlvQ2xpcDogQXVkaW9DbGlwKSB7XG4gICAgc3VwZXIoKVxuICAgIGlmICghKGF1ZGlvQ2xpcCBpbnN0YW5jZW9mIEF1ZGlvQ2xpcCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVHJ5aW5nIHRvIGNyZWF0ZSBBdWRpb1NvdXJjZShBdWRpb0NsaXApIHdpdGggYW4gaW52YWxpZCBBdWRpb0NsaXBgKVxuICAgIH1cbiAgICB0aGlzLmF1ZGlvQ2xpcElkID0gZ2V0Q29tcG9uZW50SWQoYXVkaW9DbGlwIGFzIGFueSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNhYmxlcyB0aGUgbG9vcGluZyBhbmQgcGxheXMgdGhlIGN1cnJlbnQgc291cmNlIG9uY2UuXG4gICAqIElmIHRoZSBzb3VuZCB3YXMgcGxheWluZywgaXQgc3RvcHMgYW5kIHN0YXJ0cyBvdmVyLlxuICAgKi9cbiAgcGxheU9uY2UoKSB7XG4gICAgdGhpcy5wbGF5aW5nID0gdHJ1ZVxuICAgIHRoaXMuZGlydHkgPSB0cnVlXG4gICAgdGhpcy5kYXRhLm5vbmNlID0gTWF0aC5yYW5kb20oKVxuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cbiJdfQ==\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Audio.ts?')},"./packages/decentraland-ecs/src/decentraland/AvatarShape.ts":
/*!*******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/AvatarShape.ts ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nvar Components_1 = __webpack_require__(/*! ./Components */ "./packages/decentraland-ecs/src/decentraland/Components.ts");\n/**\n * @public\n */\nvar AvatarShape = /** @class */ (function (_super) {\n    __extends(AvatarShape, _super);\n    function AvatarShape() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.useDummyModel = false;\n        return _this;\n    }\n    AvatarShape_1 = AvatarShape;\n    AvatarShape.Dummy = function () {\n        var avatarShape = new AvatarShape_1();\n        avatarShape.useDummyModel = true;\n        return avatarShape;\n    };\n    var AvatarShape_1;\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AvatarShape.prototype, "id", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AvatarShape.prototype, "name", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AvatarShape.prototype, "bodyShape", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AvatarShape.prototype, "wearables", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AvatarShape.prototype, "skinColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AvatarShape.prototype, "hairColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AvatarShape.prototype, "eyeColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AvatarShape.prototype, "useDummyModel", void 0);\n    AvatarShape = AvatarShape_1 = __decorate([\n        Component_1.Component(\'engine.avatarShape\', Components_1.CLASS_ID.AVATAR_SHAPE)\n    ], AvatarShape);\n    return AvatarShape;\n}(Component_1.ObservableComponent));\nexports.AvatarShape = AvatarShape;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXZhdGFyU2hhcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVjZW50cmFsYW5kL0F2YXRhclNoYXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLDhDQUFpRTtBQUNqRSwyQ0FBdUM7QUFHdkM7O0dBRUc7QUFFSDtJQUFpQywrQkFBbUI7SUFBcEQ7UUFBQSxxRUE4QkM7UUFQQyxtQkFBYSxHQUFZLEtBQUssQ0FBQTs7SUFPaEMsQ0FBQztvQkE5QlksV0FBVztJQXlCUixpQkFBSyxHQUFuQjtRQUNFLElBQU0sV0FBVyxHQUFHLElBQUksYUFBVyxFQUFFLENBQUE7UUFDckMsV0FBVyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUE7UUFDaEMsT0FBTyxXQUFXLENBQUE7SUFDcEIsQ0FBQzs7SUEzQkQ7UUFEQywrQkFBbUIsQ0FBQyxLQUFLOzJDQUNmO0lBR1g7UUFEQywrQkFBbUIsQ0FBQyxLQUFLOzZDQUNiO0lBR2I7UUFEQywrQkFBbUIsQ0FBQyxLQUFLO2tEQUNKO0lBR3RCO1FBREMsK0JBQW1CLENBQUMsS0FBSztrREFDRjtJQUd4QjtRQURDLCtCQUFtQixDQUFDLEtBQUs7a0RBQ0E7SUFHMUI7UUFEQywrQkFBbUIsQ0FBQyxLQUFLO2tEQUNBO0lBRzFCO1FBREMsK0JBQW1CLENBQUMsS0FBSztpREFDRDtJQUd6QjtRQURDLCtCQUFtQixDQUFDLEtBQUs7c0RBQ0k7SUF2Qm5CLFdBQVc7UUFEdkIscUJBQVMsQ0FBQyxvQkFBb0IsRUFBRSxxQkFBUSxDQUFDLFlBQVksQ0FBQztPQUMxQyxXQUFXLENBOEJ2QjtJQUFELGtCQUFDO0NBQUEsQUE5QkQsQ0FBaUMsK0JBQW1CLEdBOEJuRDtBQTlCWSxrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdlYXJhYmxlSWQgfSBmcm9tICcuLi9kZWNlbnRyYWxhbmQvVHlwZXMnXG5pbXBvcnQgeyBDb21wb25lbnQsIE9ic2VydmFibGVDb21wb25lbnQgfSBmcm9tICcuLi9lY3MvQ29tcG9uZW50J1xuaW1wb3J0IHsgQ0xBU1NfSUQgfSBmcm9tICcuL0NvbXBvbmVudHMnXG5pbXBvcnQgeyBSZWFkT25seUNvbG9yNCB9IGZyb20gJy4vbWF0aCdcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5hdmF0YXJTaGFwZScsIENMQVNTX0lELkFWQVRBUl9TSEFQRSlcbmV4cG9ydCBjbGFzcyBBdmF0YXJTaGFwZSBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBpZCE6IHN0cmluZ1xuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIG5hbWUhOiBzdHJpbmdcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBib2R5U2hhcGUhOiBXZWFyYWJsZUlkXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgd2VhcmFibGVzITogV2VhcmFibGVJZFtdXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2tpbkNvbG9yITogUmVhZE9ubHlDb2xvcjRcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBoYWlyQ29sb3IhOiBSZWFkT25seUNvbG9yNFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGV5ZUNvbG9yITogUmVhZE9ubHlDb2xvcjRcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB1c2VEdW1teU1vZGVsOiBib29sZWFuID0gZmFsc2VcblxuICBwdWJsaWMgc3RhdGljIER1bW15KCk6IEF2YXRhclNoYXBlIHtcbiAgICBjb25zdCBhdmF0YXJTaGFwZSA9IG5ldyBBdmF0YXJTaGFwZSgpXG4gICAgYXZhdGFyU2hhcGUudXNlRHVtbXlNb2RlbCA9IHRydWVcbiAgICByZXR1cm4gYXZhdGFyU2hhcGVcbiAgfVxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/AvatarShape.ts?')},"./packages/decentraland-ecs/src/decentraland/Camera.ts":
/*!**************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Camera.ts ***!
  \**************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar math_1 = __webpack_require__(/*! ./math */ \"./packages/decentraland-ecs/src/decentraland/math/index.ts\");\n/**\n * @public\n */\nvar Camera = /** @class */ (function () {\n    function Camera() {\n        var _this = this;\n        /** Camera position, relative to the parcel. */\n        this.position = new math_1.Vector3();\n        /** Camera rotation */\n        this.rotation = new math_1.Quaternion();\n        /** Feet position, relative to the parcel.  */\n        this.feetPosition = new math_1.Vector3();\n        /** Camera position, absolute. */\n        this.worldPosition = new math_1.Vector3();\n        // @internal\n        this.lastEventPosition = { x: 0, y: 0, z: 0 };\n        // @internal\n        this.lastEventWorldPosition = { x: 0, y: 0, z: 0 };\n        // @internal\n        this.lastEventRotation = { x: 0, y: 0, z: 0, w: 1.0 };\n        // @internal\n        this._playerHeight = 1.6;\n        if (typeof dcl !== 'undefined') {\n            dcl.subscribe('positionChanged');\n            dcl.subscribe('rotationChanged');\n            dcl.onEvent(function (event) {\n                switch (event.type) {\n                    case 'positionChanged':\n                        _this.positionChanged(event.data);\n                        break;\n                    case 'rotationChanged':\n                        _this.rotationChanged(event.data);\n                        break;\n                }\n            });\n        }\n        Object.defineProperty(this.position, 'x', {\n            get: function () { return _this.lastEventPosition.x; }\n        });\n        Object.defineProperty(this.position, 'y', {\n            get: function () { return _this.lastEventPosition.y; }\n        });\n        Object.defineProperty(this.position, 'z', {\n            get: function () { return _this.lastEventPosition.z; }\n        });\n        Object.defineProperty(this.worldPosition, 'x', {\n            get: function () { return _this.lastEventWorldPosition.x; }\n        });\n        Object.defineProperty(this.worldPosition, 'y', {\n            get: function () { return _this.lastEventWorldPosition.y; }\n        });\n        Object.defineProperty(this.worldPosition, 'z', {\n            get: function () { return _this.lastEventWorldPosition.z; }\n        });\n        Object.defineProperty(this.feetPosition, 'x', {\n            get: function () { return _this.lastEventPosition.x; }\n        });\n        Object.defineProperty(this.feetPosition, 'y', {\n            get: function () { return _this.lastEventPosition.y - _this.playerHeight; }\n        });\n        Object.defineProperty(this.feetPosition, 'z', {\n            get: function () { return _this.lastEventPosition.z; }\n        });\n        Object.defineProperty(this.rotation, 'x', {\n            get: function () { return _this.lastEventRotation.x; }\n        });\n        Object.defineProperty(this.rotation, 'y', {\n            get: function () { return _this.lastEventRotation.y; }\n        });\n        Object.defineProperty(this.rotation, 'z', {\n            get: function () { return _this.lastEventRotation.z; }\n        });\n        Object.defineProperty(this.rotation, 'w', {\n            get: function () { return _this.lastEventRotation.w; }\n        });\n    }\n    Object.defineProperty(Camera, \"instance\", {\n        get: function () {\n            if (!Camera._instance) {\n                Camera._instance = new Camera();\n            }\n            return Camera._instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Camera.prototype, \"playerHeight\", {\n        /** Player height. */\n        get: function () {\n            return this._playerHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // @internal\n    Camera.prototype.positionChanged = function (e) {\n        this.lastEventPosition = e.position;\n        this.lastEventWorldPosition = e.cameraPosition;\n        this._playerHeight = e.playerHeight;\n    };\n    // @internal\n    Camera.prototype.rotationChanged = function (e) {\n        this.lastEventRotation = e.quaternion;\n    };\n    return Camera;\n}());\nexports.Camera = Camera;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Camera.ts?")},"./packages/decentraland-ecs/src/decentraland/Components.ts":
/*!******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Components.ts ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nvar math_1 = __webpack_require__(/*! ./math */ "./packages/decentraland-ecs/src/decentraland/math/index.ts");\nvar AnimationState_1 = __webpack_require__(/*! ./AnimationState */ "./packages/decentraland-ecs/src/decentraland/AnimationState.ts");\nvar helpers_1 = __webpack_require__(/*! ../ecs/helpers */ "./packages/decentraland-ecs/src/ecs/helpers.ts");\n/**\n * @internal\n */\nvar CLASS_ID;\n(function (CLASS_ID) {\n    CLASS_ID[CLASS_ID["TRANSFORM"] = 1] = "TRANSFORM";\n    CLASS_ID[CLASS_ID["UUID_CALLBACK"] = 8] = "UUID_CALLBACK";\n    CLASS_ID[CLASS_ID["BOX_SHAPE"] = 16] = "BOX_SHAPE";\n    CLASS_ID[CLASS_ID["SPHERE_SHAPE"] = 17] = "SPHERE_SHAPE";\n    CLASS_ID[CLASS_ID["PLANE_SHAPE"] = 18] = "PLANE_SHAPE";\n    CLASS_ID[CLASS_ID["CONE_SHAPE"] = 19] = "CONE_SHAPE";\n    CLASS_ID[CLASS_ID["CYLINDER_SHAPE"] = 20] = "CYLINDER_SHAPE";\n    CLASS_ID[CLASS_ID["TEXT_SHAPE"] = 21] = "TEXT_SHAPE";\n    CLASS_ID[CLASS_ID["NFT_SHAPE"] = 22] = "NFT_SHAPE";\n    CLASS_ID[CLASS_ID["UI_WORLD_SPACE_SHAPE"] = 23] = "UI_WORLD_SPACE_SHAPE";\n    CLASS_ID[CLASS_ID["UI_SCREEN_SPACE_SHAPE"] = 24] = "UI_SCREEN_SPACE_SHAPE";\n    CLASS_ID[CLASS_ID["UI_CONTAINER_RECT"] = 25] = "UI_CONTAINER_RECT";\n    CLASS_ID[CLASS_ID["UI_CONTAINER_STACK"] = 26] = "UI_CONTAINER_STACK";\n    CLASS_ID[CLASS_ID["UI_TEXT_SHAPE"] = 27] = "UI_TEXT_SHAPE";\n    CLASS_ID[CLASS_ID["UI_INPUT_TEXT_SHAPE"] = 28] = "UI_INPUT_TEXT_SHAPE";\n    CLASS_ID[CLASS_ID["UI_IMAGE_SHAPE"] = 29] = "UI_IMAGE_SHAPE";\n    CLASS_ID[CLASS_ID["UI_SLIDER_SHAPE"] = 30] = "UI_SLIDER_SHAPE";\n    CLASS_ID[CLASS_ID["CIRCLE_SHAPE"] = 31] = "CIRCLE_SHAPE";\n    CLASS_ID[CLASS_ID["BILLBOARD"] = 32] = "BILLBOARD";\n    CLASS_ID[CLASS_ID["ANIMATION"] = 33] = "ANIMATION";\n    CLASS_ID[CLASS_ID["UI_FULLSCREEN_SHAPE"] = 40] = "UI_FULLSCREEN_SHAPE";\n    CLASS_ID[CLASS_ID["UI_BUTTON_SHAPE"] = 41] = "UI_BUTTON_SHAPE";\n    CLASS_ID[CLASS_ID["GLTF_SHAPE"] = 54] = "GLTF_SHAPE";\n    CLASS_ID[CLASS_ID["OBJ_SHAPE"] = 55] = "OBJ_SHAPE";\n    CLASS_ID[CLASS_ID["AVATAR_SHAPE"] = 56] = "AVATAR_SHAPE";\n    CLASS_ID[CLASS_ID["BASIC_MATERIAL"] = 64] = "BASIC_MATERIAL";\n    CLASS_ID[CLASS_ID["PBR_MATERIAL"] = 65] = "PBR_MATERIAL";\n    CLASS_ID[CLASS_ID["HIGHLIGHT_ENTITY"] = 66] = "HIGHLIGHT_ENTITY";\n    /** @deprecated */\n    CLASS_ID[CLASS_ID["SOUND"] = 67] = "SOUND";\n    CLASS_ID[CLASS_ID["TEXTURE"] = 68] = "TEXTURE";\n    CLASS_ID[CLASS_ID["AUDIO_CLIP"] = 200] = "AUDIO_CLIP";\n    CLASS_ID[CLASS_ID["AUDIO_SOURCE"] = 201] = "AUDIO_SOURCE";\n    CLASS_ID[CLASS_ID["GIZMOS"] = 203] = "GIZMOS";\n})(CLASS_ID = exports.CLASS_ID || (exports.CLASS_ID = {}));\n/**\n * @public\n */\nvar Transform = /** @class */ (function (_super) {\n    __extends(Transform, _super);\n    function Transform(args) {\n        if (args === void 0) { args = {}; }\n        var _this = _super.call(this) || this;\n        _this.position = args.position || math_1.Vector3.Zero();\n        _this.rotation = args.rotation || math_1.Quaternion.Identity;\n        _this.scale = args.scale || new math_1.Vector3(1, 1, 1);\n        return _this;\n    }\n    Object.defineProperty(Transform.prototype, "eulerAngles", {\n        /**\n         * @public\n         * The rotation as Euler angles in degrees.\n         */\n        get: function () {\n            return this.rotation.eulerAngles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @public\n     * Rotates the transform so the forward vector points at target\'s current position.\n     */\n    Transform.prototype.lookAt = function (target, worldUp) {\n        if (worldUp === void 0) { worldUp = math_1.MathTmp.staticUp; }\n        var result = new math_1.Matrix();\n        math_1.Matrix.LookAtLHToRef(this.position, target, worldUp, result);\n        result.invert();\n        math_1.Quaternion.FromRotationMatrixToRef(result, this.rotation);\n        return this;\n    };\n    /**\n     * @public\n     * Applies a rotation of euler angles around the x, y and z axis.\n     */\n    Transform.prototype.rotate = function (axis, angle) {\n        this.rotation.multiplyInPlace(this.rotation.angleAxis(angle, axis));\n        return this;\n    };\n    /**\n     * @public\n     * Moves the transform in the direction and distance of translation.\n     */\n    Transform.prototype.translate = function (vec) {\n        this.position.addInPlace(vec);\n        return this;\n    };\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Transform.prototype, "position", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Transform.prototype, "rotation", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Transform.prototype, "scale", void 0);\n    Transform = __decorate([\n        Component_1.Component(\'engine.transform\', CLASS_ID.TRANSFORM)\n    ], Transform);\n    return Transform;\n}(Component_1.ObservableComponent));\nexports.Transform = Transform;\n/**\n * Billboard defines a behavior that makes the entity face the camera in any moment.\n * @public\n */\nvar Billboard = /** @class */ (function (_super) {\n    __extends(Billboard, _super);\n    function Billboard(x, y, z) {\n        if (x === void 0) { x = true; }\n        if (y === void 0) { y = true; }\n        if (z === void 0) { z = true; }\n        var _this = _super.call(this) || this;\n        _this.x = true;\n        _this.y = true;\n        _this.z = true;\n        _this.x = x;\n        _this.y = y;\n        _this.z = z;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Billboard.prototype, "x", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Billboard.prototype, "y", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Billboard.prototype, "z", void 0);\n    Billboard = __decorate([\n        Component_1.Component(\'engine.billboard\', CLASS_ID.BILLBOARD)\n    ], Billboard);\n    return Billboard;\n}(Component_1.ObservableComponent));\nexports.Billboard = Billboard;\n/**\n * @public\n */\nvar Shape = /** @class */ (function (_super) {\n    __extends(Shape, _super);\n    function Shape() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Set to true to turn on the collider for the entity.\n         */\n        _this.withCollisions = true;\n        /**\n         * Defines if the entity and its children should be rendered\n         */\n        _this.visible = true;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Shape.prototype, "withCollisions", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Shape.prototype, "visible", void 0);\n    return Shape;\n}(Component_1.ObservableComponent));\nexports.Shape = Shape;\n/**\n * @public\n */\nvar BoxShape = /** @class */ (function (_super) {\n    __extends(BoxShape, _super);\n    function BoxShape() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BoxShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.BOX_SHAPE)\n    ], BoxShape);\n    return BoxShape;\n}(Shape));\nexports.BoxShape = BoxShape;\n/**\n * @public\n */\nvar SphereShape = /** @class */ (function (_super) {\n    __extends(SphereShape, _super);\n    function SphereShape() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SphereShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.SPHERE_SHAPE)\n    ], SphereShape);\n    return SphereShape;\n}(Shape));\nexports.SphereShape = SphereShape;\n/**\n * @public\n */\nvar CircleShape = /** @class */ (function (_super) {\n    __extends(CircleShape, _super);\n    function CircleShape() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CircleShape.prototype, "segments", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CircleShape.prototype, "arc", void 0);\n    CircleShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.CIRCLE_SHAPE)\n    ], CircleShape);\n    return CircleShape;\n}(Shape));\nexports.CircleShape = CircleShape;\n/**\n * @public\n */\nvar PlaneShape = /** @class */ (function (_super) {\n    __extends(PlaneShape, _super);\n    function PlaneShape() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Sets the horizontal length of the plane. Defaults to 1.\n         */\n        _this.width = 1;\n        /**\n         * Sets the vertical length of the plane. Defaults to 1.\n         */\n        _this.height = 1;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], PlaneShape.prototype, "width", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], PlaneShape.prototype, "height", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], PlaneShape.prototype, "uvs", void 0);\n    PlaneShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.PLANE_SHAPE)\n    ], PlaneShape);\n    return PlaneShape;\n}(Shape));\nexports.PlaneShape = PlaneShape;\n/**\n * @public\n */\nvar ConeShape = /** @class */ (function (_super) {\n    __extends(ConeShape, _super);\n    function ConeShape() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * The radius of the top of a truncated cone. Defaults to 0.\n         */\n        _this.radiusTop = 0;\n        /**\n         * The radius of the base of the cone. Defaults to 1.\n         */\n        _this.radiusBottom = 1;\n        /**\n         * Sets the number of rings along the cone height (positive integer). Defaults to 1.\n         */\n        _this.segmentsHeight = 1;\n        /**\n         * Sets the number of cone sides (positive integer). Defaults to 36.\n         */\n        _this.segmentsRadial = 36;\n        /**\n         * Adds two extra faces per subdivision to enclose the cone around its height axis.\n         * Defaults to false.\n         */\n        _this.openEnded = false;\n        /**\n         * Sets the radius of the top and bottom caps at once.\n         *\n         * Properties `radiusTop` and `radiusBottom` are prioritized over this one.\n         */\n        _this.radius = null;\n        /**\n         * Sets the ratio (max 1) to apply to the circumference to slice the cone. Defaults to 360.\n         */\n        _this.arc = 360;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], ConeShape.prototype, "radiusTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], ConeShape.prototype, "radiusBottom", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], ConeShape.prototype, "segmentsHeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], ConeShape.prototype, "segmentsRadial", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], ConeShape.prototype, "openEnded", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], ConeShape.prototype, "radius", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], ConeShape.prototype, "arc", void 0);\n    ConeShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.CONE_SHAPE)\n    ], ConeShape);\n    return ConeShape;\n}(Shape));\nexports.ConeShape = ConeShape;\n/**\n * @public\n */\nvar CylinderShape = /** @class */ (function (_super) {\n    __extends(CylinderShape, _super);\n    function CylinderShape() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * The radius of the top of the cylinder. Defaults to 0.\n         */\n        _this.radiusTop = 0;\n        /**\n         * The radius of the base of the cylinder. Defaults to 1.\n         */\n        _this.radiusBottom = 1;\n        /**\n         * Sets the number of rings along the cylinder height (positive integer). Defaults to 1.\n         */\n        _this.segmentsHeight = 1;\n        /**\n         * Sets the number of cylinder sides (positive integer). Defaults to 36.\n         */\n        _this.segmentsRadial = 36;\n        /**\n         * Adds two extra faces per subdivision to enclose the cylinder around its height axis.\n         * Defaults to false.\n         */\n        _this.openEnded = false;\n        /**\n         * Sets the radius of the top and bottom caps at once.\n         *\n         * Properties `radiusTop` and `radiusBottom` are prioritized over this one.\n         */\n        _this.radius = null;\n        /**\n         * Sets the ratio (max 1) to apply to the circumference to slice the cylinder. Defaults to 360.\n         */\n        _this.arc = 360;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CylinderShape.prototype, "radiusTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CylinderShape.prototype, "radiusBottom", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CylinderShape.prototype, "segmentsHeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CylinderShape.prototype, "segmentsRadial", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CylinderShape.prototype, "openEnded", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CylinderShape.prototype, "radius", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CylinderShape.prototype, "arc", void 0);\n    CylinderShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.CYLINDER_SHAPE)\n    ], CylinderShape);\n    return CylinderShape;\n}(Shape));\nexports.CylinderShape = CylinderShape;\n/**\n * @public\n */\nvar GLTFShape = /** @class */ (function (_super) {\n    __extends(GLTFShape, _super);\n    function GLTFShape(src) {\n        var _this = _super.call(this) || this;\n        _this.src = src;\n        return _this;\n    }\n    __decorate([\n        Shape.readonly\n    ], GLTFShape.prototype, "src", void 0);\n    GLTFShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.GLTF_SHAPE)\n    ], GLTFShape);\n    return GLTFShape;\n}(Shape));\nexports.GLTFShape = GLTFShape;\n/**\n * @public\n */\nvar NFTShape = /** @class */ (function (_super) {\n    __extends(NFTShape, _super);\n    // Light purple as the default background color\n    function NFTShape(src, color) {\n        if (color === void 0) { color = new math_1.Color3(0.6404918, 0.611472, 0.8584906); }\n        var _this = _super.call(this) || this;\n        _this.src = src;\n        _this.color = color;\n        return _this;\n    }\n    __decorate([\n        Shape.readonly\n    ], NFTShape.prototype, "src", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], NFTShape.prototype, "color", void 0);\n    NFTShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.NFT_SHAPE)\n    ], NFTShape);\n    return NFTShape;\n}(Shape));\nexports.NFTShape = NFTShape;\n/**\n * @public\n */\nvar Texture = /** @class */ (function (_super) {\n    __extends(Texture, _super);\n    function Texture(src, opts) {\n        var _this = _super.call(this) || this;\n        _this.src = src;\n        if (opts) {\n            for (var i in opts) {\n                var that = _this;\n                that[i] = opts[i];\n            }\n        }\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], Texture.prototype, "src", void 0);\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], Texture.prototype, "samplingMode", void 0);\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], Texture.prototype, "wrap", void 0);\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], Texture.prototype, "hasAlpha", void 0);\n    Texture = __decorate([\n        Component_1.DisposableComponent(\'engine.texture\', CLASS_ID.TEXTURE)\n    ], Texture);\n    return Texture;\n}(Component_1.ObservableComponent));\nexports.Texture = Texture;\n/**\n * @public\n */\nvar Animator = /** @class */ (function (_super) {\n    __extends(Animator, _super);\n    function Animator() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.states = [];\n        return _this;\n    }\n    /**\n     * Adds an AnimationState to the animation lists.\n     */\n    Animator.prototype.addClip = function (clip) {\n        var _this = this;\n        this.states.push(clip);\n        clip.onChange(function () {\n            _this.dirty = true;\n        });\n        return this;\n    };\n    /**\n     * Gets the animation clip instance for the specified clip name.\n     * If the clip doesn\'t exist a new one will be created.\n     */\n    Animator.prototype.getClip = function (clipName) {\n        for (var i = 0; i < this.states.length; i++) {\n            var clip = this.states[i];\n            if (clip.clip === clipName) {\n                return clip;\n            }\n        }\n        var newClip = new AnimationState_1.AnimationState(clipName);\n        this.addClip(newClip);\n        return newClip;\n    };\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], Animator.prototype, "states", void 0);\n    Animator = __decorate([\n        Component_1.Component(\'engine.animator\', CLASS_ID.ANIMATION)\n    ], Animator);\n    return Animator;\n}(Shape));\nexports.Animator = Animator;\n/**\n * @public\n */\nvar OBJShape = /** @class */ (function (_super) {\n    __extends(OBJShape, _super);\n    function OBJShape(src) {\n        var _this = _super.call(this) || this;\n        _this.src = src;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OBJShape.prototype, "src", void 0);\n    OBJShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.OBJ_SHAPE)\n    ], OBJShape);\n    return OBJShape;\n}(Shape));\nexports.OBJShape = OBJShape;\n/**\n * @public\n */\nvar TextShape = /** @class */ (function (_super) {\n    __extends(TextShape, _super);\n    function TextShape(value) {\n        var _this = _super.call(this) || this;\n        _this.outlineWidth = 0;\n        _this.outlineColor = new math_1.Color3(1, 1, 1);\n        _this.color = new math_1.Color3(1, 1, 1);\n        _this.fontSize = 10;\n        _this.fontWeight = \'normal\';\n        _this.opacity = 1.0;\n        _this.value = \'\';\n        _this.lineSpacing = \'0px\';\n        _this.lineCount = 0;\n        _this.resizeToFit = false;\n        _this.textWrapping = false;\n        _this.shadowBlur = 0;\n        _this.shadowOffsetX = 0;\n        _this.shadowOffsetY = 0;\n        _this.shadowColor = new math_1.Color3(1, 1, 1);\n        _this.zIndex = 0;\n        _this.hTextAlign = \'center\';\n        _this.vTextAlign = \'center\';\n        _this.width = 1;\n        _this.height = 1;\n        _this.paddingTop = 0;\n        _this.paddingRight = 0;\n        _this.paddingBottom = 0;\n        _this.paddingLeft = 0;\n        _this.isPickable = false;\n        _this.billboard = false;\n        if (value) {\n            _this.value = value;\n        }\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "outlineWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "outlineColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "color", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "fontSize", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "fontWeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "opacity", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "value", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "lineSpacing", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "lineCount", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "resizeToFit", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "textWrapping", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "shadowBlur", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "shadowOffsetX", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "shadowOffsetY", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "shadowColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "zIndex", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "hTextAlign", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "vTextAlign", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "width", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "height", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "paddingTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "paddingRight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "paddingBottom", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "paddingLeft", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "isPickable", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "billboard", void 0);\n    TextShape = __decorate([\n        Component_1.Component(\'engine.text\', CLASS_ID.TEXT_SHAPE)\n    ], TextShape);\n    return TextShape;\n}(Shape));\nexports.TextShape = TextShape;\n/**\n * @public\n */\nvar TransparencyMode;\n(function (TransparencyMode) {\n    TransparencyMode[TransparencyMode["OPAQUE"] = 0] = "OPAQUE";\n    TransparencyMode[TransparencyMode["ALPHA_TEST"] = 1] = "ALPHA_TEST";\n    TransparencyMode[TransparencyMode["ALPHA_BLEND"] = 2] = "ALPHA_BLEND";\n    TransparencyMode[TransparencyMode["ALPHA_TEST_AND_BLEND"] = 3] = "ALPHA_TEST_AND_BLEND";\n    TransparencyMode[TransparencyMode["AUTO"] = 4] = "AUTO";\n})(TransparencyMode = exports.TransparencyMode || (exports.TransparencyMode = {}));\n/**\n * @public\n */\nvar Material = /** @class */ (function (_super) {\n    __extends(Material, _super);\n    function Material() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Cutoff level for ALPHATEST mode. Range is between 0 and 1.\n         * Defaults to 0.5\n         */\n        _this.alphaTest = 0.5;\n        /**\n         * Sets the transparency mode of the material.\n         * Defaults to -1.\n         *\n         * | Value | Type                                           |\n         * | ----- | ---------------------------------------------- |\n         * | 0     | OPAQUE  (default)                              |\n         * | 1     | ALPHATEST                                      |\n         * | 2     | ALPHABLEND                                     |\n         * | 3     | ALPHATESTANDBLEND                              |\n         * | 4     | AUTO (ALPHABLEND if alpha OPAQUE otherwise     |\n         */\n        _this.transparencyMode = TransparencyMode.AUTO;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "alphaTest", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "albedoColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "emissiveColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "metallic", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "roughness", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "ambientColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "reflectionColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "reflectivityColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "directIntensity", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "microSurface", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "emissiveIntensity", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "environmentIntensity", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "specularIntensity", void 0);\n    __decorate([\n        Component_1.ObservableComponent.component\n    ], Material.prototype, "albedoTexture", void 0);\n    __decorate([\n        Component_1.ObservableComponent.component\n    ], Material.prototype, "alphaTexture", void 0);\n    __decorate([\n        Component_1.ObservableComponent.component\n    ], Material.prototype, "emissiveTexture", void 0);\n    __decorate([\n        Component_1.ObservableComponent.component\n    ], Material.prototype, "bumpTexture", void 0);\n    __decorate([\n        Component_1.ObservableComponent.component\n    ], Material.prototype, "refractionTexture", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "disableLighting", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "transparencyMode", void 0);\n    Material = __decorate([\n        Component_1.DisposableComponent(\'engine.material\', CLASS_ID.PBR_MATERIAL)\n    ], Material);\n    return Material;\n}(Component_1.ObservableComponent));\nexports.Material = Material;\n/**\n * @public\n */\nvar BasicMaterial = /** @class */ (function (_super) {\n    __extends(BasicMaterial, _super);\n    function BasicMaterial() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * A number between 0 and 1.\n         * Any pixel with an alpha lower than this value will be shown as transparent.\n         */\n        _this.alphaTest = 0.5;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.component\n    ], BasicMaterial.prototype, "texture", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], BasicMaterial.prototype, "alphaTest", void 0);\n    BasicMaterial = __decorate([\n        Component_1.DisposableComponent(\'engine.material\', CLASS_ID.BASIC_MATERIAL)\n    ], BasicMaterial);\n    return BasicMaterial;\n}(Component_1.ObservableComponent));\nexports.BasicMaterial = BasicMaterial;\n/**\n * @public\n */\nvar OnUUIDEvent = /** @class */ (function (_super) {\n    __extends(OnUUIDEvent, _super);\n    function OnUUIDEvent(callback) {\n        var _this = _super.call(this) || this;\n        _this.uuid = helpers_1.newId(\'UUID\');\n        if (!callback || !(\'apply\' in callback) || !(\'call\' in callback)) {\n            throw new Error(\'Callback is not a function\');\n        }\n        _this.callback = callback;\n        return _this;\n    }\n    OnUUIDEvent.uuidEvent = function (target, propertyKey) {\n        if (delete target[propertyKey]) {\n            var componentSymbol_1 = propertyKey + \'_\' + Math.random();\n            target[componentSymbol_1] = undefined;\n            Object.defineProperty(target, componentSymbol_1, __assign(__assign({}, Object.getOwnPropertyDescriptor(target, componentSymbol_1)), { enumerable: false }));\n            Object.defineProperty(target, propertyKey.toString(), {\n                get: function () {\n                    return this[componentSymbol_1];\n                },\n                set: function (value) {\n                    var oldValue = this[componentSymbol_1];\n                    if (value) {\n                        if (value instanceof OnUUIDEvent) {\n                            this.data[propertyKey] = value.uuid;\n                        }\n                        else {\n                            throw new Error(\'value is not an OnUUIDEvent\');\n                        }\n                    }\n                    else {\n                        this.data[propertyKey] = null;\n                    }\n                    this[componentSymbol_1] = value;\n                    if (value !== oldValue) {\n                        this.dirty = true;\n                        for (var i = 0; i < this.subscriptions.length; i++) {\n                            this.subscriptions[i](propertyKey, value, oldValue);\n                        }\n                    }\n                },\n                enumerable: true\n            });\n        }\n    };\n    OnUUIDEvent.prototype.toJSON = function () {\n        return { uuid: this.uuid, type: this.type };\n    };\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], OnUUIDEvent.prototype, "callback", void 0);\n    return OnUUIDEvent;\n}(Component_1.ObservableComponent));\nexports.OnUUIDEvent = OnUUIDEvent;\n/**\n * @internal\n */\nvar OnPointerLock = /** @class */ (function (_super) {\n    __extends(OnPointerLock, _super);\n    function OnPointerLock() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = \'onPointerLock\';\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnPointerLock.prototype, "type", void 0);\n    OnPointerLock = __decorate([\n        Component_1.Component(\'engine.onPointerLock\', CLASS_ID.UUID_CALLBACK)\n    ], OnPointerLock);\n    return OnPointerLock;\n}(OnUUIDEvent));\nexports.OnPointerLock = OnPointerLock;\n/**\n * @public\n */\nvar OnAnimationEnd = /** @class */ (function (_super) {\n    __extends(OnAnimationEnd, _super);\n    function OnAnimationEnd() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = \'onAnimationEnd\';\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnAnimationEnd.prototype, "type", void 0);\n    OnAnimationEnd = __decorate([\n        Component_1.Component(\'engine.onAnimationEnd\', CLASS_ID.UUID_CALLBACK)\n    ], OnAnimationEnd);\n    return OnAnimationEnd;\n}(OnUUIDEvent));\nexports.OnAnimationEnd = OnAnimationEnd;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Components.ts?')},"./packages/decentraland-ecs/src/decentraland/Events.ts":
/*!**************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Events.ts ***!
  \**************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar EventManager_1 = __webpack_require__(/*! ../ecs/EventManager */ "./packages/decentraland-ecs/src/ecs/EventManager.ts");\n/**\n * @public\n */\nvar UUIDEvent = /** @class */ (function () {\n    function UUIDEvent(uuid, payload) {\n        this.uuid = uuid;\n        this.payload = payload;\n    }\n    UUIDEvent = __decorate([\n        EventManager_1.EventConstructor()\n    ], UUIDEvent);\n    return UUIDEvent;\n}());\nexports.UUIDEvent = UUIDEvent;\n/**\n * @public\n */\nvar RaycastResponse = /** @class */ (function () {\n    function RaycastResponse(payload) {\n        this.payload = payload;\n    }\n    RaycastResponse = __decorate([\n        EventManager_1.EventConstructor()\n    ], RaycastResponse);\n    return RaycastResponse;\n}());\nexports.RaycastResponse = RaycastResponse;\n/**\n * @public\n */\nvar PointerEvent = /** @class */ (function () {\n    function PointerEvent(payload) {\n        this.payload = payload;\n    }\n    PointerEvent = __decorate([\n        EventManager_1.EventConstructor()\n    ], PointerEvent);\n    return PointerEvent;\n}());\nexports.PointerEvent = PointerEvent;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RlY2VudHJhbGFuZC9FdmVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxvREFBc0Q7QUFFdEQ7O0dBRUc7QUFFSDtJQUNFLG1CQUE0QixJQUFZLEVBQWtCLE9BQVU7UUFBeEMsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUFrQixZQUFPLEdBQVAsT0FBTyxDQUFHO0lBQUcsQ0FBQztJQUQ3RCxTQUFTO1FBRHJCLCtCQUFnQixFQUFFO09BQ04sU0FBUyxDQUVyQjtJQUFELGdCQUFDO0NBQUEsQUFGRCxJQUVDO0FBRlksOEJBQVM7QUFJdEI7O0dBRUc7QUFFSDtJQUNFLHlCQUNrQixPQUlmO1FBSmUsWUFBTyxHQUFQLE9BQU8sQ0FJdEI7SUFDQSxDQUFDO0lBUE8sZUFBZTtRQUQzQiwrQkFBZ0IsRUFBRTtPQUNOLGVBQWUsQ0FRM0I7SUFBRCxzQkFBQztDQUFBLEFBUkQsSUFRQztBQVJZLDBDQUFlO0FBVTVCOztHQUVHO0FBRUg7SUFDRSxzQkFBNEIsT0FBK0I7UUFBL0IsWUFBTyxHQUFQLE9BQU8sQ0FBd0I7SUFBRyxDQUFDO0lBRHBELFlBQVk7UUFEeEIsK0JBQWdCLEVBQUU7T0FDTixZQUFZLENBRXhCO0lBQUQsbUJBQUM7Q0FBQSxBQUZELElBRUM7QUFGWSxvQ0FBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50Q29uc3RydWN0b3IgfSBmcm9tICcuLi9lY3MvRXZlbnRNYW5hZ2VyJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQEV2ZW50Q29uc3RydWN0b3IoKVxuZXhwb3J0IGNsYXNzIFVVSURFdmVudDxUID0gYW55PiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSB1dWlkOiBzdHJpbmcsIHB1YmxpYyByZWFkb25seSBwYXlsb2FkOiBUKSB7fVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQEV2ZW50Q29uc3RydWN0b3IoKVxuZXhwb3J0IGNsYXNzIFJheWNhc3RSZXNwb25zZTxUPiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBwYXlsb2FkOiB7XG4gICAgICBxdWVyeUlkOiBzdHJpbmdcbiAgICAgIHF1ZXJ5VHlwZTogc3RyaW5nXG4gICAgICBwYXlsb2FkOiBUXG4gICAgfVxuICApIHt9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARXZlbnRDb25zdHJ1Y3RvcigpXG5leHBvcnQgY2xhc3MgUG9pbnRlckV2ZW50PEdsb2JhbElucHV0RXZlbnRSZXN1bHQ+IHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHBheWxvYWQ6IEdsb2JhbElucHV0RXZlbnRSZXN1bHQpIHt9XG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Events.ts?')},"./packages/decentraland-ecs/src/decentraland/Gizmos.ts":
/*!**************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Gizmos.ts ***!
  \**************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nvar Components_1 = __webpack_require__(/*! ./Components */ "./packages/decentraland-ecs/src/decentraland/Components.ts");\n/**\n * Gizmo identifiers\n * @beta\n */\nvar Gizmo;\n(function (Gizmo) {\n    Gizmo["MOVE"] = "MOVE";\n    Gizmo["ROTATE"] = "ROTATE";\n    Gizmo["SCALE"] = "SCALE";\n    Gizmo["NONE"] = "NONE";\n})(Gizmo = exports.Gizmo || (exports.Gizmo = {}));\n/**\n * This event is triggered after the user finalizes dragging a gizmo.\n * @beta\n */\nvar OnGizmoEvent = /** @class */ (function (_super) {\n    __extends(OnGizmoEvent, _super);\n    function OnGizmoEvent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = \'gizmoEvent\';\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnGizmoEvent.prototype, "type", void 0);\n    OnGizmoEvent = __decorate([\n        Component_1.Component(\'engine.gizmoEvent\', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnGizmoEvent);\n    return OnGizmoEvent;\n}(Components_1.OnUUIDEvent));\nexports.OnGizmoEvent = OnGizmoEvent;\n/**\n * Enables gizmos in the entity. Gizmos only work in EDITOR, PREVIEW or DEBUG modes.\n * @beta\n */\nvar Gizmos = /** @class */ (function (_super) {\n    __extends(Gizmos, _super);\n    function Gizmos() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Enable position gizmo\n         */\n        _this.position = true;\n        /**\n         * Enable rotation gizmo\n         */\n        _this.rotation = true;\n        /**\n         * Enable scale gizmo\n         */\n        _this.scale = true;\n        /**\n         * Cycle through gizmos using click.\n         */\n        _this.cycle = true;\n        /**\n         * Align the gizmos to match the local reference system\n         */\n        _this.localReference = false;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Gizmos.prototype, "position", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Gizmos.prototype, "rotation", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Gizmos.prototype, "scale", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Gizmos.prototype, "cycle", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Gizmos.prototype, "selectedGizmo", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Gizmos.prototype, "localReference", void 0);\n    Gizmos = __decorate([\n        Component_1.Component(\'engine.gizmos\', Components_1.CLASS_ID.GIZMOS)\n    ], Gizmos);\n    return Gizmos;\n}(Component_1.ObservableComponent));\nexports.Gizmos = Gizmos;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2l6bW9zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RlY2VudHJhbGFuZC9HaXptb3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOENBQWlFO0FBQ2pFLDJDQUFvRDtBQUVwRDs7O0dBR0c7QUFDSCxJQUFZLEtBS1g7QUFMRCxXQUFZLEtBQUs7SUFDZixzQkFBYSxDQUFBO0lBQ2IsMEJBQWlCLENBQUE7SUFDakIsd0JBQWUsQ0FBQTtJQUNmLHNCQUFhLENBQUE7QUFDZixDQUFDLEVBTFcsS0FBSyxHQUFMLGFBQUssS0FBTCxhQUFLLFFBS2hCO0FBRUQ7OztHQUdHO0FBRUg7SUFBa0MsZ0NBQXlCO0lBQTNEO1FBQUEscUVBR0M7UUFEVSxVQUFJLEdBQVcsWUFBWSxDQUFBOztJQUN0QyxDQUFDO0lBREM7UUFEQywrQkFBbUIsQ0FBQyxRQUFROzhDQUNPO0lBRnpCLFlBQVk7UUFEeEIscUJBQVMsQ0FBQyxtQkFBbUIsRUFBRSxxQkFBUSxDQUFDLGFBQWEsQ0FBQztPQUMxQyxZQUFZLENBR3hCO0lBQUQsbUJBQUM7Q0FBQSxBQUhELENBQWtDLHdCQUFXLEdBRzVDO0FBSFksb0NBQVk7QUFLekI7OztHQUdHO0FBRUg7SUFBNEIsMEJBQW1CO0lBQS9DO1FBQUEscUVBb0NDO1FBbkNDOztXQUVHO1FBRUgsY0FBUSxHQUFZLElBQUksQ0FBQTtRQUV4Qjs7V0FFRztRQUVILGNBQVEsR0FBWSxJQUFJLENBQUE7UUFFeEI7O1dBRUc7UUFFSCxXQUFLLEdBQVksSUFBSSxDQUFBO1FBRXJCOztXQUVHO1FBRUgsV0FBSyxHQUFZLElBQUksQ0FBQTtRQVFyQjs7V0FFRztRQUVILG9CQUFjLEdBQVksS0FBSyxDQUFBOztJQUNqQyxDQUFDO0lBL0JDO1FBREMsK0JBQW1CLENBQUMsS0FBSzs0Q0FDRjtJQU14QjtRQURDLCtCQUFtQixDQUFDLEtBQUs7NENBQ0Y7SUFNeEI7UUFEQywrQkFBbUIsQ0FBQyxLQUFLO3lDQUNMO0lBTXJCO1FBREMsK0JBQW1CLENBQUMsS0FBSzt5Q0FDTDtJQU1yQjtRQURDLCtCQUFtQixDQUFDLEtBQUs7aURBQ0w7SUFNckI7UUFEQywrQkFBbUIsQ0FBQyxLQUFLO2tEQUNLO0lBbkNwQixNQUFNO1FBRGxCLHFCQUFTLENBQUMsZUFBZSxFQUFFLHFCQUFRLENBQUMsTUFBTSxDQUFDO09BQy9CLE1BQU0sQ0FvQ2xCO0lBQUQsYUFBQztDQUFBLEFBcENELENBQTRCLCtCQUFtQixHQW9DOUM7QUFwQ1ksd0JBQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9ic2VydmFibGVDb21wb25lbnQgfSBmcm9tICcuLi9lY3MvQ29tcG9uZW50J1xuaW1wb3J0IHsgQ0xBU1NfSUQsIE9uVVVJREV2ZW50IH0gZnJvbSAnLi9Db21wb25lbnRzJ1xuXG4vKipcbiAqIEdpem1vIGlkZW50aWZpZXJzXG4gKiBAYmV0YVxuICovXG5leHBvcnQgZW51bSBHaXptbyB7XG4gIE1PVkUgPSAnTU9WRScsXG4gIFJPVEFURSA9ICdST1RBVEUnLFxuICBTQ0FMRSA9ICdTQ0FMRScsXG4gIE5PTkUgPSAnTk9ORSdcbn1cblxuLyoqXG4gKiBUaGlzIGV2ZW50IGlzIHRyaWdnZXJlZCBhZnRlciB0aGUgdXNlciBmaW5hbGl6ZXMgZHJhZ2dpbmcgYSBnaXptby5cbiAqIEBiZXRhXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5naXptb0V2ZW50JywgQ0xBU1NfSUQuVVVJRF9DQUxMQkFDSylcbmV4cG9ydCBjbGFzcyBPbkdpem1vRXZlbnQgZXh0ZW5kcyBPblVVSURFdmVudDwnZ2l6bW9FdmVudCc+IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nID0gJ2dpem1vRXZlbnQnXG59XG5cbi8qKlxuICogRW5hYmxlcyBnaXptb3MgaW4gdGhlIGVudGl0eS4gR2l6bW9zIG9ubHkgd29yayBpbiBFRElUT1IsIFBSRVZJRVcgb3IgREVCVUcgbW9kZXMuXG4gKiBAYmV0YVxuICovXG5AQ29tcG9uZW50KCdlbmdpbmUuZ2l6bW9zJywgQ0xBU1NfSUQuR0laTU9TKVxuZXhwb3J0IGNsYXNzIEdpem1vcyBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICAvKipcbiAgICogRW5hYmxlIHBvc2l0aW9uIGdpem1vXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwb3NpdGlvbjogYm9vbGVhbiA9IHRydWVcblxuICAvKipcbiAgICogRW5hYmxlIHJvdGF0aW9uIGdpem1vXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICByb3RhdGlvbjogYm9vbGVhbiA9IHRydWVcblxuICAvKipcbiAgICogRW5hYmxlIHNjYWxlIGdpem1vXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzY2FsZTogYm9vbGVhbiA9IHRydWVcblxuICAvKipcbiAgICogQ3ljbGUgdGhyb3VnaCBnaXptb3MgdXNpbmcgY2xpY2suXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBjeWNsZTogYm9vbGVhbiA9IHRydWVcblxuICAvKipcbiAgICogSWYgY3ljbGUgaXMgZmFsc2UsIHRoaXMgd2lsbCBiZSB0aGUgc2VsZWN0ZWQgZ2l6bW9cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNlbGVjdGVkR2l6bW8/OiBHaXptb1xuXG4gIC8qKlxuICAgKiBBbGlnbiB0aGUgZ2l6bW9zIHRvIG1hdGNoIHRoZSBsb2NhbCByZWZlcmVuY2Ugc3lzdGVtXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBsb2NhbFJlZmVyZW5jZTogYm9vbGVhbiA9IGZhbHNlXG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Gizmos.ts?')},"./packages/decentraland-ecs/src/decentraland/Implementation.ts":
/*!**********************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Implementation.ts ***!
  \**********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IEntity_1 = __webpack_require__(/*! ../ecs/IEntity */ \"./packages/decentraland-ecs/src/ecs/IEntity.ts\");\nvar Events_1 = __webpack_require__(/*! ./Events */ \"./packages/decentraland-ecs/src/decentraland/Events.ts\");\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ \"./packages/decentraland-ecs/src/ecs/Component.ts\");\n// This number is defined in the protocol ECS.SetEntityParent.3\nvar ROOT_ENTITY_ID = '0';\nvar DecentralandSynchronizationSystem = /** @class */ (function () {\n    function DecentralandSynchronizationSystem(dcl) {\n        this.dcl = dcl;\n        this.cachedComponents = {};\n    }\n    DecentralandSynchronizationSystem.prototype.activate = function (engine) {\n        var _this = this;\n        this.engine = engine;\n        engine.eventManager.addListener(IEntity_1.ComponentAdded, this, this.componentAdded);\n        engine.eventManager.addListener(IEntity_1.ComponentRemoved, this, this.componentRemoved);\n        engine.eventManager.addListener(Component_1.DisposableComponentCreated, this, this.disposableComponentCreated);\n        engine.eventManager.addListener(Component_1.DisposableComponentRemoved, this, this.disposableComponentRemoved);\n        engine.eventManager.addListener(Component_1.DisposableComponentUpdated, this, this.disposableComponentUpdated);\n        engine.eventManager.addListener(IEntity_1.ParentChanged, this, this.parentChanged);\n        var rootId = engine.rootEntity.uuid;\n        this.dcl.addEntity(rootId);\n        // TODO(agus): send disposableComponents if exist\n        this.dcl.onUpdate(function (dt) {\n            engine.update(dt);\n            _this.presentEntities();\n        });\n        this.dcl.onEvent(function (event) {\n            var data = event.data;\n            switch (event.type) {\n                case 'uuidEvent':\n                    engine.eventManager.fireEvent(new Events_1.UUIDEvent(data.uuid, data.payload));\n                    break;\n                case 'raycastResponse':\n                    if (data.queryType === 'HitFirst') {\n                        engine.eventManager.fireEvent(new Events_1.RaycastResponse(data));\n                    }\n                    else if (data.queryType === 'HitAll') {\n                        engine.eventManager.fireEvent(new Events_1.RaycastResponse(data));\n                    }\n                    break;\n                case 'pointerEvent':\n                    engine.eventManager.fireEvent(new Events_1.PointerEvent(data.payload));\n                    break;\n            }\n        });\n    };\n    /**\n     * system.onAddEntity is called by the engine when a entity is added to the\n     * engine.\n     */\n    DecentralandSynchronizationSystem.prototype.onAddEntity = function (entity) {\n        if (entity && entity.isAddedToEngine()) {\n            var entityId = entity.uuid;\n            var parent_1 = entity.getParent();\n            this.dcl.addEntity(entityId);\n            if (parent_1) {\n                // If the entity has a parent, we send the the enparenting signal\n                // otherwise the engine will know the entity is set as a child of\n                // engine.rootEntity by default\n                this.dcl.setParent(entityId, parent_1.uuid);\n            }\n            // This creates a cache dictionary to avoid send redundant information to\n            // the engine in order to avoid unnecessary work in the main thread.\n            this.cachedComponents[entityId] = {};\n            // this iterator sends the current components of te engine at the moment\n            // of addition\n            for (var componentName in entity.components) {\n                var component = entity.components[componentName];\n                var classId = Component_1.getComponentClassId(component);\n                if (classId !== null) {\n                    if (Component_1.isDisposableComponent(component)) {\n                        // Send the attach component signal\n                        this.dcl.attachEntityComponent(entity.uuid, componentName, Component_1.getComponentId(component));\n                    }\n                    else {\n                        var componentJson = JSON.stringify(component);\n                        // Send the updated component\n                        this.dcl.updateEntityComponent(entityId, componentName, classId, componentJson);\n                        // Update the cached copy of the sent component\n                        this.cachedComponents[entityId][componentName] = componentJson;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * system.onRemoveEntity is called by the engine when a entity gets removed\n     * from the engine.\n     */\n    DecentralandSynchronizationSystem.prototype.onRemoveEntity = function (entity) {\n        if (entity.isAddedToEngine()) {\n            var entityId = entity.uuid;\n            // Send the removeEntity signal\n            this.dcl.removeEntity(entityId);\n            // Remove the caches from local memory\n            delete this.cachedComponents[entityId];\n        }\n    };\n    /**\n     * This method is called at the end of every update cycle.\n     * It finds and sends updates in components of the engine entities.\n     */\n    DecentralandSynchronizationSystem.prototype.presentEntities = function () {\n        for (var i in this.engine.entities) {\n            var entity = this.engine.entities[i];\n            var entityId = entity.uuid;\n            for (var componentName in entity.components) {\n                var component = entity.components[componentName];\n                var classId = Component_1.getComponentClassId(component);\n                if (classId !== null && !Component_1.isDisposableComponent(component)) {\n                    var componentJson = JSON.stringify(component);\n                    if (this.cachedComponents[entityId][componentName] !== componentJson) {\n                        // Send the updated component\n                        this.dcl.updateEntityComponent(entity.uuid, componentName, classId, componentJson);\n                        // Update the cached copy of the sent component\n                        this.cachedComponents[entityId][componentName] = componentJson;\n                    }\n                }\n            }\n        }\n        for (var id in this.engine.disposableComponents) {\n            var component = this.engine.disposableComponents[id];\n            if (component instanceof Component_1.ObservableComponent && component.dirty) {\n                this.dcl.componentUpdated(id, JSON.stringify(component));\n                component.dirty = false;\n            }\n        }\n    };\n    /**\n     * This method is called after a component is added to an entity. The event\n     * (param 1) contains the necessary information to notify the engine about the\n     * component that was added and the entity.\n     */\n    DecentralandSynchronizationSystem.prototype.componentAdded = function (event) {\n        if (event.entity.isAddedToEngine()) {\n            var component = event.entity.components[event.componentName];\n            if (Component_1.isDisposableComponent(component)) {\n                this.dcl.attachEntityComponent(event.entity.uuid, event.componentName, Component_1.getComponentId(component));\n            }\n            else if (event.classId !== null) {\n                var componentJson = JSON.stringify(component);\n                // Send the updated component\n                this.dcl.updateEntityComponent(event.entity.uuid, event.componentName, event.classId, componentJson);\n                // Update the cached copy of the sent component\n                this.cachedComponents[event.entity.uuid][event.componentName] = componentJson;\n            }\n        }\n    };\n    /**\n     * This method is called when a component is removed from an entity.\n     */\n    DecentralandSynchronizationSystem.prototype.componentRemoved = function (event) {\n        if (event.entity.isAddedToEngine()) {\n            this.dcl.removeEntityComponent(event.entity.uuid, event.componentName);\n            // Remove the cached component so we can send it again when re-adding\n            delete this.cachedComponents[event.entity.uuid][event.componentName];\n        }\n    };\n    /**\n     * This method is called after a disposableComponent is created.\n     * It instantiates the component in the engine, the event that updates the\n     * created component is fired immediatly after.\n     */\n    DecentralandSynchronizationSystem.prototype.disposableComponentCreated = function (event) {\n        this.dcl.componentCreated(event.componentId, event.componentName, event.classId);\n    };\n    /**\n     * This method is called after a disposableComponent is updated, once per\n     * update cycle and once after creation.\n     */\n    DecentralandSynchronizationSystem.prototype.disposableComponentRemoved = function (event) {\n        this.dcl.componentDisposed(event.componentId);\n    };\n    /**\n     * This method is called right after a diposableComponent gets disposed. That\n     * process is manual.\n     *\n     * TODO(menduz,dani): What happens if a disposableComponent gets disposed and\n     * it remains attached to some entities?\n     */\n    DecentralandSynchronizationSystem.prototype.disposableComponentUpdated = function (event) {\n        this.dcl.componentUpdated(event.componentId, JSON.stringify(event.component));\n    };\n    /**\n     * This method is called when a parent changes in an entity.\n     */\n    DecentralandSynchronizationSystem.prototype.parentChanged = function (event) {\n        this.dcl.setParent(event.entity.uuid, event.parent ? event.parent.uuid : ROOT_ENTITY_ID);\n    };\n    return DecentralandSynchronizationSystem;\n}());\nexports.DecentralandSynchronizationSystem = DecentralandSynchronizationSystem;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Implementation.ts?")},"./packages/decentraland-ecs/src/decentraland/Input.ts":
/*!*************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Input.ts ***!
  \*************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\n// tslint:disable:ter-indent\n// tslint:disable:ter-indent\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Types_1 = __webpack_require__(/*! ./Types */ "./packages/decentraland-ecs/src/decentraland/Types.ts");\nvar math_1 = __webpack_require__(/*! ./math */ "./packages/decentraland-ecs/src/decentraland/math/index.ts");\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\n/**\n * @public\n */\nvar ActionButton;\n(function (ActionButton) {\n    ActionButton["POINTER"] = "POINTER";\n    ActionButton["PRIMARY"] = "PRIMARY";\n    ActionButton["SECONDARY"] = "SECONDARY";\n})(ActionButton = exports.ActionButton || (exports.ActionButton = {}));\n/**\n * @public\n */\nvar PointerEventComponent = /** @class */ (function () {\n    function PointerEventComponent(callback) {\n        this.callback = callback;\n        if (!callback || !(\'apply\' in callback) || !(\'call\' in callback)) {\n            throw new Error(\'Callback is not a function\');\n        }\n        // tslint:disable-next-line:no-use-before-declare\n        Input.ensureInstance();\n    }\n    return PointerEventComponent;\n}());\nexports.PointerEventComponent = PointerEventComponent;\n/**\n * @public\n */\nvar GlobalPointerDown = /** @class */ (function (_super) {\n    __extends(GlobalPointerDown, _super);\n    function GlobalPointerDown() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GlobalPointerDown = __decorate([\n        Component_1.Component(\'pointerDown\')\n    ], GlobalPointerDown);\n    return GlobalPointerDown;\n}(PointerEventComponent));\nexports.GlobalPointerDown = GlobalPointerDown;\n/**\n * @public\n */\nvar GlobalPointerUp = /** @class */ (function (_super) {\n    __extends(GlobalPointerUp, _super);\n    function GlobalPointerUp() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GlobalPointerUp = __decorate([\n        Component_1.Component(\'pointerUp\')\n    ], GlobalPointerUp);\n    return GlobalPointerUp;\n}(PointerEventComponent));\nexports.GlobalPointerUp = GlobalPointerUp;\nvar Subscription = /** @class */ (function () {\n    function Subscription(fn, useRaycast) {\n        this.fn = fn;\n        this.useRaycast = useRaycast;\n    }\n    return Subscription;\n}());\n/**\n * @public\n */\nvar Input = /** @class */ (function () {\n    function Input() {\n        var _a, _b;\n        this.subscriptions = (_a = {},\n            _a[ActionButton.POINTER] = {\n                BUTTON_DOWN: [],\n                BUTTON_UP: []\n            },\n            _a[ActionButton.PRIMARY] = {\n                BUTTON_DOWN: [],\n                BUTTON_UP: []\n            },\n            _a[ActionButton.SECONDARY] = {\n                BUTTON_DOWN: [],\n                BUTTON_UP: []\n            },\n            _a);\n        this.internalState = (_b = {},\n            _b[ActionButton.POINTER] = {\n                BUTTON_DOWN: false\n            },\n            _b[ActionButton.PRIMARY] = {\n                BUTTON_DOWN: false\n            },\n            _b[ActionButton.SECONDARY] = {\n                BUTTON_DOWN: false\n            },\n            _b);\n    }\n    Object.defineProperty(Input, "instance", {\n        get: function () {\n            Input.ensureInstance();\n            return Input._instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Input.ensureInstance = function () {\n        if (!Input._instance) {\n            Input._instance = new Input();\n        }\n    };\n    /**\n     * Allows to know if a button is pressed\n     *\n     * Returns true if the button is pressed\n     * @param buttonId - The id of the button.\n     */\n    Input.prototype.isButtonPressed = function (buttonId) {\n        return this.internalState[buttonId];\n    };\n    /**\n     * Subscribes to an input event and triggers the provided callback.\n     *\n     * Returns a function that can be called to remove the subscription.\n     * @param eventName - The name of the event (see InputEventKind).\n     * @param buttonId - The id of the button.\n     * @param useRaycast - Enables getting raycast information.\n     * @param fn - A callback function to be called when the event is triggered.\n     */\n    Input.prototype.subscribe = function (eventName, buttonId, useRaycast, fn) {\n        var _this = this;\n        this.subscriptions[buttonId][eventName].push(new Subscription(fn, useRaycast));\n        return function () { return _this.unsubscribe(eventName, buttonId, fn); };\n    };\n    /**\n     * Removes an existing input event subscription.\n     * @param eventName - The name of the event (see InputEventKind).\n     * @param buttonId - The id of the button.\n     * @param fn - The callback function used when subscribing to the event.\n     */\n    Input.prototype.unsubscribe = function (eventName, buttonId, fn) {\n        var index = this.getSubscriptionId(eventName, buttonId, fn);\n        if (index > -1) {\n            return this.subscriptions[buttonId][eventName].splice(index, 1);\n        }\n        return false;\n    };\n    Input.prototype.handlePointerEvent = function (data) {\n        var button = this.getPointerById(data.buttonId);\n        var eventResult = __assign(__assign({}, data), { button: button, direction: new math_1.Vector3().copyFrom(data.direction), origin: new math_1.Vector3().copyFrom(data.origin), hit: undefined });\n        var hit = data.hit\n            ? __assign(__assign({}, data.hit), { hitPoint: new math_1.Vector3().copyFrom(data.hit.hitPoint), normal: new math_1.Vector3().copyFrom(data.hit.normal), worldNormal: new math_1.Vector3().copyFrom(data.hit.worldNormal) }) : undefined;\n        if (data.type === Types_1.InputEventType.DOWN) {\n            this.internalState[button].BUTTON_DOWN = true;\n            for (var i = 0; i < this.subscriptions[button][\'BUTTON_DOWN\'].length; i++) {\n                var subscription = this.subscriptions[button][\'BUTTON_DOWN\'][i];\n                // remove hit information when raycast is disabled\n                if (subscription.useRaycast) {\n                    eventResult.hit = hit;\n                }\n                else {\n                    eventResult.hit = undefined;\n                }\n                subscription.fn(eventResult);\n            }\n            if (hit && hit.entityId && Component_1.DisposableComponent.engine) {\n                var entity = Component_1.DisposableComponent.engine.entities[hit.entityId];\n                var handler = entity && entity.getComponentOrNull(GlobalPointerDown);\n                if (handler) {\n                    eventResult.hit = hit;\n                    handler.callback(eventResult);\n                }\n            }\n        }\n        else {\n            this.internalState[button].BUTTON_DOWN = false;\n            for (var i = 0; i < this.subscriptions[button][\'BUTTON_UP\'].length; i++) {\n                var subscription = this.subscriptions[button][\'BUTTON_UP\'][i];\n                // remove hit information when raycast is disabled\n                if (subscription.useRaycast) {\n                    eventResult.hit = hit;\n                }\n                else {\n                    eventResult.hit = undefined;\n                }\n                subscription.fn(eventResult);\n            }\n            if (hit && hit.entityId && Component_1.DisposableComponent.engine) {\n                var entity = Component_1.DisposableComponent.engine.entities[hit.entityId];\n                var handler = entity && entity.getComponentOrNull(GlobalPointerUp);\n                if (handler) {\n                    eventResult.hit = hit;\n                    handler.callback(eventResult);\n                }\n            }\n        }\n    };\n    Input.prototype.getSubscriptionId = function (eventName, buttonId, fn) {\n        for (var i = 0; i < this.subscriptions[buttonId][eventName].length; i++) {\n            if (this.subscriptions[buttonId][eventName][i].fn === fn) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    Input.prototype.getPointerById = function (id) {\n        if (id === 0)\n            return ActionButton.POINTER;\n        else if (id === 1)\n            return ActionButton.PRIMARY;\n        return ActionButton.SECONDARY;\n    };\n    return Input;\n}());\nexports.Input = Input;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVjZW50cmFsYW5kL0lucHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0QkFBNEI7QUFDNUIsNEJBQTRCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUU1QixpQ0FBZ0U7QUFDaEUsK0JBQWdDO0FBQ2hDLDhDQUFpRTtBQUtqRTs7R0FFRztBQUNILElBQVksWUFJWDtBQUpELFdBQVksWUFBWTtJQUN0QixtQ0FBbUIsQ0FBQTtJQUNuQixtQ0FBbUIsQ0FBQTtJQUNuQix1Q0FBdUIsQ0FBQTtBQUN6QixDQUFDLEVBSlcsWUFBWSxHQUFaLG9CQUFZLEtBQVosb0JBQVksUUFJdkI7QUFzQkQ7O0dBRUc7QUFDSDtJQUNFLCtCQUE0QixRQUFpRDtRQUFqRCxhQUFRLEdBQVIsUUFBUSxDQUF5QztRQUMzRSxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sSUFBSSxRQUFRLENBQUMsRUFBRTtZQUNoRSxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUE7U0FDOUM7UUFDRCxpREFBaUQ7UUFDakQsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFBO0lBQ3hCLENBQUM7SUFDSCw0QkFBQztBQUFELENBQUMsQUFSRCxJQVFDO0FBUlksc0RBQXFCO0FBVWxDOztHQUVHO0FBRUg7SUFBdUMscUNBQXFCO0lBQTVEOztJQUE4RCxDQUFDO0lBQWxELGlCQUFpQjtRQUQ3QixxQkFBUyxDQUFDLGFBQWEsQ0FBQztPQUNaLGlCQUFpQixDQUFpQztJQUFELHdCQUFDO0NBQUEsQUFBL0QsQ0FBdUMscUJBQXFCLEdBQUc7QUFBbEQsOENBQWlCO0FBRTlCOztHQUVHO0FBRUg7SUFBcUMsbUNBQXFCO0lBQTFEOztJQUE0RCxDQUFDO0lBQWhELGVBQWU7UUFEM0IscUJBQVMsQ0FBQyxXQUFXLENBQUM7T0FDVixlQUFlLENBQWlDO0lBQUQsc0JBQUM7Q0FBQSxBQUE3RCxDQUFxQyxxQkFBcUIsR0FBRztBQUFoRCwwQ0FBZTtBQUU1QjtJQUlFLHNCQUFZLEVBQXVDLEVBQUUsVUFBbUI7UUFDdEUsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUE7UUFDWixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQTtJQUM5QixDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQUFDLEFBUkQsSUFRQztBQUVEOztHQUVHO0FBQ0g7SUFtQ0U7O1FBM0JRLGtCQUFhO1lBQ25CLEdBQUMsWUFBWSxDQUFDLE9BQU8sSUFBRztnQkFDdEIsV0FBVyxFQUFFLEVBQUU7Z0JBQ2YsU0FBUyxFQUFFLEVBQUU7YUFDZDtZQUNELEdBQUMsWUFBWSxDQUFDLE9BQU8sSUFBRztnQkFDdEIsV0FBVyxFQUFFLEVBQUU7Z0JBQ2YsU0FBUyxFQUFFLEVBQUU7YUFDZDtZQUNELEdBQUMsWUFBWSxDQUFDLFNBQVMsSUFBRztnQkFDeEIsV0FBVyxFQUFFLEVBQUU7Z0JBQ2YsU0FBUyxFQUFFLEVBQUU7YUFDZDtnQkFDRjtRQUVPLGtCQUFhO1lBQ25CLEdBQUMsWUFBWSxDQUFDLE9BQU8sSUFBRztnQkFDdEIsV0FBVyxFQUFFLEtBQUs7YUFDbkI7WUFDRCxHQUFDLFlBQVksQ0FBQyxPQUFPLElBQUc7Z0JBQ3RCLFdBQVcsRUFBRSxLQUFLO2FBQ25CO1lBQ0QsR0FBQyxZQUFZLENBQUMsU0FBUyxJQUFHO2dCQUN4QixXQUFXLEVBQUUsS0FBSzthQUNuQjtnQkFDRjtJQUVzQixDQUFDO0lBaEN4QixzQkFBVyxpQkFBUTthQUFuQjtZQUNFLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQTtZQUN0QixPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUE7UUFDeEIsQ0FBQzs7O09BQUE7SUErQk0sb0JBQWMsR0FBckI7UUFDRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtZQUNwQixLQUFLLENBQUMsU0FBUyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUE7U0FDOUI7SUFDSCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSwrQkFBZSxHQUF0QixVQUF1QixRQUFzQjtRQUMzQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0kseUJBQVMsR0FBaEIsVUFDRSxTQUF5QixFQUN6QixRQUFzQixFQUN0QixVQUFtQixFQUNuQixFQUF1QztRQUp6QyxpQkFRQztRQUZDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksWUFBWSxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFBO1FBQzlFLE9BQU8sY0FBTSxPQUFBLEtBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBekMsQ0FBeUMsQ0FBQTtJQUN4RCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSwyQkFBVyxHQUFsQixVQUFtQixTQUF5QixFQUFFLFFBQXNCLEVBQUUsRUFBdUM7UUFDM0csSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDN0QsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQTtTQUNoRTtRQUNELE9BQU8sS0FBSyxDQUFBO0lBQ2QsQ0FBQztJQUVNLGtDQUFrQixHQUF6QixVQUEwQixJQUE0QjtRQUNwRCxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUVqRCxJQUFJLFdBQVcseUJBQ1YsSUFBSSxLQUNQLE1BQU0sRUFBRSxNQUFNLEVBQ2QsU0FBUyxFQUFFLElBQUksY0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFDakQsTUFBTSxFQUFFLElBQUksY0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFDM0MsR0FBRyxFQUFFLFNBQVMsR0FDZixDQUFBO1FBRUQsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUc7WUFDbEIsQ0FBQyx1QkFDTSxJQUFJLENBQUMsR0FBRyxLQUNYLFFBQVEsRUFBRSxJQUFJLGNBQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUNuRCxNQUFNLEVBQUUsSUFBSSxjQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFDL0MsV0FBVyxFQUFFLElBQUksY0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBRTdELENBQUMsQ0FBQyxTQUFTLENBQUE7UUFFYixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssc0JBQWMsQ0FBQyxJQUFJLEVBQUU7WUFDckMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFBO1lBRTdDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDekUsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFFL0Qsa0RBQWtEO2dCQUNsRCxJQUFJLFlBQVksQ0FBQyxVQUFVLEVBQUU7b0JBQzNCLFdBQVcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBO2lCQUN0QjtxQkFBTTtvQkFDTCxXQUFXLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQTtpQkFDNUI7Z0JBRUQsWUFBWSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQTthQUM3QjtZQUVELElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLElBQUksK0JBQW1CLENBQUMsTUFBTSxFQUFFO2dCQUNyRCxJQUFNLE1BQU0sR0FBRywrQkFBbUIsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtnQkFDaEUsSUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO2dCQUN0RSxJQUFJLE9BQU8sRUFBRTtvQkFDWCxXQUFXLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQTtvQkFDckIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQTtpQkFDOUI7YUFDRjtTQUNGO2FBQU07WUFDTCxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUE7WUFFOUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN2RSxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUU3RCxrREFBa0Q7Z0JBQ2xELElBQUksWUFBWSxDQUFDLFVBQVUsRUFBRTtvQkFDM0IsV0FBVyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUE7aUJBQ3RCO3FCQUFNO29CQUNMLFdBQVcsQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFBO2lCQUM1QjtnQkFFRCxZQUFZLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFBO2FBQzdCO1lBRUQsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsSUFBSSwrQkFBbUIsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3JELElBQU0sTUFBTSxHQUFHLCtCQUFtQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO2dCQUNoRSxJQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFBO2dCQUNwRSxJQUFJLE9BQU8sRUFBRTtvQkFDWCxXQUFXLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQTtvQkFDckIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQTtpQkFDOUI7YUFDRjtTQUNGO0lBQ0gsQ0FBQztJQUVPLGlDQUFpQixHQUF6QixVQUNFLFNBQXlCLEVBQ3pCLFFBQXNCLEVBQ3RCLEVBQXVDO1FBRXZDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN2RSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDeEQsT0FBTyxDQUFDLENBQUE7YUFDVDtTQUNGO1FBRUQsT0FBTyxDQUFDLENBQUMsQ0FBQTtJQUNYLENBQUM7SUFFTyw4QkFBYyxHQUF0QixVQUF1QixFQUFVO1FBQy9CLElBQUksRUFBRSxLQUFLLENBQUM7WUFBRSxPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUE7YUFDcEMsSUFBSSxFQUFFLEtBQUssQ0FBQztZQUFFLE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQTtRQUM5QyxPQUFPLFlBQVksQ0FBQyxTQUFTLENBQUE7SUFDL0IsQ0FBQztJQUNILFlBQUM7QUFBRCxDQUFDLEFBaExELElBZ0xDO0FBaExZLHNCQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6dGVyLWluZGVudFxuLy8gdHNsaW50OmRpc2FibGU6dGVyLWluZGVudFxuXG5pbXBvcnQgeyBHbG9iYWxJbnB1dEV2ZW50UmVzdWx0LCBJbnB1dEV2ZW50VHlwZSB9IGZyb20gJy4vVHlwZXMnXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9tYXRoJ1xuaW1wb3J0IHsgQ29tcG9uZW50LCBEaXNwb3NhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi4vZWNzL0NvbXBvbmVudCdcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIElucHV0RXZlbnRLaW5kID0gJ0JVVFRPTl9ET1dOJyB8ICdCVVRUT05fVVAnXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZW51bSBBY3Rpb25CdXR0b24ge1xuICBQT0lOVEVSID0gJ1BPSU5URVInLFxuICBQUklNQVJZID0gJ1BSSU1BUlknLFxuICBTRUNPTkRBUlkgPSAnU0VDT05EQVJZJ1xufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgSW5wdXRTdGF0ZSA9IFJlY29yZDxcbiAgQWN0aW9uQnV0dG9uLFxuICB7XG4gICAgQlVUVE9OX0RPV046IGJvb2xlYW5cbiAgfVxuPlxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgTG9jYWxBY3Rpb25CdXR0b25FdmVudCA9IEdsb2JhbElucHV0RXZlbnRSZXN1bHQgJiB7XG4gIG9yaWdpbjogVmVjdG9yM1xuICBkaXJlY3Rpb246IFZlY3RvcjNcbiAgYnV0dG9uOiBBY3Rpb25CdXR0b25cbiAgaGl0PzogR2xvYmFsSW5wdXRFdmVudFJlc3VsdFsnaGl0J10gJiB7XG4gICAgaGl0UG9pbnQ6IFZlY3RvcjNcbiAgICBub3JtYWw6IFZlY3RvcjNcbiAgICB3b3JsZE5vcm1hbDogVmVjdG9yM1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgUG9pbnRlckV2ZW50Q29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGNhbGxiYWNrOiAoZXZlbnQ6IExvY2FsQWN0aW9uQnV0dG9uRXZlbnQpID0+IHZvaWQpIHtcbiAgICBpZiAoIWNhbGxiYWNrIHx8ICEoJ2FwcGx5JyBpbiBjYWxsYmFjaykgfHwgISgnY2FsbCcgaW4gY2FsbGJhY2spKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uJylcbiAgICB9XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVzZS1iZWZvcmUtZGVjbGFyZVxuICAgIElucHV0LmVuc3VyZUluc3RhbmNlKClcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgncG9pbnRlckRvd24nKVxuZXhwb3J0IGNsYXNzIEdsb2JhbFBvaW50ZXJEb3duIGV4dGVuZHMgUG9pbnRlckV2ZW50Q29tcG9uZW50IHt9XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdwb2ludGVyVXAnKVxuZXhwb3J0IGNsYXNzIEdsb2JhbFBvaW50ZXJVcCBleHRlbmRzIFBvaW50ZXJFdmVudENvbXBvbmVudCB7fVxuXG5jbGFzcyBTdWJzY3JpcHRpb24ge1xuICBwdWJsaWMgZm46IChlOiBMb2NhbEFjdGlvbkJ1dHRvbkV2ZW50KSA9PiB2b2lkXG4gIHB1YmxpYyB1c2VSYXljYXN0OiBib29sZWFuXG5cbiAgY29uc3RydWN0b3IoZm46IChlOiBMb2NhbEFjdGlvbkJ1dHRvbkV2ZW50KSA9PiB2b2lkLCB1c2VSYXljYXN0OiBib29sZWFuKSB7XG4gICAgdGhpcy5mbiA9IGZuXG4gICAgdGhpcy51c2VSYXljYXN0ID0gdXNlUmF5Y2FzdFxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgSW5wdXQge1xuICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IElucHV0XG5cbiAgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBJbnB1dCB7XG4gICAgSW5wdXQuZW5zdXJlSW5zdGFuY2UoKVxuICAgIHJldHVybiBJbnB1dC5faW5zdGFuY2VcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uczogUmVjb3JkPEFjdGlvbkJ1dHRvbiwgUmVjb3JkPElucHV0RXZlbnRLaW5kLCBBcnJheTxTdWJzY3JpcHRpb24+Pj4gPSB7XG4gICAgW0FjdGlvbkJ1dHRvbi5QT0lOVEVSXToge1xuICAgICAgQlVUVE9OX0RPV046IFtdLFxuICAgICAgQlVUVE9OX1VQOiBbXVxuICAgIH0sXG4gICAgW0FjdGlvbkJ1dHRvbi5QUklNQVJZXToge1xuICAgICAgQlVUVE9OX0RPV046IFtdLFxuICAgICAgQlVUVE9OX1VQOiBbXVxuICAgIH0sXG4gICAgW0FjdGlvbkJ1dHRvbi5TRUNPTkRBUlldOiB7XG4gICAgICBCVVRUT05fRE9XTjogW10sXG4gICAgICBCVVRUT05fVVA6IFtdXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpbnRlcm5hbFN0YXRlOiBJbnB1dFN0YXRlID0ge1xuICAgIFtBY3Rpb25CdXR0b24uUE9JTlRFUl06IHtcbiAgICAgIEJVVFRPTl9ET1dOOiBmYWxzZVxuICAgIH0sXG4gICAgW0FjdGlvbkJ1dHRvbi5QUklNQVJZXToge1xuICAgICAgQlVUVE9OX0RPV046IGZhbHNlXG4gICAgfSxcbiAgICBbQWN0aW9uQnV0dG9uLlNFQ09OREFSWV06IHtcbiAgICAgIEJVVFRPTl9ET1dOOiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxuXG4gIHN0YXRpYyBlbnN1cmVJbnN0YW5jZSgpOiBhbnkge1xuICAgIGlmICghSW5wdXQuX2luc3RhbmNlKSB7XG4gICAgICBJbnB1dC5faW5zdGFuY2UgPSBuZXcgSW5wdXQoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdG8ga25vdyBpZiBhIGJ1dHRvbiBpcyBwcmVzc2VkXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgYnV0dG9uIGlzIHByZXNzZWRcbiAgICogQHBhcmFtIGJ1dHRvbklkIC0gVGhlIGlkIG9mIHRoZSBidXR0b24uXG4gICAqL1xuICBwdWJsaWMgaXNCdXR0b25QcmVzc2VkKGJ1dHRvbklkOiBBY3Rpb25CdXR0b24pIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcm5hbFN0YXRlW2J1dHRvbklkXVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZXMgdG8gYW4gaW5wdXQgZXZlbnQgYW5kIHRyaWdnZXJzIHRoZSBwcm92aWRlZCBjYWxsYmFjay5cbiAgICpcbiAgICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlIHN1YnNjcmlwdGlvbi5cbiAgICogQHBhcmFtIGV2ZW50TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudCAoc2VlIElucHV0RXZlbnRLaW5kKS5cbiAgICogQHBhcmFtIGJ1dHRvbklkIC0gVGhlIGlkIG9mIHRoZSBidXR0b24uXG4gICAqIEBwYXJhbSB1c2VSYXljYXN0IC0gRW5hYmxlcyBnZXR0aW5nIHJheWNhc3QgaW5mb3JtYXRpb24uXG4gICAqIEBwYXJhbSBmbiAtIEEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICovXG4gIHB1YmxpYyBzdWJzY3JpYmUoXG4gICAgZXZlbnROYW1lOiBJbnB1dEV2ZW50S2luZCxcbiAgICBidXR0b25JZDogQWN0aW9uQnV0dG9uLFxuICAgIHVzZVJheWNhc3Q6IGJvb2xlYW4sXG4gICAgZm46IChlOiBMb2NhbEFjdGlvbkJ1dHRvbkV2ZW50KSA9PiB2b2lkXG4gICkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uc1tidXR0b25JZF1bZXZlbnROYW1lXS5wdXNoKG5ldyBTdWJzY3JpcHRpb24oZm4sIHVzZVJheWNhc3QpKVxuICAgIHJldHVybiAoKSA9PiB0aGlzLnVuc3Vic2NyaWJlKGV2ZW50TmFtZSwgYnV0dG9uSWQsIGZuKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYW4gZXhpc3RpbmcgaW5wdXQgZXZlbnQgc3Vic2NyaXB0aW9uLlxuICAgKiBAcGFyYW0gZXZlbnROYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50IChzZWUgSW5wdXRFdmVudEtpbmQpLlxuICAgKiBAcGFyYW0gYnV0dG9uSWQgLSBUaGUgaWQgb2YgdGhlIGJ1dHRvbi5cbiAgICogQHBhcmFtIGZuIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHVzZWQgd2hlbiBzdWJzY3JpYmluZyB0byB0aGUgZXZlbnQuXG4gICAqL1xuICBwdWJsaWMgdW5zdWJzY3JpYmUoZXZlbnROYW1lOiBJbnB1dEV2ZW50S2luZCwgYnV0dG9uSWQ6IEFjdGlvbkJ1dHRvbiwgZm46IChlOiBMb2NhbEFjdGlvbkJ1dHRvbkV2ZW50KSA9PiB2b2lkKSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmdldFN1YnNjcmlwdGlvbklkKGV2ZW50TmFtZSwgYnV0dG9uSWQsIGZuKVxuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdWJzY3JpcHRpb25zW2J1dHRvbklkXVtldmVudE5hbWVdLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBwdWJsaWMgaGFuZGxlUG9pbnRlckV2ZW50KGRhdGE6IEdsb2JhbElucHV0RXZlbnRSZXN1bHQpIHtcbiAgICBjb25zdCBidXR0b24gPSB0aGlzLmdldFBvaW50ZXJCeUlkKGRhdGEuYnV0dG9uSWQpXG5cbiAgICBsZXQgZXZlbnRSZXN1bHQ6IExvY2FsQWN0aW9uQnV0dG9uRXZlbnQgPSB7XG4gICAgICAuLi5kYXRhLFxuICAgICAgYnV0dG9uOiBidXR0b24sXG4gICAgICBkaXJlY3Rpb246IG5ldyBWZWN0b3IzKCkuY29weUZyb20oZGF0YS5kaXJlY3Rpb24pLFxuICAgICAgb3JpZ2luOiBuZXcgVmVjdG9yMygpLmNvcHlGcm9tKGRhdGEub3JpZ2luKSxcbiAgICAgIGhpdDogdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgY29uc3QgaGl0ID0gZGF0YS5oaXRcbiAgICAgID8ge1xuICAgICAgICAgIC4uLmRhdGEuaGl0LFxuICAgICAgICAgIGhpdFBvaW50OiBuZXcgVmVjdG9yMygpLmNvcHlGcm9tKGRhdGEuaGl0LmhpdFBvaW50KSxcbiAgICAgICAgICBub3JtYWw6IG5ldyBWZWN0b3IzKCkuY29weUZyb20oZGF0YS5oaXQubm9ybWFsKSxcbiAgICAgICAgICB3b3JsZE5vcm1hbDogbmV3IFZlY3RvcjMoKS5jb3B5RnJvbShkYXRhLmhpdC53b3JsZE5vcm1hbClcbiAgICAgICAgfVxuICAgICAgOiB1bmRlZmluZWRcblxuICAgIGlmIChkYXRhLnR5cGUgPT09IElucHV0RXZlbnRUeXBlLkRPV04pIHtcbiAgICAgIHRoaXMuaW50ZXJuYWxTdGF0ZVtidXR0b25dLkJVVFRPTl9ET1dOID0gdHJ1ZVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3Vic2NyaXB0aW9uc1tidXR0b25dWydCVVRUT05fRE9XTiddLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBzdWJzY3JpcHRpb24gPSB0aGlzLnN1YnNjcmlwdGlvbnNbYnV0dG9uXVsnQlVUVE9OX0RPV04nXVtpXVxuXG4gICAgICAgIC8vIHJlbW92ZSBoaXQgaW5mb3JtYXRpb24gd2hlbiByYXljYXN0IGlzIGRpc2FibGVkXG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24udXNlUmF5Y2FzdCkge1xuICAgICAgICAgIGV2ZW50UmVzdWx0LmhpdCA9IGhpdFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV2ZW50UmVzdWx0LmhpdCA9IHVuZGVmaW5lZFxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaXB0aW9uLmZuKGV2ZW50UmVzdWx0KVxuICAgICAgfVxuXG4gICAgICBpZiAoaGl0ICYmIGhpdC5lbnRpdHlJZCAmJiBEaXNwb3NhYmxlQ29tcG9uZW50LmVuZ2luZSkge1xuICAgICAgICBjb25zdCBlbnRpdHkgPSBEaXNwb3NhYmxlQ29tcG9uZW50LmVuZ2luZS5lbnRpdGllc1toaXQuZW50aXR5SWRdXG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBlbnRpdHkgJiYgZW50aXR5LmdldENvbXBvbmVudE9yTnVsbChHbG9iYWxQb2ludGVyRG93bilcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBldmVudFJlc3VsdC5oaXQgPSBoaXRcbiAgICAgICAgICBoYW5kbGVyLmNhbGxiYWNrKGV2ZW50UmVzdWx0KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW50ZXJuYWxTdGF0ZVtidXR0b25dLkJVVFRPTl9ET1dOID0gZmFsc2VcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN1YnNjcmlwdGlvbnNbYnV0dG9uXVsnQlVUVE9OX1VQJ10ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHN1YnNjcmlwdGlvbiA9IHRoaXMuc3Vic2NyaXB0aW9uc1tidXR0b25dWydCVVRUT05fVVAnXVtpXVxuXG4gICAgICAgIC8vIHJlbW92ZSBoaXQgaW5mb3JtYXRpb24gd2hlbiByYXljYXN0IGlzIGRpc2FibGVkXG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24udXNlUmF5Y2FzdCkge1xuICAgICAgICAgIGV2ZW50UmVzdWx0LmhpdCA9IGhpdFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV2ZW50UmVzdWx0LmhpdCA9IHVuZGVmaW5lZFxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaXB0aW9uLmZuKGV2ZW50UmVzdWx0KVxuICAgICAgfVxuXG4gICAgICBpZiAoaGl0ICYmIGhpdC5lbnRpdHlJZCAmJiBEaXNwb3NhYmxlQ29tcG9uZW50LmVuZ2luZSkge1xuICAgICAgICBjb25zdCBlbnRpdHkgPSBEaXNwb3NhYmxlQ29tcG9uZW50LmVuZ2luZS5lbnRpdGllc1toaXQuZW50aXR5SWRdXG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBlbnRpdHkgJiYgZW50aXR5LmdldENvbXBvbmVudE9yTnVsbChHbG9iYWxQb2ludGVyVXApXG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgZXZlbnRSZXN1bHQuaGl0ID0gaGl0XG4gICAgICAgICAgaGFuZGxlci5jYWxsYmFjayhldmVudFJlc3VsdClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3Vic2NyaXB0aW9uSWQoXG4gICAgZXZlbnROYW1lOiBJbnB1dEV2ZW50S2luZCxcbiAgICBidXR0b25JZDogQWN0aW9uQnV0dG9uLFxuICAgIGZuOiAoZTogTG9jYWxBY3Rpb25CdXR0b25FdmVudCkgPT4gdm9pZFxuICApOiBudW1iZXIge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdWJzY3JpcHRpb25zW2J1dHRvbklkXVtldmVudE5hbWVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb25zW2J1dHRvbklkXVtldmVudE5hbWVdW2ldLmZuID09PSBmbikge1xuICAgICAgICByZXR1cm4gaVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAtMVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRQb2ludGVyQnlJZChpZDogbnVtYmVyKTogQWN0aW9uQnV0dG9uIHtcbiAgICBpZiAoaWQgPT09IDApIHJldHVybiBBY3Rpb25CdXR0b24uUE9JTlRFUlxuICAgIGVsc2UgaWYgKGlkID09PSAxKSByZXR1cm4gQWN0aW9uQnV0dG9uLlBSSU1BUllcbiAgICByZXR1cm4gQWN0aW9uQnV0dG9uLlNFQ09OREFSWVxuICB9XG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Input.ts?')},"./packages/decentraland-ecs/src/decentraland/MessageBus.ts":
/*!******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/MessageBus.ts ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = __webpack_require__(/*! ../ecs/Observable */ \"./packages/decentraland-ecs/src/ecs/Observable.ts\");\nvar helpers_1 = __webpack_require__(/*! ../ecs/helpers */ \"./packages/decentraland-ecs/src/ecs/helpers.ts\");\nvar communicationsController = null;\nvar communicationsControllerPromise = null;\nvar _messageObserver = null;\n/**\n * @internal\n */\nfunction getMessageObserver() {\n    if (!_messageObserver) {\n        _messageObserver = new Observable_1.Observable();\n    }\n    return _messageObserver;\n}\nexports.getMessageObserver = getMessageObserver;\nfunction ensureCommunicationsController() {\n    if (!communicationsControllerPromise) {\n        communicationsControllerPromise = dcl.loadModule('@decentraland/CommunicationsController');\n        communicationsControllerPromise.then(function ($) {\n            communicationsController = $;\n        });\n        var observer_1 = getMessageObserver();\n        dcl.subscribe('comms');\n        dcl.onEvent(function (event) {\n            if (event.type === 'comms') {\n                dcl.log('Receiving comms message ', event.data);\n                observer_1.notifyObservers(event.data);\n            }\n        });\n    }\n    return communicationsControllerPromise;\n}\n/**\n * @public\n */\nvar MessageBus = /** @class */ (function () {\n    function MessageBus() {\n        var _this = this;\n        this.messageQueue = [];\n        this.connected = false;\n        this.flushing = false;\n        ensureCommunicationsController().then(function ($) {\n            _this.connected = true;\n            _this.flush();\n        });\n    }\n    MessageBus.prototype.on = function (message, callback) {\n        return getMessageObserver().add(function (e) {\n            try {\n                var m = JSON.parse(e.message);\n                if (m.message === message) {\n                    callback(m.payload, e.sender);\n                }\n            }\n            catch (e) {\n                dcl.error('Error parsing comms message ' + e.message, e);\n            }\n        });\n    };\n    // @internal\n    MessageBus.prototype.sendRaw = function (message) {\n        this.messageQueue.push(message);\n        if (this.connected) {\n            this.flush();\n        }\n    };\n    MessageBus.prototype.emit = function (message, payload) {\n        var messageToSend = JSON.stringify({ message: message, payload: payload });\n        this.sendRaw(messageToSend);\n        getMessageObserver().notifyObservers({ message: messageToSend, sender: 'self' });\n    };\n    MessageBus.prototype.flush = function () {\n        var _this = this;\n        if (this.messageQueue.length === 0)\n            return;\n        if (!this.connected)\n            return;\n        if (!communicationsController)\n            return;\n        if (this.flushing)\n            return;\n        var message = this.messageQueue.shift();\n        this.flushing = true;\n        dcl.callRpc(communicationsController.rpcHandle, 'send', [message]).then(function (_) {\n            _this.flushing = false;\n            _this.flush();\n        }, function (e) {\n            _this.flushing = false;\n            helpers_1.error('Error flushing MessageBus', e);\n        });\n    };\n    return MessageBus;\n}());\nexports.MessageBus = MessageBus;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZUJ1cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZWNlbnRyYWxhbmQvTWVzc2FnZUJ1cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGdEQUF3RDtBQUN4RCwwQ0FBc0M7QUFJdEMsSUFBSSx3QkFBd0IsR0FBNEIsSUFBSSxDQUFBO0FBQzVELElBQUksK0JBQStCLEdBQXlDLElBQUksQ0FBQTtBQUVoRixJQUFJLGdCQUFnQixHQUF3QyxJQUFJLENBQUE7QUFFaEU7O0dBRUc7QUFDSCxTQUFnQixrQkFBa0I7SUFDaEMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1FBQ3JCLGdCQUFnQixHQUFHLElBQUksdUJBQVUsRUFBb0IsQ0FBQTtLQUN0RDtJQUNELE9BQU8sZ0JBQWdCLENBQUE7QUFDekIsQ0FBQztBQUxELGdEQUtDO0FBRUQsU0FBUyw4QkFBOEI7SUFDckMsSUFBSSxDQUFDLCtCQUErQixFQUFFO1FBQ3BDLCtCQUErQixHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsd0NBQXdDLENBQUMsQ0FBQTtRQUUxRiwrQkFBK0IsQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDO1lBQ3BDLHdCQUF3QixHQUFHLENBQUMsQ0FBQTtRQUM5QixDQUFDLENBQUMsQ0FBQTtRQUVGLElBQU0sVUFBUSxHQUFHLGtCQUFrQixFQUFFLENBQUE7UUFFckMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUN0QixHQUFHLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztZQUNmLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUU7Z0JBQzFCLEdBQUcsQ0FBQyxHQUFHLENBQUMsMEJBQTBCLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO2dCQUMvQyxVQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxJQUFXLENBQUMsQ0FBQTthQUM1QztRQUNILENBQUMsQ0FBQyxDQUFBO0tBQ0g7SUFDRCxPQUFPLCtCQUErQixDQUFBO0FBQ3hDLENBQUM7QUFFRDs7R0FFRztBQUNIO0lBS0U7UUFBQSxpQkFLQztRQVRPLGlCQUFZLEdBQWEsRUFBRSxDQUFBO1FBQzNCLGNBQVMsR0FBRyxLQUFLLENBQUE7UUFDakIsYUFBUSxHQUFHLEtBQUssQ0FBQTtRQUd0Qiw4QkFBOEIsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUM7WUFDckMsS0FBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUE7WUFDckIsS0FBSSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ2QsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBRUQsdUJBQUUsR0FBRixVQUFHLE9BQWUsRUFBRSxRQUE4QztRQUNoRSxPQUFPLGtCQUFrQixFQUFFLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQztZQUMvQixJQUFJO2dCQUNGLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO2dCQUU3QixJQUFJLENBQUMsQ0FBQyxPQUFPLEtBQUssT0FBTyxFQUFFO29CQUN6QixRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUE7aUJBQzlCO2FBQ0Y7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixHQUFHLENBQUMsS0FBSyxDQUFDLDhCQUE4QixHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUE7YUFDekQ7UUFDSCxDQUFDLENBQUUsQ0FBQTtJQUNMLENBQUM7SUFFRCxZQUFZO0lBQ1osNEJBQU8sR0FBUCxVQUFRLE9BQWU7UUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFL0IsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtTQUNiO0lBQ0gsQ0FBQztJQUVELHlCQUFJLEdBQUosVUFBSyxPQUFlLEVBQUUsT0FBeUI7UUFDN0MsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sU0FBQSxFQUFFLE9BQU8sU0FBQSxFQUFFLENBQUMsQ0FBQTtRQUMxRCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBQzNCLGtCQUFrQixFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQTtJQUNsRixDQUFDO0lBRU8sMEJBQUssR0FBYjtRQUFBLGlCQW9CQztRQW5CQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUM7WUFBRSxPQUFNO1FBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUztZQUFFLE9BQU07UUFDM0IsSUFBSSxDQUFDLHdCQUF3QjtZQUFFLE9BQU07UUFDckMsSUFBSSxJQUFJLENBQUMsUUFBUTtZQUFFLE9BQU07UUFFekIsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUV6QyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQTtRQUVwQixHQUFHLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDckUsVUFBQSxDQUFDO1lBQ0MsS0FBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUE7WUFDckIsS0FBSSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ2QsQ0FBQyxFQUNELFVBQUEsQ0FBQztZQUNDLEtBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFBO1lBQ3JCLGVBQUssQ0FBQywyQkFBMkIsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN2QyxDQUFDLENBQ0YsQ0FBQTtJQUNILENBQUM7SUFDSCxpQkFBQztBQUFELENBQUMsQUE5REQsSUE4REM7QUE5RFksZ0NBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWNlbnRyYWxhbmRJbnRlcmZhY2UsIE1vZHVsZURlc2NyaXB0b3IsIElFdmVudHMgfSBmcm9tICcuL1R5cGVzJ1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT2JzZXJ2ZXIgfSBmcm9tICcuLi9lY3MvT2JzZXJ2YWJsZSdcbmltcG9ydCB7IGVycm9yIH0gZnJvbSAnLi4vZWNzL2hlbHBlcnMnXG5cbmRlY2xhcmUgY29uc3QgZGNsOiBEZWNlbnRyYWxhbmRJbnRlcmZhY2VcblxubGV0IGNvbW11bmljYXRpb25zQ29udHJvbGxlcjogTW9kdWxlRGVzY3JpcHRvciB8IG51bGwgPSBudWxsXG5sZXQgY29tbXVuaWNhdGlvbnNDb250cm9sbGVyUHJvbWlzZTogUHJvbWlzZUxpa2U8TW9kdWxlRGVzY3JpcHRvcj4gfCBudWxsID0gbnVsbFxuXG5sZXQgX21lc3NhZ2VPYnNlcnZlcjogbnVsbCB8IE9ic2VydmFibGU8SUV2ZW50c1snY29tbXMnXT4gPSBudWxsXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNZXNzYWdlT2JzZXJ2ZXIoKSB7XG4gIGlmICghX21lc3NhZ2VPYnNlcnZlcikge1xuICAgIF9tZXNzYWdlT2JzZXJ2ZXIgPSBuZXcgT2JzZXJ2YWJsZTxJRXZlbnRzWydjb21tcyddPigpXG4gIH1cbiAgcmV0dXJuIF9tZXNzYWdlT2JzZXJ2ZXJcbn1cblxuZnVuY3Rpb24gZW5zdXJlQ29tbXVuaWNhdGlvbnNDb250cm9sbGVyKCkge1xuICBpZiAoIWNvbW11bmljYXRpb25zQ29udHJvbGxlclByb21pc2UpIHtcbiAgICBjb21tdW5pY2F0aW9uc0NvbnRyb2xsZXJQcm9taXNlID0gZGNsLmxvYWRNb2R1bGUoJ0BkZWNlbnRyYWxhbmQvQ29tbXVuaWNhdGlvbnNDb250cm9sbGVyJylcblxuICAgIGNvbW11bmljYXRpb25zQ29udHJvbGxlclByb21pc2UudGhlbigkID0+IHtcbiAgICAgIGNvbW11bmljYXRpb25zQ29udHJvbGxlciA9ICRcbiAgICB9KVxuXG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBnZXRNZXNzYWdlT2JzZXJ2ZXIoKVxuXG4gICAgZGNsLnN1YnNjcmliZSgnY29tbXMnKVxuICAgIGRjbC5vbkV2ZW50KGV2ZW50ID0+IHtcbiAgICAgIGlmIChldmVudC50eXBlID09PSAnY29tbXMnKSB7XG4gICAgICAgIGRjbC5sb2coJ1JlY2VpdmluZyBjb21tcyBtZXNzYWdlICcsIGV2ZW50LmRhdGEpXG4gICAgICAgIG9ic2VydmVyLm5vdGlmeU9ic2VydmVycyhldmVudC5kYXRhIGFzIGFueSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIHJldHVybiBjb21tdW5pY2F0aW9uc0NvbnRyb2xsZXJQcm9taXNlXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgTWVzc2FnZUJ1cyB7XG4gIHByaXZhdGUgbWVzc2FnZVF1ZXVlOiBzdHJpbmdbXSA9IFtdXG4gIHByaXZhdGUgY29ubmVjdGVkID0gZmFsc2VcbiAgcHJpdmF0ZSBmbHVzaGluZyA9IGZhbHNlXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgZW5zdXJlQ29tbXVuaWNhdGlvbnNDb250cm9sbGVyKCkudGhlbigkID0+IHtcbiAgICAgIHRoaXMuY29ubmVjdGVkID0gdHJ1ZVxuICAgICAgdGhpcy5mbHVzaCgpXG4gICAgfSlcbiAgfVxuXG4gIG9uKG1lc3NhZ2U6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55LCBzZW5kZXI6IHN0cmluZykgPT4gdm9pZCk6IE9ic2VydmVyPElFdmVudHNbJ2NvbW1zJ10+IHtcbiAgICByZXR1cm4gZ2V0TWVzc2FnZU9ic2VydmVyKCkuYWRkKGUgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IG0gPSBKU09OLnBhcnNlKGUubWVzc2FnZSlcblxuICAgICAgICBpZiAobS5tZXNzYWdlID09PSBtZXNzYWdlKSB7XG4gICAgICAgICAgY2FsbGJhY2sobS5wYXlsb2FkLCBlLnNlbmRlcilcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBkY2wuZXJyb3IoJ0Vycm9yIHBhcnNpbmcgY29tbXMgbWVzc2FnZSAnICsgZS5tZXNzYWdlLCBlKVxuICAgICAgfVxuICAgIH0pIVxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIHNlbmRSYXcobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgdGhpcy5tZXNzYWdlUXVldWUucHVzaChtZXNzYWdlKVxuXG4gICAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgICB0aGlzLmZsdXNoKClcbiAgICB9XG4gIH1cblxuICBlbWl0KG1lc3NhZ2U6IHN0cmluZywgcGF5bG9hZDogUmVjb3JkPGFueSwgYW55Pikge1xuICAgIGNvbnN0IG1lc3NhZ2VUb1NlbmQgPSBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2UsIHBheWxvYWQgfSlcbiAgICB0aGlzLnNlbmRSYXcobWVzc2FnZVRvU2VuZClcbiAgICBnZXRNZXNzYWdlT2JzZXJ2ZXIoKS5ub3RpZnlPYnNlcnZlcnMoeyBtZXNzYWdlOiBtZXNzYWdlVG9TZW5kLCBzZW5kZXI6ICdzZWxmJyB9KVxuICB9XG5cbiAgcHJpdmF0ZSBmbHVzaCgpIHtcbiAgICBpZiAodGhpcy5tZXNzYWdlUXVldWUubGVuZ3RoID09PSAwKSByZXR1cm5cbiAgICBpZiAoIXRoaXMuY29ubmVjdGVkKSByZXR1cm5cbiAgICBpZiAoIWNvbW11bmljYXRpb25zQ29udHJvbGxlcikgcmV0dXJuXG4gICAgaWYgKHRoaXMuZmx1c2hpbmcpIHJldHVyblxuXG4gICAgY29uc3QgbWVzc2FnZSA9IHRoaXMubWVzc2FnZVF1ZXVlLnNoaWZ0KClcblxuICAgIHRoaXMuZmx1c2hpbmcgPSB0cnVlXG5cbiAgICBkY2wuY2FsbFJwYyhjb21tdW5pY2F0aW9uc0NvbnRyb2xsZXIucnBjSGFuZGxlLCAnc2VuZCcsIFttZXNzYWdlXSkudGhlbihcbiAgICAgIF8gPT4ge1xuICAgICAgICB0aGlzLmZsdXNoaW5nID0gZmFsc2VcbiAgICAgICAgdGhpcy5mbHVzaCgpXG4gICAgICB9LFxuICAgICAgZSA9PiB7XG4gICAgICAgIHRoaXMuZmx1c2hpbmcgPSBmYWxzZVxuICAgICAgICBlcnJvcignRXJyb3IgZmx1c2hpbmcgTWVzc2FnZUJ1cycsIGUpXG4gICAgICB9XG4gICAgKVxuICB9XG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/MessageBus.ts?")},"./packages/decentraland-ecs/src/decentraland/PhysicsCast.ts":
/*!*******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/PhysicsCast.ts ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar math_1 = __webpack_require__(/*! ./math */ \"./packages/decentraland-ecs/src/decentraland/math/index.ts\");\nvar helpers_1 = __webpack_require__(/*! ../ecs/helpers */ \"./packages/decentraland-ecs/src/ecs/helpers.ts\");\nvar Camera_1 = __webpack_require__(/*! ./Camera */ \"./packages/decentraland-ecs/src/decentraland/Camera.ts\");\n/**\n * @public\n */\nvar PhysicsCast = /** @class */ (function () {\n    function PhysicsCast() {\n        this.queries = {};\n    }\n    Object.defineProperty(PhysicsCast, \"instance\", {\n        get: function () {\n            PhysicsCast.ensureInstance();\n            return PhysicsCast._instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PhysicsCast.ensureInstance = function () {\n        if (!PhysicsCast._instance) {\n            PhysicsCast._instance = new PhysicsCast();\n        }\n    };\n    PhysicsCast.prototype.getRayFromCamera = function (distance) {\n        var rotation = Camera_1.Camera.instance.rotation;\n        var rotationMat = math_1.Matrix.Identity();\n        rotation.toRotationMatrix(rotationMat);\n        var direction = math_1.Vector3.TransformCoordinates(math_1.Vector3.Forward(), rotationMat);\n        var ray = {\n            origin: Camera_1.Camera.instance.position,\n            direction: direction,\n            distance: distance\n        };\n        return ray;\n    };\n    PhysicsCast.prototype.getRayFromPositions = function (from, to) {\n        var direction = to.subtract(from);\n        var length = direction.length();\n        var ray = {\n            origin: from,\n            direction: direction.normalize(),\n            distance: length\n        };\n        return ray;\n    };\n    PhysicsCast.prototype.hitFirst = function (ray, hitCallback) {\n        var queryId = helpers_1.uuid();\n        this.queries[queryId] = hitCallback;\n        dcl && dcl.query('raycast', { queryId: queryId, queryType: 'HitFirst', ray: ray });\n    };\n    PhysicsCast.prototype.hitAll = function (ray, hitCallback) {\n        var queryId = helpers_1.uuid();\n        this.queries[queryId] = hitCallback;\n        dcl && dcl.query('raycast', { queryId: queryId, queryType: 'HitAll', ray: ray });\n    };\n    PhysicsCast.prototype.hitFirstAvatar = function (ray, hitCallback) {\n        helpers_1.log('not implemented yet');\n    };\n    PhysicsCast.prototype.hitAllAvatars = function (ray, hitCallback) {\n        helpers_1.log('not implemented yet');\n    };\n    PhysicsCast.prototype.handleRaycastHitFirstResponse = function (response) {\n        this.queries[response.payload.queryId](response.payload.payload);\n        delete this.queries[response.payload.queryId];\n    };\n    PhysicsCast.prototype.handleRaycastHitAllResponse = function (response) {\n        this.queries[response.payload.queryId](response.payload.payload);\n        delete this.queries[response.payload.queryId];\n    };\n    return PhysicsCast;\n}());\nexports.PhysicsCast = PhysicsCast;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/PhysicsCast.ts?")},"./packages/decentraland-ecs/src/decentraland/Systems.ts":
/*!***************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Systems.ts ***!
  \***************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Events_1 = __webpack_require__(/*! ./Events */ \"./packages/decentraland-ecs/src/decentraland/Events.ts\");\nvar Components_1 = __webpack_require__(/*! ./Components */ \"./packages/decentraland-ecs/src/decentraland/Components.ts\");\nvar IEntity_1 = __webpack_require__(/*! ../ecs/IEntity */ \"./packages/decentraland-ecs/src/ecs/IEntity.ts\");\nvar Input_1 = __webpack_require__(/*! ./Input */ \"./packages/decentraland-ecs/src/decentraland/Input.ts\");\nvar PhysicsCast_1 = __webpack_require__(/*! ./PhysicsCast */ \"./packages/decentraland-ecs/src/decentraland/PhysicsCast.ts\");\n/**\n * @public\n */\nvar RaycastEventSystem = /** @class */ (function () {\n    function RaycastEventSystem() {\n    }\n    RaycastEventSystem.prototype.activate = function (engine) {\n        engine.eventManager.addListener(Events_1.RaycastResponse, this, function (event) {\n            if (event.payload.queryType === 'HitFirst') {\n                PhysicsCast_1.PhysicsCast.instance.handleRaycastHitFirstResponse(event);\n            }\n            else if (event.payload.queryType === 'HitAll') {\n                PhysicsCast_1.PhysicsCast.instance.handleRaycastHitAllResponse(event);\n            }\n        });\n        if (typeof dcl !== 'undefined') {\n            dcl.subscribe('raycastResponse');\n        }\n    };\n    RaycastEventSystem.prototype.deactivate = function () {\n        if (typeof dcl !== 'undefined') {\n            dcl.unsubscribe('raycastResponse');\n        }\n    };\n    return RaycastEventSystem;\n}());\nexports.RaycastEventSystem = RaycastEventSystem;\n/** @internal */\nexports.raycastEventSystem = new RaycastEventSystem();\n/**\n * @public\n */\nvar PointerEventSystem = /** @class */ (function () {\n    function PointerEventSystem() {\n    }\n    PointerEventSystem.prototype.activate = function (engine) {\n        engine.eventManager.addListener(Events_1.PointerEvent, this, function (event) {\n            Input_1.Input.instance.handlePointerEvent(event.payload);\n        });\n        if (typeof dcl !== 'undefined') {\n            dcl.subscribe('pointerUp');\n            dcl.subscribe('pointerDown');\n            dcl.subscribe('pointerEvent');\n        }\n    };\n    PointerEventSystem.prototype.deactivate = function () {\n        if (typeof dcl !== 'undefined') {\n            dcl.unsubscribe('pointerUp');\n            dcl.unsubscribe('pointerDown');\n            dcl.unsubscribe('pointerEvent');\n        }\n    };\n    return PointerEventSystem;\n}());\nexports.PointerEventSystem = PointerEventSystem;\n/** @internal */\nexports.pointerEventSystem = new PointerEventSystem();\n/**\n * @public\n */\nvar UUIDEventSystem = /** @class */ (function () {\n    function UUIDEventSystem() {\n        this.handlerMap = {};\n    }\n    UUIDEventSystem.prototype.activate = function (engine) {\n        engine.eventManager.addListener(Events_1.UUIDEvent, this, this.handleEvent);\n        engine.eventManager.addListener(IEntity_1.ComponentAdded, this, this.componentAdded);\n        engine.eventManager.addListener(IEntity_1.ComponentRemoved, this, this.componentRemoved);\n        if (typeof dcl !== 'undefined') {\n            dcl.subscribe('uuidEvent');\n        }\n    };\n    UUIDEventSystem.prototype.deactivate = function () {\n        if (typeof dcl !== 'undefined') {\n            dcl.unsubscribe('uuidEvent');\n        }\n    };\n    UUIDEventSystem.prototype.onAddEntity = function (entity) {\n        for (var componentName in entity.components) {\n            var component = entity.components[componentName];\n            if (component instanceof Components_1.OnUUIDEvent) {\n                this.handlerMap[component.uuid] = component;\n            }\n        }\n    };\n    UUIDEventSystem.prototype.onRemoveEntity = function (entity) {\n        for (var componentName in entity.components) {\n            var component = entity.components[componentName];\n            if (component instanceof Components_1.OnUUIDEvent) {\n                delete this.handlerMap[component.uuid];\n            }\n        }\n    };\n    UUIDEventSystem.prototype.componentAdded = function (event) {\n        if (event.entity.isAddedToEngine()) {\n            var component = event.entity.components[event.componentName];\n            if (component instanceof Components_1.OnUUIDEvent) {\n                this.handlerMap[component.uuid] = component;\n            }\n        }\n    };\n    UUIDEventSystem.prototype.componentRemoved = function (event) {\n        if (event.entity.isAddedToEngine()) {\n            if (event.component instanceof Components_1.OnUUIDEvent) {\n                delete this.handlerMap[event.component.uuid];\n            }\n        }\n    };\n    UUIDEventSystem.prototype.handleEvent = function (event) {\n        if (event.uuid in this.handlerMap) {\n            var handler = this.handlerMap[event.uuid];\n            if (handler) {\n                if (handler.callback && 'call' in handler.callback) {\n                    handler.callback(event.payload);\n                }\n            }\n        }\n    };\n    return UUIDEventSystem;\n}());\nexports.UUIDEventSystem = UUIDEventSystem;\n/** @internal */\nexports.uuidEventSystem = new UUIDEventSystem();\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Systems.ts?")},"./packages/decentraland-ecs/src/decentraland/Types.ts":
/*!*************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Types.ts ***!
  \*************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/** @public */\nvar InputEventType;\n(function (InputEventType) {\n    InputEventType[InputEventType["DOWN"] = 0] = "DOWN";\n    InputEventType[InputEventType["UP"] = 1] = "UP";\n})(InputEventType = exports.InputEventType || (exports.InputEventType = {}));\n// @internal\nexports.AVATAR_OBSERVABLE = \'AVATAR_OBSERVABLE\';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVjZW50cmFsYW5kL1R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBa0hBLGNBQWM7QUFDZCxJQUFZLGNBR1g7QUFIRCxXQUFZLGNBQWM7SUFDeEIsbURBQUksQ0FBQTtJQUNKLCtDQUFFLENBQUE7QUFDSixDQUFDLEVBSFcsY0FBYyxHQUFkLHNCQUFjLEtBQWQsc0JBQWMsUUFHekI7QUE0T0QsWUFBWTtBQUNDLFFBQUEsaUJBQWlCLEdBQUcsbUJBQW1CLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFkT25seVZlY3RvcjMsIFJlYWRPbmx5UXVhdGVybmlvbiwgUmVhZE9ubHlDb2xvcjQgfSBmcm9tICcuL21hdGgnXG5pbXBvcnQgeyBSYXljYXN0UmVzcG9uc2UgfSBmcm9tICcuL0V2ZW50cydcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIE1vZHVsZURlc2NyaXB0b3IgPSB7XG4gIHJwY0hhbmRsZTogc3RyaW5nXG4gIG1ldGhvZHM6IE1ldGhvZERlc2NyaXB0b3JbXVxufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgTWV0aG9kRGVzY3JpcHRvciA9IHsgbmFtZTogc3RyaW5nIH1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIERlY2VudHJhbGFuZEludGVyZmFjZSA9IHtcbiAgLyoqIGFyZSB3ZSBydW5uaW5nIGluIGRlYnVnIG1vZGU/ICovXG4gIERFQlVHOiBib29sZWFuXG5cbiAgLyoqIHVwZGF0ZSB0aGUgZW50aXR5IHNoYXBlICovXG4gIHVwZGF0ZUVudGl0eT86IG5ldmVyXG5cbiAgLyoqIGxvZyBmdW5jdGlvbiAqL1xuICBsb2coLi4uYTogYW55W10pOiB2b2lkXG5cbiAgLyoqIGVycm9yIGZ1bmN0aW9uICovXG4gIGVycm9yKG1lc3NhZ2U6IHN0cmluZywgZGF0YT86IGFueSk6IHZvaWRcblxuICAvLyBMSUZFQ1lDTEVcblxuICAvKiogdXBkYXRlIHRpY2sgKi9cbiAgb25VcGRhdGUoY2I6IChkZWx0YVRpbWU6IG51bWJlcikgPT4gdm9pZCk6IHZvaWRcblxuICAvKiogY2FsbGVkIHdoZW4gaXQgaXMgdGltZSB0byB3YWtlIHRoZSBzYW5kYm94ICovXG4gIG9uU3RhcnQoY2I6IEZ1bmN0aW9uKTogdm9pZFxuXG4gIC8vIEVOVElUSUVTXG5cbiAgLyoqIGNyZWF0ZSB0aGUgZW50aXR5IGluIHRoZSBlbmdpbmUgKi9cbiAgYWRkRW50aXR5KGVudGl0eUlkOiBzdHJpbmcpOiB2b2lkXG5cbiAgLyoqIHJlbW92ZSB0aGUgZW50aXR5IGZyb20gdGhlIGVuZ2luZSAqL1xuICByZW1vdmVFbnRpdHkoZW50aXR5SWQ6IHN0cmluZyk6IHZvaWRcblxuICAvKiogY2FsbGVkIGFmdGVyIGFkZGluZyBhIGNvbXBvbmVudCB0byB0aGUgZW50aXR5IG9yIGFmdGVyIHVwZGF0aW5nIGEgY29tcG9uZW50ICovXG4gIHVwZGF0ZUVudGl0eUNvbXBvbmVudChlbnRpdHlJZDogc3RyaW5nLCBjb21wb25lbnROYW1lOiBzdHJpbmcsIGNsYXNzSWQ6IG51bWJlciwganNvbjogc3RyaW5nKTogdm9pZFxuXG4gIC8qKiBjYWxsZWQgYWZ0ZXIgYWRkaW5nIGEgRGlzcG9zYWJsZUNvbXBvbmVudCB0byB0aGUgZW50aXR5ICovXG4gIGF0dGFjaEVudGl0eUNvbXBvbmVudChlbnRpdHlJZDogc3RyaW5nLCBjb21wb25lbnROYW1lOiBzdHJpbmcsIGNvbXBvbmVudElkOiBzdHJpbmcpOiB2b2lkXG5cbiAgLyoqIGNhbGxlZCBhZnRlciByZW1vdmluZyBhIGNvbXBvbmVudCBmcm9tIHRoZSBlbnRpdHkgKi9cbiAgcmVtb3ZlRW50aXR5Q29tcG9uZW50KGVudGl0eUlkOiBzdHJpbmcsIGNvbXBvbmVudE5hbWU6IHN0cmluZyk6IHZvaWRcblxuICAvKiogc2V0IGEgbmV3IHBhcmVudCBmb3IgdGhlIGVudGl0eSAqL1xuICBzZXRQYXJlbnQoZW50aXR5SWQ6IHN0cmluZywgcGFyZW50SWQ6IHN0cmluZyk6IHZvaWRcblxuICAvLyBRVUVSWVxuXG4gIHF1ZXJ5KHF1ZXJ5SWQ6IHN0cmluZywgcGF5bG9hZDogYW55KTogdm9pZFxuXG4gIC8vIENPTVBPTkVOVFNcblxuICAvKiogY2FsbGVkIGFmdGVyIGNyZWF0aW5nIGEgY29tcG9uZW50IGluIHRoZSBrZXJuZWwgICovXG4gIGNvbXBvbmVudENyZWF0ZWQoY29tcG9uZW50SWQ6IHN0cmluZywgY29tcG9uZW50TmFtZTogc3RyaW5nLCBjbGFzc0lkOiBudW1iZXIpOiB2b2lkXG5cbiAgLyoqIGNvbGxlZCBhZnRlciByZW1vdmluZyBhIGNvbXBvbmVudCBmcm9tIHRoZSBrZXJuZWwgKi9cbiAgY29tcG9uZW50RGlzcG9zZWQoY29tcG9uZW50SWQ6IHN0cmluZyk6IHZvaWRcblxuICAvKiogY2FsbGVkIGFmdGVyIGdsb2JhbGx5IHVwZGF0aW5nIGEgY29tcG9uZW50ICovXG4gIGNvbXBvbmVudFVwZGF0ZWQoY29tcG9uZW50SWQ6IHN0cmluZywganNvbjogc3RyaW5nKTogdm9pZFxuXG4gIC8vIEVWRU5UU1xuXG4gIC8qKiBldmVudCBmcm9tIHRoZSBlbmdpbmUgKi9cbiAgb25FdmVudChjYjogKGV2ZW50OiBFbmdpbmVFdmVudCkgPT4gdm9pZCk6IHZvaWRcblxuICAvKiogc3Vic2NyaWJlIHRvIHNwZWNpZmljIGV2ZW50cywgZXZlbnRzIHdpbGwgYmUgaGFuZGxlZCBieSB0aGUgb25FdmVudCBmdW5jdGlvbiAqL1xuICBzdWJzY3JpYmUoZXZlbnROYW1lOiBzdHJpbmcpOiB2b2lkXG5cbiAgLyoqIHVuc3Vic2NyaWJlIHRvIHNwZWNpZmljIGV2ZW50ICovXG4gIHVuc3Vic2NyaWJlKGV2ZW50TmFtZTogc3RyaW5nKTogdm9pZFxuXG4gIC8vIE1PRFVMRVNcblxuICAvKiogbG9hZCBhIG1vZHVsZSAqL1xuICBsb2FkTW9kdWxlKG1vZHVsZU5hbWU6IHN0cmluZyk6IFByb21pc2VMaWtlPE1vZHVsZURlc2NyaXB0b3I+XG5cbiAgLyoqIGNhbGxlZCB3aGVuIGNhbGxpbmcgYSBtb2R1bGUgbWV0aG9kICovXG4gIGNhbGxScGMocnBjSGFuZGxlOiBzdHJpbmcsIG1ldGhvZE5hbWU6IHN0cmluZywgYXJnczogQXJyYXlMaWtlPGFueT4pOiBQcm9taXNlTGlrZTxhbnk+XG59XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBJbnB1dEV2ZW50UmVzdWx0ID0ge1xuICAvKiogT3JpZ2luIG9mIHRoZSByYXksIHJlbGF0aXZlIHRvIHRoZSBzY2VuZSAqL1xuICBvcmlnaW46IFJlYWRPbmx5VmVjdG9yM1xuICAvKiogRGlyZWN0aW9uIHZlY3RvciBvZiB0aGUgcmF5IChub3JtYWxpemVkKSAqL1xuICBkaXJlY3Rpb246IFJlYWRPbmx5VmVjdG9yM1xuICAvKiogSUQgb2YgdGhlIHBvaW50ZXIgdGhhdCB0cmlnZ2VyZWQgdGhlIGV2ZW50ICovXG4gIGJ1dHRvbklkOiBudW1iZXJcbiAgLyoqIERvZXMgdGhpcyBwb2ludGVyIGV2ZW50IGhpdCBhbnkgb2JqZWN0PyAqL1xuICBoaXQ/OiB7XG4gICAgLyoqIExlbmd0aCBvZiB0aGUgcmF5ICovXG4gICAgbGVuZ3RoOiBudW1iZXJcbiAgICAvKiogSWYgdGhlIHJheSBoaXRzIGEgbWVzaCB0aGUgaW50ZXJzZWN0aW9uIHBvaW50IHdpbGwgYmUgdGhpcyAqL1xuICAgIGhpdFBvaW50OiBSZWFkT25seVZlY3RvcjNcbiAgICAvKiogSWYgdGhlIG1lc2ggaGFzIGEgbmFtZSwgaXQgd2lsbCBiZSBhc3NpZ25lZCB0byBtZXNoTmFtZSAqL1xuICAgIG1lc2hOYW1lOiBzdHJpbmdcbiAgICAvKiogTm9ybWFsIG9mIHRoZSBoaXQgKi9cbiAgICBub3JtYWw6IFJlYWRPbmx5VmVjdG9yM1xuICAgIC8qKiBOb3JtYWwgb2YgdGhlIGhpdCwgaW4gd29ybGQgc3BhY2UgKi9cbiAgICB3b3JsZE5vcm1hbDogUmVhZE9ubHlWZWN0b3IzXG4gICAgLyoqIEhpdCBlbnRpdHkgSUQgaWYgYW55ICovXG4gICAgZW50aXR5SWQ6IHN0cmluZ1xuICB9XG59XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgZW51bSBJbnB1dEV2ZW50VHlwZSB7XG4gIERPV04sXG4gIFVQXG59XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBHbG9iYWxJbnB1dEV2ZW50UmVzdWx0ID0gSW5wdXRFdmVudFJlc3VsdCAmIHtcbiAgdHlwZTogSW5wdXRFdmVudFR5cGVcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUV2ZW50cyB7XG4gIC8qKlxuICAgKiBgcG9zaXRpb25DaGFuZ2VkYCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgcG9zaXRpb24gb2YgdGhlIGNhbWVyYSBjaGFuZ2VzXG4gICAqIFRoaXMgZXZlbnQgaXMgdGhyb3R0bGVkIHRvIDEwIHRpbWVzIHBlciBzZWNvbmQuXG4gICAqL1xuICBwb3NpdGlvbkNoYW5nZWQ6IHtcbiAgICAvKiogQ2FtZXJhIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHBhcmNlbCBvZiB0aGUgc2NlbmUgKi9cbiAgICBwb3NpdGlvbjogUmVhZE9ubHlWZWN0b3IzXG5cbiAgICAvKiogQ2FtZXJhIHBvc2l0aW9uLCB0aGlzIGlzIGEgYWJzb2x1dGUgd29ybGQgcG9zaXRpb24gKi9cbiAgICBjYW1lcmFQb3NpdGlvbjogUmVhZE9ubHlWZWN0b3IzXG5cbiAgICAvKiogRXllIGhlaWdodCwgaW4gbWV0ZXJzLiAqL1xuICAgIHBsYXllckhlaWdodDogbnVtYmVyXG4gIH1cblxuICAvKipcbiAgICogYHJvdGF0aW9uQ2hhbmdlZGAgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHJvdGF0aW9uIG9mIHRoZSBjYW1lcmEgY2hhbmdlcy5cbiAgICogVGhpcyBldmVudCBpcyB0aHJvdHRsZWQgdG8gMTAgdGltZXMgcGVyIHNlY29uZC5cbiAgICovXG4gIHJvdGF0aW9uQ2hhbmdlZDoge1xuICAgIC8qKiBEZWdyZWUgdmVjdG9yLiBTYW1lIGFzIGVudGl0aWVzICovXG4gICAgcm90YXRpb246IFJlYWRPbmx5VmVjdG9yM1xuICAgIC8qKiBSb3RhdGlvbiBxdWF0ZXJuaW9uLCB1c2VmdWwgaW4gc29tZSBzY2VuYXJpb3MuICovXG4gICAgcXVhdGVybmlvbjogUmVhZE9ubHlRdWF0ZXJuaW9uXG4gIH1cblxuICAvKipcbiAgICogYHBvaW50ZXJVcGAgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHVzZXIgcmVsZWFzZXMgYW4gaW5wdXQgcG9pbnRlci5cbiAgICogSXQgY291bGQgYmUgYSBWUiBjb250cm9sbGVyLCBhIHRvdWNoIHNjcmVlbiBvciB0aGUgbW91c2UuXG4gICAqL1xuICBwb2ludGVyVXA6IElucHV0RXZlbnRSZXN1bHRcblxuICAvKipcbiAgICogYHBvaW50ZXJEb3duYCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgdXNlciBwcmVzcyBhbiBpbnB1dCBwb2ludGVyLlxuICAgKiBJdCBjb3VsZCBiZSBhIFZSIGNvbnRyb2xsZXIsIGEgdG91Y2ggc2NyZWVuIG9yIHRoZSBtb3VzZS5cbiAgICovXG4gIHBvaW50ZXJEb3duOiBJbnB1dEV2ZW50UmVzdWx0XG5cbiAgLyoqXG4gICAqIGBwb2ludGVyRXZlbnRgIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSB1c2VyIHByZXNzIG9yIHJlbGVhc2VzIGFuIGlucHV0IHBvaW50ZXIuXG4gICAqIEl0IGNvdWxkIGJlIGEgVlIgY29udHJvbGxlciwgYSB0b3VjaCBzY3JlZW4gb3IgdGhlIG1vdXNlLlxuICAgKi9cbiAgcG9pbnRlckV2ZW50OiBHbG9iYWxJbnB1dEV2ZW50UmVzdWx0XG5cbiAgLyoqXG4gICAqIGByYXljYXN0UmVzcG9uc2VgIGlzIHRyaWdnZXJlZCBpbiByZXNwb25zZSB0byBhIHJheWNhc3QgcXVlcnlcbiAgICovXG4gIHJheWNhc3RSZXNwb25zZTogUmF5Y2FzdFJlc3BvbnNlPGFueT5cblxuICAvKipcbiAgICogYGNoYXRNZXNzYWdlYCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgdXNlciBzZW5kcyBhIG1lc3NhZ2UgdGhyb3VnaCBjaGF0IGVudGl0eS5cbiAgICovXG4gIGNoYXRNZXNzYWdlOiB7XG4gICAgaWQ6IHN0cmluZ1xuICAgIHNlbmRlcjogc3RyaW5nXG4gICAgbWVzc2FnZTogc3RyaW5nXG4gICAgaXNDb21tYW5kOiBib29sZWFuXG4gIH1cblxuICAvKipcbiAgICogYG9uQ2hhbmdlYCBpcyB0cmlnZ2VyZWQgd2hlbiBhbiBlbnRpdHkgY2hhbmdlcyBpdHMgb3duIGludGVybmFsIHN0YXRlLlxuICAgKiBEaXNwYXRjaGVkIGJ5IHRoZSBgdWktKmAgZW50aXRpZXMgd2hlbiB0aGVpciB2YWx1ZSBpcyBjaGFuZ2VkLiBJdCB0cmlnZ2VycyBhIGNhbGxiYWNrLlxuICAgKiBOb3RpY2U6IE9ubHkgZW50aXRpZXMgd2l0aCBJRCB3aWxsIGJlIGxpc3RlbmluZyBmb3IgY2xpY2sgZXZlbnRzLlxuICAgKi9cbiAgb25DaGFuZ2U6IHtcbiAgICB2YWx1ZT86IGFueVxuICAgIC8qKiBJRCBvZiB0aGUgcG9pbnRlciB0aGF0IHRyaWdnZXJlZCB0aGUgZXZlbnQgKi9cbiAgICBwb2ludGVySWQ/OiBudW1iZXJcbiAgfVxuXG4gIC8qKlxuICAgKiBgb25FbnRlcmAgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHVzZXIgaGl0cyB0aGUgXCJFbnRlclwiIGtleSBmcm9tIHRoZSBrZXlib2FyZFxuICAgKiBVc2VkIHByaW5jaXBhbGx5IGJ5IHRoZSBDaGF0IGludGVybmFsIHNjZW5lXG4gICAqL1xuICBvbkVudGVyOiB7fVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogYG9uUG9pbnRlckxvY2tgIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgd29ybGQgY2FudmFzIGFuZCB0aGVcbiAgICogcG9pbnRlciBsb2NrcyB0byBpdCBzbyB0aGUgcG9pbnRlciBtb3ZlcyB0aGUgY2FtZXJhXG4gICAqL1xuICBvblBvaW50ZXJMb2NrOiB7fVxuXG4gIC8qKlxuICAgKiBgb25BbmltYXRpb25FbmRgIGlzIHRyaWdnZXJlZCB3aGVuIGFuIGFuaW1hdGlvbiBjbGlwIGdldHMgZmluaXNoXG4gICAqL1xuICBvbkFuaW1hdGlvbkVuZDoge1xuICAgIGNsaXBOYW1lOiBzdHJpbmdcbiAgfVxuXG4gIC8qKlxuICAgKiBgb25Gb2N1c2AgaXMgdHJpZ2dlcmVkIHdoZW4gYW4gZW50aXR5IGZvY3VzIGlzIGFjdGl2ZS5cbiAgICogRGlzcGF0Y2hlZCBieSB0aGUgYHVpLWlucHV0YCBhbmQgYHVpLXBhc3N3b3JkYCBlbnRpdGllcyB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKiBJdCB0cmlnZ2VycyBhIGNhbGxiYWNrLlxuICAgKlxuICAgKiBOb3RpY2U6IE9ubHkgZW50aXRpZXMgd2l0aCBJRCB3aWxsIGJlIGxpc3RlbmluZyBmb3IgY2xpY2sgZXZlbnRzLlxuICAgKi9cbiAgb25Gb2N1czoge1xuICAgIC8qKiBJRCBvZiB0aGUgZW50aXRpeSBvZiB0aGUgZXZlbnQgKi9cbiAgICBlbnRpdHlJZDogc3RyaW5nXG4gICAgLyoqIElEIG9mIHRoZSBwb2ludGVyIHRoYXQgdHJpZ2dlcmVkIHRoZSBldmVudCAqL1xuICAgIHBvaW50ZXJJZDogbnVtYmVyXG4gIH1cblxuICAvKipcbiAgICogYG9uQmx1cmAgaXMgdHJpZ2dlcmVkIHdoZW4gYW4gZW50aXR5IGxvc2VzIGl0cyBmb2N1cy5cbiAgICogRGlzcGF0Y2hlZCBieSB0aGUgYHVpLWlucHV0YCBhbmQgYHVpLXBhc3N3b3JkYCBlbnRpdGllcyB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKiAgSXQgdHJpZ2dlcnMgYSBjYWxsYmFjay5cbiAgICpcbiAgICogTm90aWNlOiBPbmx5IGVudGl0aWVzIHdpdGggSUQgd2lsbCBiZSBsaXN0ZW5pbmcgZm9yIGNsaWNrIGV2ZW50cy5cbiAgICovXG4gIG9uQmx1cjoge1xuICAgIC8qKiBJRCBvZiB0aGUgZW50aXRpeSBvZiB0aGUgZXZlbnQgKi9cbiAgICBlbnRpdHlJZDogc3RyaW5nXG4gICAgLyoqIElEIG9mIHRoZSBwb2ludGVyIHRoYXQgdHJpZ2dlcmVkIHRoZSBldmVudCAqL1xuICAgIHBvaW50ZXJJZDogbnVtYmVyXG4gIH1cblxuICAvKiogVGhlIG9uQ2xpY2sgZXZlbnQgaXMgb25seSB1c2VkIGZvciBVSSBlbGVtZW50cyAqL1xuICBvbkNsaWNrOiB7XG4gICAgZW50aXR5SWQ6IHN0cmluZ1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZXZlbnQgZ2V0cyB0cmlnZ2VyZWQgd2hlbiBhbiBlbnRpdHkgbGVhdmVzIHRoZSBzY2VuZSBmZW5jZXMuXG4gICAqL1xuICBlbnRpdHlPdXRPZlNjZW5lOiB7XG4gICAgZW50aXR5SWQ6IHN0cmluZ1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZXZlbnQgZ2V0cyB0cmlnZ2VyZWQgd2hlbiBhbiBlbnRpdHkgZW50ZXJzIHRoZSBzY2VuZSBmZW5jZXMuXG4gICAqL1xuICBlbnRpdHlCYWNrSW5TY2VuZToge1xuICAgIGVudGl0eUlkOiBzdHJpbmdcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGV2ZW50IGdldHMgdHJpZ2dlcmVkIGFmdGVyIHJlY2VpdmluZyBhIGNvbW1zIG1lc3NhZ2UuXG4gICAqL1xuICBjb21tczoge1xuICAgIHNlbmRlcjogc3RyaW5nXG4gICAgbWVzc2FnZTogc3RyaW5nXG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyB0cmlnZ2VyZWQgb25jZSB0aGUgc2NlbmUgc2hvdWxkIHN0YXJ0LlxuICAgKi9cbiAgc2NlbmVTdGFydDoge31cblxuICAvKipcbiAgICogVGhpcyBpcyB0cmlnZ2VyZWQgb25jZSB0aGUgYnVpbGRlciBzY2VuZSBpcyBsb2FkZWQuXG4gICAqL1xuICBidWlsZGVyU2NlbmVTdGFydDoge31cblxuICAvKipcbiAgICogVGhpcyBpcyB0cmlnZ2VyZWQgb25jZSB0aGUgYnVpbGRlciBzY2VuZSBpcyB1bmxvYWRlZC5cbiAgICovXG4gIGJ1aWxkZXJTY2VuZVVubG9hZGVkOiB7fVxuXG4gIC8qKlxuICAgKiBBZnRlciBjaGVja2luZyBlbnRpdGllcyBvdXRzaWRlIHRoZSBmZW5jZXMsIGlmIGFueSBpcyBvdXRzaWRlLCB0aGlzIGV2ZW50XG4gICAqIHdpbGwgYmUgdHJpZ2dlcmVkIHdpdGggYWxsIHRoZSBlbnRpdGllcyBvdXRzaWRlIHRoZSBzY2VuZS5cbiAgICovXG4gIGVudGl0aWVzT3V0T2ZCb3VuZGFyaWVzOiB7XG4gICAgZW50aXRpZXM6IHN0cmluZ1tdXG4gIH1cblxuICB1dWlkRXZlbnQ6IHtcbiAgICB1dWlkOiBzdHJpbmdcbiAgICBwYXlsb2FkOiBhbnlcbiAgfVxuXG4gIG9uVGV4dFN1Ym1pdDoge1xuICAgIHRleHQ6IHN0cmluZ1xuICB9XG5cbiAgbWV0cmljc1VwZGF0ZToge1xuICAgIGdpdmVuOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+XG4gICAgbGltaXQ6IFJlY29yZDxzdHJpbmcsIG51bWJlcj5cbiAgfVxuXG4gIGxpbWl0c0V4Y2VlZGVkOiB7XG4gICAgZ2l2ZW46IFJlY29yZDxzdHJpbmcsIG51bWJlcj5cbiAgICBsaW1pdDogUmVjb3JkPHN0cmluZywgbnVtYmVyPlxuICB9XG5cbiAgLyoqIEZvciBnaXptb3MgKi9cbiAgZ2l6bW9FdmVudDogR2l6bW9EcmFnRW5kRXZlbnQgfCBHaXptb1NlbGVjdGVkRXZlbnRcblxuICAvLyBAaW50ZXJuYWxcbiAgZXh0ZXJuYWxBY3Rpb246IHtcbiAgICB0eXBlOiBzdHJpbmdcbiAgICBba2V5OiBzdHJpbmddOiBhbnlcbiAgfVxufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgR2l6bW9EcmFnRW5kRXZlbnQgPSB7XG4gIHR5cGU6ICdnaXptb0RyYWdFbmRlZCdcbiAgdHJhbnNmb3JtOiB7XG4gICAgcG9zaXRpb246IFJlYWRPbmx5VmVjdG9yM1xuICAgIHJvdGF0aW9uOiBSZWFkT25seVF1YXRlcm5pb25cbiAgICBzY2FsZTogUmVhZE9ubHlWZWN0b3IzXG4gIH1cbiAgZW50aXR5SWQ6IHN0cmluZ1xufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgR2l6bW9TZWxlY3RlZEV2ZW50ID0ge1xuICB0eXBlOiAnZ2l6bW9TZWxlY3RlZCdcbiAgZ2l6bW9UeXBlOiAnTU9WRScgfCAnUk9UQVRFJyB8ICdTQ0FMRScgfCAnTk9ORSdcbiAgZW50aXR5SWQ6IHN0cmluZ1xufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgSUV2ZW50TmFtZXMgPSBrZXlvZiBJRXZlbnRzXG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBFbmdpbmVFdmVudDxUIGV4dGVuZHMgSUV2ZW50TmFtZXMgPSBJRXZlbnROYW1lcywgViA9IElFdmVudHNbVF0+ID0ge1xuICAvKiogZXZlbnROYW1lICovXG4gIHR5cGU6IFRcbiAgZGF0YTogVlxufVxuXG4vLyBAaW50ZXJuYWxcbmV4cG9ydCBjb25zdCBBVkFUQVJfT0JTRVJWQUJMRSA9ICdBVkFUQVJfT0JTRVJWQUJMRSdcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIFdlYXJhYmxlSWQgPSBzdHJpbmdcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIEF2YXRhckZvclJlbmRlcmVyID0ge1xuICBib2R5U2hhcGU6IFdlYXJhYmxlSWRcbiAgc2tpbkNvbG9yOiBSZWFkT25seUNvbG9yNFxuICBoYWlyQ29sb3I6IFJlYWRPbmx5Q29sb3I0XG4gIGV5ZUNvbG9yOiBSZWFkT25seUNvbG9yNFxuICB3ZWFyYWJsZXM6IFdlYXJhYmxlSWRbXVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgV2VhcmFibGUgPSB7XG4gIGlkOiBXZWFyYWJsZUlkXG4gIHR5cGU6ICd3ZWFyYWJsZSdcbiAgY2F0ZWdvcnk6IHN0cmluZ1xuICBiYXNlVXJsOiBzdHJpbmdcbiAgdGFnczogc3RyaW5nW11cbiAgcmVwcmVzZW50YXRpb25zOiBCb2R5U2hhcGVSZXNwcmVzZW50YXRpb25bXVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgQm9keVNoYXBlUmVzcHJlc2VudGF0aW9uID0ge1xuICBib2R5U2hhcGVzOiBzdHJpbmdbXVxuICBtYWluRmlsZTogc3RyaW5nXG4gIGNvbnRlbnRzOiBGaWxlQW5kSGFzaFtdXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBGaWxlQW5kSGFzaCA9IHtcbiAgZmlsZTogc3RyaW5nXG4gIGhhc2g6IHN0cmluZ1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgUHJvZmlsZUZvclJlbmRlcmVyID0ge1xuICB1c2VySWQ6IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbiAgZGVzY3JpcHRpb246IHN0cmluZ1xuICBlbWFpbDogc3RyaW5nXG4gIGF2YXRhcjogQXZhdGFyRm9yUmVuZGVyZXJcbiAgaW52ZW50b3J5OiBXZWFyYWJsZUlkW11cbiAgc25hcHNob3RzOiB7XG4gICAgZmFjZTogc3RyaW5nXG4gICAgYm9keTogc3RyaW5nXG4gIH1cbiAgdmVyc2lvbjogbnVtYmVyXG4gIHVwZGF0ZWRBdDogbnVtYmVyXG4gIGNyZWF0ZWRBdDogbnVtYmVyXG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Types.ts?')},"./packages/decentraland-ecs/src/decentraland/UIEvents.ts":
/*!****************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/UIEvents.ts ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ \"./packages/decentraland-ecs/src/ecs/Component.ts\");\nvar Systems_1 = __webpack_require__(/*! ./Systems */ \"./packages/decentraland-ecs/src/decentraland/Systems.ts\");\nvar Components_1 = __webpack_require__(/*! ./Components */ \"./packages/decentraland-ecs/src/decentraland/Components.ts\");\n/**\n * @public\n */\nvar OnFocus = /** @class */ (function (_super) {\n    __extends(OnFocus, _super);\n    function OnFocus(callback) {\n        var _this = _super.call(this, callback) || this;\n        _this.type = 'onFocus';\n        // This injection is necessary ONLY in events that are ALWAYS turned on and are\n        // not assignable to entities. Like events for the UI elements\n        // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n        Systems_1.uuidEventSystem.handlerMap[_this.uuid] = _this;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnFocus.prototype, \"type\", void 0);\n    OnFocus = __decorate([\n        Component_1.Component('engine.onFocus', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnFocus);\n    return OnFocus;\n}(Components_1.OnUUIDEvent));\nexports.OnFocus = OnFocus;\n/**\n * @public\n */\nvar OnTextSubmit = /** @class */ (function (_super) {\n    __extends(OnTextSubmit, _super);\n    function OnTextSubmit(callback) {\n        var _this = _super.call(this, callback) || this;\n        _this.type = 'onTextSubmit';\n        // This injection is necessary ONLY in events that are ALWAYS turned on and are\n        // not assignable to entities. Like events for the UI elements\n        // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n        Systems_1.uuidEventSystem.handlerMap[_this.uuid] = _this;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnTextSubmit.prototype, \"type\", void 0);\n    OnTextSubmit = __decorate([\n        Component_1.Component('engine.onTextSubmit', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnTextSubmit);\n    return OnTextSubmit;\n}(Components_1.OnUUIDEvent));\nexports.OnTextSubmit = OnTextSubmit;\n/**\n * @public\n */\nvar OnBlur = /** @class */ (function (_super) {\n    __extends(OnBlur, _super);\n    function OnBlur(callback) {\n        var _this = _super.call(this, callback) || this;\n        _this.type = 'onBlur';\n        // This injection is necessary ONLY in events that are ALWAYS turned on and are\n        // not assignable to entities. Like events for the UI elements\n        // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n        Systems_1.uuidEventSystem.handlerMap[_this.uuid] = _this;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnBlur.prototype, \"type\", void 0);\n    OnBlur = __decorate([\n        Component_1.Component('engine.onBlur', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnBlur);\n    return OnBlur;\n}(Components_1.OnUUIDEvent));\nexports.OnBlur = OnBlur;\n/**\n * @public\n */\nvar OnClick = /** @class */ (function (_super) {\n    __extends(OnClick, _super);\n    function OnClick(callback) {\n        var _this = _super.call(this, callback) || this;\n        _this.type = 'onClick';\n        // This injection is necessary ONLY in events that are ALWAYS turned on and are\n        // not assignable to entities. Like events for the UI elements\n        // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n        Systems_1.uuidEventSystem.handlerMap[_this.uuid] = _this;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnClick.prototype, \"type\", void 0);\n    OnClick = __decorate([\n        Component_1.Component('engine.onClick', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnClick);\n    return OnClick;\n}(Components_1.OnUUIDEvent));\nexports.OnClick = OnClick;\n/**\n * @public\n */\nvar OnEnter = /** @class */ (function (_super) {\n    __extends(OnEnter, _super);\n    function OnEnter(callback) {\n        var _this = _super.call(this, callback) || this;\n        _this.type = 'onEnter';\n        // This injection is necessary ONLY in events that are ALWAYS turned on and are\n        // not assignable to entities. Like events for the UI elements\n        // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n        Systems_1.uuidEventSystem.handlerMap[_this.uuid] = _this;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnEnter.prototype, \"type\", void 0);\n    OnEnter = __decorate([\n        Component_1.Component('engine.onEnter', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnEnter);\n    return OnEnter;\n}(Components_1.OnUUIDEvent));\nexports.OnEnter = OnEnter;\n/**\n * @public\n */\nvar OnChanged = /** @class */ (function (_super) {\n    __extends(OnChanged, _super);\n    function OnChanged(callback) {\n        var _this = _super.call(this, callback) || this;\n        _this.type = 'onChange';\n        // This injection is necessary ONLY in events that are ALWAYS turned on and are\n        // not assignable to entities. Like events for the UI elements\n        // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n        Systems_1.uuidEventSystem.handlerMap[_this.uuid] = _this;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnChanged.prototype, \"type\", void 0);\n    OnChanged = __decorate([\n        Component_1.Component('engine.onChange', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnChanged);\n    return OnChanged;\n}(Components_1.OnUUIDEvent));\nexports.OnChanged = OnChanged;\n/**\n * @public\n */\nvar OnPointerDown = /** @class */ (function (_super) {\n    __extends(OnPointerDown, _super);\n    function OnPointerDown(callback) {\n        var _this = _super.call(this, callback) || this;\n        _this.type = 'pointerDown';\n        // This injection is necessary ONLY in events that are ALWAYS turned on and are\n        // not assignable to entities. Like events for the UI elements\n        // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n        Systems_1.uuidEventSystem.handlerMap[_this.uuid] = _this;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnPointerDown.prototype, \"type\", void 0);\n    OnPointerDown = __decorate([\n        Component_1.Component('engine.pointerDown', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnPointerDown);\n    return OnPointerDown;\n}(Components_1.OnUUIDEvent));\nexports.OnPointerDown = OnPointerDown;\n/**\n * @public\n */\nvar OnPointerUp = /** @class */ (function (_super) {\n    __extends(OnPointerUp, _super);\n    function OnPointerUp(callback) {\n        var _this = _super.call(this, callback) || this;\n        _this.type = 'pointerUp';\n        // This injection is necessary ONLY in events that are ALWAYS turned on and are\n        // not assignable to entities. Like events for the UI elements\n        // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n        Systems_1.uuidEventSystem.handlerMap[_this.uuid] = _this;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnPointerUp.prototype, \"type\", void 0);\n    OnPointerUp = __decorate([\n        Component_1.Component('engine.pointerUp', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnPointerUp);\n    return OnPointerUp;\n}(Components_1.OnUUIDEvent));\nexports.OnPointerUp = OnPointerUp;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVUlFdmVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVjZW50cmFsYW5kL1VJRXZlbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDhDQUFpRTtBQUVqRSxxQ0FBMkM7QUFDM0MsMkNBQW9EO0FBRXBEOztHQUVHO0FBRUg7SUFBNkIsMkJBQXNCO0lBR2pELGlCQUFZLFFBQTZDO1FBQXpELFlBQ0Usa0JBQU0sUUFBUSxDQUFDLFNBTWhCO1FBUlEsVUFBSSxHQUFXLFNBQVMsQ0FBQTtRQUcvQiwrRUFBK0U7UUFDL0UsOERBQThEO1FBRTlELCtFQUErRTtRQUMvRSx5QkFBZSxDQUFDLFVBQVUsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSSxDQUFBOztJQUM5QyxDQUFDO0lBUkQ7UUFEQywrQkFBbUIsQ0FBQyxRQUFRO3lDQUNJO0lBRnRCLE9BQU87UUFEbkIscUJBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxxQkFBUSxDQUFDLGFBQWEsQ0FBQztPQUN2QyxPQUFPLENBV25CO0lBQUQsY0FBQztDQUFBLEFBWEQsQ0FBNkIsd0JBQVcsR0FXdkM7QUFYWSwwQkFBTztBQWFwQjs7R0FFRztBQUVIO0lBQWtDLGdDQUEyQjtJQUczRCxzQkFBWSxRQUFrRDtRQUE5RCxZQUNFLGtCQUFNLFFBQVEsQ0FBQyxTQU1oQjtRQVJRLFVBQUksR0FBVyxjQUFjLENBQUE7UUFHcEMsK0VBQStFO1FBQy9FLDhEQUE4RDtRQUU5RCwrRUFBK0U7UUFDL0UseUJBQWUsQ0FBQyxVQUFVLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUksQ0FBQTs7SUFDOUMsQ0FBQztJQVJEO1FBREMsK0JBQW1CLENBQUMsUUFBUTs4Q0FDUztJQUYzQixZQUFZO1FBRHhCLHFCQUFTLENBQUMscUJBQXFCLEVBQUUscUJBQVEsQ0FBQyxhQUFhLENBQUM7T0FDNUMsWUFBWSxDQVd4QjtJQUFELG1CQUFDO0NBQUEsQUFYRCxDQUFrQyx3QkFBVyxHQVc1QztBQVhZLG9DQUFZO0FBYXpCOztHQUVHO0FBRUg7SUFBNEIsMEJBQXFCO0lBRy9DLGdCQUFZLFFBQTRDO1FBQXhELFlBQ0Usa0JBQU0sUUFBUSxDQUFDLFNBTWhCO1FBUlEsVUFBSSxHQUFXLFFBQVEsQ0FBQTtRQUc5QiwrRUFBK0U7UUFDL0UsOERBQThEO1FBRTlELCtFQUErRTtRQUMvRSx5QkFBZSxDQUFDLFVBQVUsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSSxDQUFBOztJQUM5QyxDQUFDO0lBUkQ7UUFEQywrQkFBbUIsQ0FBQyxRQUFRO3dDQUNHO0lBRnJCLE1BQU07UUFEbEIscUJBQVMsQ0FBQyxlQUFlLEVBQUUscUJBQVEsQ0FBQyxhQUFhLENBQUM7T0FDdEMsTUFBTSxDQVdsQjtJQUFELGFBQUM7Q0FBQSxBQVhELENBQTRCLHdCQUFXLEdBV3RDO0FBWFksd0JBQU07QUFhbkI7O0dBRUc7QUFFSDtJQUE2QiwyQkFBc0I7SUFJakQsaUJBQVksUUFBNkM7UUFBekQsWUFDRSxrQkFBTSxRQUFRLENBQUMsU0FNaEI7UUFUUSxVQUFJLEdBQVcsU0FBUyxDQUFBO1FBSS9CLCtFQUErRTtRQUMvRSw4REFBOEQ7UUFFOUQsK0VBQStFO1FBQy9FLHlCQUFlLENBQUMsVUFBVSxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFJLENBQUE7O0lBQzlDLENBQUM7SUFURDtRQURDLCtCQUFtQixDQUFDLFFBQVE7eUNBQ0k7SUFGdEIsT0FBTztRQURuQixxQkFBUyxDQUFDLGdCQUFnQixFQUFFLHFCQUFRLENBQUMsYUFBYSxDQUFDO09BQ3ZDLE9BQU8sQ0FZbkI7SUFBRCxjQUFDO0NBQUEsQUFaRCxDQUE2Qix3QkFBVyxHQVl2QztBQVpZLDBCQUFPO0FBY3BCOztHQUVHO0FBRUg7SUFBNkIsMkJBQXNCO0lBR2pELGlCQUFZLFFBQTZDO1FBQXpELFlBQ0Usa0JBQU0sUUFBUSxDQUFDLFNBTWhCO1FBUlEsVUFBSSxHQUFXLFNBQVMsQ0FBQTtRQUcvQiwrRUFBK0U7UUFDL0UsOERBQThEO1FBRTlELCtFQUErRTtRQUMvRSx5QkFBZSxDQUFDLFVBQVUsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSSxDQUFBOztJQUM5QyxDQUFDO0lBUkQ7UUFEQywrQkFBbUIsQ0FBQyxRQUFRO3lDQUNJO0lBRnRCLE9BQU87UUFEbkIscUJBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxxQkFBUSxDQUFDLGFBQWEsQ0FBQztPQUN2QyxPQUFPLENBV25CO0lBQUQsY0FBQztDQUFBLEFBWEQsQ0FBNkIsd0JBQVcsR0FXdkM7QUFYWSwwQkFBTztBQWFwQjs7R0FFRztBQUVIO0lBQStCLDZCQUF1QjtJQUdwRCxtQkFBWSxRQUE4QztRQUExRCxZQUNFLGtCQUFNLFFBQVEsQ0FBQyxTQU1oQjtRQVJRLFVBQUksR0FBVyxVQUFVLENBQUE7UUFHaEMsK0VBQStFO1FBQy9FLDhEQUE4RDtRQUU5RCwrRUFBK0U7UUFDL0UseUJBQWUsQ0FBQyxVQUFVLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUksQ0FBQTs7SUFDOUMsQ0FBQztJQVJEO1FBREMsK0JBQW1CLENBQUMsUUFBUTsyQ0FDSztJQUZ2QixTQUFTO1FBRHJCLHFCQUFTLENBQUMsaUJBQWlCLEVBQUUscUJBQVEsQ0FBQyxhQUFhLENBQUM7T0FDeEMsU0FBUyxDQVdyQjtJQUFELGdCQUFDO0NBQUEsQUFYRCxDQUErQix3QkFBVyxHQVd6QztBQVhZLDhCQUFTO0FBYXRCOztHQUVHO0FBRUg7SUFBbUMsaUNBQTBCO0lBSTNELHVCQUFZLFFBQWlEO1FBQTdELFlBQ0Usa0JBQU0sUUFBUSxDQUFDLFNBTWhCO1FBVFEsVUFBSSxHQUFXLGFBQWEsQ0FBQTtRQUluQywrRUFBK0U7UUFDL0UsOERBQThEO1FBRTlELCtFQUErRTtRQUMvRSx5QkFBZSxDQUFDLFVBQVUsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSSxDQUFBOztJQUM5QyxDQUFDO0lBVEQ7UUFEQywrQkFBbUIsQ0FBQyxRQUFROytDQUNRO0lBRjFCLGFBQWE7UUFEekIscUJBQVMsQ0FBQyxvQkFBb0IsRUFBRSxxQkFBUSxDQUFDLGFBQWEsQ0FBQztPQUMzQyxhQUFhLENBWXpCO0lBQUQsb0JBQUM7Q0FBQSxBQVpELENBQW1DLHdCQUFXLEdBWTdDO0FBWlksc0NBQWE7QUFjMUI7O0dBRUc7QUFFSDtJQUFpQywrQkFBd0I7SUFJdkQscUJBQVksUUFBK0M7UUFBM0QsWUFDRSxrQkFBTSxRQUFRLENBQUMsU0FNaEI7UUFUUSxVQUFJLEdBQVcsV0FBVyxDQUFBO1FBSWpDLCtFQUErRTtRQUMvRSw4REFBOEQ7UUFFOUQsK0VBQStFO1FBQy9FLHlCQUFlLENBQUMsVUFBVSxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFJLENBQUE7O0lBQzlDLENBQUM7SUFURDtRQURDLCtCQUFtQixDQUFDLFFBQVE7NkNBQ007SUFGeEIsV0FBVztRQUR2QixxQkFBUyxDQUFDLGtCQUFrQixFQUFFLHFCQUFRLENBQUMsYUFBYSxDQUFDO09BQ3pDLFdBQVcsQ0FZdkI7SUFBRCxrQkFBQztDQUFBLEFBWkQsQ0FBaUMsd0JBQVcsR0FZM0M7QUFaWSxrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT2JzZXJ2YWJsZUNvbXBvbmVudCB9IGZyb20gJy4uL2Vjcy9Db21wb25lbnQnXG5pbXBvcnQgeyBJRXZlbnRzIH0gZnJvbSAnLi9UeXBlcydcbmltcG9ydCB7IHV1aWRFdmVudFN5c3RlbSB9IGZyb20gJy4vU3lzdGVtcydcbmltcG9ydCB7IENMQVNTX0lELCBPblVVSURFdmVudCB9IGZyb20gJy4vQ29tcG9uZW50cydcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5vbkZvY3VzJywgQ0xBU1NfSUQuVVVJRF9DQUxMQkFDSylcbmV4cG9ydCBjbGFzcyBPbkZvY3VzIGV4dGVuZHMgT25VVUlERXZlbnQ8J29uRm9jdXMnPiB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9ICdvbkZvY3VzJ1xuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzWydvbkZvY3VzJ10pID0+IHZvaWQpIHtcbiAgICBzdXBlcihjYWxsYmFjaylcbiAgICAvLyBUaGlzIGluamVjdGlvbiBpcyBuZWNlc3NhcnkgT05MWSBpbiBldmVudHMgdGhhdCBhcmUgQUxXQVlTIHR1cm5lZCBvbiBhbmQgYXJlXG4gICAgLy8gbm90IGFzc2lnbmFibGUgdG8gZW50aXRpZXMuIExpa2UgZXZlbnRzIGZvciB0aGUgVUkgZWxlbWVudHNcblxuICAgIC8vIFRPRE8oQnJpYW4pOiBUaGlzIHdpbGwgYmUgcmVtb3ZlZCB3aGVuIFVJIGdldHMgYmFjayB0byB0aGUgZW50aXR5IHBhcmVudGluZy5cbiAgICB1dWlkRXZlbnRTeXN0ZW0uaGFuZGxlck1hcFt0aGlzLnV1aWRdID0gdGhpc1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUub25UZXh0U3VibWl0JywgQ0xBU1NfSUQuVVVJRF9DQUxMQkFDSylcbmV4cG9ydCBjbGFzcyBPblRleHRTdWJtaXQgZXh0ZW5kcyBPblVVSURFdmVudDwnb25UZXh0U3VibWl0Jz4ge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB0eXBlOiBzdHJpbmcgPSAnb25UZXh0U3VibWl0J1xuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzWydvblRleHRTdWJtaXQnXSkgPT4gdm9pZCkge1xuICAgIHN1cGVyKGNhbGxiYWNrKVxuICAgIC8vIFRoaXMgaW5qZWN0aW9uIGlzIG5lY2Vzc2FyeSBPTkxZIGluIGV2ZW50cyB0aGF0IGFyZSBBTFdBWVMgdHVybmVkIG9uIGFuZCBhcmVcbiAgICAvLyBub3QgYXNzaWduYWJsZSB0byBlbnRpdGllcy4gTGlrZSBldmVudHMgZm9yIHRoZSBVSSBlbGVtZW50c1xuXG4gICAgLy8gVE9ETyhCcmlhbik6IFRoaXMgd2lsbCBiZSByZW1vdmVkIHdoZW4gVUkgZ2V0cyBiYWNrIHRvIHRoZSBlbnRpdHkgcGFyZW50aW5nLlxuICAgIHV1aWRFdmVudFN5c3RlbS5oYW5kbGVyTWFwW3RoaXMudXVpZF0gPSB0aGlzXG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5vbkJsdXInLCBDTEFTU19JRC5VVUlEX0NBTExCQUNLKVxuZXhwb3J0IGNsYXNzIE9uQmx1ciBleHRlbmRzIE9uVVVJREV2ZW50PCdvbkJsdXInPiB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9ICdvbkJsdXInXG4gIGNvbnN0cnVjdG9yKGNhbGxiYWNrOiAoZXZlbnQ6IElFdmVudHNbJ29uQmx1ciddKSA9PiB2b2lkKSB7XG4gICAgc3VwZXIoY2FsbGJhY2spXG4gICAgLy8gVGhpcyBpbmplY3Rpb24gaXMgbmVjZXNzYXJ5IE9OTFkgaW4gZXZlbnRzIHRoYXQgYXJlIEFMV0FZUyB0dXJuZWQgb24gYW5kIGFyZVxuICAgIC8vIG5vdCBhc3NpZ25hYmxlIHRvIGVudGl0aWVzLiBMaWtlIGV2ZW50cyBmb3IgdGhlIFVJIGVsZW1lbnRzXG5cbiAgICAvLyBUT0RPKEJyaWFuKTogVGhpcyB3aWxsIGJlIHJlbW92ZWQgd2hlbiBVSSBnZXRzIGJhY2sgdG8gdGhlIGVudGl0eSBwYXJlbnRpbmcuXG4gICAgdXVpZEV2ZW50U3lzdGVtLmhhbmRsZXJNYXBbdGhpcy51dWlkXSA9IHRoaXNcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLm9uQ2xpY2snLCBDTEFTU19JRC5VVUlEX0NBTExCQUNLKVxuZXhwb3J0IGNsYXNzIE9uQ2xpY2sgZXh0ZW5kcyBPblVVSURFdmVudDwnb25DbGljayc+IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nID0gJ29uQ2xpY2snXG5cbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1snb25DbGljayddKSA9PiB2b2lkKSB7XG4gICAgc3VwZXIoY2FsbGJhY2spXG4gICAgLy8gVGhpcyBpbmplY3Rpb24gaXMgbmVjZXNzYXJ5IE9OTFkgaW4gZXZlbnRzIHRoYXQgYXJlIEFMV0FZUyB0dXJuZWQgb24gYW5kIGFyZVxuICAgIC8vIG5vdCBhc3NpZ25hYmxlIHRvIGVudGl0aWVzLiBMaWtlIGV2ZW50cyBmb3IgdGhlIFVJIGVsZW1lbnRzXG5cbiAgICAvLyBUT0RPKEJyaWFuKTogVGhpcyB3aWxsIGJlIHJlbW92ZWQgd2hlbiBVSSBnZXRzIGJhY2sgdG8gdGhlIGVudGl0eSBwYXJlbnRpbmcuXG4gICAgdXVpZEV2ZW50U3lzdGVtLmhhbmRsZXJNYXBbdGhpcy51dWlkXSA9IHRoaXNcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLm9uRW50ZXInLCBDTEFTU19JRC5VVUlEX0NBTExCQUNLKVxuZXhwb3J0IGNsYXNzIE9uRW50ZXIgZXh0ZW5kcyBPblVVSURFdmVudDwnb25FbnRlcic+IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nID0gJ29uRW50ZXInXG4gIGNvbnN0cnVjdG9yKGNhbGxiYWNrOiAoZXZlbnQ6IElFdmVudHNbJ29uRW50ZXInXSkgPT4gdm9pZCkge1xuICAgIHN1cGVyKGNhbGxiYWNrKVxuICAgIC8vIFRoaXMgaW5qZWN0aW9uIGlzIG5lY2Vzc2FyeSBPTkxZIGluIGV2ZW50cyB0aGF0IGFyZSBBTFdBWVMgdHVybmVkIG9uIGFuZCBhcmVcbiAgICAvLyBub3QgYXNzaWduYWJsZSB0byBlbnRpdGllcy4gTGlrZSBldmVudHMgZm9yIHRoZSBVSSBlbGVtZW50c1xuXG4gICAgLy8gVE9ETyhCcmlhbik6IFRoaXMgd2lsbCBiZSByZW1vdmVkIHdoZW4gVUkgZ2V0cyBiYWNrIHRvIHRoZSBlbnRpdHkgcGFyZW50aW5nLlxuICAgIHV1aWRFdmVudFN5c3RlbS5oYW5kbGVyTWFwW3RoaXMudXVpZF0gPSB0aGlzXG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5vbkNoYW5nZScsIENMQVNTX0lELlVVSURfQ0FMTEJBQ0spXG5leHBvcnQgY2xhc3MgT25DaGFuZ2VkIGV4dGVuZHMgT25VVUlERXZlbnQ8J29uQ2hhbmdlJz4ge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB0eXBlOiBzdHJpbmcgPSAnb25DaGFuZ2UnXG4gIGNvbnN0cnVjdG9yKGNhbGxiYWNrOiAoZXZlbnQ6IElFdmVudHNbJ29uQ2hhbmdlJ10pID0+IHZvaWQpIHtcbiAgICBzdXBlcihjYWxsYmFjaylcbiAgICAvLyBUaGlzIGluamVjdGlvbiBpcyBuZWNlc3NhcnkgT05MWSBpbiBldmVudHMgdGhhdCBhcmUgQUxXQVlTIHR1cm5lZCBvbiBhbmQgYXJlXG4gICAgLy8gbm90IGFzc2lnbmFibGUgdG8gZW50aXRpZXMuIExpa2UgZXZlbnRzIGZvciB0aGUgVUkgZWxlbWVudHNcblxuICAgIC8vIFRPRE8oQnJpYW4pOiBUaGlzIHdpbGwgYmUgcmVtb3ZlZCB3aGVuIFVJIGdldHMgYmFjayB0byB0aGUgZW50aXR5IHBhcmVudGluZy5cbiAgICB1dWlkRXZlbnRTeXN0ZW0uaGFuZGxlck1hcFt0aGlzLnV1aWRdID0gdGhpc1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUucG9pbnRlckRvd24nLCBDTEFTU19JRC5VVUlEX0NBTExCQUNLKVxuZXhwb3J0IGNsYXNzIE9uUG9pbnRlckRvd24gZXh0ZW5kcyBPblVVSURFdmVudDwncG9pbnRlckRvd24nPiB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9ICdwb2ludGVyRG93bidcblxuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzWydwb2ludGVyRG93biddKSA9PiB2b2lkKSB7XG4gICAgc3VwZXIoY2FsbGJhY2spXG4gICAgLy8gVGhpcyBpbmplY3Rpb24gaXMgbmVjZXNzYXJ5IE9OTFkgaW4gZXZlbnRzIHRoYXQgYXJlIEFMV0FZUyB0dXJuZWQgb24gYW5kIGFyZVxuICAgIC8vIG5vdCBhc3NpZ25hYmxlIHRvIGVudGl0aWVzLiBMaWtlIGV2ZW50cyBmb3IgdGhlIFVJIGVsZW1lbnRzXG5cbiAgICAvLyBUT0RPKEJyaWFuKTogVGhpcyB3aWxsIGJlIHJlbW92ZWQgd2hlbiBVSSBnZXRzIGJhY2sgdG8gdGhlIGVudGl0eSBwYXJlbnRpbmcuXG4gICAgdXVpZEV2ZW50U3lzdGVtLmhhbmRsZXJNYXBbdGhpcy51dWlkXSA9IHRoaXNcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLnBvaW50ZXJVcCcsIENMQVNTX0lELlVVSURfQ0FMTEJBQ0spXG5leHBvcnQgY2xhc3MgT25Qb2ludGVyVXAgZXh0ZW5kcyBPblVVSURFdmVudDwncG9pbnRlclVwJz4ge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB0eXBlOiBzdHJpbmcgPSAncG9pbnRlclVwJ1xuXG4gIGNvbnN0cnVjdG9yKGNhbGxiYWNrOiAoZXZlbnQ6IElFdmVudHNbJ3BvaW50ZXJVcCddKSA9PiB2b2lkKSB7XG4gICAgc3VwZXIoY2FsbGJhY2spXG4gICAgLy8gVGhpcyBpbmplY3Rpb24gaXMgbmVjZXNzYXJ5IE9OTFkgaW4gZXZlbnRzIHRoYXQgYXJlIEFMV0FZUyB0dXJuZWQgb24gYW5kIGFyZVxuICAgIC8vIG5vdCBhc3NpZ25hYmxlIHRvIGVudGl0aWVzLiBMaWtlIGV2ZW50cyBmb3IgdGhlIFVJIGVsZW1lbnRzXG5cbiAgICAvLyBUT0RPKEJyaWFuKTogVGhpcyB3aWxsIGJlIHJlbW92ZWQgd2hlbiBVSSBnZXRzIGJhY2sgdG8gdGhlIGVudGl0eSBwYXJlbnRpbmcuXG4gICAgdXVpZEV2ZW50U3lzdGVtLmhhbmRsZXJNYXBbdGhpcy51dWlkXSA9IHRoaXNcbiAgfVxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/UIEvents.ts?")},"./packages/decentraland-ecs/src/decentraland/UIShapes.ts":
/*!****************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/UIShapes.ts ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nvar Components_1 = __webpack_require__(/*! ./Components */ "./packages/decentraland-ecs/src/decentraland/Components.ts");\nvar math_1 = __webpack_require__(/*! ./math */ "./packages/decentraland-ecs/src/decentraland/math/index.ts");\n/**\n * @public\n */\nvar UIShape = /** @class */ (function (_super) {\n    __extends(UIShape, _super);\n    function UIShape(parent) {\n        var _this = _super.call(this) || this;\n        /**\n         * Defines if the entity and its children should be rendered\n         */\n        _this.name = null;\n        _this.visible = true;\n        _this.opacity = 1;\n        _this.hAlign = \'center\';\n        _this.vAlign = \'center\';\n        _this.width = \'100px\';\n        _this.height = \'50px\';\n        _this.positionX = \'0px\';\n        _this.positionY = \'0px\';\n        _this.isPointerBlocker = true;\n        if (parent) {\n            _this._parent = parent;\n            _this.data.parentComponent = Component_1.getComponentId(parent);\n        }\n        return _this;\n    }\n    Object.defineProperty(UIShape.prototype, "parent", {\n        get: function () {\n            return this._parent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UIShape.prototype, "parentComponent", {\n        // @internal\n        get: function () {\n            return this.data.parentComponent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIShape.prototype, "name", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIShape.prototype, "visible", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIShape.prototype, "opacity", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIShape.prototype, "hAlign", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIShape.prototype, "vAlign", void 0);\n    __decorate([\n        Component_1.ObservableComponent.uiValue\n    ], UIShape.prototype, "width", void 0);\n    __decorate([\n        Component_1.ObservableComponent.uiValue\n    ], UIShape.prototype, "height", void 0);\n    __decorate([\n        Component_1.ObservableComponent.uiValue\n    ], UIShape.prototype, "positionX", void 0);\n    __decorate([\n        Component_1.ObservableComponent.uiValue\n    ], UIShape.prototype, "positionY", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIShape.prototype, "isPointerBlocker", void 0);\n    return UIShape;\n}(Component_1.ObservableComponent));\nexports.UIShape = UIShape;\n/**\n * @internal\n * NOTE(Brian): this should be deprecated\n */\nvar UIFullScreen = /** @class */ (function (_super) {\n    __extends(UIFullScreen, _super);\n    function UIFullScreen() {\n        return _super.call(this, null) || this;\n    }\n    UIFullScreen = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_FULLSCREEN_SHAPE)\n    ], UIFullScreen);\n    return UIFullScreen;\n}(UIShape));\nexports.UIFullScreen = UIFullScreen;\n/**\n * @internal\n * NOTE(Brian): this should be deprecated\n */\nvar UIWorldSpace = /** @class */ (function (_super) {\n    __extends(UIWorldSpace, _super);\n    function UIWorldSpace() {\n        return _super.call(this, null) || this;\n    }\n    UIWorldSpace = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_WORLD_SPACE_SHAPE)\n    ], UIWorldSpace);\n    return UIWorldSpace;\n}(UIShape));\nexports.UIWorldSpace = UIWorldSpace;\n/**\n * @public\n */\nvar UICanvas = /** @class */ (function (_super) {\n    __extends(UICanvas, _super);\n    function UICanvas() {\n        return _super.call(this, null) || this;\n    }\n    UICanvas = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_SCREEN_SPACE_SHAPE)\n    ], UICanvas);\n    return UICanvas;\n}(UIShape));\nexports.UICanvas = UICanvas;\n/**\n * @public\n */\nvar UIContainerRect = /** @class */ (function (_super) {\n    __extends(UIContainerRect, _super);\n    function UIContainerRect() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.adaptWidth = false;\n        _this.adaptHeight = false;\n        _this.thickness = 0;\n        _this.color = math_1.Color4.Clear();\n        _this.alignmentUsesSize = true;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerRect.prototype, "adaptWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerRect.prototype, "adaptHeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerRect.prototype, "thickness", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerRect.prototype, "color", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerRect.prototype, "alignmentUsesSize", void 0);\n    UIContainerRect = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_CONTAINER_RECT)\n    ], UIContainerRect);\n    return UIContainerRect;\n}(UIShape));\nexports.UIContainerRect = UIContainerRect;\n/**\n * @public\n */\nvar UIStackOrientation;\n(function (UIStackOrientation) {\n    UIStackOrientation[UIStackOrientation["VERTICAL"] = 0] = "VERTICAL";\n    UIStackOrientation[UIStackOrientation["HORIZONTAL"] = 1] = "HORIZONTAL";\n})(UIStackOrientation = exports.UIStackOrientation || (exports.UIStackOrientation = {}));\n/**\n * @public\n */\nvar UIContainerStack = /** @class */ (function (_super) {\n    __extends(UIContainerStack, _super);\n    function UIContainerStack() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.adaptWidth = true;\n        _this.adaptHeight = true;\n        _this.color = math_1.Color4.Clear();\n        _this.stackOrientation = UIStackOrientation.VERTICAL;\n        _this.spacing = 0;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerStack.prototype, "adaptWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerStack.prototype, "adaptHeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerStack.prototype, "color", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerStack.prototype, "stackOrientation", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerStack.prototype, "spacing", void 0);\n    UIContainerStack = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_CONTAINER_STACK)\n    ], UIContainerStack);\n    return UIContainerStack;\n}(UIShape));\nexports.UIContainerStack = UIContainerStack;\n/**\n * @public\n */\nvar UIButton = /** @class */ (function (_super) {\n    __extends(UIButton, _super);\n    function UIButton() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.fontSize = 10;\n        _this.fontWeight = \'normal\';\n        _this.thickness = 0;\n        _this.cornerRadius = 0;\n        _this.color = math_1.Color4.White();\n        _this.background = math_1.Color4.White();\n        _this.paddingTop = 0;\n        _this.paddingRight = 0;\n        _this.paddingBottom = 0;\n        _this.paddingLeft = 0;\n        _this.shadowBlur = 0;\n        _this.shadowOffsetX = 0;\n        _this.shadowOffsetY = 0;\n        _this.shadowColor = math_1.Color4.Black();\n        _this.text = \'button\';\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "fontSize", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "fontWeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "thickness", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "cornerRadius", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "color", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "background", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "paddingTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "paddingRight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "paddingBottom", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "paddingLeft", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "shadowBlur", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "shadowOffsetX", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "shadowOffsetY", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "shadowColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "text", void 0);\n    UIButton = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_BUTTON_SHAPE)\n    ], UIButton);\n    return UIButton;\n}(UIShape));\nexports.UIButton = UIButton;\n/**\n * @public\n */\nvar UIText = /** @class */ (function (_super) {\n    __extends(UIText, _super);\n    function UIText() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.outlineWidth = 0;\n        _this.outlineColor = math_1.Color4.White();\n        _this.color = math_1.Color4.White();\n        _this.fontSize = 10;\n        _this.fontAutoSize = false;\n        _this.fontWeight = \'normal\';\n        _this.value = \'\';\n        _this.lineSpacing = 0;\n        _this.lineCount = 0;\n        _this.adaptWidth = false;\n        _this.adaptHeight = false;\n        _this.textWrapping = false;\n        _this.shadowBlur = 0;\n        _this.shadowOffsetX = 0;\n        _this.shadowOffsetY = 0;\n        _this.shadowColor = math_1.Color4.Black();\n        _this.hTextAlign = \'left\';\n        _this.vTextAlign = \'bottom\';\n        _this.paddingTop = 0;\n        _this.paddingRight = 0;\n        _this.paddingBottom = 0;\n        _this.paddingLeft = 0;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "outlineWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "outlineColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "color", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "fontSize", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "fontAutoSize", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "fontWeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "value", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "lineSpacing", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "lineCount", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "adaptWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "adaptHeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "textWrapping", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "shadowBlur", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "shadowOffsetX", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "shadowOffsetY", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "shadowColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "hTextAlign", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "vTextAlign", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "paddingTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "paddingRight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "paddingBottom", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "paddingLeft", void 0);\n    UIText = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_TEXT_SHAPE)\n    ], UIText);\n    return UIText;\n}(UIShape));\nexports.UIText = UIText;\n/**\n * @public\n */\nvar UIInputText = /** @class */ (function (_super) {\n    __extends(UIInputText, _super);\n    function UIInputText() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.outlineWidth = 0;\n        _this.outlineColor = math_1.Color4.Black();\n        _this.color = math_1.Color4.Clear();\n        _this.thickness = 1;\n        _this.fontSize = 10;\n        _this.fontWeight = \'normal\';\n        _this.value = \'\';\n        _this.placeholderColor = math_1.Color4.White();\n        _this.placeholder = \'\';\n        _this.margin = 10;\n        _this.maxWidth = 100;\n        _this.hTextAlign = \'left\';\n        _this.vTextAlign = \'bottom\';\n        _this.autoStretchWidth = true;\n        _this.background = math_1.Color4.Black();\n        _this.focusedBackground = math_1.Color4.Black();\n        _this.textWrapping = false;\n        _this.shadowBlur = 0;\n        _this.shadowOffsetX = 0;\n        _this.shadowOffsetY = 0;\n        _this.shadowColor = math_1.Color4.White();\n        _this.paddingTop = 0;\n        _this.paddingRight = 0;\n        _this.paddingBottom = 0;\n        _this.paddingLeft = 0;\n        _this.onTextSubmit = null;\n        _this.onChanged = null;\n        _this.onFocus = null;\n        _this.onBlur = null;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "outlineWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "outlineColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "color", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "thickness", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "fontSize", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "fontWeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "value", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "placeholderColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "placeholder", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "margin", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "maxWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "hTextAlign", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "vTextAlign", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "autoStretchWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "background", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "focusedBackground", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "textWrapping", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "shadowBlur", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "shadowOffsetX", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "shadowOffsetY", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "shadowColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "paddingTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "paddingRight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "paddingBottom", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "paddingLeft", void 0);\n    __decorate([\n        Components_1.OnUUIDEvent.uuidEvent\n    ], UIInputText.prototype, "onTextSubmit", void 0);\n    __decorate([\n        Components_1.OnUUIDEvent.uuidEvent\n    ], UIInputText.prototype, "onChanged", void 0);\n    __decorate([\n        Components_1.OnUUIDEvent.uuidEvent\n    ], UIInputText.prototype, "onFocus", void 0);\n    __decorate([\n        Components_1.OnUUIDEvent.uuidEvent\n    ], UIInputText.prototype, "onBlur", void 0);\n    UIInputText = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_INPUT_TEXT_SHAPE)\n    ], UIInputText);\n    return UIInputText;\n}(UIShape));\nexports.UIInputText = UIInputText;\n/**\n * @public\n */\nvar UIImage = /** @class */ (function (_super) {\n    __extends(UIImage, _super);\n    function UIImage(parent, source) {\n        var _this = _super.call(this, parent) || this;\n        _this.sourceLeft = 0;\n        _this.sourceTop = 0;\n        _this.sourceWidth = 1;\n        _this.sourceHeight = 1;\n        _this.paddingTop = 0;\n        _this.paddingRight = 0;\n        _this.paddingBottom = 0;\n        _this.paddingLeft = 0;\n        _this.sizeInPixels = true;\n        _this.onClick = null;\n        _this.source = source;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "sourceLeft", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "sourceTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "sourceWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "sourceHeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.component\n    ], UIImage.prototype, "source", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "paddingTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "paddingRight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "paddingBottom", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "paddingLeft", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "sizeInPixels", void 0);\n    __decorate([\n        Components_1.OnUUIDEvent.uuidEvent\n    ], UIImage.prototype, "onClick", void 0);\n    UIImage = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_IMAGE_SHAPE)\n    ], UIImage);\n    return UIImage;\n}(UIShape));\nexports.UIImage = UIImage;\n/**\n * @public\n */\nvar UIScrollRect = /** @class */ (function (_super) {\n    __extends(UIScrollRect, _super);\n    function UIScrollRect() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.valueX = 0;\n        _this.valueY = 0;\n        _this.borderColor = math_1.Color4.White();\n        _this.backgroundColor = math_1.Color4.Clear();\n        _this.isHorizontal = false;\n        _this.isVertical = false;\n        _this.paddingTop = 0;\n        _this.paddingRight = 0;\n        _this.paddingBottom = 0;\n        _this.paddingLeft = 0;\n        _this.onChanged = null;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "valueX", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "valueY", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "borderColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "backgroundColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "isHorizontal", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "isVertical", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "paddingTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "paddingRight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "paddingBottom", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "paddingLeft", void 0);\n    __decorate([\n        Components_1.OnUUIDEvent.uuidEvent\n    ], UIScrollRect.prototype, "onChanged", void 0);\n    UIScrollRect = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_SLIDER_SHAPE)\n    ], UIScrollRect);\n    return UIScrollRect;\n}(UIShape));\nexports.UIScrollRect = UIScrollRect;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/UIShapes.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Angle.ts":
/*!******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Angle.ts ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * Defines angle representation\n * @public\n */\nvar Angle = /** @class */ (function () {\n    /**\n     * Creates an Angle object of "radians" radians (float).\n     */\n    function Angle(radians) {\n        this._radians = radians;\n        if (this._radians < 0.0) {\n            this._radians += 2.0 * Math.PI;\n        }\n    }\n    /**\n     * Gets a new Angle object valued with the angle value in radians between the two given vectors\n     * @param a - defines first vector\n     * @param b - defines second vector\n     * @returns a new Angle\n     */\n    Angle.BetweenTwoPoints = function (a, b) {\n        var delta = b.subtract(a);\n        var theta = Math.atan2(delta.y, delta.x);\n        return new Angle(theta);\n    };\n    /**\n     * Gets a new Angle object from the given float in radians\n     * @param radians - defines the angle value in radians\n     * @returns a new Angle\n     */\n    Angle.FromRadians = function (radians) {\n        return new Angle(radians);\n    };\n    /**\n     * Gets a new Angle object from the given float in degrees\n     * @param degrees - defines the angle value in degrees\n     * @returns a new Angle\n     */\n    Angle.FromDegrees = function (degrees) {\n        return new Angle((degrees * Math.PI) / 180.0);\n    };\n    /**\n     * Get value in degrees\n     * @returns the Angle value in degrees (float)\n     */\n    Angle.prototype.degrees = function () {\n        return (this._radians * 180.0) / Math.PI;\n    };\n    /**\n     * Get value in radians\n     * @returns the Angle value in radians (float)\n     */\n    Angle.prototype.radians = function () {\n        return this._radians;\n    };\n    return Angle;\n}());\nexports.Angle = Angle;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQW5nbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGVjZW50cmFsYW5kL21hdGgvQW5nbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQTs7O0dBR0c7QUFDSDtJQUdFOztPQUVHO0lBQ0gsZUFBWSxPQUFlO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFBO1FBQ3ZCLElBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQTtTQUMvQjtJQUNILENBQUM7SUFFRDs7Ozs7T0FLRztJQUNXLHNCQUFnQixHQUE5QixVQUErQixDQUFVLEVBQUUsQ0FBVTtRQUNuRCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3pCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDeEMsT0FBTyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN6QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNXLGlCQUFXLEdBQXpCLFVBQTBCLE9BQWU7UUFDdkMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMzQixDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNXLGlCQUFXLEdBQXpCLFVBQTBCLE9BQWU7UUFDdkMsT0FBTyxJQUFJLEtBQUssQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUE7SUFDL0MsQ0FBQztJQUVEOzs7T0FHRztJQUNJLHVCQUFPLEdBQWQ7UUFDRSxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFBO0lBQzFDLENBQUM7SUFFRDs7O09BR0c7SUFDSSx1QkFBTyxHQUFkO1FBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFBO0lBQ3RCLENBQUM7SUFDSCxZQUFDO0FBQUQsQ0FBQyxBQXpERCxJQXlEQztBQXpEWSxzQkFBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuL1ZlY3RvcjInXG5cbi8qKlxuICogRGVmaW5lcyBhbmdsZSByZXByZXNlbnRhdGlvblxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgQW5nbGUge1xuICBwcml2YXRlIF9yYWRpYW5zOiBudW1iZXJcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBBbmdsZSBvYmplY3Qgb2YgXCJyYWRpYW5zXCIgcmFkaWFucyAoZmxvYXQpLlxuICAgKi9cbiAgY29uc3RydWN0b3IocmFkaWFuczogbnVtYmVyKSB7XG4gICAgdGhpcy5fcmFkaWFucyA9IHJhZGlhbnNcbiAgICBpZiAodGhpcy5fcmFkaWFucyA8IDAuMCkge1xuICAgICAgdGhpcy5fcmFkaWFucyArPSAyLjAgKiBNYXRoLlBJXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYSBuZXcgQW5nbGUgb2JqZWN0IHZhbHVlZCB3aXRoIHRoZSBhbmdsZSB2YWx1ZSBpbiByYWRpYW5zIGJldHdlZW4gdGhlIHR3byBnaXZlbiB2ZWN0b3JzXG4gICAqIEBwYXJhbSBhIC0gZGVmaW5lcyBmaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIGIgLSBkZWZpbmVzIHNlY29uZCB2ZWN0b3JcbiAgICogQHJldHVybnMgYSBuZXcgQW5nbGVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgQmV0d2VlblR3b1BvaW50cyhhOiBWZWN0b3IyLCBiOiBWZWN0b3IyKTogQW5nbGUge1xuICAgIGxldCBkZWx0YSA9IGIuc3VidHJhY3QoYSlcbiAgICBsZXQgdGhldGEgPSBNYXRoLmF0YW4yKGRlbHRhLnksIGRlbHRhLngpXG4gICAgcmV0dXJuIG5ldyBBbmdsZSh0aGV0YSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGEgbmV3IEFuZ2xlIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBmbG9hdCBpbiByYWRpYW5zXG4gICAqIEBwYXJhbSByYWRpYW5zIC0gZGVmaW5lcyB0aGUgYW5nbGUgdmFsdWUgaW4gcmFkaWFuc1xuICAgKiBAcmV0dXJucyBhIG5ldyBBbmdsZVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBGcm9tUmFkaWFucyhyYWRpYW5zOiBudW1iZXIpOiBBbmdsZSB7XG4gICAgcmV0dXJuIG5ldyBBbmdsZShyYWRpYW5zKVxuICB9XG4gIC8qKlxuICAgKiBHZXRzIGEgbmV3IEFuZ2xlIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBmbG9hdCBpbiBkZWdyZWVzXG4gICAqIEBwYXJhbSBkZWdyZWVzIC0gZGVmaW5lcyB0aGUgYW5nbGUgdmFsdWUgaW4gZGVncmVlc1xuICAgKiBAcmV0dXJucyBhIG5ldyBBbmdsZVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBGcm9tRGVncmVlcyhkZWdyZWVzOiBudW1iZXIpOiBBbmdsZSB7XG4gICAgcmV0dXJuIG5ldyBBbmdsZSgoZGVncmVlcyAqIE1hdGguUEkpIC8gMTgwLjApXG4gIH1cblxuICAvKipcbiAgICogR2V0IHZhbHVlIGluIGRlZ3JlZXNcbiAgICogQHJldHVybnMgdGhlIEFuZ2xlIHZhbHVlIGluIGRlZ3JlZXMgKGZsb2F0KVxuICAgKi9cbiAgcHVibGljIGRlZ3JlZXMoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9yYWRpYW5zICogMTgwLjApIC8gTWF0aC5QSVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB2YWx1ZSBpbiByYWRpYW5zXG4gICAqIEByZXR1cm5zIHRoZSBBbmdsZSB2YWx1ZSBpbiByYWRpYW5zIChmbG9hdClcbiAgICovXG4gIHB1YmxpYyByYWRpYW5zKCkge1xuICAgIHJldHVybiB0aGlzLl9yYWRpYW5zXG4gIH1cbn1cbiJdfQ==\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Angle.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Arc2.ts":
/*!*****************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Arc2.ts ***!
  \*****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Angle_1 = __webpack_require__(/*! ./Angle */ "./packages/decentraland-ecs/src/decentraland/math/Angle.ts");\nvar Vector2_1 = __webpack_require__(/*! ./Vector2 */ "./packages/decentraland-ecs/src/decentraland/math/Vector2.ts");\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\n/**\n * This represents an arc in a 2d space.\n * @public\n */\nvar Arc2 = /** @class */ (function () {\n    /**\n     * Creates an Arc object from the three given points : start, middle and end.\n     * @param startPoint - Defines the start point of the arc\n     * @param midPoint - Defines the midlle point of the arc\n     * @param endPoint - Defines the end point of the arc\n     */\n    function Arc2(\n    /** Defines the start point of the arc */\n    startPoint, \n    /** Defines the mid point of the arc */\n    midPoint, \n    /** Defines the end point of the arc */\n    endPoint) {\n        this.startPoint = startPoint;\n        this.midPoint = midPoint;\n        this.endPoint = endPoint;\n        var temp = Math.pow(midPoint.x, 2) + Math.pow(midPoint.y, 2);\n        var startToMid = (Math.pow(startPoint.x, 2) + Math.pow(startPoint.y, 2) - temp) / 2;\n        var midToEnd = (temp - Math.pow(endPoint.x, 2) - Math.pow(endPoint.y, 2)) / 2;\n        var det = (startPoint.x - midPoint.x) * (midPoint.y - endPoint.y) - (midPoint.x - endPoint.x) * (startPoint.y - midPoint.y);\n        this.centerPoint = new Vector2_1.Vector2((startToMid * (midPoint.y - endPoint.y) - midToEnd * (startPoint.y - midPoint.y)) / det, ((startPoint.x - midPoint.x) * midToEnd - (midPoint.x - endPoint.x) * startToMid) / det);\n        this.radius = this.centerPoint.subtract(this.startPoint).length();\n        this.startAngle = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.startPoint);\n        var a1 = this.startAngle.degrees();\n        var a2 = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.midPoint).degrees();\n        var a3 = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.endPoint).degrees();\n        // angles correction\n        if (a2 - a1 > +180.0) {\n            a2 -= 360.0;\n        }\n        if (a2 - a1 < -180.0) {\n            a2 += 360.0;\n        }\n        if (a3 - a2 > +180.0) {\n            a3 -= 360.0;\n        }\n        if (a3 - a2 < -180.0) {\n            a3 += 360.0;\n        }\n        this.orientation = a2 - a1 < 0 ? types_1.Orientation.CW : types_1.Orientation.CCW;\n        this.angle = Angle_1.Angle.FromDegrees(this.orientation === types_1.Orientation.CW ? a1 - a3 : a3 - a1);\n    }\n    return Arc2;\n}());\nexports.Arc2 = Arc2;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXJjMi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNlbnRyYWxhbmQvbWF0aC9BcmMyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQStCO0FBQy9CLHFDQUFtQztBQUNuQyxpQ0FBcUM7QUFFckM7OztHQUdHO0FBQ0g7SUFzQkU7Ozs7O09BS0c7SUFDSDtJQUNFLHlDQUF5QztJQUNsQyxVQUFtQjtJQUMxQix1Q0FBdUM7SUFDaEMsUUFBaUI7SUFDeEIsdUNBQXVDO0lBQ2hDLFFBQWlCO1FBSmpCLGVBQVUsR0FBVixVQUFVLENBQVM7UUFFbkIsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUVqQixhQUFRLEdBQVIsUUFBUSxDQUFTO1FBRXhCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDNUQsSUFBSSxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNuRixJQUFJLFFBQVEsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzdFLElBQUksR0FBRyxHQUNMLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFFbkgsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGlCQUFPLENBQzVCLENBQUMsVUFBVSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQ3ZGLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQ3hGLENBQUE7UUFFRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUVqRSxJQUFJLENBQUMsVUFBVSxHQUFHLGFBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUUzRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2xDLElBQUksRUFBRSxHQUFHLGFBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUMxRSxJQUFJLEVBQUUsR0FBRyxhQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7UUFFMUUsb0JBQW9CO1FBQ3BCLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRTtZQUNwQixFQUFFLElBQUksS0FBSyxDQUFBO1NBQ1o7UUFDRCxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUU7WUFDcEIsRUFBRSxJQUFJLEtBQUssQ0FBQTtTQUNaO1FBQ0QsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFO1lBQ3BCLEVBQUUsSUFBSSxLQUFLLENBQUE7U0FDWjtRQUNELElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRTtZQUNwQixFQUFFLElBQUksS0FBSyxDQUFBO1NBQ1o7UUFFRCxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsbUJBQVcsQ0FBQyxHQUFHLENBQUE7UUFDakUsSUFBSSxDQUFDLEtBQUssR0FBRyxhQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEtBQUssbUJBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTtJQUN6RixDQUFDO0lBQ0gsV0FBQztBQUFELENBQUMsQUF4RUQsSUF3RUM7QUF4RVksb0JBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmdsZSB9IGZyb20gJy4vQW5nbGUnXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi9WZWN0b3IyJ1xuaW1wb3J0IHsgT3JpZW50YXRpb24gfSBmcm9tICcuL3R5cGVzJ1xuXG4vKipcbiAqIFRoaXMgcmVwcmVzZW50cyBhbiBhcmMgaW4gYSAyZCBzcGFjZS5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEFyYzIge1xuICAvKipcbiAgICogRGVmaW5lcyB0aGUgY2VudGVyIHBvaW50IG9mIHRoZSBhcmMuXG4gICAqL1xuICBwdWJsaWMgY2VudGVyUG9pbnQ6IFZlY3RvcjJcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIHJhZGl1cyBvZiB0aGUgYXJjLlxuICAgKi9cbiAgcHVibGljIHJhZGl1czogbnVtYmVyXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBhbmdsZSBvZiB0aGUgYXJjIChmcm9tIG1pZCBwb2ludCB0byBlbmQgcG9pbnQpLlxuICAgKi9cbiAgcHVibGljIGFuZ2xlOiBBbmdsZVxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgc3RhcnQgYW5nbGUgb2YgdGhlIGFyYyAoZnJvbSBzdGFydCBwb2ludCB0byBtaWRkbGUgcG9pbnQpLlxuICAgKi9cbiAgcHVibGljIHN0YXJ0QW5nbGU6IEFuZ2xlXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgYXJjIChjbG9jayB3aXNlL2NvdW50ZXIgY2xvY2sgd2lzZSkuXG4gICAqL1xuICBwdWJsaWMgb3JpZW50YXRpb246IE9yaWVudGF0aW9uXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gQXJjIG9iamVjdCBmcm9tIHRoZSB0aHJlZSBnaXZlbiBwb2ludHMgOiBzdGFydCwgbWlkZGxlIGFuZCBlbmQuXG4gICAqIEBwYXJhbSBzdGFydFBvaW50IC0gRGVmaW5lcyB0aGUgc3RhcnQgcG9pbnQgb2YgdGhlIGFyY1xuICAgKiBAcGFyYW0gbWlkUG9pbnQgLSBEZWZpbmVzIHRoZSBtaWRsbGUgcG9pbnQgb2YgdGhlIGFyY1xuICAgKiBAcGFyYW0gZW5kUG9pbnQgLSBEZWZpbmVzIHRoZSBlbmQgcG9pbnQgb2YgdGhlIGFyY1xuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgLyoqIERlZmluZXMgdGhlIHN0YXJ0IHBvaW50IG9mIHRoZSBhcmMgKi9cbiAgICBwdWJsaWMgc3RhcnRQb2ludDogVmVjdG9yMixcbiAgICAvKiogRGVmaW5lcyB0aGUgbWlkIHBvaW50IG9mIHRoZSBhcmMgKi9cbiAgICBwdWJsaWMgbWlkUG9pbnQ6IFZlY3RvcjIsXG4gICAgLyoqIERlZmluZXMgdGhlIGVuZCBwb2ludCBvZiB0aGUgYXJjICovXG4gICAgcHVibGljIGVuZFBvaW50OiBWZWN0b3IyXG4gICkge1xuICAgIGxldCB0ZW1wID0gTWF0aC5wb3cobWlkUG9pbnQueCwgMikgKyBNYXRoLnBvdyhtaWRQb2ludC55LCAyKVxuICAgIGxldCBzdGFydFRvTWlkID0gKE1hdGgucG93KHN0YXJ0UG9pbnQueCwgMikgKyBNYXRoLnBvdyhzdGFydFBvaW50LnksIDIpIC0gdGVtcCkgLyAyXG4gICAgbGV0IG1pZFRvRW5kID0gKHRlbXAgLSBNYXRoLnBvdyhlbmRQb2ludC54LCAyKSAtIE1hdGgucG93KGVuZFBvaW50LnksIDIpKSAvIDJcbiAgICBsZXQgZGV0ID1cbiAgICAgIChzdGFydFBvaW50LnggLSBtaWRQb2ludC54KSAqIChtaWRQb2ludC55IC0gZW5kUG9pbnQueSkgLSAobWlkUG9pbnQueCAtIGVuZFBvaW50LngpICogKHN0YXJ0UG9pbnQueSAtIG1pZFBvaW50LnkpXG5cbiAgICB0aGlzLmNlbnRlclBvaW50ID0gbmV3IFZlY3RvcjIoXG4gICAgICAoc3RhcnRUb01pZCAqIChtaWRQb2ludC55IC0gZW5kUG9pbnQueSkgLSBtaWRUb0VuZCAqIChzdGFydFBvaW50LnkgLSBtaWRQb2ludC55KSkgLyBkZXQsXG4gICAgICAoKHN0YXJ0UG9pbnQueCAtIG1pZFBvaW50LngpICogbWlkVG9FbmQgLSAobWlkUG9pbnQueCAtIGVuZFBvaW50LngpICogc3RhcnRUb01pZCkgLyBkZXRcbiAgICApXG5cbiAgICB0aGlzLnJhZGl1cyA9IHRoaXMuY2VudGVyUG9pbnQuc3VidHJhY3QodGhpcy5zdGFydFBvaW50KS5sZW5ndGgoKVxuXG4gICAgdGhpcy5zdGFydEFuZ2xlID0gQW5nbGUuQmV0d2VlblR3b1BvaW50cyh0aGlzLmNlbnRlclBvaW50LCB0aGlzLnN0YXJ0UG9pbnQpXG5cbiAgICBsZXQgYTEgPSB0aGlzLnN0YXJ0QW5nbGUuZGVncmVlcygpXG4gICAgbGV0IGEyID0gQW5nbGUuQmV0d2VlblR3b1BvaW50cyh0aGlzLmNlbnRlclBvaW50LCB0aGlzLm1pZFBvaW50KS5kZWdyZWVzKClcbiAgICBsZXQgYTMgPSBBbmdsZS5CZXR3ZWVuVHdvUG9pbnRzKHRoaXMuY2VudGVyUG9pbnQsIHRoaXMuZW5kUG9pbnQpLmRlZ3JlZXMoKVxuXG4gICAgLy8gYW5nbGVzIGNvcnJlY3Rpb25cbiAgICBpZiAoYTIgLSBhMSA+ICsxODAuMCkge1xuICAgICAgYTIgLT0gMzYwLjBcbiAgICB9XG4gICAgaWYgKGEyIC0gYTEgPCAtMTgwLjApIHtcbiAgICAgIGEyICs9IDM2MC4wXG4gICAgfVxuICAgIGlmIChhMyAtIGEyID4gKzE4MC4wKSB7XG4gICAgICBhMyAtPSAzNjAuMFxuICAgIH1cbiAgICBpZiAoYTMgLSBhMiA8IC0xODAuMCkge1xuICAgICAgYTMgKz0gMzYwLjBcbiAgICB9XG5cbiAgICB0aGlzLm9yaWVudGF0aW9uID0gYTIgLSBhMSA8IDAgPyBPcmllbnRhdGlvbi5DVyA6IE9yaWVudGF0aW9uLkNDV1xuICAgIHRoaXMuYW5nbGUgPSBBbmdsZS5Gcm9tRGVncmVlcyh0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5DVyA/IGExIC0gYTMgOiBhMyAtIGExKVxuICB9XG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Arc2.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Axis.ts":
/*!*****************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Axis.ts ***!
  \*****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Vector3_1 = __webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts");\n/**\n * Defines the 3 main axes\n * @public\n */\nvar Axis = /** @class */ (function () {\n    function Axis() {\n    }\n    /** X axis */\n    Axis.X = new Vector3_1.Vector3(1.0, 0.0, 0.0);\n    /** Y axis */\n    Axis.Y = new Vector3_1.Vector3(0.0, 1.0, 0.0);\n    /** Z axis */\n    Axis.Z = new Vector3_1.Vector3(0.0, 0.0, 1.0);\n    return Axis;\n}());\nexports.Axis = Axis;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXhpcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNlbnRyYWxhbmQvbWF0aC9BeGlzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQW1DO0FBRW5DOzs7R0FHRztBQUNIO0lBQUE7SUFPQSxDQUFDO0lBTkMsYUFBYTtJQUNDLE1BQUMsR0FBWSxJQUFJLGlCQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUNyRCxhQUFhO0lBQ0MsTUFBQyxHQUFZLElBQUksaUJBQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ3JELGFBQWE7SUFDQyxNQUFDLEdBQVksSUFBSSxpQkFBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDdkQsV0FBQztDQUFBLEFBUEQsSUFPQztBQVBZLG9CQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4vVmVjdG9yMydcblxuLyoqXG4gKiBEZWZpbmVzIHRoZSAzIG1haW4gYXhlc1xuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgQXhpcyB7XG4gIC8qKiBYIGF4aXMgKi9cbiAgcHVibGljIHN0YXRpYyBYOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoMS4wLCAwLjAsIDAuMClcbiAgLyoqIFkgYXhpcyAqL1xuICBwdWJsaWMgc3RhdGljIFk6IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygwLjAsIDEuMCwgMC4wKVxuICAvKiogWiBheGlzICovXG4gIHB1YmxpYyBzdGF0aWMgWjogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKDAuMCwgMC4wLCAxLjApXG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Axis.ts?')},"./packages/decentraland-ecs/src/decentraland/math/BezierCurve.ts":
/*!************************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/BezierCurve.ts ***!
  \************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * Class used to represent a Bezier curve\n * @public\n */\nvar BezierCurve = /** @class */ (function () {\n    function BezierCurve() {\n    }\n    /**\n     * Returns the cubic Bezier interpolated value (float) at "t" (float) from the given x1, y1, x2, y2 floats\n     * @param t - defines the time\n     * @param x1 - defines the left coordinate on X axis\n     * @param y1 - defines the left coordinate on Y axis\n     * @param x2 - defines the right coordinate on X axis\n     * @param y2 - defines the right coordinate on Y axis\n     * @returns the interpolated value\n     */\n    BezierCurve.Interpolate = function (t, x1, y1, x2, y2) {\n        // Extract X (which is equal to time here)\n        var f0 = 1 - 3 * x2 + 3 * x1;\n        var f1 = 3 * x2 - 6 * x1;\n        var f2 = 3 * x1;\n        var refinedT = t;\n        for (var i = 0; i < 5; i++) {\n            var refinedT2 = refinedT * refinedT;\n            var refinedT3 = refinedT2 * refinedT;\n            var x = f0 * refinedT3 + f1 * refinedT2 + f2 * refinedT;\n            var slope = 1.0 / (3.0 * f0 * refinedT2 + 2.0 * f1 * refinedT + f2);\n            refinedT -= (x - t) * slope;\n            refinedT = Math.min(1, Math.max(0, refinedT));\n        }\n        // Resolve cubic bezier for the given x\n        return (3 * Math.pow(1 - refinedT, 2) * refinedT * y1 +\n            3 * (1 - refinedT) * Math.pow(refinedT, 2) * y2 +\n            Math.pow(refinedT, 3));\n    };\n    return BezierCurve;\n}());\nexports.BezierCurve = BezierCurve;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmV6aWVyQ3VydmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGVjZW50cmFsYW5kL21hdGgvQmV6aWVyQ3VydmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7O0dBR0c7QUFDSDtJQUFBO0lBa0NBLENBQUM7SUFqQ0M7Ozs7Ozs7O09BUUc7SUFDVyx1QkFBVyxHQUF6QixVQUEwQixDQUFTLEVBQUUsRUFBVSxFQUFFLEVBQVUsRUFBRSxFQUFVLEVBQUUsRUFBVTtRQUNqRiwwQ0FBMEM7UUFDMUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtRQUM1QixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDeEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtRQUVmLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQTtRQUNoQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFCLElBQUksU0FBUyxHQUFHLFFBQVEsR0FBRyxRQUFRLENBQUE7WUFDbkMsSUFBSSxTQUFTLEdBQUcsU0FBUyxHQUFHLFFBQVEsQ0FBQTtZQUVwQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsU0FBUyxHQUFHLEVBQUUsR0FBRyxTQUFTLEdBQUcsRUFBRSxHQUFHLFFBQVEsQ0FBQTtZQUN2RCxJQUFJLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLFFBQVEsR0FBRyxFQUFFLENBQUMsQ0FBQTtZQUNuRSxRQUFRLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFBO1lBQzNCLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFBO1NBQzlDO1FBRUQsdUNBQXVDO1FBQ3ZDLE9BQU8sQ0FDTCxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsQ0FBQyxHQUFHLFFBQVEsR0FBRyxFQUFFO1lBQzdDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFO1lBQy9DLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUN0QixDQUFBO0lBQ0gsQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FBQyxBQWxDRCxJQWtDQztBQWxDWSxrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2xhc3MgdXNlZCB0byByZXByZXNlbnQgYSBCZXppZXIgY3VydmVcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEJlemllckN1cnZlIHtcbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1YmljIEJlemllciBpbnRlcnBvbGF0ZWQgdmFsdWUgKGZsb2F0KSBhdCBcInRcIiAoZmxvYXQpIGZyb20gdGhlIGdpdmVuIHgxLCB5MSwgeDIsIHkyIGZsb2F0c1xuICAgKiBAcGFyYW0gdCAtIGRlZmluZXMgdGhlIHRpbWVcbiAgICogQHBhcmFtIHgxIC0gZGVmaW5lcyB0aGUgbGVmdCBjb29yZGluYXRlIG9uIFggYXhpc1xuICAgKiBAcGFyYW0geTEgLSBkZWZpbmVzIHRoZSBsZWZ0IGNvb3JkaW5hdGUgb24gWSBheGlzXG4gICAqIEBwYXJhbSB4MiAtIGRlZmluZXMgdGhlIHJpZ2h0IGNvb3JkaW5hdGUgb24gWCBheGlzXG4gICAqIEBwYXJhbSB5MiAtIGRlZmluZXMgdGhlIHJpZ2h0IGNvb3JkaW5hdGUgb24gWSBheGlzXG4gICAqIEByZXR1cm5zIHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgSW50ZXJwb2xhdGUodDogbnVtYmVyLCB4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAvLyBFeHRyYWN0IFggKHdoaWNoIGlzIGVxdWFsIHRvIHRpbWUgaGVyZSlcbiAgICBsZXQgZjAgPSAxIC0gMyAqIHgyICsgMyAqIHgxXG4gICAgbGV0IGYxID0gMyAqIHgyIC0gNiAqIHgxXG4gICAgbGV0IGYyID0gMyAqIHgxXG5cbiAgICBsZXQgcmVmaW5lZFQgPSB0XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgIGxldCByZWZpbmVkVDIgPSByZWZpbmVkVCAqIHJlZmluZWRUXG4gICAgICBsZXQgcmVmaW5lZFQzID0gcmVmaW5lZFQyICogcmVmaW5lZFRcblxuICAgICAgbGV0IHggPSBmMCAqIHJlZmluZWRUMyArIGYxICogcmVmaW5lZFQyICsgZjIgKiByZWZpbmVkVFxuICAgICAgbGV0IHNsb3BlID0gMS4wIC8gKDMuMCAqIGYwICogcmVmaW5lZFQyICsgMi4wICogZjEgKiByZWZpbmVkVCArIGYyKVxuICAgICAgcmVmaW5lZFQgLT0gKHggLSB0KSAqIHNsb3BlXG4gICAgICByZWZpbmVkVCA9IE1hdGgubWluKDEsIE1hdGgubWF4KDAsIHJlZmluZWRUKSlcbiAgICB9XG5cbiAgICAvLyBSZXNvbHZlIGN1YmljIGJlemllciBmb3IgdGhlIGdpdmVuIHhcbiAgICByZXR1cm4gKFxuICAgICAgMyAqIE1hdGgucG93KDEgLSByZWZpbmVkVCwgMikgKiByZWZpbmVkVCAqIHkxICtcbiAgICAgIDMgKiAoMSAtIHJlZmluZWRUKSAqIE1hdGgucG93KHJlZmluZWRULCAyKSAqIHkyICtcbiAgICAgIE1hdGgucG93KHJlZmluZWRULCAzKVxuICAgIClcbiAgfVxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/BezierCurve.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Color3.ts":
/*!*******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Color3.ts ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\nvar Color4_1 = __webpack_require__(/*! ./Color4 */ "./packages/decentraland-ecs/src/decentraland/math/Color4.ts");\nvar Scalar_1 = __webpack_require__(/*! ./Scalar */ "./packages/decentraland-ecs/src/decentraland/math/Scalar.ts");\n/**\n * Class used to hold a RBG color\n * @public\n */\nvar Color3 = /** @class */ (function () {\n    /**\n     * Creates a new Color3 object from red, green, blue values, all between 0 and 1\n     * @param r - defines the red component (between 0 and 1, default is 0)\n     * @param g - defines the green component (between 0 and 1, default is 0)\n     * @param b - defines the blue component (between 0 and 1, default is 0)\n     */\n    function Color3(\n    /**\n     * Defines the red component (between 0 and 1, default is 0)\n     */\n    r, \n    /**\n     * Defines the green component (between 0 and 1, default is 0)\n     */\n    g, \n    /**\n     * Defines the blue component (between 0 and 1, default is 0)\n     */\n    b) {\n        if (r === void 0) { r = 0; }\n        if (g === void 0) { g = 0; }\n        if (b === void 0) { b = 0; }\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n    // Statics\n    /**\n     * Creates a new Color3 from the string containing valid hexadecimal values\n     * @param hex - defines a string containing valid hexadecimal values\n     * @returns a new Color3 object\n     */\n    Color3.FromHexString = function (hex) {\n        if (hex.substring(0, 1) !== \'#\' || hex.length !== 7) {\n            return new Color3(0, 0, 0);\n        }\n        var r = parseInt(hex.substring(1, 3), 16);\n        var g = parseInt(hex.substring(3, 5), 16);\n        var b = parseInt(hex.substring(5, 7), 16);\n        return Color3.FromInts(r, g, b);\n    };\n    /**\n     * Creates a new Vector3 from the starting index of the given array\n     * @param array - defines the source array\n     * @param offset - defines an offset in the source array\n     * @returns a new Color3 object\n     */\n    Color3.FromArray = function (array, offset) {\n        if (offset === void 0) { offset = 0; }\n        return new Color3(array[offset], array[offset + 1], array[offset + 2]);\n    };\n    /**\n     * Creates a new Color3 from integer values (less than 256)\n     * @param r - defines the red component to read from (value between 0 and 255)\n     * @param g - defines the green component to read from (value between 0 and 255)\n     * @param b - defines the blue component to read from (value between 0 and 255)\n     * @returns a new Color3 object\n     */\n    Color3.FromInts = function (r, g, b) {\n        return new Color3(r / 255.0, g / 255.0, b / 255.0);\n    };\n    /**\n     * Creates a new Color3 with values linearly interpolated of "amount" between the start Color3 and the end Color3\n     * @param start - defines the start Color3 value\n     * @param end - defines the end Color3 value\n     * @param amount - defines the gradient value between start and end\n     * @returns a new Color3 object\n     */\n    Color3.Lerp = function (start, end, amount) {\n        var result = new Color3(0.0, 0.0, 0.0);\n        Color3.LerpToRef(start, end, amount, result);\n        return result;\n    };\n    /**\n     * Creates a new Color3 with values linearly interpolated of "amount" between the start Color3 and the end Color3\n     * @param left - defines the start value\n     * @param right - defines the end value\n     * @param amount - defines the gradient factor\n     * @param result - defines the Color3 object where to store the result\n     */\n    Color3.LerpToRef = function (left, right, amount, result) {\n        result.r = left.r + (right.r - left.r) * amount;\n        result.g = left.g + (right.g - left.g) * amount;\n        result.b = left.b + (right.b - left.b) * amount;\n    };\n    /**\n     * Returns a Color3 value containing a red color\n     * @returns a new Color3 object\n     */\n    Color3.Red = function () {\n        return new Color3(1, 0, 0);\n    };\n    /**\n     * Returns a Color3 value containing a green color\n     * @returns a new Color3 object\n     */\n    Color3.Green = function () {\n        return new Color3(0, 1, 0);\n    };\n    /**\n     * Returns a Color3 value containing a blue color\n     * @returns a new Color3 object\n     */\n    Color3.Blue = function () {\n        return new Color3(0, 0, 1);\n    };\n    /**\n     * Returns a Color3 value containing a black color\n     * @returns a new Color3 object\n     */\n    Color3.Black = function () {\n        return new Color3(0, 0, 0);\n    };\n    /**\n     * Returns a Color3 value containing a white color\n     * @returns a new Color3 object\n     */\n    Color3.White = function () {\n        return new Color3(1, 1, 1);\n    };\n    /**\n     * Returns a Color3 value containing a purple color\n     * @returns a new Color3 object\n     */\n    Color3.Purple = function () {\n        return new Color3(0.5, 0, 0.5);\n    };\n    /**\n     * Returns a Color3 value containing a magenta color\n     * @returns a new Color3 object\n     */\n    Color3.Magenta = function () {\n        return new Color3(1, 0, 1);\n    };\n    /**\n     * Returns a Color3 value containing a yellow color\n     * @returns a new Color3 object\n     */\n    Color3.Yellow = function () {\n        return new Color3(1, 1, 0);\n    };\n    /**\n     * Returns a Color3 value containing a gray color\n     * @returns a new Color3 object\n     */\n    Color3.Gray = function () {\n        return new Color3(0.5, 0.5, 0.5);\n    };\n    /**\n     * Returns a Color3 value containing a teal color\n     * @returns a new Color3 object\n     */\n    Color3.Teal = function () {\n        return new Color3(0, 1.0, 1.0);\n    };\n    /**\n     * Returns a Color3 value containing a random color\n     * @returns a new Color3 object\n     */\n    Color3.Random = function () {\n        return new Color3(Math.random(), Math.random(), Math.random());\n    };\n    /**\n     * Creates a string with the Color3 current values\n     * @returns the string representation of the Color3 object\n     */\n    Color3.prototype.toString = function () {\n        return \'{R: \' + this.r + \' G:\' + this.g + \' B:\' + this.b + \'}\';\n    };\n    /**\n     * Returns the string "Color3"\n     * @returns "Color3"\n     */\n    Color3.prototype.getClassName = function () {\n        return \'Color3\';\n    };\n    /**\n     * Compute the Color3 hash code\n     * @returns an unique number that can be used to hash Color3 objects\n     */\n    Color3.prototype.getHashCode = function () {\n        var hash = this.r || 0;\n        hash = (hash * 397) ^ (this.g || 0);\n        hash = (hash * 397) ^ (this.b || 0);\n        return hash;\n    };\n    // Operators\n    /**\n     * Stores in the given array from the given starting index the red, green, blue values as successive elements\n     * @param array - defines the array where to store the r,g,b components\n     * @param index - defines an optional index in the target array to define where to start storing values\n     * @returns the current Color3 object\n     */\n    Color3.prototype.toArray = function (array, index) {\n        if (index === void 0) { index = 0; }\n        array[index] = this.r;\n        array[index + 1] = this.g;\n        array[index + 2] = this.b;\n        return this;\n    };\n    /**\n     * Returns a new Color4 object from the current Color3 and the given alpha\n     * @param alpha - defines the alpha component on the new Color4 object (default is 1)\n     * @returns a new Color4 object\n     */\n    Color3.prototype.toColor4 = function (alpha) {\n        if (alpha === void 0) { alpha = 1; }\n        return new Color4_1.Color4(this.r, this.g, this.b, alpha);\n    };\n    /**\n     * Returns a new array populated with 3 numeric elements : red, green and blue values\n     * @returns the new array\n     */\n    Color3.prototype.asArray = function () {\n        var result = new Array();\n        this.toArray(result, 0);\n        return result;\n    };\n    /**\n     * Returns the luminance value\n     * @returns a float value\n     */\n    Color3.prototype.toLuminance = function () {\n        return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;\n    };\n    /**\n     * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object\n     * @param otherColor - defines the second operand\n     * @returns the new Color3 object\n     */\n    Color3.prototype.multiply = function (otherColor) {\n        return new Color3(this.r * otherColor.r, this.g * otherColor.g, this.b * otherColor.b);\n    };\n    /**\n     * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object "result"\n     * @param otherColor - defines the second operand\n     * @param result - defines the Color3 object where to store the result\n     * @returns the current Color3\n     */\n    Color3.prototype.multiplyToRef = function (otherColor, result) {\n        result.r = this.r * otherColor.r;\n        result.g = this.g * otherColor.g;\n        result.b = this.b * otherColor.b;\n        return this;\n    };\n    /**\n     * Determines equality between Color3 objects\n     * @param otherColor - defines the second operand\n     * @returns true if the rgb values are equal to the given ones\n     */\n    Color3.prototype.equals = function (otherColor) {\n        return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b;\n    };\n    /**\n     * Determines equality between the current Color3 object and a set of r,b,g values\n     * @param r - defines the red component to check\n     * @param g - defines the green component to check\n     * @param b - defines the blue component to check\n     * @returns true if the rgb values are equal to the given ones\n     */\n    Color3.prototype.equalsFloats = function (r, g, b) {\n        return this.r === r && this.g === g && this.b === b;\n    };\n    /**\n     * Multiplies in place each rgb value by scale\n     * @param scale - defines the scaling factor\n     * @returns the updated Color3\n     */\n    Color3.prototype.scale = function (scale) {\n        return new Color3(this.r * scale, this.g * scale, this.b * scale);\n    };\n    /**\n     * Multiplies the rgb values by scale and stores the result into "result"\n     * @param scale - defines the scaling factor\n     * @param result - defines the Color3 object where to store the result\n     * @returns the unmodified current Color3\n     */\n    Color3.prototype.scaleToRef = function (scale, result) {\n        result.r = this.r * scale;\n        result.g = this.g * scale;\n        result.b = this.b * scale;\n        return this;\n    };\n    /**\n     * Scale the current Color3 values by a factor and add the result to a given Color3\n     * @param scale - defines the scale factor\n     * @param result - defines color to store the result into\n     * @returns the unmodified current Color3\n     */\n    Color3.prototype.scaleAndAddToRef = function (scale, result) {\n        result.r += this.r * scale;\n        result.g += this.g * scale;\n        result.b += this.b * scale;\n        return this;\n    };\n    /**\n     * Clamps the rgb values by the min and max values and stores the result into "result"\n     * @param min - defines minimum clamping value (default is 0)\n     * @param max - defines maximum clamping value (default is 1)\n     * @param result - defines color to store the result into\n     * @returns the original Color3\n     */\n    Color3.prototype.clampToRef = function (min, max, result) {\n        if (min === void 0) { min = 0; }\n        if (max === void 0) { max = 1; }\n        result.r = Scalar_1.Scalar.Clamp(this.r, min, max);\n        result.g = Scalar_1.Scalar.Clamp(this.g, min, max);\n        result.b = Scalar_1.Scalar.Clamp(this.b, min, max);\n        return this;\n    };\n    /**\n     * Creates a new Color3 set with the added values of the current Color3 and of the given one\n     * @param otherColor - defines the second operand\n     * @returns the new Color3\n     */\n    Color3.prototype.add = function (otherColor) {\n        return new Color3(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b);\n    };\n    /**\n     * Stores the result of the addition of the current Color3 and given one rgb values into "result"\n     * @param otherColor - defines the second operand\n     * @param result - defines Color3 object to store the result into\n     * @returns the unmodified current Color3\n     */\n    Color3.prototype.addToRef = function (otherColor, result) {\n        result.r = this.r + otherColor.r;\n        result.g = this.g + otherColor.g;\n        result.b = this.b + otherColor.b;\n        return this;\n    };\n    /**\n     * Returns a new Color3 set with the subtracted values of the given one from the current Color3\n     * @param otherColor - defines the second operand\n     * @returns the new Color3\n     */\n    Color3.prototype.subtract = function (otherColor) {\n        return new Color3(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b);\n    };\n    /**\n     * Stores the result of the subtraction of given one from the current Color3 rgb values into "result"\n     * @param otherColor - defines the second operand\n     * @param result - defines Color3 object to store the result into\n     * @returns the unmodified current Color3\n     */\n    Color3.prototype.subtractToRef = function (otherColor, result) {\n        result.r = this.r - otherColor.r;\n        result.g = this.g - otherColor.g;\n        result.b = this.b - otherColor.b;\n        return this;\n    };\n    /**\n     * Copy the current object\n     * @returns a new Color3 copied the current one\n     */\n    Color3.prototype.clone = function () {\n        return new Color3(this.r, this.g, this.b);\n    };\n    /**\n     * Copies the rgb values from the source in the current Color3\n     * @param source - defines the source Color3 object\n     * @returns the updated Color3 object\n     */\n    Color3.prototype.copyFrom = function (source) {\n        this.r = source.r;\n        this.g = source.g;\n        this.b = source.b;\n        return this;\n    };\n    /**\n     * Updates the Color3 rgb values from the given floats\n     * @param r - defines the red component to read from\n     * @param g - defines the green component to read from\n     * @param b - defines the blue component to read from\n     * @returns the current Color3 object\n     */\n    Color3.prototype.copyFromFloats = function (r, g, b) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        return this;\n    };\n    /**\n     * Updates the Color3 rgb values from the given floats\n     * @param r - defines the red component to read from\n     * @param g - defines the green component to read from\n     * @param b - defines the blue component to read from\n     * @returns the current Color3 object\n     */\n    Color3.prototype.set = function (r, g, b) {\n        return this.copyFromFloats(r, g, b);\n    };\n    /**\n     * Compute the Color3 hexadecimal code as a string\n     * @returns a string containing the hexadecimal representation of the Color3 object\n     */\n    Color3.prototype.toHexString = function () {\n        var intR = (this.r * 255) | 0;\n        var intG = (this.g * 255) | 0;\n        var intB = (this.b * 255) | 0;\n        return \'#\' + Scalar_1.Scalar.ToHex(intR) + Scalar_1.Scalar.ToHex(intG) + Scalar_1.Scalar.ToHex(intB);\n    };\n    /**\n     * Computes a new Color3 converted from the current one to linear space\n     * @returns a new Color3 object\n     */\n    Color3.prototype.toLinearSpace = function () {\n        var convertedColor = new Color3();\n        this.toLinearSpaceToRef(convertedColor);\n        return convertedColor;\n    };\n    /**\n     * Converts the Color3 values to linear space and stores the result in "convertedColor"\n     * @param convertedColor - defines the Color3 object where to store the linear space version\n     * @returns the unmodified Color3\n     */\n    Color3.prototype.toLinearSpaceToRef = function (convertedColor) {\n        convertedColor.r = Math.pow(this.r, types_1.ToLinearSpace);\n        convertedColor.g = Math.pow(this.g, types_1.ToLinearSpace);\n        convertedColor.b = Math.pow(this.b, types_1.ToLinearSpace);\n        return this;\n    };\n    /**\n     * Computes a new Color3 converted from the current one to gamma space\n     * @returns a new Color3 object\n     */\n    Color3.prototype.toGammaSpace = function () {\n        var convertedColor = new Color3();\n        this.toGammaSpaceToRef(convertedColor);\n        return convertedColor;\n    };\n    /**\n     * Converts the Color3 values to gamma space and stores the result in "convertedColor"\n     * @param convertedColor - defines the Color3 object where to store the gamma space version\n     * @returns the unmodified Color3\n     */\n    Color3.prototype.toGammaSpaceToRef = function (convertedColor) {\n        convertedColor.r = Math.pow(this.r, types_1.ToGammaSpace);\n        convertedColor.g = Math.pow(this.g, types_1.ToGammaSpace);\n        convertedColor.b = Math.pow(this.b, types_1.ToGammaSpace);\n        return this;\n    };\n    /**\n     * Serializes Color3\n     */\n    Color3.prototype.toJSON = function () {\n        return {\n            r: this.r,\n            g: this.g,\n            b: this.b\n        };\n    };\n    return Color3;\n}());\nexports.Color3 = Color3;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Color3.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Color4.ts":
/*!*******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Color4.ts ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Scalar_1 = __webpack_require__(/*! ./Scalar */ "./packages/decentraland-ecs/src/decentraland/math/Scalar.ts");\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\n/**\n * Class used to hold a RBGA color\n * @public\n */\nvar Color4 = /** @class */ (function () {\n    /**\n     * Creates a new Color4 object from red, green, blue values, all between 0 and 1\n     * @param r - defines the red component (between 0 and 1, default is 0)\n     * @param g - defines the green component (between 0 and 1, default is 0)\n     * @param b - defines the blue component (between 0 and 1, default is 0)\n     * @param a - defines the alpha component (between 0 and 1, default is 1)\n     */\n    function Color4(\n    /**\n     * Defines the red component (between 0 and 1, default is 0)\n     */\n    r, \n    /**\n     * Defines the green component (between 0 and 1, default is 0)\n     */\n    g, \n    /**\n     * Defines the blue component (between 0 and 1, default is 0)\n     */\n    b, \n    /**\n     * Defines the alpha component (between 0 and 1, default is 1)\n     */\n    a) {\n        if (r === void 0) { r = 0; }\n        if (g === void 0) { g = 0; }\n        if (b === void 0) { b = 0; }\n        if (a === void 0) { a = 1; }\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n    // Statics\n    /**\n     * Creates a new Color4 from the string containing valid hexadecimal values\n     * @param hex - defines a string containing valid hexadecimal values\n     * @returns a new Color4 object\n     */\n    Color4.FromHexString = function (hex) {\n        if (hex.substring(0, 1) !== \'#\' || hex.length !== 9) {\n            return new Color4(0.0, 0.0, 0.0, 0.0);\n        }\n        var r = parseInt(hex.substring(1, 3), 16);\n        var g = parseInt(hex.substring(3, 5), 16);\n        var b = parseInt(hex.substring(5, 7), 16);\n        var a = parseInt(hex.substring(7, 9), 16);\n        return Color4.FromInts(r, g, b, a);\n    };\n    /**\n     * Creates a new Color4 object set with the linearly interpolated values of "amount" between the left Color4 object and the right Color4 object\n     * @param left - defines the start value\n     * @param right - defines the end value\n     * @param amount - defines the gradient factor\n     * @returns a new Color4 object\n     */\n    Color4.Lerp = function (left, right, amount) {\n        var result = new Color4(0.0, 0.0, 0.0, 0.0);\n        Color4.LerpToRef(left, right, amount, result);\n        return result;\n    };\n    /**\n     * Set the given "result" with the linearly interpolated values of "amount" between the left Color4 object and the right Color4 object\n     * @param left - defines the start value\n     * @param right - defines the end value\n     * @param amount - defines the gradient factor\n     * @param result - defines the Color4 object where to store data\n     */\n    Color4.LerpToRef = function (left, right, amount, result) {\n        result.r = left.r + (right.r - left.r) * amount;\n        result.g = left.g + (right.g - left.g) * amount;\n        result.b = left.b + (right.b - left.b) * amount;\n        result.a = left.a + (right.a - left.a) * amount;\n    };\n    /**\n     * Returns a Color4 value containing a red color\n     * @returns a new Color3 object\n     */\n    Color4.Red = function () {\n        return new Color4(1.0, 0, 0, 1.0);\n    };\n    /**\n     * Returns a Color4 value containing a green color\n     * @returns a new Color4 object\n     */\n    Color4.Green = function () {\n        return new Color4(0, 1.0, 0, 1.0);\n    };\n    /**\n     * Returns a Color4 value containing a blue color\n     * @returns a new Color4 object\n     */\n    Color4.Blue = function () {\n        return new Color4(0, 0, 1.0, 1.0);\n    };\n    /**\n     * Returns a Color4 value containing a black color\n     * @returns a new Color4 object\n     */\n    Color4.Black = function () {\n        return new Color4(0, 0, 0, 1);\n    };\n    /**\n     * Returns a Color4 value containing a white color\n     * @returns a new Color4 object\n     */\n    Color4.White = function () {\n        return new Color4(1, 1, 1, 1);\n    };\n    /**\n     * Returns a Color4 value containing a purple color\n     * @returns a new Color4 object\n     */\n    Color4.Purple = function () {\n        return new Color4(0.5, 0, 0.5, 1);\n    };\n    /**\n     * Returns a Color4 value containing a magenta color\n     * @returns a new Color4 object\n     */\n    Color4.Magenta = function () {\n        return new Color4(1, 0, 1, 1);\n    };\n    /**\n     * Returns a Color4 value containing a yellow color\n     * @returns a new Color4 object\n     */\n    Color4.Yellow = function () {\n        return new Color4(1, 1, 0, 1);\n    };\n    /**\n     * Returns a Color4 value containing a gray color\n     * @returns a new Color4 object\n     */\n    Color4.Gray = function () {\n        return new Color4(0.5, 0.5, 0.5, 1.0);\n    };\n    /**\n     * Returns a Color4 value containing a teal color\n     * @returns a new Color4 object\n     */\n    Color4.Teal = function () {\n        return new Color4(0, 1.0, 1.0, 1.0);\n    };\n    /**\n     * Returns a Color4 value containing a transparent color\n     * @returns a new Color4 object\n     */\n    Color4.Clear = function () {\n        return new Color4(0, 0, 0, 0);\n    };\n    /**\n     * Creates a new Color4 from a Color3 and an alpha value\n     * @param color3 - defines the source Color3 to read from\n     * @param alpha - defines the alpha component (1.0 by default)\n     * @returns a new Color4 object\n     */\n    Color4.FromColor3 = function (color3, alpha) {\n        if (alpha === void 0) { alpha = 1.0; }\n        return new Color4(color3.r, color3.g, color3.b, alpha);\n    };\n    /**\n     * Creates a new Color4 from the starting index element of the given array\n     * @param array - defines the source array to read from\n     * @param offset - defines the offset in the source array\n     * @returns a new Color4 object\n     */\n    Color4.FromArray = function (array, offset) {\n        if (offset === void 0) { offset = 0; }\n        return new Color4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n    };\n    /**\n     * Creates a new Color3 from integer values (less than 256)\n     * @param r - defines the red component to read from (value between 0 and 255)\n     * @param g - defines the green component to read from (value between 0 and 255)\n     * @param b - defines the blue component to read from (value between 0 and 255)\n     * @param a - defines the alpha component to read from (value between 0 and 255)\n     * @returns a new Color3 object\n     */\n    Color4.FromInts = function (r, g, b, a) {\n        return new Color4(r / 255.0, g / 255.0, b / 255.0, a / 255.0);\n    };\n    /**\n     * Check the content of a given array and convert it to an array containing RGBA data\n     * If the original array was already containing count * 4 values then it is returned directly\n     * @param colors - defines the array to check\n     * @param count - defines the number of RGBA data to expect\n     * @returns an array containing count * 4 values (RGBA)\n     */\n    Color4.CheckColors4 = function (colors, count) {\n        // Check if color3 was used\n        if (colors.length === count * 3) {\n            var colors4 = [];\n            for (var index = 0; index < colors.length; index += 3) {\n                var newIndex = (index / 3) * 4;\n                colors4[newIndex] = colors[index];\n                colors4[newIndex + 1] = colors[index + 1];\n                colors4[newIndex + 2] = colors[index + 2];\n                colors4[newIndex + 3] = 1.0;\n            }\n            return colors4;\n        }\n        return colors;\n    };\n    // Operators\n    /**\n     * Adds in place the given Color4 values to the current Color4 object\n     * @param right - defines the second operand\n     * @returns the current updated Color4 object\n     */\n    Color4.prototype.addInPlace = function (right) {\n        this.r += right.r;\n        this.g += right.g;\n        this.b += right.b;\n        this.a += right.a;\n        return this;\n    };\n    /**\n     * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values\n     * @returns the new array\n     */\n    Color4.prototype.asArray = function () {\n        var result = new Array();\n        this.toArray(result, 0);\n        return result;\n    };\n    /**\n     * Stores from the starting index in the given array the Color4 successive values\n     * @param array - defines the array where to store the r,g,b components\n     * @param index - defines an optional index in the target array to define where to start storing values\n     * @returns the current Color4 object\n     */\n    Color4.prototype.toArray = function (array, index) {\n        if (index === void 0) { index = 0; }\n        array[index] = this.r;\n        array[index + 1] = this.g;\n        array[index + 2] = this.b;\n        array[index + 3] = this.a;\n        return this;\n    };\n    /**\n     * Creates a new Color4 set with the added values of the current Color4 and of the given one\n     * @param right - defines the second operand\n     * @returns a new Color4 object\n     */\n    Color4.prototype.add = function (right) {\n        return new Color4(this.r + right.r, this.g + right.g, this.b + right.b, this.a + right.a);\n    };\n    /**\n     * Creates a new Color4 set with the subtracted values of the given one from the current Color4\n     * @param right - defines the second operand\n     * @returns a new Color4 object\n     */\n    Color4.prototype.subtract = function (right) {\n        return new Color4(this.r - right.r, this.g - right.g, this.b - right.b, this.a - right.a);\n    };\n    /**\n     * Subtracts the given ones from the current Color4 values and stores the results in "result"\n     * @param right - defines the second operand\n     * @param result - defines the Color4 object where to store the result\n     * @returns the current Color4 object\n     */\n    Color4.prototype.subtractToRef = function (right, result) {\n        result.r = this.r - right.r;\n        result.g = this.g - right.g;\n        result.b = this.b - right.b;\n        result.a = this.a - right.a;\n        return this;\n    };\n    /**\n     * Creates a new Color4 with the current Color4 values multiplied by scale\n     * @param scale - defines the scaling factor to apply\n     * @returns a new Color4 object\n     */\n    Color4.prototype.scale = function (scale) {\n        return new Color4(this.r * scale, this.g * scale, this.b * scale, this.a * scale);\n    };\n    /**\n     * Multiplies the current Color4 values by scale and stores the result in "result"\n     * @param scale - defines the scaling factor to apply\n     * @param result - defines the Color4 object where to store the result\n     * @returns the current unmodified Color4\n     */\n    Color4.prototype.scaleToRef = function (scale, result) {\n        result.r = this.r * scale;\n        result.g = this.g * scale;\n        result.b = this.b * scale;\n        result.a = this.a * scale;\n        return this;\n    };\n    /**\n     * Scale the current Color4 values by a factor and add the result to a given Color4\n     * @param scale - defines the scale factor\n     * @param result - defines the Color4 object where to store the result\n     * @returns the unmodified current Color4\n     */\n    Color4.prototype.scaleAndAddToRef = function (scale, result) {\n        result.r += this.r * scale;\n        result.g += this.g * scale;\n        result.b += this.b * scale;\n        result.a += this.a * scale;\n        return this;\n    };\n    /**\n     * Clamps the rgb values by the min and max values and stores the result into "result"\n     * @param min - defines minimum clamping value (default is 0)\n     * @param max - defines maximum clamping value (default is 1)\n     * @param result - defines color to store the result into.\n     * @returns the cuurent Color4\n     */\n    Color4.prototype.clampToRef = function (min, max, result) {\n        if (min === void 0) { min = 0; }\n        if (max === void 0) { max = 1; }\n        result.r = Scalar_1.Scalar.Clamp(this.r, min, max);\n        result.g = Scalar_1.Scalar.Clamp(this.g, min, max);\n        result.b = Scalar_1.Scalar.Clamp(this.b, min, max);\n        result.a = Scalar_1.Scalar.Clamp(this.a, min, max);\n        return this;\n    };\n    /**\n     * Multipy an Color4 value by another and return a new Color4 object\n     * @param color - defines the Color4 value to multiply by\n     * @returns a new Color4 object\n     */\n    Color4.prototype.multiply = function (color) {\n        return new Color4(this.r * color.r, this.g * color.g, this.b * color.b, this.a * color.a);\n    };\n    /**\n     * Multipy a Color4 value by another and push the result in a reference value\n     * @param color - defines the Color4 value to multiply by\n     * @param result - defines the Color4 to fill the result in\n     * @returns the result Color4\n     */\n    Color4.prototype.multiplyToRef = function (color, result) {\n        result.r = this.r * color.r;\n        result.g = this.g * color.g;\n        result.b = this.b * color.b;\n        result.a = this.a * color.a;\n        return result;\n    };\n    /**\n     * Creates a string with the Color4 current values\n     * @returns the string representation of the Color4 object\n     */\n    Color4.prototype.toString = function () {\n        return \'{R: \' + this.r + \' G:\' + this.g + \' B:\' + this.b + \' A:\' + this.a + \'}\';\n    };\n    /**\n     * Returns the string "Color4"\n     * @returns "Color4"\n     */\n    Color4.prototype.getClassName = function () {\n        return \'Color4\';\n    };\n    /**\n     * Compute the Color4 hash code\n     * @returns an unique number that can be used to hash Color4 objects\n     */\n    Color4.prototype.getHashCode = function () {\n        var hash = this.r || 0;\n        hash = (hash * 397) ^ (this.g || 0);\n        hash = (hash * 397) ^ (this.b || 0);\n        hash = (hash * 397) ^ (this.a || 0);\n        return hash;\n    };\n    /**\n     * Creates a new Color4 copied from the current one\n     * @returns a new Color4 object\n     */\n    Color4.prototype.clone = function () {\n        return new Color4(this.r, this.g, this.b, this.a);\n    };\n    /**\n     * Copies the given Color4 values into the current one\n     * @param source - defines the source Color4 object\n     * @returns the current updated Color4 object\n     */\n    Color4.prototype.copyFrom = function (source) {\n        this.r = source.r;\n        this.g = source.g;\n        this.b = source.b;\n        this.a = source.a;\n        return this;\n    };\n    /**\n     * Copies the given float values into the current one\n     * @param r - defines the red component to read from\n     * @param g - defines the green component to read from\n     * @param b - defines the blue component to read from\n     * @param a - defines the alpha component to read from\n     * @returns the current updated Color4 object\n     */\n    Color4.prototype.copyFromFloats = function (r, g, b, a) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n        return this;\n    };\n    /**\n     * Copies the given float values into the current one\n     * @param r - defines the red component to read from\n     * @param g - defines the green component to read from\n     * @param b - defines the blue component to read from\n     * @param a - defines the alpha component to read from\n     * @returns the current updated Color4 object\n     */\n    Color4.prototype.set = function (r, g, b, a) {\n        return this.copyFromFloats(r, g, b, a);\n    };\n    /**\n     * Compute the Color4 hexadecimal code as a string\n     * @returns a string containing the hexadecimal representation of the Color4 object\n     */\n    Color4.prototype.toHexString = function () {\n        var intR = (this.r * 255) | 0;\n        var intG = (this.g * 255) | 0;\n        var intB = (this.b * 255) | 0;\n        var intA = (this.a * 255) | 0;\n        return \'#\' + Scalar_1.Scalar.ToHex(intR) + Scalar_1.Scalar.ToHex(intG) + Scalar_1.Scalar.ToHex(intB) + Scalar_1.Scalar.ToHex(intA);\n    };\n    /**\n     * Computes a new Color4 converted from the current one to linear space\n     * @returns a new Color4 object\n     */\n    Color4.prototype.toLinearSpace = function () {\n        var convertedColor = new Color4();\n        this.toLinearSpaceToRef(convertedColor);\n        return convertedColor;\n    };\n    /**\n     * Converts the Color4 values to linear space and stores the result in "convertedColor"\n     * @param convertedColor - defines the Color4 object where to store the linear space version\n     * @returns the unmodified Color4\n     */\n    Color4.prototype.toLinearSpaceToRef = function (convertedColor) {\n        convertedColor.r = Math.pow(this.r, types_1.ToLinearSpace);\n        convertedColor.g = Math.pow(this.g, types_1.ToLinearSpace);\n        convertedColor.b = Math.pow(this.b, types_1.ToLinearSpace);\n        convertedColor.a = this.a;\n        return this;\n    };\n    /**\n     * Computes a new Color4 converted from the current one to gamma space\n     * @returns a new Color4 object\n     */\n    Color4.prototype.toGammaSpace = function () {\n        var convertedColor = new Color4();\n        this.toGammaSpaceToRef(convertedColor);\n        return convertedColor;\n    };\n    /**\n     * Converts the Color4 values to gamma space and stores the result in "convertedColor"\n     * @param convertedColor - defines the Color4 object where to store the gamma space version\n     * @returns the unmodified Color4\n     */\n    Color4.prototype.toGammaSpaceToRef = function (convertedColor) {\n        convertedColor.r = Math.pow(this.r, types_1.ToGammaSpace);\n        convertedColor.g = Math.pow(this.g, types_1.ToGammaSpace);\n        convertedColor.b = Math.pow(this.b, types_1.ToGammaSpace);\n        convertedColor.a = this.a;\n        return this;\n    };\n    return Color4;\n}());\nexports.Color4 = Color4;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Color4.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Curve3d.ts":
/*!********************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Curve3d.ts ***!
  \********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Vector3_1 = __webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts");\n/**\n * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\n * A Curve3 is designed from a series of successive Vector3.\n * {@link https://doc.babylonjs.com/how_to/how_to_use_curve3 }\n * @public\n */\nvar Curve3 = /** @class */ (function () {\n    /**\n     * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\n     * A Curve3 is designed from a series of successive Vector3.\n     * {@link http://doc.babylonjs.com/tutorials/How_to_use_Curve3#curve3-object | Tutorial }\n     * @param points - points which make up the curve\n     */\n    function Curve3(points) {\n        this._length = 0.0;\n        this._points = points;\n        this._length = this._computeLength(points);\n    }\n    /**\n     * Returns a Curve3 object along a Quadratic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#quadratic-bezier-curve\n     * @param v0 - (Vector3) the origin point of the Quadratic Bezier\n     * @param v1 - (Vector3) the control point\n     * @param v2 - (Vector3) the end point of the Quadratic Bezier\n     * @param nbPoints - (integer) the wanted number of points in the curve\n     * @returns the created Curve3\n     */\n    Curve3.CreateQuadraticBezier = function (v0, v1, v2, nbPoints) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        nbPoints = nbPoints > 2 ? nbPoints : 3;\n        var bez = new Array();\n        var equation = function (t, val0, val1, val2) {\n            var res = (1.0 - t) * (1.0 - t) * val0 + 2.0 * t * (1.0 - t) * val1 + t * t * val2;\n            return res;\n        };\n        for (var i = 0; i <= nbPoints; i++) {\n            bez.push(new Vector3_1.Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x), equation(i / nbPoints, v0.y, v1.y, v2.y), equation(i / nbPoints, v0.z, v1.z, v2.z)));\n        }\n        return new Curve3(bez);\n    };\n    /**\n     * Returns a Curve3 object along a Cubic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#cubic-bezier-curve\n     * @param v0 - (Vector3) the origin point of the Cubic Bezier\n     * @param v1 - (Vector3) the first control point\n     * @param v2 - (Vector3) the second control point\n     * @param v3 - (Vector3) the end point of the Cubic Bezier\n     * @param nbPoints - (integer) the wanted number of points in the curve\n     * @returns the created Curve3\n     */\n    Curve3.CreateCubicBezier = function (v0, v1, v2, v3, nbPoints) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        nbPoints = nbPoints > 3 ? nbPoints : 4;\n        var bez = new Array();\n        var equation = function (t, val0, val1, val2, val3) {\n            var res = (1.0 - t) * (1.0 - t) * (1.0 - t) * val0 +\n                3.0 * t * (1.0 - t) * (1.0 - t) * val1 +\n                3.0 * t * t * (1.0 - t) * val2 +\n                t * t * t * val3;\n            return res;\n        };\n        for (var i = 0; i <= nbPoints; i++) {\n            bez.push(new Vector3_1.Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x, v3.x), equation(i / nbPoints, v0.y, v1.y, v2.y, v3.y), equation(i / nbPoints, v0.z, v1.z, v2.z, v3.z)));\n        }\n        return new Curve3(bez);\n    };\n    /**\n     * Returns a Curve3 object along a Hermite Spline curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#hermite-spline\n     * @param p1 - (Vector3) the origin point of the Hermite Spline\n     * @param t1 - (Vector3) the tangent vector at the origin point\n     * @param p2 - (Vector3) the end point of the Hermite Spline\n     * @param t2 - (Vector3) the tangent vector at the end point\n     * @param nbPoints - (integer) the wanted number of points in the curve\n     * @returns the created Curve3\n     */\n    Curve3.CreateHermiteSpline = function (p1, t1, p2, t2, nbPoints) {\n        var hermite = new Array();\n        var step = 1.0 / nbPoints;\n        for (var i = 0; i <= nbPoints; i++) {\n            hermite.push(Vector3_1.Vector3.Hermite(p1, t1, p2, t2, i * step));\n        }\n        return new Curve3(hermite);\n    };\n    /**\n     * Returns a Curve3 object along a CatmullRom Spline curve :\n     * @param points - (array of Vector3) the points the spline must pass through. At least, four points required\n     * @param nbPoints - (integer) the wanted number of points between each curve control points\n     * @param closed - (boolean) optional with default false, when true forms a closed loop from the points\n     * @returns the created Curve3\n     */\n    Curve3.CreateCatmullRomSpline = function (points, nbPoints, closed) {\n        var catmullRom = new Array();\n        var step = 1.0 / nbPoints;\n        var amount = 0.0;\n        if (closed) {\n            var pointsCount = points.length;\n            for (var i = 0; i < pointsCount; i++) {\n                amount = 0;\n                for (var c = 0; c < nbPoints; c++) {\n                    catmullRom.push(Vector3_1.Vector3.CatmullRom(points[i % pointsCount], points[(i + 1) % pointsCount], points[(i + 2) % pointsCount], points[(i + 3) % pointsCount], amount));\n                    amount += step;\n                }\n            }\n            catmullRom.push(catmullRom[0]);\n        }\n        else {\n            var totalPoints = new Array();\n            totalPoints.push(points[0].clone());\n            Array.prototype.push.apply(totalPoints, points);\n            totalPoints.push(points[points.length - 1].clone());\n            var i = 0;\n            for (i = 0; i < totalPoints.length - 3; i++) {\n                amount = 0;\n                for (var c = 0; c < nbPoints; c++) {\n                    catmullRom.push(Vector3_1.Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\n                    amount += step;\n                }\n            }\n            i--;\n            catmullRom.push(Vector3_1.Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\n        }\n        return new Curve3(catmullRom);\n    };\n    /**\n     * @returns the Curve3 stored array of successive Vector3\n     */\n    Curve3.prototype.getPoints = function () {\n        return this._points;\n    };\n    /**\n     * @returns the computed length (float) of the curve.\n     */\n    Curve3.prototype.length = function () {\n        return this._length;\n    };\n    /**\n     * Returns a new instance of Curve3 object : var curve = curveA.continue(curveB);\n     * This new Curve3 is built by translating and sticking the curveB at the end of the curveA.\n     * curveA and curveB keep unchanged.\n     * @param curve - the curve to continue from this curve\n     * @returns the newly constructed curve\n     */\n    Curve3.prototype.continue = function (curve) {\n        var lastPoint = this._points[this._points.length - 1];\n        var continuedPoints = this._points.slice();\n        var curvePoints = curve.getPoints();\n        for (var i = 1; i < curvePoints.length; i++) {\n            continuedPoints.push(curvePoints[i].subtract(curvePoints[0]).add(lastPoint));\n        }\n        var continuedCurve = new Curve3(continuedPoints);\n        return continuedCurve;\n    };\n    Curve3.prototype._computeLength = function (path) {\n        var l = 0;\n        for (var i = 1; i < path.length; i++) {\n            l += path[i].subtract(path[i - 1]).length();\n        }\n        return l;\n    };\n    return Curve3;\n}());\nexports.Curve3 = Curve3;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Curve3d.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Furstum.ts":
/*!********************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Furstum.ts ***!
  \********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Plane_1 = __webpack_require__(/*! ./Plane */ "./packages/decentraland-ecs/src/decentraland/math/Plane.ts");\n/**\n * Reprasents a camera frustum\n * @beta\n */\nvar Frustum = /** @class */ (function () {\n    function Frustum() {\n    }\n    /**\n     * Gets the planes representing the frustum\n     * @param transform - matrix to be applied to the returned planes\n     * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\n     */\n    Frustum.GetPlanes = function (transform) {\n        var frustumPlanes = [];\n        for (var index = 0; index < 6; index++) {\n            frustumPlanes.push(new Plane_1.Plane(0.0, 0.0, 0.0, 0.0));\n        }\n        Frustum.GetPlanesToRef(transform, frustumPlanes);\n        return frustumPlanes;\n    };\n    /**\n     * Gets the near frustum plane transformed by the transform matrix\n     * @param transform - transformation matrix to be applied to the resulting frustum plane\n     * @param frustumPlane - the resuling frustum plane\n     */\n    Frustum.GetNearPlaneToRef = function (transform, frustumPlane) {\n        var m = transform.m;\n        frustumPlane.normal.x = m[3] + m[2];\n        frustumPlane.normal.y = m[7] + m[6];\n        frustumPlane.normal.z = m[11] + m[10];\n        frustumPlane.d = m[15] + m[14];\n        frustumPlane.normalize();\n    };\n    /**\n     * Gets the far frustum plane transformed by the transform matrix\n     * @param transform - transformation matrix to be applied to the resulting frustum plane\n     * @param frustumPlane - the resuling frustum plane\n     */\n    Frustum.GetFarPlaneToRef = function (transform, frustumPlane) {\n        var m = transform.m;\n        frustumPlane.normal.x = m[3] - m[2];\n        frustumPlane.normal.y = m[7] - m[6];\n        frustumPlane.normal.z = m[11] - m[10];\n        frustumPlane.d = m[15] - m[14];\n        frustumPlane.normalize();\n    };\n    /**\n     * Gets the left frustum plane transformed by the transform matrix\n     * @param transform - transformation matrix to be applied to the resulting frustum plane\n     * @param frustumPlane - the resuling frustum plane\n     */\n    Frustum.GetLeftPlaneToRef = function (transform, frustumPlane) {\n        var m = transform.m;\n        frustumPlane.normal.x = m[3] + m[0];\n        frustumPlane.normal.y = m[7] + m[4];\n        frustumPlane.normal.z = m[11] + m[8];\n        frustumPlane.d = m[15] + m[12];\n        frustumPlane.normalize();\n    };\n    /**\n     * Gets the right frustum plane transformed by the transform matrix\n     * @param transform - transformation matrix to be applied to the resulting frustum plane\n     * @param frustumPlane - the resuling frustum plane\n     */\n    Frustum.GetRightPlaneToRef = function (transform, frustumPlane) {\n        var m = transform.m;\n        frustumPlane.normal.x = m[3] - m[0];\n        frustumPlane.normal.y = m[7] - m[4];\n        frustumPlane.normal.z = m[11] - m[8];\n        frustumPlane.d = m[15] - m[12];\n        frustumPlane.normalize();\n    };\n    /**\n     * Gets the top frustum plane transformed by the transform matrix\n     * @param transform - transformation matrix to be applied to the resulting frustum plane\n     * @param frustumPlane - the resuling frustum plane\n     */\n    Frustum.GetTopPlaneToRef = function (transform, frustumPlane) {\n        var m = transform.m;\n        frustumPlane.normal.x = m[3] - m[1];\n        frustumPlane.normal.y = m[7] - m[5];\n        frustumPlane.normal.z = m[11] - m[9];\n        frustumPlane.d = m[15] - m[13];\n        frustumPlane.normalize();\n    };\n    /**\n     * Gets the bottom frustum plane transformed by the transform matrix\n     * @param transform - transformation matrix to be applied to the resulting frustum plane\n     * @param frustumPlane - the resuling frustum plane\n     */\n    Frustum.GetBottomPlaneToRef = function (transform, frustumPlane) {\n        var m = transform.m;\n        frustumPlane.normal.x = m[3] + m[1];\n        frustumPlane.normal.y = m[7] + m[5];\n        frustumPlane.normal.z = m[11] + m[9];\n        frustumPlane.d = m[15] + m[13];\n        frustumPlane.normalize();\n    };\n    /**\n     * Sets the given array "frustumPlanes" with the 6 Frustum planes computed by the given transformation matrix.\n     * @param transform - transformation matrix to be applied to the resulting frustum planes\n     * @param frustumPlanes - the resuling frustum planes\n     */\n    Frustum.GetPlanesToRef = function (transform, frustumPlanes) {\n        // Near\n        Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);\n        // Far\n        Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);\n        // Left\n        Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);\n        // Right\n        Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);\n        // Top\n        Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);\n        // Bottom\n        Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\n    };\n    return Frustum;\n}());\nexports.Frustum = Frustum;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnVyc3R1bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNlbnRyYWxhbmQvbWF0aC9GdXJzdHVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsaUNBQStCO0FBRS9COzs7R0FHRztBQUNIO0lBQUE7SUEySEEsQ0FBQztJQTFIQzs7OztPQUlHO0lBQ1csaUJBQVMsR0FBdkIsVUFBd0IsU0FBaUI7UUFDdkMsSUFBSSxhQUFhLEdBQUcsRUFBRSxDQUFBO1FBQ3RCLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDdEMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLGFBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFBO1NBQ2xEO1FBQ0QsT0FBTyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUE7UUFDaEQsT0FBTyxhQUFhLENBQUE7SUFDdEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDVyx5QkFBaUIsR0FBL0IsVUFBZ0MsU0FBaUIsRUFBRSxZQUFtQjtRQUNwRSxJQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFBO1FBQ3JCLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDbkMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNuQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ3JDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUM5QixZQUFZLENBQUMsU0FBUyxFQUFFLENBQUE7SUFDMUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDVyx3QkFBZ0IsR0FBOUIsVUFBK0IsU0FBaUIsRUFBRSxZQUFtQjtRQUNuRSxJQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFBO1FBQ3JCLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDbkMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNuQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ3JDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUM5QixZQUFZLENBQUMsU0FBUyxFQUFFLENBQUE7SUFDMUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDVyx5QkFBaUIsR0FBL0IsVUFBZ0MsU0FBaUIsRUFBRSxZQUFtQjtRQUNwRSxJQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFBO1FBQ3JCLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDbkMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNuQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3BDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUM5QixZQUFZLENBQUMsU0FBUyxFQUFFLENBQUE7SUFDMUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDVywwQkFBa0IsR0FBaEMsVUFBaUMsU0FBaUIsRUFBRSxZQUFtQjtRQUNyRSxJQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFBO1FBQ3JCLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDbkMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNuQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3BDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUM5QixZQUFZLENBQUMsU0FBUyxFQUFFLENBQUE7SUFDMUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDVyx3QkFBZ0IsR0FBOUIsVUFBK0IsU0FBaUIsRUFBRSxZQUFtQjtRQUNuRSxJQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFBO1FBQ3JCLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDbkMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNuQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3BDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUM5QixZQUFZLENBQUMsU0FBUyxFQUFFLENBQUE7SUFDMUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDVywyQkFBbUIsR0FBakMsVUFBa0MsU0FBaUIsRUFBRSxZQUFtQjtRQUN0RSxJQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFBO1FBQ3JCLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDbkMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNuQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3BDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUM5QixZQUFZLENBQUMsU0FBUyxFQUFFLENBQUE7SUFDMUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDVyxzQkFBYyxHQUE1QixVQUE2QixTQUFpQixFQUFFLGFBQXNCO1FBQ3BFLE9BQU87UUFDUCxPQUFPLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRXRELE1BQU07UUFDTixPQUFPLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRXJELE9BQU87UUFDUCxPQUFPLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRXRELFFBQVE7UUFDUixPQUFPLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRXZELE1BQU07UUFDTixPQUFPLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRXJELFNBQVM7UUFDVCxPQUFPLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzFELENBQUM7SUFDSCxjQUFDO0FBQUQsQ0FBQyxBQTNIRCxJQTJIQztBQTNIWSwwQkFBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hdHJpeCB9IGZyb20gJy4vTWF0cml4J1xuXG5pbXBvcnQgeyBQbGFuZSB9IGZyb20gJy4vUGxhbmUnXG5cbi8qKlxuICogUmVwcmFzZW50cyBhIGNhbWVyYSBmcnVzdHVtXG4gKiBAYmV0YVxuICovXG5leHBvcnQgY2xhc3MgRnJ1c3R1bSB7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBwbGFuZXMgcmVwcmVzZW50aW5nIHRoZSBmcnVzdHVtXG4gICAqIEBwYXJhbSB0cmFuc2Zvcm0gLSBtYXRyaXggdG8gYmUgYXBwbGllZCB0byB0aGUgcmV0dXJuZWQgcGxhbmVzXG4gICAqIEByZXR1cm5zIGEgbmV3IGFycmF5IG9mIDYgRnJ1c3R1bSBwbGFuZXMgY29tcHV0ZWQgYnkgdGhlIGdpdmVuIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgR2V0UGxhbmVzKHRyYW5zZm9ybTogTWF0cml4KTogUGxhbmVbXSB7XG4gICAgbGV0IGZydXN0dW1QbGFuZXMgPSBbXVxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCA2OyBpbmRleCsrKSB7XG4gICAgICBmcnVzdHVtUGxhbmVzLnB1c2gobmV3IFBsYW5lKDAuMCwgMC4wLCAwLjAsIDAuMCkpXG4gICAgfVxuICAgIEZydXN0dW0uR2V0UGxhbmVzVG9SZWYodHJhbnNmb3JtLCBmcnVzdHVtUGxhbmVzKVxuICAgIHJldHVybiBmcnVzdHVtUGxhbmVzXG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbmVhciBmcnVzdHVtIHBsYW5lIHRyYW5zZm9ybWVkIGJ5IHRoZSB0cmFuc2Zvcm0gbWF0cml4XG4gICAqIEBwYXJhbSB0cmFuc2Zvcm0gLSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdG8gYmUgYXBwbGllZCB0byB0aGUgcmVzdWx0aW5nIGZydXN0dW0gcGxhbmVcbiAgICogQHBhcmFtIGZydXN0dW1QbGFuZSAtIHRoZSByZXN1bGluZyBmcnVzdHVtIHBsYW5lXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIEdldE5lYXJQbGFuZVRvUmVmKHRyYW5zZm9ybTogTWF0cml4LCBmcnVzdHVtUGxhbmU6IFBsYW5lKTogdm9pZCB7XG4gICAgY29uc3QgbSA9IHRyYW5zZm9ybS5tXG4gICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC54ID0gbVszXSArIG1bMl1cbiAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnkgPSBtWzddICsgbVs2XVxuICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueiA9IG1bMTFdICsgbVsxMF1cbiAgICBmcnVzdHVtUGxhbmUuZCA9IG1bMTVdICsgbVsxNF1cbiAgICBmcnVzdHVtUGxhbmUubm9ybWFsaXplKClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBmYXIgZnJ1c3R1bSBwbGFuZSB0cmFuc2Zvcm1lZCBieSB0aGUgdHJhbnNmb3JtIG1hdHJpeFxuICAgKiBAcGFyYW0gdHJhbnNmb3JtIC0gdHJhbnNmb3JtYXRpb24gbWF0cml4IHRvIGJlIGFwcGxpZWQgdG8gdGhlIHJlc3VsdGluZyBmcnVzdHVtIHBsYW5lXG4gICAqIEBwYXJhbSBmcnVzdHVtUGxhbmUgLSB0aGUgcmVzdWxpbmcgZnJ1c3R1bSBwbGFuZVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBHZXRGYXJQbGFuZVRvUmVmKHRyYW5zZm9ybTogTWF0cml4LCBmcnVzdHVtUGxhbmU6IFBsYW5lKTogdm9pZCB7XG4gICAgY29uc3QgbSA9IHRyYW5zZm9ybS5tXG4gICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC54ID0gbVszXSAtIG1bMl1cbiAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnkgPSBtWzddIC0gbVs2XVxuICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueiA9IG1bMTFdIC0gbVsxMF1cbiAgICBmcnVzdHVtUGxhbmUuZCA9IG1bMTVdIC0gbVsxNF1cbiAgICBmcnVzdHVtUGxhbmUubm9ybWFsaXplKClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBsZWZ0IGZydXN0dW0gcGxhbmUgdHJhbnNmb3JtZWQgYnkgdGhlIHRyYW5zZm9ybSBtYXRyaXhcbiAgICogQHBhcmFtIHRyYW5zZm9ybSAtIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0byBiZSBhcHBsaWVkIHRvIHRoZSByZXN1bHRpbmcgZnJ1c3R1bSBwbGFuZVxuICAgKiBAcGFyYW0gZnJ1c3R1bVBsYW5lIC0gdGhlIHJlc3VsaW5nIGZydXN0dW0gcGxhbmVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgR2V0TGVmdFBsYW5lVG9SZWYodHJhbnNmb3JtOiBNYXRyaXgsIGZydXN0dW1QbGFuZTogUGxhbmUpOiB2b2lkIHtcbiAgICBjb25zdCBtID0gdHJhbnNmb3JtLm1cbiAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnggPSBtWzNdICsgbVswXVxuICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueSA9IG1bN10gKyBtWzRdXG4gICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC56ID0gbVsxMV0gKyBtWzhdXG4gICAgZnJ1c3R1bVBsYW5lLmQgPSBtWzE1XSArIG1bMTJdXG4gICAgZnJ1c3R1bVBsYW5lLm5vcm1hbGl6ZSgpXG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgcmlnaHQgZnJ1c3R1bSBwbGFuZSB0cmFuc2Zvcm1lZCBieSB0aGUgdHJhbnNmb3JtIG1hdHJpeFxuICAgKiBAcGFyYW0gdHJhbnNmb3JtIC0gdHJhbnNmb3JtYXRpb24gbWF0cml4IHRvIGJlIGFwcGxpZWQgdG8gdGhlIHJlc3VsdGluZyBmcnVzdHVtIHBsYW5lXG4gICAqIEBwYXJhbSBmcnVzdHVtUGxhbmUgLSB0aGUgcmVzdWxpbmcgZnJ1c3R1bSBwbGFuZVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBHZXRSaWdodFBsYW5lVG9SZWYodHJhbnNmb3JtOiBNYXRyaXgsIGZydXN0dW1QbGFuZTogUGxhbmUpOiB2b2lkIHtcbiAgICBjb25zdCBtID0gdHJhbnNmb3JtLm1cbiAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnggPSBtWzNdIC0gbVswXVxuICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueSA9IG1bN10gLSBtWzRdXG4gICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC56ID0gbVsxMV0gLSBtWzhdXG4gICAgZnJ1c3R1bVBsYW5lLmQgPSBtWzE1XSAtIG1bMTJdXG4gICAgZnJ1c3R1bVBsYW5lLm5vcm1hbGl6ZSgpXG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdG9wIGZydXN0dW0gcGxhbmUgdHJhbnNmb3JtZWQgYnkgdGhlIHRyYW5zZm9ybSBtYXRyaXhcbiAgICogQHBhcmFtIHRyYW5zZm9ybSAtIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0byBiZSBhcHBsaWVkIHRvIHRoZSByZXN1bHRpbmcgZnJ1c3R1bSBwbGFuZVxuICAgKiBAcGFyYW0gZnJ1c3R1bVBsYW5lIC0gdGhlIHJlc3VsaW5nIGZydXN0dW0gcGxhbmVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgR2V0VG9wUGxhbmVUb1JlZih0cmFuc2Zvcm06IE1hdHJpeCwgZnJ1c3R1bVBsYW5lOiBQbGFuZSk6IHZvaWQge1xuICAgIGNvbnN0IG0gPSB0cmFuc2Zvcm0ubVxuICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueCA9IG1bM10gLSBtWzFdXG4gICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC55ID0gbVs3XSAtIG1bNV1cbiAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnogPSBtWzExXSAtIG1bOV1cbiAgICBmcnVzdHVtUGxhbmUuZCA9IG1bMTVdIC0gbVsxM11cbiAgICBmcnVzdHVtUGxhbmUubm9ybWFsaXplKClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBib3R0b20gZnJ1c3R1bSBwbGFuZSB0cmFuc2Zvcm1lZCBieSB0aGUgdHJhbnNmb3JtIG1hdHJpeFxuICAgKiBAcGFyYW0gdHJhbnNmb3JtIC0gdHJhbnNmb3JtYXRpb24gbWF0cml4IHRvIGJlIGFwcGxpZWQgdG8gdGhlIHJlc3VsdGluZyBmcnVzdHVtIHBsYW5lXG4gICAqIEBwYXJhbSBmcnVzdHVtUGxhbmUgLSB0aGUgcmVzdWxpbmcgZnJ1c3R1bSBwbGFuZVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBHZXRCb3R0b21QbGFuZVRvUmVmKHRyYW5zZm9ybTogTWF0cml4LCBmcnVzdHVtUGxhbmU6IFBsYW5lKTogdm9pZCB7XG4gICAgY29uc3QgbSA9IHRyYW5zZm9ybS5tXG4gICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC54ID0gbVszXSArIG1bMV1cbiAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnkgPSBtWzddICsgbVs1XVxuICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueiA9IG1bMTFdICsgbVs5XVxuICAgIGZydXN0dW1QbGFuZS5kID0gbVsxNV0gKyBtWzEzXVxuICAgIGZydXN0dW1QbGFuZS5ub3JtYWxpemUoKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGdpdmVuIGFycmF5IFwiZnJ1c3R1bVBsYW5lc1wiIHdpdGggdGhlIDYgRnJ1c3R1bSBwbGFuZXMgY29tcHV0ZWQgYnkgdGhlIGdpdmVuIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAgICogQHBhcmFtIHRyYW5zZm9ybSAtIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0byBiZSBhcHBsaWVkIHRvIHRoZSByZXN1bHRpbmcgZnJ1c3R1bSBwbGFuZXNcbiAgICogQHBhcmFtIGZydXN0dW1QbGFuZXMgLSB0aGUgcmVzdWxpbmcgZnJ1c3R1bSBwbGFuZXNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgR2V0UGxhbmVzVG9SZWYodHJhbnNmb3JtOiBNYXRyaXgsIGZydXN0dW1QbGFuZXM6IFBsYW5lW10pOiB2b2lkIHtcbiAgICAvLyBOZWFyXG4gICAgRnJ1c3R1bS5HZXROZWFyUGxhbmVUb1JlZih0cmFuc2Zvcm0sIGZydXN0dW1QbGFuZXNbMF0pXG5cbiAgICAvLyBGYXJcbiAgICBGcnVzdHVtLkdldEZhclBsYW5lVG9SZWYodHJhbnNmb3JtLCBmcnVzdHVtUGxhbmVzWzFdKVxuXG4gICAgLy8gTGVmdFxuICAgIEZydXN0dW0uR2V0TGVmdFBsYW5lVG9SZWYodHJhbnNmb3JtLCBmcnVzdHVtUGxhbmVzWzJdKVxuXG4gICAgLy8gUmlnaHRcbiAgICBGcnVzdHVtLkdldFJpZ2h0UGxhbmVUb1JlZih0cmFuc2Zvcm0sIGZydXN0dW1QbGFuZXNbM10pXG5cbiAgICAvLyBUb3BcbiAgICBGcnVzdHVtLkdldFRvcFBsYW5lVG9SZWYodHJhbnNmb3JtLCBmcnVzdHVtUGxhbmVzWzRdKVxuXG4gICAgLy8gQm90dG9tXG4gICAgRnJ1c3R1bS5HZXRCb3R0b21QbGFuZVRvUmVmKHRyYW5zZm9ybSwgZnJ1c3R1bVBsYW5lc1s1XSlcbiAgfVxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Furstum.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Matrix.ts":
/*!*******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Matrix.ts ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Vector3_1 = __webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts");\nvar Quaternion_1 = __webpack_require__(/*! ./Quaternion */ "./packages/decentraland-ecs/src/decentraland/math/Quaternion.ts");\nvar preallocatedVariables_1 = __webpack_require__(/*! ./preallocatedVariables */ "./packages/decentraland-ecs/src/decentraland/math/preallocatedVariables.ts");\nvar Vector4_1 = __webpack_require__(/*! ./Vector4 */ "./packages/decentraland-ecs/src/decentraland/math/Vector4.ts");\n/**\n * Class used to store matrix data (4x4)\n * @public\n */\nvar Matrix = /** @class */ (function () {\n    /**\n     * Creates an empty matrix (filled with zeros)\n     */\n    function Matrix() {\n        this._isIdentity = false;\n        this._isIdentityDirty = true;\n        this._isIdentity3x2 = true;\n        this._isIdentity3x2Dirty = true;\n        this._m = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        this._updateIdentityStatus(false);\n    }\n    Object.defineProperty(Matrix.prototype, "m", {\n        /**\n         * Gets the internal data of the matrix\n         */\n        get: function () {\n            return this._m;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Matrix, "IdentityReadOnly", {\n        /**\n         * Gets an identity matrix that must not be updated\n         */\n        get: function () {\n            return Matrix._identityReadOnly;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Statics\n    /**\n     * Creates a matrix from an array\n     * @param array - defines the source array\n     * @param offset - defines an offset in the source array\n     * @returns a new Matrix set from the starting index of the given array\n     */\n    Matrix.FromArray = function (array, offset) {\n        if (offset === void 0) { offset = 0; }\n        var result = new Matrix();\n        Matrix.FromArrayToRef(array, offset, result);\n        return result;\n    };\n    /**\n     * Copy the content of an array into a given matrix\n     * @param array - defines the source array\n     * @param offset - defines an offset in the source array\n     * @param result - defines the target matrix\n     */\n    Matrix.FromArrayToRef = function (array, offset, result) {\n        for (var index = 0; index < 16; index++) {\n            result._m[index] = array[index + offset];\n        }\n        result._markAsUpdated();\n    };\n    /**\n     * Stores an array into a matrix after having multiplied each component by a given factor\n     * @param array - defines the source array\n     * @param offset - defines the offset in the source array\n     * @param scale - defines the scaling factor\n     * @param result - defines the target matrix\n     */\n    Matrix.FromFloatArrayToRefScaled = function (array, offset, scale, result) {\n        for (var index = 0; index < 16; index++) {\n            result._m[index] = array[index + offset] * scale;\n        }\n        result._markAsUpdated();\n    };\n    /**\n     * Stores a list of values (16) inside a given matrix\n     * @param initialM11 - defines 1st value of 1st row\n     * @param initialM12 - defines 2nd value of 1st row\n     * @param initialM13 - defines 3rd value of 1st row\n     * @param initialM14 - defines 4th value of 1st row\n     * @param initialM21 - defines 1st value of 2nd row\n     * @param initialM22 - defines 2nd value of 2nd row\n     * @param initialM23 - defines 3rd value of 2nd row\n     * @param initialM24 - defines 4th value of 2nd row\n     * @param initialM31 - defines 1st value of 3rd row\n     * @param initialM32 - defines 2nd value of 3rd row\n     * @param initialM33 - defines 3rd value of 3rd row\n     * @param initialM34 - defines 4th value of 3rd row\n     * @param initialM41 - defines 1st value of 4th row\n     * @param initialM42 - defines 2nd value of 4th row\n     * @param initialM43 - defines 3rd value of 4th row\n     * @param initialM44 - defines 4th value of 4th row\n     * @param result - defines the target matrix\n     */\n    Matrix.FromValuesToRef = function (initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result) {\n        var m = result._m;\n        m[0] = initialM11;\n        m[1] = initialM12;\n        m[2] = initialM13;\n        m[3] = initialM14;\n        m[4] = initialM21;\n        m[5] = initialM22;\n        m[6] = initialM23;\n        m[7] = initialM24;\n        m[8] = initialM31;\n        m[9] = initialM32;\n        m[10] = initialM33;\n        m[11] = initialM34;\n        m[12] = initialM41;\n        m[13] = initialM42;\n        m[14] = initialM43;\n        m[15] = initialM44;\n        result._markAsUpdated();\n    };\n    /**\n     * Creates new matrix from a list of values (16)\n     * @param initialM11 - defines 1st value of 1st row\n     * @param initialM12 - defines 2nd value of 1st row\n     * @param initialM13 - defines 3rd value of 1st row\n     * @param initialM14 - defines 4th value of 1st row\n     * @param initialM21 - defines 1st value of 2nd row\n     * @param initialM22 - defines 2nd value of 2nd row\n     * @param initialM23 - defines 3rd value of 2nd row\n     * @param initialM24 - defines 4th value of 2nd row\n     * @param initialM31 - defines 1st value of 3rd row\n     * @param initialM32 - defines 2nd value of 3rd row\n     * @param initialM33 - defines 3rd value of 3rd row\n     * @param initialM34 - defines 4th value of 3rd row\n     * @param initialM41 - defines 1st value of 4th row\n     * @param initialM42 - defines 2nd value of 4th row\n     * @param initialM43 - defines 3rd value of 4th row\n     * @param initialM44 - defines 4th value of 4th row\n     * @returns the new matrix\n     */\n    Matrix.FromValues = function (initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44) {\n        var result = new Matrix();\n        var m = result._m;\n        m[0] = initialM11;\n        m[1] = initialM12;\n        m[2] = initialM13;\n        m[3] = initialM14;\n        m[4] = initialM21;\n        m[5] = initialM22;\n        m[6] = initialM23;\n        m[7] = initialM24;\n        m[8] = initialM31;\n        m[9] = initialM32;\n        m[10] = initialM33;\n        m[11] = initialM34;\n        m[12] = initialM41;\n        m[13] = initialM42;\n        m[14] = initialM43;\n        m[15] = initialM44;\n        result._markAsUpdated();\n        return result;\n    };\n    /**\n     * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n     * @param scale - defines the scale vector3\n     * @param rotation - defines the rotation quaternion\n     * @param translation - defines the translation vector3\n     * @returns a new matrix\n     */\n    Matrix.Compose = function (scale, rotation, translation) {\n        var result = new Matrix();\n        Matrix.ComposeToRef(scale, rotation, translation, result);\n        return result;\n    };\n    /**\n     * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n     * @param scale - defines the scale vector3\n     * @param rotation - defines the rotation quaternion\n     * @param translation - defines the translation vector3\n     * @param result - defines the target matrix\n     */\n    Matrix.ComposeToRef = function (scale, rotation, translation, result) {\n        Matrix.ScalingToRef(scale.x, scale.y, scale.z, preallocatedVariables_1.MathTmp.Matrix[1]);\n        rotation.toRotationMatrix(preallocatedVariables_1.MathTmp.Matrix[0]);\n        preallocatedVariables_1.MathTmp.Matrix[1].multiplyToRef(preallocatedVariables_1.MathTmp.Matrix[0], result);\n        result.setTranslation(translation);\n    };\n    /**\n     * Creates a new identity matrix\n     * @returns a new identity matrix\n     */\n    Matrix.Identity = function () {\n        var identity = Matrix.FromValues(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n        identity._updateIdentityStatus(true);\n        return identity;\n    };\n    /**\n     * Creates a new identity matrix and stores the result in a given matrix\n     * @param result - defines the target matrix\n     */\n    Matrix.IdentityToRef = function (result) {\n        Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n        result._updateIdentityStatus(true);\n    };\n    /**\n     * Creates a new zero matrix\n     * @returns a new zero matrix\n     */\n    Matrix.Zero = function () {\n        var zero = Matrix.FromValues(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n        zero._updateIdentityStatus(false);\n        return zero;\n    };\n    /**\n     * Creates a new rotation matrix for "angle" radians around the X axis\n     * @param angle - defines the angle (in radians) to use\n     * @returns the new matrix\n     */\n    Matrix.RotationX = function (angle) {\n        var result = new Matrix();\n        Matrix.RotationXToRef(angle, result);\n        return result;\n    };\n    /**\n     * Creates a new matrix as the invert of a given matrix\n     * @param source - defines the source matrix\n     * @returns the new matrix\n     */\n    Matrix.Invert = function (source) {\n        var result = new Matrix();\n        source.invertToRef(result);\n        return result;\n    };\n    /**\n     * Creates a new rotation matrix for "angle" radians around the X axis and stores it in a given matrix\n     * @param angle - defines the angle (in radians) to use\n     * @param result - defines the target matrix\n     */\n    Matrix.RotationXToRef = function (angle, result) {\n        var s = Math.sin(angle);\n        var c = Math.cos(angle);\n        Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n        result._updateIdentityStatus(c === 1 && s === 0);\n    };\n    /**\n     * Creates a new rotation matrix for "angle" radians around the Y axis\n     * @param angle - defines the angle (in radians) to use\n     * @returns the new matrix\n     */\n    Matrix.RotationY = function (angle) {\n        var result = new Matrix();\n        Matrix.RotationYToRef(angle, result);\n        return result;\n    };\n    /**\n     * Creates a new rotation matrix for "angle" radians around the Y axis and stores it in a given matrix\n     * @param angle - defines the angle (in radians) to use\n     * @param result - defines the target matrix\n     */\n    Matrix.RotationYToRef = function (angle, result) {\n        var s = Math.sin(angle);\n        var c = Math.cos(angle);\n        Matrix.FromValuesToRef(c, 0.0, -s, 0.0, 0.0, 1.0, 0.0, 0.0, s, 0.0, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n        result._updateIdentityStatus(c === 1 && s === 0);\n    };\n    /**\n     * Creates a new rotation matrix for "angle" radians around the Z axis\n     * @param angle - defines the angle (in radians) to use\n     * @returns the new matrix\n     */\n    Matrix.RotationZ = function (angle) {\n        var result = new Matrix();\n        Matrix.RotationZToRef(angle, result);\n        return result;\n    };\n    /**\n     * Creates a new rotation matrix for "angle" radians around the Z axis and stores it in a given matrix\n     * @param angle - defines the angle (in radians) to use\n     * @param result - defines the target matrix\n     */\n    Matrix.RotationZToRef = function (angle, result) {\n        var s = Math.sin(angle);\n        var c = Math.cos(angle);\n        Matrix.FromValuesToRef(c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n        result._updateIdentityStatus(c === 1 && s === 0);\n    };\n    /**\n     * Creates a new rotation matrix for "angle" radians around the given axis\n     * @param axis - defines the axis to use\n     * @param angle - defines the angle (in radians) to use\n     * @returns the new matrix\n     */\n    Matrix.RotationAxis = function (axis, angle) {\n        var result = new Matrix();\n        Matrix.RotationAxisToRef(axis, angle, result);\n        return result;\n    };\n    /**\n     * Creates a new rotation matrix for "angle" radians around the given axis and stores it in a given matrix\n     * @param axis - defines the axis to use\n     * @param angle - defines the angle (in radians) to use\n     * @param result - defines the target matrix\n     */\n    Matrix.RotationAxisToRef = function (axis, angle, result) {\n        var s = Math.sin(-angle);\n        var c = Math.cos(-angle);\n        var c1 = 1 - c;\n        axis.normalize();\n        var m = result._m;\n        m[0] = axis.x * axis.x * c1 + c;\n        m[1] = axis.x * axis.y * c1 - axis.z * s;\n        m[2] = axis.x * axis.z * c1 + axis.y * s;\n        m[3] = 0.0;\n        m[4] = axis.y * axis.x * c1 + axis.z * s;\n        m[5] = axis.y * axis.y * c1 + c;\n        m[6] = axis.y * axis.z * c1 - axis.x * s;\n        m[7] = 0.0;\n        m[8] = axis.z * axis.x * c1 - axis.y * s;\n        m[9] = axis.z * axis.y * c1 + axis.x * s;\n        m[10] = axis.z * axis.z * c1 + c;\n        m[11] = 0.0;\n        m[12] = 0.0;\n        m[13] = 0.0;\n        m[14] = 0.0;\n        m[15] = 1.0;\n        result._markAsUpdated();\n    };\n    /**\n     * Creates a rotation matrix\n     * @param yaw - defines the yaw angle in radians (Y axis)\n     * @param pitch - defines the pitch angle in radians (X axis)\n     * @param roll - defines the roll angle in radians (X axis)\n     * @returns the new rotation matrix\n     */\n    Matrix.RotationYawPitchRoll = function (yaw, pitch, roll) {\n        var result = new Matrix();\n        Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, result);\n        return result;\n    };\n    /**\n     * Creates a rotation matrix and stores it in a given matrix\n     * @param yaw - defines the yaw angle in radians (Y axis)\n     * @param pitch - defines the pitch angle in radians (X axis)\n     * @param roll - defines the roll angle in radians (X axis)\n     * @param result - defines the target matrix\n     */\n    Matrix.RotationYawPitchRollToRef = function (yaw, pitch, roll, result) {\n        Quaternion_1.Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, preallocatedVariables_1.MathTmp.Quaternion[0]);\n        preallocatedVariables_1.MathTmp.Quaternion[0].toRotationMatrix(result);\n    };\n    /**\n     * Creates a scaling matrix\n     * @param x - defines the scale factor on X axis\n     * @param y - defines the scale factor on Y axis\n     * @param z - defines the scale factor on Z axis\n     * @returns the new matrix\n     */\n    Matrix.Scaling = function (x, y, z) {\n        var result = new Matrix();\n        Matrix.ScalingToRef(x, y, z, result);\n        return result;\n    };\n    /**\n     * Creates a scaling matrix and stores it in a given matrix\n     * @param x - defines the scale factor on X axis\n     * @param y - defines the scale factor on Y axis\n     * @param z - defines the scale factor on Z axis\n     * @param result - defines the target matrix\n     */\n    Matrix.ScalingToRef = function (x, y, z, result) {\n        Matrix.FromValuesToRef(x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n        result._updateIdentityStatus(x === 1 && y === 1 && z === 1);\n    };\n    /**\n     * Creates a translation matrix\n     * @param x - defines the translation on X axis\n     * @param y - defines the translation on Y axis\n     * @param z - defines the translationon Z axis\n     * @returns the new matrix\n     */\n    Matrix.Translation = function (x, y, z) {\n        var result = new Matrix();\n        Matrix.TranslationToRef(x, y, z, result);\n        return result;\n    };\n    /**\n     * Creates a translation matrix and stores it in a given matrix\n     * @param x - defines the translation on X axis\n     * @param y - defines the translation on Y axis\n     * @param z - defines the translationon Z axis\n     * @param result - defines the target matrix\n     */\n    Matrix.TranslationToRef = function (x, y, z, result) {\n        Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0, result);\n        result._updateIdentityStatus(x === 0 && y === 0 && z === 0);\n    };\n    /**\n     * Returns a new Matrix whose values are the interpolated values for "gradient" (float) between the ones of the matrices "startValue" and "endValue".\n     * @param startValue - defines the start value\n     * @param endValue - defines the end value\n     * @param gradient - defines the gradient factor\n     * @returns the new matrix\n     */\n    Matrix.Lerp = function (startValue, endValue, gradient) {\n        var result = new Matrix();\n        Matrix.LerpToRef(startValue, endValue, gradient, result);\n        return result;\n    };\n    /**\n     * Set the given matrix "result" as the interpolated values for "gradient" (float) between the ones of the matrices "startValue" and "endValue".\n     * @param startValue - defines the start value\n     * @param endValue - defines the end value\n     * @param gradient - defines the gradient factor\n     * @param result - defines the Matrix object where to store data\n     */\n    Matrix.LerpToRef = function (startValue, endValue, gradient, result) {\n        for (var index = 0; index < 16; index++) {\n            result._m[index] = startValue._m[index] * (1.0 - gradient) + endValue._m[index] * gradient;\n        }\n        result._markAsUpdated();\n    };\n    /**\n     * Builds a new matrix whose values are computed by:\n     * * decomposing the the "startValue" and "endValue" matrices into their respective scale, rotation and translation matrices\n     * * interpolating for "gradient" (float) the values between each of these decomposed matrices between the start and the end\n     * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n     * @param startValue - defines the first matrix\n     * @param endValue - defines the second matrix\n     * @param gradient - defines the gradient between the two matrices\n     * @returns the new matrix\n     */\n    Matrix.DecomposeLerp = function (startValue, endValue, gradient) {\n        var result = new Matrix();\n        Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\n        return result;\n    };\n    /**\n     * Update a matrix to values which are computed by:\n     * * decomposing the the "startValue" and "endValue" matrices into their respective scale, rotation and translation matrices\n     * * interpolating for "gradient" (float) the values between each of these decomposed matrices between the start and the end\n     * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n     * @param startValue - defines the first matrix\n     * @param endValue - defines the second matrix\n     * @param gradient - defines the gradient between the two matrices\n     * @param result - defines the target matrix\n     */\n    Matrix.DecomposeLerpToRef = function (startValue, endValue, gradient, result) {\n        var startScale = preallocatedVariables_1.MathTmp.Vector3[0];\n        var startRotation = preallocatedVariables_1.MathTmp.Quaternion[0];\n        var startTranslation = preallocatedVariables_1.MathTmp.Vector3[1];\n        startValue.decompose(startScale, startRotation, startTranslation);\n        var endScale = preallocatedVariables_1.MathTmp.Vector3[2];\n        var endRotation = preallocatedVariables_1.MathTmp.Quaternion[1];\n        var endTranslation = preallocatedVariables_1.MathTmp.Vector3[3];\n        endValue.decompose(endScale, endRotation, endTranslation);\n        var resultScale = preallocatedVariables_1.MathTmp.Vector3[4];\n        Vector3_1.Vector3.LerpToRef(startScale, endScale, gradient, resultScale);\n        var resultRotation = preallocatedVariables_1.MathTmp.Quaternion[2];\n        Quaternion_1.Quaternion.SlerpToRef(startRotation, endRotation, gradient, resultRotation);\n        var resultTranslation = preallocatedVariables_1.MathTmp.Vector3[5];\n        Vector3_1.Vector3.LerpToRef(startTranslation, endTranslation, gradient, resultTranslation);\n        Matrix.ComposeToRef(resultScale, resultRotation, resultTranslation, result);\n    };\n    /**\n     * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like "up"\n     * This function works in left handed mode\n     * @param eye - defines the final position of the entity\n     * @param target - defines where the entity should look at\n     * @param up - defines the up vector for the entity\n     * @returns the new matrix\n     */\n    Matrix.LookAtLH = function (eye, target, up) {\n        var result = new Matrix();\n        Matrix.LookAtLHToRef(eye, target, up, result);\n        return result;\n    };\n    /**\n     * Sets the given "result" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like "up".\n     * This function works in left handed mode\n     * @param eye - defines the final position of the entity\n     * @param target - defines where the entity should look at\n     * @param up - defines the up vector for the entity\n     * @param result - defines the target matrix\n     */\n    Matrix.LookAtLHToRef = function (eye, target, up, result) {\n        var xAxis = preallocatedVariables_1.MathTmp.Vector3[0];\n        var yAxis = preallocatedVariables_1.MathTmp.Vector3[1];\n        var zAxis = preallocatedVariables_1.MathTmp.Vector3[2];\n        // Z axis\n        target.subtractToRef(eye, zAxis);\n        zAxis.normalize();\n        // X axis\n        Vector3_1.Vector3.CrossToRef(up, zAxis, xAxis);\n        var xSquareLength = xAxis.lengthSquared();\n        if (xSquareLength === 0) {\n            xAxis.x = 1.0;\n        }\n        else {\n            xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n        }\n        // Y axis\n        Vector3_1.Vector3.CrossToRef(zAxis, xAxis, yAxis);\n        yAxis.normalize();\n        // Eye angles\n        var ex = -Vector3_1.Vector3.Dot(xAxis, eye);\n        var ey = -Vector3_1.Vector3.Dot(yAxis, eye);\n        var ez = -Vector3_1.Vector3.Dot(zAxis, eye);\n        Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);\n    };\n    /**\n     * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like "up"\n     * This function works in right handed mode\n     * @param eye - defines the final position of the entity\n     * @param target - defines where the entity should look at\n     * @param up - defines the up vector for the entity\n     * @returns the new matrix\n     */\n    Matrix.LookAtRH = function (eye, target, up) {\n        var result = new Matrix();\n        Matrix.LookAtRHToRef(eye, target, up, result);\n        return result;\n    };\n    /**\n     * Sets the given "result" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like "up".\n     * This function works in right handed mode\n     * @param eye - defines the final position of the entity\n     * @param target - defines where the entity should look at\n     * @param up - defines the up vector for the entity\n     * @param result - defines the target matrix\n     */\n    Matrix.LookAtRHToRef = function (eye, target, up, result) {\n        var xAxis = preallocatedVariables_1.MathTmp.Vector3[0];\n        var yAxis = preallocatedVariables_1.MathTmp.Vector3[1];\n        var zAxis = preallocatedVariables_1.MathTmp.Vector3[2];\n        // Z axis\n        eye.subtractToRef(target, zAxis);\n        zAxis.normalize();\n        // X axis\n        Vector3_1.Vector3.CrossToRef(up, zAxis, xAxis);\n        var xSquareLength = xAxis.lengthSquared();\n        if (xSquareLength === 0) {\n            xAxis.x = 1.0;\n        }\n        else {\n            xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n        }\n        // Y axis\n        Vector3_1.Vector3.CrossToRef(zAxis, xAxis, yAxis);\n        yAxis.normalize();\n        // Eye angles\n        var ex = -Vector3_1.Vector3.Dot(xAxis, eye);\n        var ey = -Vector3_1.Vector3.Dot(yAxis, eye);\n        var ez = -Vector3_1.Vector3.Dot(zAxis, eye);\n        Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);\n    };\n    /**\n     * Create a left-handed orthographic projection matrix\n     * @param width - defines the viewport width\n     * @param height - defines the viewport height\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @returns a new matrix as a left-handed orthographic projection matrix\n     */\n    Matrix.OrthoLH = function (width, height, znear, zfar) {\n        var matrix = new Matrix();\n        Matrix.OrthoLHToRef(width, height, znear, zfar, matrix);\n        return matrix;\n    };\n    /**\n     * Store a left-handed orthographic projection to a given matrix\n     * @param width - defines the viewport width\n     * @param height - defines the viewport height\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @param result - defines the target matrix\n     */\n    Matrix.OrthoLHToRef = function (width, height, znear, zfar, result) {\n        var n = znear;\n        var f = zfar;\n        var a = 2.0 / width;\n        var b = 2.0 / height;\n        var c = 2.0 / (f - n);\n        var d = -(f + n) / (f - n);\n        Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, 0.0, 0.0, d, 1.0, result);\n        result._updateIdentityStatus(a === 1 && b === 1 && c === 1 && d === 0);\n    };\n    /**\n     * Create a left-handed orthographic projection matrix\n     * @param left - defines the viewport left coordinate\n     * @param right - defines the viewport right coordinate\n     * @param bottom - defines the viewport bottom coordinate\n     * @param top - defines the viewport top coordinate\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @returns a new matrix as a left-handed orthographic projection matrix\n     */\n    Matrix.OrthoOffCenterLH = function (left, right, bottom, top, znear, zfar) {\n        var matrix = new Matrix();\n        Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix);\n        return matrix;\n    };\n    /**\n     * Stores a left-handed orthographic projection into a given matrix\n     * @param left - defines the viewport left coordinate\n     * @param right - defines the viewport right coordinate\n     * @param bottom - defines the viewport bottom coordinate\n     * @param top - defines the viewport top coordinate\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @param result - defines the target matrix\n     */\n    Matrix.OrthoOffCenterLHToRef = function (left, right, bottom, top, znear, zfar, result) {\n        var n = znear;\n        var f = zfar;\n        var a = 2.0 / (right - left);\n        var b = 2.0 / (top - bottom);\n        var c = 2.0 / (f - n);\n        var d = -(f + n) / (f - n);\n        var i0 = (left + right) / (left - right);\n        var i1 = (top + bottom) / (bottom - top);\n        Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, i0, i1, d, 1.0, result);\n        result._markAsUpdated();\n    };\n    /**\n     * Creates a right-handed orthographic projection matrix\n     * @param left - defines the viewport left coordinate\n     * @param right - defines the viewport right coordinate\n     * @param bottom - defines the viewport bottom coordinate\n     * @param top - defines the viewport top coordinate\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @returns a new matrix as a right-handed orthographic projection matrix\n     */\n    Matrix.OrthoOffCenterRH = function (left, right, bottom, top, znear, zfar) {\n        var matrix = new Matrix();\n        Matrix.OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix);\n        return matrix;\n    };\n    /**\n     * Stores a right-handed orthographic projection into a given matrix\n     * @param left - defines the viewport left coordinate\n     * @param right - defines the viewport right coordinate\n     * @param bottom - defines the viewport bottom coordinate\n     * @param top - defines the viewport top coordinate\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @param result - defines the target matrix\n     */\n    Matrix.OrthoOffCenterRHToRef = function (left, right, bottom, top, znear, zfar, result) {\n        Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result);\n        result._m[10] *= -1; // No need to call _markAsUpdated as previous function already called it and let _isIdentityDirty to true\n    };\n    /**\n     * Creates a left-handed perspective projection matrix\n     * @param width - defines the viewport width\n     * @param height - defines the viewport height\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @returns a new matrix as a left-handed perspective projection matrix\n     */\n    Matrix.PerspectiveLH = function (width, height, znear, zfar) {\n        var matrix = new Matrix();\n        var n = znear;\n        var f = zfar;\n        var a = (2.0 * n) / width;\n        var b = (2.0 * n) / height;\n        var c = (f + n) / (f - n);\n        var d = (-2.0 * f * n) / (f - n);\n        Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, matrix);\n        matrix._updateIdentityStatus(false);\n        return matrix;\n    };\n    /**\n     * Creates a left-handed perspective projection matrix\n     * @param fov - defines the horizontal field of view\n     * @param aspect - defines the aspect ratio\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @returns a new matrix as a left-handed perspective projection matrix\n     */\n    Matrix.PerspectiveFovLH = function (fov, aspect, znear, zfar) {\n        var matrix = new Matrix();\n        Matrix.PerspectiveFovLHToRef(fov, aspect, znear, zfar, matrix);\n        return matrix;\n    };\n    /**\n     * Stores a left-handed perspective projection into a given matrix\n     * @param fov - defines the horizontal field of view\n     * @param aspect - defines the aspect ratio\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @param result - defines the target matrix\n     * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n     */\n    Matrix.PerspectiveFovLHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\n        if (isVerticalFovFixed === void 0) { isVerticalFovFixed = true; }\n        var n = znear;\n        var f = zfar;\n        var t = 1.0 / Math.tan(fov * 0.5);\n        var a = isVerticalFovFixed ? t / aspect : t;\n        var b = isVerticalFovFixed ? t : t * aspect;\n        var c = (f + n) / (f - n);\n        var d = (-2.0 * f * n) / (f - n);\n        Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, result);\n        result._updateIdentityStatus(false);\n    };\n    /**\n     * Creates a right-handed perspective projection matrix\n     * @param fov - defines the horizontal field of view\n     * @param aspect - defines the aspect ratio\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @returns a new matrix as a right-handed perspective projection matrix\n     */\n    Matrix.PerspectiveFovRH = function (fov, aspect, znear, zfar) {\n        var matrix = new Matrix();\n        Matrix.PerspectiveFovRHToRef(fov, aspect, znear, zfar, matrix);\n        return matrix;\n    };\n    /**\n     * Stores a right-handed perspective projection into a given matrix\n     * @param fov - defines the horizontal field of view\n     * @param aspect - defines the aspect ratio\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @param result - defines the target matrix\n     * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n     */\n    Matrix.PerspectiveFovRHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\n        /* alternatively this could be expressed as:\n        //    m = PerspectiveFovLHToRef\n        //    m[10] *= -1.0;\n        //    m[11] *= -1.0;\n        */\n        if (isVerticalFovFixed === void 0) { isVerticalFovFixed = true; }\n        var n = znear;\n        var f = zfar;\n        var t = 1.0 / Math.tan(fov * 0.5);\n        var a = isVerticalFovFixed ? t / aspect : t;\n        var b = isVerticalFovFixed ? t : t * aspect;\n        var c = -(f + n) / (f - n);\n        var d = (-2 * f * n) / (f - n);\n        Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, -1.0, 0.0, 0.0, d, 0.0, result);\n        result._updateIdentityStatus(false);\n    };\n    /**\n     * Stores a perspective projection for WebVR info a given matrix\n     * @param fov - defines the field of view\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @param result - defines the target matrix\n     * @param rightHanded - defines if the matrix must be in right-handed mode (false by default)\n     */\n    Matrix.PerspectiveFovWebVRToRef = function (fov, znear, zfar, result, rightHanded) {\n        if (rightHanded === void 0) { rightHanded = false; }\n        var rightHandedFactor = rightHanded ? -1 : 1;\n        var upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);\n        var downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);\n        var leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);\n        var rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);\n        var xScale = 2.0 / (leftTan + rightTan);\n        var yScale = 2.0 / (upTan + downTan);\n        var m = result._m;\n        m[0] = xScale;\n        m[1] = m[2] = m[3] = m[4] = 0.0;\n        m[5] = yScale;\n        m[6] = m[7] = 0.0;\n        m[8] = (leftTan - rightTan) * xScale * 0.5;\n        m[9] = -((upTan - downTan) * yScale * 0.5);\n        m[10] = -zfar / (znear - zfar);\n        m[11] = 1.0 * rightHandedFactor;\n        m[12] = m[13] = m[15] = 0.0;\n        m[14] = -(2.0 * zfar * znear) / (zfar - znear);\n        result._markAsUpdated();\n    };\n    /**\n     * Extracts a 2x2 matrix from a given matrix and store the result in a FloatArray\n     * @param matrix - defines the matrix to use\n     * @returns a new FloatArray array with 4 elements : the 2x2 matrix extracted from the given matrix\n     */\n    Matrix.GetAsMatrix2x2 = function (matrix) {\n        return [matrix._m[0], matrix._m[1], matrix._m[4], matrix._m[5]];\n    };\n    /**\n     * Extracts a 3x3 matrix from a given matrix and store the result in a FloatArray\n     * @param matrix - defines the matrix to use\n     * @returns a new FloatArray array with 9 elements : the 3x3 matrix extracted from the given matrix\n     */\n    Matrix.GetAsMatrix3x3 = function (matrix) {\n        return [\n            matrix._m[0],\n            matrix._m[1],\n            matrix._m[2],\n            matrix._m[4],\n            matrix._m[5],\n            matrix._m[6],\n            matrix._m[8],\n            matrix._m[9],\n            matrix._m[10]\n        ];\n    };\n    /**\n     * Compute the transpose of a given matrix\n     * @param matrix - defines the matrix to transpose\n     * @returns the new matrix\n     */\n    Matrix.Transpose = function (matrix) {\n        var result = new Matrix();\n        Matrix.TransposeToRef(matrix, result);\n        return result;\n    };\n    /**\n     * Compute the transpose of a matrix and store it in a target matrix\n     * @param matrix - defines the matrix to transpose\n     * @param result - defines the target matrix\n     */\n    Matrix.TransposeToRef = function (matrix, result) {\n        var rm = result._m;\n        var mm = matrix._m;\n        rm[0] = mm[0];\n        rm[1] = mm[4];\n        rm[2] = mm[8];\n        rm[3] = mm[12];\n        rm[4] = mm[1];\n        rm[5] = mm[5];\n        rm[6] = mm[9];\n        rm[7] = mm[13];\n        rm[8] = mm[2];\n        rm[9] = mm[6];\n        rm[10] = mm[10];\n        rm[11] = mm[14];\n        rm[12] = mm[3];\n        rm[13] = mm[7];\n        rm[14] = mm[11];\n        rm[15] = mm[15];\n        // identity-ness does not change when transposing\n        result._updateIdentityStatus(matrix._isIdentity, matrix._isIdentityDirty);\n    };\n    /**\n     * Computes a reflection matrix from a plane\n     * @param plane - defines the reflection plane\n     * @returns a new matrix\n     */\n    Matrix.Reflection = function (plane) {\n        var matrix = new Matrix();\n        Matrix.ReflectionToRef(plane, matrix);\n        return matrix;\n    };\n    /**\n     * Computes a reflection matrix from a plane\n     * @param plane - defines the reflection plane\n     * @param result - defines the target matrix\n     */\n    Matrix.ReflectionToRef = function (plane, result) {\n        plane.normalize();\n        var x = plane.normal.x;\n        var y = plane.normal.y;\n        var z = plane.normal.z;\n        var temp = -2 * x;\n        var temp2 = -2 * y;\n        var temp3 = -2 * z;\n        Matrix.FromValuesToRef(temp * x + 1, temp2 * x, temp3 * x, 0.0, temp * y, temp2 * y + 1, temp3 * y, 0.0, temp * z, temp2 * z, temp3 * z + 1, 0.0, temp * plane.d, temp2 * plane.d, temp3 * plane.d, 1.0, result);\n    };\n    /**\n     * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\n     * @param xaxis - defines the value of the 1st axis\n     * @param yaxis - defines the value of the 2nd axis\n     * @param zaxis - defines the value of the 3rd axis\n     * @param result - defines the target matrix\n     */\n    Matrix.FromXYZAxesToRef = function (xaxis, yaxis, zaxis, result) {\n        Matrix.FromValuesToRef(xaxis.x, xaxis.y, xaxis.z, 0.0, yaxis.x, yaxis.y, yaxis.z, 0.0, zaxis.x, zaxis.y, zaxis.z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n    };\n    /**\n     * Creates a rotation matrix from a quaternion and stores it in a target matrix\n     * @param quat - defines the quaternion to use\n     * @param result - defines the target matrix\n     */\n    Matrix.FromQuaternionToRef = function (quat, result) {\n        var xx = quat.x * quat.x;\n        var yy = quat.y * quat.y;\n        var zz = quat.z * quat.z;\n        var xy = quat.x * quat.y;\n        var zw = quat.z * quat.w;\n        var zx = quat.z * quat.x;\n        var yw = quat.y * quat.w;\n        var yz = quat.y * quat.z;\n        var xw = quat.x * quat.w;\n        result._m[0] = 1.0 - 2.0 * (yy + zz);\n        result._m[1] = 2.0 * (xy + zw);\n        result._m[2] = 2.0 * (zx - yw);\n        result._m[3] = 0.0;\n        result._m[4] = 2.0 * (xy - zw);\n        result._m[5] = 1.0 - 2.0 * (zz + xx);\n        result._m[6] = 2.0 * (yz + xw);\n        result._m[7] = 0.0;\n        result._m[8] = 2.0 * (zx + yw);\n        result._m[9] = 2.0 * (yz - xw);\n        result._m[10] = 1.0 - 2.0 * (yy + xx);\n        result._m[11] = 0.0;\n        result._m[12] = 0.0;\n        result._m[13] = 0.0;\n        result._m[14] = 0.0;\n        result._m[15] = 1.0;\n        result._markAsUpdated();\n    };\n    /** @internal */\n    Matrix.prototype._markAsUpdated = function () {\n        this.updateFlag = Matrix._updateFlagSeed++;\n        this._isIdentity = false;\n        this._isIdentity3x2 = false;\n        this._isIdentityDirty = true;\n        this._isIdentity3x2Dirty = true;\n    };\n    // Properties\n    /**\n     * Check if the current matrix is identity\n     * @returns true is the matrix is the identity matrix\n     */\n    Matrix.prototype.isIdentity = function () {\n        if (this._isIdentityDirty) {\n            this._isIdentityDirty = false;\n            var m = this._m;\n            this._isIdentity =\n                m[0] === 1.0 &&\n                    m[1] === 0.0 &&\n                    m[2] === 0.0 &&\n                    m[3] === 0.0 &&\n                    m[4] === 0.0 &&\n                    m[5] === 1.0 &&\n                    m[6] === 0.0 &&\n                    m[7] === 0.0 &&\n                    m[8] === 0.0 &&\n                    m[9] === 0.0 &&\n                    m[10] === 1.0 &&\n                    m[11] === 0.0 &&\n                    m[12] === 0.0 &&\n                    m[13] === 0.0 &&\n                    m[14] === 0.0 &&\n                    m[15] === 1.0;\n        }\n        return this._isIdentity;\n    };\n    /**\n     * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\n     * @returns true is the matrix is the identity matrix\n     */\n    Matrix.prototype.isIdentityAs3x2 = function () {\n        if (this._isIdentity3x2Dirty) {\n            this._isIdentity3x2Dirty = false;\n            if (this._m[0] !== 1.0 || this._m[5] !== 1.0 || this._m[15] !== 1.0) {\n                this._isIdentity3x2 = false;\n            }\n            else if (this._m[1] !== 0.0 ||\n                this._m[2] !== 0.0 ||\n                this._m[3] !== 0.0 ||\n                this._m[4] !== 0.0 ||\n                this._m[6] !== 0.0 ||\n                this._m[7] !== 0.0 ||\n                this._m[8] !== 0.0 ||\n                this._m[9] !== 0.0 ||\n                this._m[10] !== 0.0 ||\n                this._m[11] !== 0.0 ||\n                this._m[12] !== 0.0 ||\n                this._m[13] !== 0.0 ||\n                this._m[14] !== 0.0) {\n                this._isIdentity3x2 = false;\n            }\n            else {\n                this._isIdentity3x2 = true;\n            }\n        }\n        return this._isIdentity3x2;\n    };\n    /**\n     * Gets the determinant of the matrix\n     * @returns the matrix determinant\n     */\n    Matrix.prototype.determinant = function () {\n        if (this._isIdentity === true) {\n            return 1;\n        }\n        var m = this._m;\n        // tslint:disable-next-line:one-variable-per-declaration\n        var m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\n        // tslint:disable-next-line:one-variable-per-declaration\n        var m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\n        // tslint:disable-next-line:one-variable-per-declaration\n        var m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\n        // tslint:disable-next-line:one-variable-per-declaration\n        var m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\n        /*\n        // https://en.wikipedia.org/wiki/Laplace_expansion\n        // to compute the deterrminant of a 4x4 Matrix we compute the cofactors of any row or column,\n        // then we multiply each Cofactor by its corresponding matrix value and sum them all to get the determinant\n        // Cofactor(i, j) = sign(i,j) * det(Minor(i, j))\n        // where\n        //  - sign(i,j) = (i+j) % 2 === 0 ? 1 : -1\n        //  - Minor(i, j) is the 3x3 matrix we get by removing row i and column j from current Matrix\n        //\n        // Here we do that for the 1st row.\n        */\n        // tslint:disable:variable-name\n        var det_22_33 = m22 * m33 - m32 * m23;\n        var det_21_33 = m21 * m33 - m31 * m23;\n        var det_21_32 = m21 * m32 - m31 * m22;\n        var det_20_33 = m20 * m33 - m30 * m23;\n        var det_20_32 = m20 * m32 - m22 * m30;\n        var det_20_31 = m20 * m31 - m30 * m21;\n        var cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n        var cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n        var cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n        var cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n        // tslint:enable:variable-name\n        return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n    };\n    // Methods\n    /**\n     * Returns the matrix as a FloatArray\n     * @returns the matrix underlying array\n     */\n    Matrix.prototype.toArray = function () {\n        return this._m;\n    };\n    /**\n     * Returns the matrix as a FloatArray\n     * @returns the matrix underlying array.\n     */\n    Matrix.prototype.asArray = function () {\n        return this._m;\n    };\n    /**\n     * Inverts the current matrix in place\n     * @returns the current inverted matrix\n     */\n    Matrix.prototype.invert = function () {\n        this.invertToRef(this);\n        return this;\n    };\n    /**\n     * Sets all the matrix elements to zero\n     * @returns the current matrix\n     */\n    Matrix.prototype.reset = function () {\n        Matrix.FromValuesToRef(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, this);\n        this._updateIdentityStatus(false);\n        return this;\n    };\n    /**\n     * Adds the current matrix with a second one\n     * @param other - defines the matrix to add\n     * @returns a new matrix as the addition of the current matrix and the given one\n     */\n    Matrix.prototype.add = function (other) {\n        var result = new Matrix();\n        this.addToRef(other, result);\n        return result;\n    };\n    /**\n     * Sets the given matrix "result" to the addition of the current matrix and the given one\n     * @param other - defines the matrix to add\n     * @param result - defines the target matrix\n     * @returns the current matrix\n     */\n    Matrix.prototype.addToRef = function (other, result) {\n        for (var index = 0; index < 16; index++) {\n            result._m[index] = this._m[index] + other._m[index];\n        }\n        result._markAsUpdated();\n        return this;\n    };\n    /**\n     * Adds in place the given matrix to the current matrix\n     * @param other - defines the second operand\n     * @returns the current updated matrix\n     */\n    Matrix.prototype.addToSelf = function (other) {\n        for (var index = 0; index < 16; index++) {\n            this._m[index] += other._m[index];\n        }\n        this._markAsUpdated();\n        return this;\n    };\n    /**\n     * Sets the given matrix to the current inverted Matrix\n     * @param other - defines the target matrix\n     * @returns the unmodified current matrix\n     */\n    Matrix.prototype.invertToRef = function (other) {\n        if (this._isIdentity === true) {\n            Matrix.IdentityToRef(other);\n            return this;\n        }\n        // the inverse of a Matrix is the transpose of cofactor matrix divided by the determinant\n        var m = this._m;\n        // tslint:disable:one-variable-per-declaration\n        var m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\n        var m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\n        var m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\n        var m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\n        // tslint:enable:one-variable-per-declaration\n        // tslint:disable:variable-name\n        var det_22_33 = m22 * m33 - m32 * m23;\n        var det_21_33 = m21 * m33 - m31 * m23;\n        var det_21_32 = m21 * m32 - m31 * m22;\n        var det_20_33 = m20 * m33 - m30 * m23;\n        var det_20_32 = m20 * m32 - m22 * m30;\n        var det_20_31 = m20 * m31 - m30 * m21;\n        var cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n        var cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n        var cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n        var cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n        var det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n        if (det === 0) {\n            // not invertible\n            other.copyFrom(this);\n            return this;\n        }\n        var detInv = 1 / det;\n        var det_12_33 = m12 * m33 - m32 * m13;\n        var det_11_33 = m11 * m33 - m31 * m13;\n        var det_11_32 = m11 * m32 - m31 * m12;\n        var det_10_33 = m10 * m33 - m30 * m13;\n        var det_10_32 = m10 * m32 - m30 * m12;\n        var det_10_31 = m10 * m31 - m30 * m11;\n        var det_12_23 = m12 * m23 - m22 * m13;\n        var det_11_23 = m11 * m23 - m21 * m13;\n        var det_11_22 = m11 * m22 - m21 * m12;\n        var det_10_23 = m10 * m23 - m20 * m13;\n        var det_10_22 = m10 * m22 - m20 * m12;\n        var det_10_21 = m10 * m21 - m20 * m11;\n        var cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32);\n        var cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32);\n        var cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31);\n        var cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31);\n        var cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32);\n        var cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32);\n        var cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31);\n        var cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31);\n        var cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22);\n        var cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22);\n        var cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21);\n        var cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21);\n        Matrix.FromValuesToRef(cofact_00 * detInv, cofact_10 * detInv, cofact_20 * detInv, cofact_30 * detInv, cofact_01 * detInv, cofact_11 * detInv, cofact_21 * detInv, cofact_31 * detInv, cofact_02 * detInv, cofact_12 * detInv, cofact_22 * detInv, cofact_32 * detInv, cofact_03 * detInv, cofact_13 * detInv, cofact_23 * detInv, cofact_33 * detInv, other);\n        // tslint:enable:variable-name\n        return this;\n    };\n    /**\n     * add a value at the specified position in the current Matrix\n     * @param index - the index of the value within the matrix. between 0 and 15.\n     * @param value - the value to be added\n     * @returns the current updated matrix\n     */\n    Matrix.prototype.addAtIndex = function (index, value) {\n        this._m[index] += value;\n        this._markAsUpdated();\n        return this;\n    };\n    /**\n     * mutiply the specified position in the current Matrix by a value\n     * @param index - the index of the value within the matrix. between 0 and 15.\n     * @param value - the value to be added\n     * @returns the current updated matrix\n     */\n    Matrix.prototype.multiplyAtIndex = function (index, value) {\n        this._m[index] *= value;\n        this._markAsUpdated();\n        return this;\n    };\n    /**\n     * Inserts the translation vector (using 3 floats) in the current matrix\n     * @param x - defines the 1st component of the translation\n     * @param y - defines the 2nd component of the translation\n     * @param z - defines the 3rd component of the translation\n     * @returns the current updated matrix\n     */\n    Matrix.prototype.setTranslationFromFloats = function (x, y, z) {\n        this._m[12] = x;\n        this._m[13] = y;\n        this._m[14] = z;\n        this._markAsUpdated();\n        return this;\n    };\n    /**\n     * Inserts the translation vector in the current matrix\n     * @param vector3 - defines the translation to insert\n     * @returns the current updated matrix\n     */\n    Matrix.prototype.setTranslation = function (vector3) {\n        return this.setTranslationFromFloats(vector3.x, vector3.y, vector3.z);\n    };\n    /**\n     * Gets the translation value of the current matrix\n     * @returns a new Vector3 as the extracted translation from the matrix\n     */\n    Matrix.prototype.getTranslation = function () {\n        return new Vector3_1.Vector3(this._m[12], this._m[13], this._m[14]);\n    };\n    /**\n     * Fill a Vector3 with the extracted translation from the matrix\n     * @param result - defines the Vector3 where to store the translation\n     * @returns the current matrix\n     */\n    Matrix.prototype.getTranslationToRef = function (result) {\n        result.x = this._m[12];\n        result.y = this._m[13];\n        result.z = this._m[14];\n        return this;\n    };\n    /**\n     * Remove rotation and scaling part from the matrix\n     * @returns the updated matrix\n     */\n    Matrix.prototype.removeRotationAndScaling = function () {\n        var m = this.m;\n        Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, m[12], m[13], m[14], m[15], this);\n        this._updateIdentityStatus(m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1);\n        return this;\n    };\n    /**\n     * Multiply two matrices\n     * @param other - defines the second operand\n     * @returns a new matrix set with the multiplication result of the current Matrix and the given one\n     */\n    Matrix.prototype.multiply = function (other) {\n        var result = new Matrix();\n        this.multiplyToRef(other, result);\n        return result;\n    };\n    /**\n     * Copy the current matrix from the given one\n     * @param other - defines the source matrix\n     * @returns the current updated matrix\n     */\n    Matrix.prototype.copyFrom = function (other) {\n        other.copyToArray(this._m);\n        var o = other;\n        this._updateIdentityStatus(o._isIdentity, o._isIdentityDirty, o._isIdentity3x2, o._isIdentity3x2Dirty);\n        return this;\n    };\n    /**\n     * Populates the given array from the starting index with the current matrix values\n     * @param array - defines the target array\n     * @param offset - defines the offset in the target array where to start storing values\n     * @returns the current matrix\n     */\n    Matrix.prototype.copyToArray = function (array, offset) {\n        if (offset === void 0) { offset = 0; }\n        for (var index = 0; index < 16; index++) {\n            array[offset + index] = this._m[index];\n        }\n        return this;\n    };\n    /**\n     * Sets the given matrix "result" with the multiplication result of the current Matrix and the given one\n     * @param other - defines the second operand\n     * @param result - defines the matrix where to store the multiplication\n     * @returns the current matrix\n     */\n    Matrix.prototype.multiplyToRef = function (other, result) {\n        if (this._isIdentity) {\n            result.copyFrom(other);\n            return this;\n        }\n        if (other._isIdentity) {\n            result.copyFrom(this);\n            return this;\n        }\n        this.multiplyToArray(other, result._m, 0);\n        result._markAsUpdated();\n        return this;\n    };\n    /**\n     * Sets the FloatArray "result" from the given index "offset" with the multiplication of the current matrix and the given one\n     * @param other - defines the second operand\n     * @param result - defines the array where to store the multiplication\n     * @param offset - defines the offset in the target array where to start storing values\n     * @returns the current matrix\n     */\n    Matrix.prototype.multiplyToArray = function (other, result, offset) {\n        var m = this._m;\n        var otherM = other.m;\n        // tslint:disable:one-variable-per-declaration\n        var tm0 = m[0], tm1 = m[1], tm2 = m[2], tm3 = m[3];\n        var tm4 = m[4], tm5 = m[5], tm6 = m[6], tm7 = m[7];\n        var tm8 = m[8], tm9 = m[9], tm10 = m[10], tm11 = m[11];\n        var tm12 = m[12], tm13 = m[13], tm14 = m[14], tm15 = m[15];\n        var om0 = otherM[0], om1 = otherM[1], om2 = otherM[2], om3 = otherM[3];\n        var om4 = otherM[4], om5 = otherM[5], om6 = otherM[6], om7 = otherM[7];\n        var om8 = otherM[8], om9 = otherM[9], om10 = otherM[10], om11 = otherM[11];\n        var om12 = otherM[12], om13 = otherM[13], om14 = otherM[14], om15 = otherM[15];\n        // tslint:enable:one-variable-per-declaration\n        result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12;\n        result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13;\n        result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14;\n        result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15;\n        result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12;\n        result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13;\n        result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14;\n        result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15;\n        result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12;\n        result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13;\n        result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14;\n        result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15;\n        result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12;\n        result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13;\n        result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14;\n        result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15;\n        return this;\n    };\n    /**\n     * Check equality between this matrix and a second one\n     * @param value - defines the second matrix to compare\n     * @returns true is the current matrix and the given one values are strictly equal\n     */\n    Matrix.prototype.equals = function (value) {\n        var other = value;\n        if (!other) {\n            return false;\n        }\n        if (this._isIdentity || other._isIdentity) {\n            if (!this._isIdentityDirty && !other._isIdentityDirty) {\n                return this._isIdentity && other._isIdentity;\n            }\n        }\n        var m = this.m;\n        var om = other.m;\n        return (m[0] === om[0] &&\n            m[1] === om[1] &&\n            m[2] === om[2] &&\n            m[3] === om[3] &&\n            m[4] === om[4] &&\n            m[5] === om[5] &&\n            m[6] === om[6] &&\n            m[7] === om[7] &&\n            m[8] === om[8] &&\n            m[9] === om[9] &&\n            m[10] === om[10] &&\n            m[11] === om[11] &&\n            m[12] === om[12] &&\n            m[13] === om[13] &&\n            m[14] === om[14] &&\n            m[15] === om[15]);\n    };\n    /**\n     * Clone the current matrix\n     * @returns a new matrix from the current matrix\n     */\n    Matrix.prototype.clone = function () {\n        var matrix = new Matrix();\n        matrix.copyFrom(this);\n        return matrix;\n    };\n    /**\n     * Returns the name of the current matrix class\n     * @returns the string "Matrix"\n     */\n    Matrix.prototype.getClassName = function () {\n        return \'Matrix\';\n    };\n    /**\n     * Gets the hash code of the current matrix\n     * @returns the hash code\n     */\n    Matrix.prototype.getHashCode = function () {\n        var hash = this._m[0] || 0;\n        for (var i = 1; i < 16; i++) {\n            hash = (hash * 397) ^ (this._m[i] || 0);\n        }\n        return hash;\n    };\n    /**\n     * Decomposes the current Matrix into a translation, rotation and scaling components\n     * @param scale - defines the scale vector3 given as a reference to update\n     * @param rotation - defines the rotation quaternion given as a reference to update\n     * @param translation - defines the translation vector3 given as a reference to update\n     * @returns true if operation was successful\n     */\n    Matrix.prototype.decompose = function (scale, rotation, translation) {\n        if (this._isIdentity) {\n            if (translation) {\n                translation.setAll(0);\n            }\n            if (scale) {\n                scale.setAll(1);\n            }\n            if (rotation) {\n                rotation.copyFromFloats(0, 0, 0, 1);\n            }\n            return true;\n        }\n        var m = this._m;\n        if (translation) {\n            translation.copyFromFloats(m[12], m[13], m[14]);\n        }\n        var usedScale = scale || preallocatedVariables_1.MathTmp.Vector3[0];\n        usedScale.x = Math.sqrt(m[0] * m[0] + m[1] * m[1] + m[2] * m[2]);\n        usedScale.y = Math.sqrt(m[4] * m[4] + m[5] * m[5] + m[6] * m[6]);\n        usedScale.z = Math.sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10]);\n        if (this.determinant() <= 0) {\n            usedScale.y *= -1;\n        }\n        if (usedScale.x === 0 || usedScale.y === 0 || usedScale.z === 0) {\n            if (rotation) {\n                rotation.copyFromFloats(0.0, 0.0, 0.0, 1.0);\n            }\n            return false;\n        }\n        if (rotation) {\n            // tslint:disable-next-line:one-variable-per-declaration\n            var sx = 1 / usedScale.x, sy = 1 / usedScale.y, sz = 1 / usedScale.z;\n            Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, preallocatedVariables_1.MathTmp.Matrix[0]);\n            Quaternion_1.Quaternion.FromRotationMatrixToRef(preallocatedVariables_1.MathTmp.Matrix[0], rotation);\n        }\n        return true;\n    };\n    /**\n     * Gets specific row of the matrix\n     * @param index - defines the number of the row to get\n     * @returns the index-th row of the current matrix as a new Vector4\n     */\n    Matrix.prototype.getRow = function (index) {\n        if (index < 0 || index > 3) {\n            return null;\n        }\n        var i = index * 4;\n        return new Vector4_1.Vector4(this._m[i + 0], this._m[i + 1], this._m[i + 2], this._m[i + 3]);\n    };\n    /**\n     * Sets the index-th row of the current matrix to the vector4 values\n     * @param index - defines the number of the row to set\n     * @param row - defines the target vector4\n     * @returns the updated current matrix\n     */\n    Matrix.prototype.setRow = function (index, row) {\n        return this.setRowFromFloats(index, row.x, row.y, row.z, row.w);\n    };\n    /**\n     * Compute the transpose of the matrix\n     * @returns the new transposed matrix\n     */\n    Matrix.prototype.transpose = function () {\n        return Matrix.Transpose(this);\n    };\n    /**\n     * Compute the transpose of the matrix and store it in a given matrix\n     * @param result - defines the target matrix\n     * @returns the current matrix\n     */\n    Matrix.prototype.transposeToRef = function (result) {\n        Matrix.TransposeToRef(this, result);\n        return this;\n    };\n    /**\n     * Sets the index-th row of the current matrix with the given 4 x float values\n     * @param index - defines the row index\n     * @param x - defines the x component to set\n     * @param y - defines the y component to set\n     * @param z - defines the z component to set\n     * @param w - defines the w component to set\n     * @returns the updated current matrix\n     */\n    Matrix.prototype.setRowFromFloats = function (index, x, y, z, w) {\n        if (index < 0 || index > 3) {\n            return this;\n        }\n        var i = index * 4;\n        this._m[i + 0] = x;\n        this._m[i + 1] = y;\n        this._m[i + 2] = z;\n        this._m[i + 3] = w;\n        this._markAsUpdated();\n        return this;\n    };\n    /**\n     * Compute a new matrix set with the current matrix values multiplied by scale (float)\n     * @param scale - defines the scale factor\n     * @returns a new matrix\n     */\n    Matrix.prototype.scale = function (scale) {\n        var result = new Matrix();\n        this.scaleToRef(scale, result);\n        return result;\n    };\n    /**\n     * Scale the current matrix values by a factor to a given result matrix\n     * @param scale - defines the scale factor\n     * @param result - defines the matrix to store the result\n     * @returns the current matrix\n     */\n    Matrix.prototype.scaleToRef = function (scale, result) {\n        for (var index = 0; index < 16; index++) {\n            result._m[index] = this._m[index] * scale;\n        }\n        result._markAsUpdated();\n        return this;\n    };\n    /**\n     * Scale the current matrix values by a factor and add the result to a given matrix\n     * @param scale - defines the scale factor\n     * @param result - defines the Matrix to store the result\n     * @returns the current matrix\n     */\n    Matrix.prototype.scaleAndAddToRef = function (scale, result) {\n        for (var index = 0; index < 16; index++) {\n            result._m[index] += this._m[index] * scale;\n        }\n        result._markAsUpdated();\n        return this;\n    };\n    /**\n     * Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column).\n     * @param ref - matrix to store the result\n     */\n    Matrix.prototype.toNormalMatrix = function (ref) {\n        var tmp = preallocatedVariables_1.MathTmp.Matrix[0];\n        this.invertToRef(tmp);\n        tmp.transposeToRef(ref);\n        var m = ref._m;\n        Matrix.FromValuesToRef(m[0], m[1], m[2], 0.0, m[4], m[5], m[6], 0.0, m[8], m[9], m[10], 0.0, 0.0, 0.0, 0.0, 1.0, ref);\n    };\n    /**\n     * Gets only rotation part of the current matrix\n     * @returns a new matrix sets to the extracted rotation matrix from the current one\n     */\n    Matrix.prototype.getRotationMatrix = function () {\n        var result = new Matrix();\n        this.getRotationMatrixToRef(result);\n        return result;\n    };\n    /**\n     * Extracts the rotation matrix from the current one and sets it as the given "result"\n     * @param result - defines the target matrix to store data to\n     * @returns the current matrix\n     */\n    Matrix.prototype.getRotationMatrixToRef = function (result) {\n        var scale = preallocatedVariables_1.MathTmp.Vector3[0];\n        if (!this.decompose(scale)) {\n            Matrix.IdentityToRef(result);\n            return this;\n        }\n        var m = this._m;\n        // tslint:disable-next-line:one-variable-per-declaration\n        var sx = 1 / scale.x, sy = 1 / scale.y, sz = 1 / scale.z;\n        Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n        return this;\n    };\n    /**\n     * Toggles model matrix from being right handed to left handed in place and vice versa\n     */\n    Matrix.prototype.toggleModelMatrixHandInPlace = function () {\n        var m = this._m;\n        m[2] *= -1;\n        m[6] *= -1;\n        m[8] *= -1;\n        m[9] *= -1;\n        m[14] *= -1;\n        this._markAsUpdated();\n    };\n    /**\n     * Toggles projection matrix from being right handed to left handed in place and vice versa\n     */\n    Matrix.prototype.toggleProjectionMatrixHandInPlace = function () {\n        var m = this._m;\n        m[8] *= -1;\n        m[9] *= -1;\n        m[10] *= -1;\n        m[11] *= -1;\n        this._markAsUpdated();\n    };\n    /** @internal */\n    Matrix.prototype._updateIdentityStatus = function (isIdentity, isIdentityDirty, isIdentity3x2, isIdentity3x2Dirty) {\n        if (isIdentityDirty === void 0) { isIdentityDirty = false; }\n        if (isIdentity3x2 === void 0) { isIdentity3x2 = false; }\n        if (isIdentity3x2Dirty === void 0) { isIdentity3x2Dirty = true; }\n        this.updateFlag = Matrix._updateFlagSeed++;\n        this._isIdentity = isIdentity;\n        this._isIdentity3x2 = isIdentity || isIdentity3x2;\n        this._isIdentityDirty = this._isIdentity ? false : isIdentityDirty;\n        this._isIdentity3x2Dirty = this._isIdentity3x2 ? false : isIdentity3x2Dirty;\n    };\n    Matrix._updateFlagSeed = 0;\n    Matrix._identityReadOnly = Matrix.Identity();\n    return Matrix;\n}());\nexports.Matrix = Matrix;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Matrix.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Path2d.ts":
/*!*******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Path2d.ts ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Vector2_1 = __webpack_require__(/*! ./Vector2 */ "./packages/decentraland-ecs/src/decentraland/math/Vector2.ts");\nvar Arc2_1 = __webpack_require__(/*! ./Arc2 */ "./packages/decentraland-ecs/src/decentraland/math/Arc2.ts");\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\n/**\n * Represents a 2D path made up of multiple 2D points\n * @public\n */\nvar Path2 = /** @class */ (function () {\n    /**\n     * Creates a Path2 object from the starting 2D coordinates x and y.\n     * @param x - the starting points x value\n     * @param y - the starting points y value\n     */\n    function Path2(x, y) {\n        /**\n         * If the path start and end point are the same\n         */\n        this.closed = false;\n        this._points = new Array();\n        this._length = 0.0;\n        this._points.push(new Vector2_1.Vector2(x, y));\n    }\n    /**\n     * Creates a new path starting from an x and y position\n     * @param x - starting x value\n     * @param y - starting y value\n     * @returns a new Path2 starting at the coordinates (x, y).\n     */\n    Path2.StartingAt = function (x, y) {\n        return new Path2(x, y);\n    };\n    /**\n     * Adds a new segment until the given coordinates (x, y) to the current Path2.\n     * @param x - the added points x value\n     * @param y - the added points y value\n     * @returns the updated Path2.\n     */\n    Path2.prototype.addLineTo = function (x, y) {\n        if (this.closed) {\n            return this;\n        }\n        var newPoint = new Vector2_1.Vector2(x, y);\n        var previousPoint = this._points[this._points.length - 1];\n        this._points.push(newPoint);\n        this._length += newPoint.subtract(previousPoint).length();\n        return this;\n    };\n    /**\n     * Adds _numberOfSegments_ segments according to the arc definition (middle point coordinates, end point coordinates, the arc start point being the current Path2 last point) to the current Path2.\n     * @param midX - middle point x value\n     * @param midY - middle point y value\n     * @param endX - end point x value\n     * @param endY - end point y value\n     * @param numberOfSegments - (default: 36)\n     * @returns the updated Path2.\n     */\n    Path2.prototype.addArcTo = function (midX, midY, endX, endY, numberOfSegments) {\n        if (numberOfSegments === void 0) { numberOfSegments = 36; }\n        if (this.closed) {\n            return this;\n        }\n        var startPoint = this._points[this._points.length - 1];\n        var midPoint = new Vector2_1.Vector2(midX, midY);\n        var endPoint = new Vector2_1.Vector2(endX, endY);\n        var arc = new Arc2_1.Arc2(startPoint, midPoint, endPoint);\n        var increment = arc.angle.radians() / numberOfSegments;\n        if (arc.orientation === types_1.Orientation.CW) {\n            increment *= -1;\n        }\n        var currentAngle = arc.startAngle.radians() + increment;\n        for (var i = 0; i < numberOfSegments; i++) {\n            var x = Math.cos(currentAngle) * arc.radius + arc.centerPoint.x;\n            var y = Math.sin(currentAngle) * arc.radius + arc.centerPoint.y;\n            this.addLineTo(x, y);\n            currentAngle += increment;\n        }\n        return this;\n    };\n    /**\n     * Closes the Path2.\n     * @returns the Path2.\n     */\n    Path2.prototype.close = function () {\n        this.closed = true;\n        return this;\n    };\n    /**\n     * Gets the sum of the distance between each sequential point in the path\n     * @returns the Path2 total length (float).\n     */\n    Path2.prototype.length = function () {\n        var result = this._length;\n        if (!this.closed) {\n            var lastPoint = this._points[this._points.length - 1];\n            var firstPoint = this._points[0];\n            result += firstPoint.subtract(lastPoint).length();\n        }\n        return result;\n    };\n    /**\n     * Gets the points which construct the path\n     * @returns the Path2 internal array of points.\n     */\n    Path2.prototype.getPoints = function () {\n        return this._points;\n    };\n    /**\n     * Retreives the point at the distance aways from the starting point\n     * @param normalizedLengthPosition - the length along the path to retreive the point from\n     * @returns a new Vector2 located at a percentage of the Path2 total length on this path.\n     */\n    Path2.prototype.getPointAtLengthPosition = function (normalizedLengthPosition) {\n        if (normalizedLengthPosition < 0 || normalizedLengthPosition > 1) {\n            return Vector2_1.Vector2.Zero();\n        }\n        var lengthPosition = normalizedLengthPosition * this.length();\n        var previousOffset = 0;\n        for (var i = 0; i < this._points.length; i++) {\n            var j = (i + 1) % this._points.length;\n            var a = this._points[i];\n            var b = this._points[j];\n            var bToA = b.subtract(a);\n            var nextOffset = bToA.length() + previousOffset;\n            if (lengthPosition >= previousOffset && lengthPosition <= nextOffset) {\n                var dir = bToA.normalize();\n                var localOffset = lengthPosition - previousOffset;\n                return new Vector2_1.Vector2(a.x + dir.x * localOffset, a.y + dir.y * localOffset);\n            }\n            previousOffset = nextOffset;\n        }\n        return Vector2_1.Vector2.Zero();\n    };\n    return Path2;\n}());\nexports.Path2 = Path2;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Path2d.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Path3d.ts":
/*!*******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Path3d.ts ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Vector3_1 = __webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts");\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\nvar Scalar_1 = __webpack_require__(/*! ./Scalar */ "./packages/decentraland-ecs/src/decentraland/math/Scalar.ts");\n/**\n * Represents a 3D path made up of multiple 3D points\n * @public\n */\nvar Path3D = /** @class */ (function () {\n    /**\n     * new Path3D(path, normal, raw)\n     * Creates a Path3D. A Path3D is a logical math object, so not a mesh.\n     * please read the description in the tutorial :  http://doc.babylonjs.com/tutorials/How_to_use_Path3D\n     * @param path - an array of Vector3, the curve axis of the Path3D\n     * @param normal - (options) Vector3, the first wanted normal to the curve. Ex (0, 1, 0) for a vertical normal.\n     * @param raw - (optional, default false) : boolean, if true the returned Path3D isn\'t normalized. Useful to depict path acceleration or speed.\n     */\n    function Path3D(\n    /**\n     * an array of Vector3, the curve axis of the Path3D\n     */\n    path, firstNormal, raw) {\n        if (firstNormal === void 0) { firstNormal = null; }\n        this.path = path;\n        this._curve = new Array();\n        this._distances = new Array();\n        this._tangents = new Array();\n        this._normals = new Array();\n        this._binormals = new Array();\n        for (var p = 0; p < path.length; p++) {\n            this._curve[p] = path[p].clone(); // hard copy\n        }\n        this._raw = raw || false;\n        this._compute(firstNormal);\n    }\n    /**\n     * Returns the Path3D array of successive Vector3 designing its curve.\n     * @returns the Path3D array of successive Vector3 designing its curve.\n     */\n    Path3D.prototype.getCurve = function () {\n        return this._curve;\n    };\n    /**\n     * Returns an array populated with tangent vectors on each Path3D curve point.\n     * @returns an array populated with tangent vectors on each Path3D curve point.\n     */\n    Path3D.prototype.getTangents = function () {\n        return this._tangents;\n    };\n    /**\n     * Returns an array populated with normal vectors on each Path3D curve point.\n     * @returns an array populated with normal vectors on each Path3D curve point.\n     */\n    Path3D.prototype.getNormals = function () {\n        return this._normals;\n    };\n    /**\n     * Returns an array populated with binormal vectors on each Path3D curve point.\n     * @returns an array populated with binormal vectors on each Path3D curve point.\n     */\n    Path3D.prototype.getBinormals = function () {\n        return this._binormals;\n    };\n    /**\n     * Returns an array populated with distances (float) of the i-th point from the first curve point.\n     * @returns an array populated with distances (float) of the i-th point from the first curve point.\n     */\n    Path3D.prototype.getDistances = function () {\n        return this._distances;\n    };\n    /**\n     * Forces the Path3D tangent, normal, binormal and distance recomputation.\n     * @param path - path which all values are copied into the curves points\n     * @param firstNormal - which should be projected onto the curve\n     * @returns the same object updated.\n     */\n    Path3D.prototype.update = function (path, firstNormal) {\n        if (firstNormal === void 0) { firstNormal = null; }\n        for (var p = 0; p < path.length; p++) {\n            this._curve[p].x = path[p].x;\n            this._curve[p].y = path[p].y;\n            this._curve[p].z = path[p].z;\n        }\n        this._compute(firstNormal);\n        return this;\n    };\n    // private function compute() : computes tangents, normals and binormals\n    Path3D.prototype._compute = function (firstNormal) {\n        var l = this._curve.length;\n        // first and last tangents\n        this._tangents[0] = this._getFirstNonNullVector(0);\n        if (!this._raw) {\n            this._tangents[0].normalize();\n        }\n        this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2]);\n        if (!this._raw) {\n            this._tangents[l - 1].normalize();\n        }\n        // normals and binormals at first point : arbitrary vector with _normalVector()\n        var tg0 = this._tangents[0];\n        var pp0 = this._normalVector(this._curve[0], tg0, firstNormal);\n        this._normals[0] = pp0;\n        if (!this._raw) {\n            this._normals[0].normalize();\n        }\n        this._binormals[0] = Vector3_1.Vector3.Cross(tg0, this._normals[0]);\n        if (!this._raw) {\n            this._binormals[0].normalize();\n        }\n        this._distances[0] = 0.0;\n        // normals and binormals : next points\n        var prev; // previous vector (segment)\n        var cur; // current vector (segment)\n        var curTang; // current tangent\n        // previous normal\n        var prevBinor; // previous binormal\n        for (var i = 1; i < l; i++) {\n            // tangents\n            prev = this._getLastNonNullVector(i);\n            if (i < l - 1) {\n                cur = this._getFirstNonNullVector(i);\n                this._tangents[i] = prev.add(cur);\n                this._tangents[i].normalize();\n            }\n            this._distances[i] = this._distances[i - 1] + prev.length();\n            // normals and binormals\n            // http://www.cs.cmu.edu/afs/andrew/scs/cs/15-462/web/old/asst2camera.html\n            curTang = this._tangents[i];\n            prevBinor = this._binormals[i - 1];\n            this._normals[i] = Vector3_1.Vector3.Cross(prevBinor, curTang);\n            if (!this._raw) {\n                this._normals[i].normalize();\n            }\n            this._binormals[i] = Vector3_1.Vector3.Cross(curTang, this._normals[i]);\n            if (!this._raw) {\n                this._binormals[i].normalize();\n            }\n        }\n    };\n    // returns the first non null vector from index : curve[index + N].subtract(curve[index])\n    Path3D.prototype._getFirstNonNullVector = function (index) {\n        var i = 1;\n        var nNVector = this._curve[index + i].subtract(this._curve[index]);\n        while (nNVector.length() === 0 && index + i + 1 < this._curve.length) {\n            i++;\n            nNVector = this._curve[index + i].subtract(this._curve[index]);\n        }\n        return nNVector;\n    };\n    // returns the last non null vector from index : curve[index].subtract(curve[index - N])\n    Path3D.prototype._getLastNonNullVector = function (index) {\n        var i = 1;\n        var nLVector = this._curve[index].subtract(this._curve[index - i]);\n        while (nLVector.length() === 0 && index > i + 1) {\n            i++;\n            nLVector = this._curve[index].subtract(this._curve[index - i]);\n        }\n        return nLVector;\n    };\n    // private function normalVector(v0, vt, va) :\n    // returns an arbitrary point in the plane defined by the point v0 and the vector vt orthogonal to this plane\n    // if va is passed, it returns the va projection on the plane orthogonal to vt at the point v0\n    Path3D.prototype._normalVector = function (v0, vt, va) {\n        var normal0;\n        var tgl = vt.length();\n        if (tgl === 0.0) {\n            tgl = 1.0;\n        }\n        if (va === undefined || va === null) {\n            var point = void 0;\n            if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.y) / tgl, 1.0, types_1.Epsilon)) {\n                // search for a point in the plane\n                point = new Vector3_1.Vector3(0.0, -1.0, 0.0);\n            }\n            else if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.x) / tgl, 1.0, types_1.Epsilon)) {\n                point = new Vector3_1.Vector3(1.0, 0.0, 0.0);\n            }\n            else if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.z) / tgl, 1.0, types_1.Epsilon)) {\n                point = new Vector3_1.Vector3(0.0, 0.0, 1.0);\n            }\n            else {\n                point = Vector3_1.Vector3.Zero();\n            }\n            normal0 = Vector3_1.Vector3.Cross(vt, point);\n        }\n        else {\n            normal0 = Vector3_1.Vector3.Cross(vt, va);\n            Vector3_1.Vector3.CrossToRef(normal0, vt, normal0);\n        }\n        normal0.normalize();\n        return normal0;\n    };\n    return Path3D;\n}());\nexports.Path3D = Path3D;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Path3d.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Plane.ts":
/*!******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Plane.ts ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Vector3_1 = __webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts");\nvar Matrix_1 = __webpack_require__(/*! ./Matrix */ "./packages/decentraland-ecs/src/decentraland/math/Matrix.ts");\nvar preallocatedVariables_1 = __webpack_require__(/*! ./preallocatedVariables */ "./packages/decentraland-ecs/src/decentraland/math/preallocatedVariables.ts");\n/**\n * Represens a plane by the equation ax + by + cz + d = 0\n * @public\n */\nvar Plane = /** @class */ (function () {\n    /**\n     * Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0\n     * @param a - a component of the plane\n     * @param b - b component of the plane\n     * @param c - c component of the plane\n     * @param d - d component of the plane\n     */\n    function Plane(a, b, c, d) {\n        this.normal = new Vector3_1.Vector3(a, b, c);\n        this.d = d;\n    }\n    // Statics\n    /**\n     * Creates a plane from an  array\n     * @param array - the array to create a plane from\n     * @returns a new Plane from the given array.\n     */\n    Plane.FromArray = function (array) {\n        return new Plane(array[0], array[1], array[2], array[3]);\n    };\n    /**\n     * Creates a plane from three points\n     * @param point1 - point used to create the plane\n     * @param point2 - point used to create the plane\n     * @param point3 - point used to create the plane\n     * @returns a new Plane defined by the three given points.\n     */\n    Plane.FromPoints = function (point1, point2, point3) {\n        var result = new Plane(0.0, 0.0, 0.0, 0.0);\n        result.copyFromPoints(point1, point2, point3);\n        return result;\n    };\n    /**\n     * Creates a plane from an origin point and a normal\n     * @param origin - origin of the plane to be constructed\n     * @param normal - normal of the plane to be constructed\n     * @returns a new Plane the normal vector to this plane at the given origin point.\n     * Note : the vector "normal" is updated because normalized.\n     */\n    Plane.FromPositionAndNormal = function (origin, normal) {\n        var result = new Plane(0.0, 0.0, 0.0, 0.0);\n        normal.normalize();\n        result.normal = normal;\n        result.d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\n        return result;\n    };\n    /**\n     * Calculates the distance from a plane and a point\n     * @param origin - origin of the plane to be constructed\n     * @param normal - normal of the plane to be constructed\n     * @param point - point to calculate distance to\n     * @returns the signed distance between the plane defined by the normal vector at the "origin"" point and the given other point.\n     */\n    Plane.SignedDistanceToPlaneFromPositionAndNormal = function (origin, normal, point) {\n        var d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\n        return Vector3_1.Vector3.Dot(point, normal) + d;\n    };\n    /**\n     * @returns the plane coordinates as a new array of 4 elements [a, b, c, d].\n     */\n    Plane.prototype.asArray = function () {\n        return [this.normal.x, this.normal.y, this.normal.z, this.d];\n    };\n    // Methods\n    /**\n     * @returns a new plane copied from the current Plane.\n     */\n    Plane.prototype.clone = function () {\n        return new Plane(this.normal.x, this.normal.y, this.normal.z, this.d);\n    };\n    /**\n     * @returns the string "Plane".\n     */\n    Plane.prototype.getClassName = function () {\n        return \'Plane\';\n    };\n    /**\n     * @returns the Plane hash code.\n     */\n    Plane.prototype.getHashCode = function () {\n        var hash = this.normal.getHashCode();\n        hash = (hash * 397) ^ (this.d || 0);\n        return hash;\n    };\n    /**\n     * Normalize the current Plane in place.\n     * @returns the updated Plane.\n     */\n    Plane.prototype.normalize = function () {\n        var norm = Math.sqrt(this.normal.x * this.normal.x + this.normal.y * this.normal.y + this.normal.z * this.normal.z);\n        var magnitude = 0.0;\n        if (norm !== 0) {\n            magnitude = 1.0 / norm;\n        }\n        this.normal.x *= magnitude;\n        this.normal.y *= magnitude;\n        this.normal.z *= magnitude;\n        this.d *= magnitude;\n        return this;\n    };\n    /**\n     * Applies a transformation the plane and returns the result\n     * @param transformation - the transformation matrix to be applied to the plane\n     * @returns a new Plane as the result of the transformation of the current Plane by the given matrix.\n     */\n    Plane.prototype.transform = function (transformation) {\n        var transposedMatrix = preallocatedVariables_1.MathTmp.Matrix[0];\n        Matrix_1.Matrix.TransposeToRef(transformation, transposedMatrix);\n        var m = transposedMatrix.m;\n        var x = this.normal.x;\n        var y = this.normal.y;\n        var z = this.normal.z;\n        var d = this.d;\n        var normalX = x * m[0] + y * m[1] + z * m[2] + d * m[3];\n        var normalY = x * m[4] + y * m[5] + z * m[6] + d * m[7];\n        var normalZ = x * m[8] + y * m[9] + z * m[10] + d * m[11];\n        var finalD = x * m[12] + y * m[13] + z * m[14] + d * m[15];\n        return new Plane(normalX, normalY, normalZ, finalD);\n    };\n    /**\n     * Calcualtte the dot product between the point and the plane normal\n     * @param point - point to calculate the dot product with\n     * @returns the dot product (float) of the point coordinates and the plane normal.\n     */\n    Plane.prototype.dotCoordinate = function (point) {\n        return this.normal.x * point.x + this.normal.y * point.y + this.normal.z * point.z + this.d;\n    };\n    /**\n     * Updates the current Plane from the plane defined by the three given points.\n     * @param point1 - one of the points used to contruct the plane\n     * @param point2 - one of the points used to contruct the plane\n     * @param point3 - one of the points used to contruct the plane\n     * @returns the updated Plane.\n     */\n    Plane.prototype.copyFromPoints = function (point1, point2, point3) {\n        var x1 = point2.x - point1.x;\n        var y1 = point2.y - point1.y;\n        var z1 = point2.z - point1.z;\n        var x2 = point3.x - point1.x;\n        var y2 = point3.y - point1.y;\n        var z2 = point3.z - point1.z;\n        var yz = y1 * z2 - z1 * y2;\n        var xz = z1 * x2 - x1 * z2;\n        var xy = x1 * y2 - y1 * x2;\n        var pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);\n        var invPyth;\n        if (pyth !== 0) {\n            invPyth = 1.0 / pyth;\n        }\n        else {\n            invPyth = 0.0;\n        }\n        this.normal.x = yz * invPyth;\n        this.normal.y = xz * invPyth;\n        this.normal.z = xy * invPyth;\n        this.d = -(this.normal.x * point1.x + this.normal.y * point1.y + this.normal.z * point1.z);\n        return this;\n    };\n    /**\n     * Checks if the plane is facing a given direction\n     * @param direction - the direction to check if the plane is facing\n     * @param epsilon - value the dot product is compared against (returns true if dot &lt;= epsilon)\n     * @returns True is the vector "direction"  is the same side than the plane normal.\n     */\n    Plane.prototype.isFrontFacingTo = function (direction, epsilon) {\n        var dot = Vector3_1.Vector3.Dot(this.normal, direction);\n        return dot <= epsilon;\n    };\n    /**\n     * Calculates the distance to a point\n     * @param point - point to calculate distance to\n     * @returns the signed distance (float) from the given point to the Plane.\n     */\n    Plane.prototype.signedDistanceTo = function (point) {\n        return Vector3_1.Vector3.Dot(point, this.normal) + this.d;\n    };\n    return Plane;\n}());\nexports.Plane = Plane;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Plane.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Quaternion.ts":
/*!***********************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Quaternion.ts ***!
  \***********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Matrix_1 = __webpack_require__(/*! ./Matrix */ "./packages/decentraland-ecs/src/decentraland/math/Matrix.ts");\nvar Vector3_1 = __webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts");\nvar preallocatedVariables_1 = __webpack_require__(/*! ./preallocatedVariables */ "./packages/decentraland-ecs/src/decentraland/math/preallocatedVariables.ts");\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\n/**\n * Class used to store quaternion data\n * {@link https://en.wikipedia.org/wiki/Quaternion }\n * {@link http://doc.babylonjs.com/features/position,_rotation,_scaling }\n * @public\n */\nvar Quaternion = /** @class */ (function () {\n    /**\n     * Creates a new Quaternion from the given floats\n     * @param x - defines the first component (0 by default)\n     * @param y - defines the second component (0 by default)\n     * @param z - defines the third component (0 by default)\n     * @param w - defines the fourth component (1.0 by default)\n     */\n    function Quaternion(\n    /** defines the first component (0 by default) */\n    x, \n    /** defines the second component (0 by default) */\n    y, \n    /** defines the third component (0 by default) */\n    z, \n    /** defines the fourth component (1.0 by default) */\n    w) {\n        if (x === void 0) { x = 0.0; }\n        if (y === void 0) { y = 0.0; }\n        if (z === void 0) { z = 0.0; }\n        if (w === void 0) { w = 1.0; }\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n    // Statics\n    /**\n     * Creates a new quaternion from a rotation matrix\n     * @param matrix - defines the source matrix\n     * @returns a new quaternion created from the given rotation matrix values\n     */\n    Quaternion.FromRotationMatrix = function (matrix) {\n        var result = new Quaternion();\n        Quaternion.FromRotationMatrixToRef(matrix, result);\n        return result;\n    };\n    /**\n     * Updates the given quaternion with the given rotation matrix values\n     * @param matrix - defines the source matrix\n     * @param result - defines the target quaternion\n     */\n    Quaternion.FromRotationMatrixToRef = function (matrix, result) {\n        var data = matrix.m;\n        // tslint:disable:one-variable-per-declaration\n        var m11 = data[0], m12 = data[4], m13 = data[8];\n        var m21 = data[1], m22 = data[5], m23 = data[9];\n        var m31 = data[2], m32 = data[6], m33 = data[10];\n        // tslint:enable:one-variable-per-declaration\n        var trace = m11 + m22 + m33;\n        var s;\n        if (trace > 0) {\n            s = 0.5 / Math.sqrt(trace + 1.0);\n            result.w = 0.25 / s;\n            result.x = (m32 - m23) * s;\n            result.y = (m13 - m31) * s;\n            result.z = (m21 - m12) * s;\n        }\n        else if (m11 > m22 && m11 > m33) {\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n            result.w = (m32 - m23) / s;\n            result.x = 0.25 * s;\n            result.y = (m12 + m21) / s;\n            result.z = (m13 + m31) / s;\n        }\n        else if (m22 > m33) {\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n            result.w = (m13 - m31) / s;\n            result.x = (m12 + m21) / s;\n            result.y = 0.25 * s;\n            result.z = (m23 + m32) / s;\n        }\n        else {\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n            result.w = (m21 - m12) / s;\n            result.x = (m13 + m31) / s;\n            result.y = (m23 + m32) / s;\n            result.z = 0.25 * s;\n        }\n    };\n    /**\n     * Returns the dot product (float) between the quaternions "left" and "right"\n     * @param left - defines the left operand\n     * @param right - defines the right operand\n     * @returns the dot product\n     */\n    Quaternion.Dot = function (left, right) {\n        return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n    };\n    /**\n     * Checks if the two quaternions are close to each other\n     * @param quat0 - defines the first quaternion to check\n     * @param quat1 - defines the second quaternion to check\n     * @returns true if the two quaternions are close to each other\n     */\n    Quaternion.AreClose = function (quat0, quat1) {\n        var dot = Quaternion.Dot(quat0, quat1);\n        return dot >= 0;\n    };\n    /**\n     * Creates an empty quaternion\n     * @returns a new quaternion set to (0.0, 0.0, 0.0)\n     */\n    Quaternion.Zero = function () {\n        return new Quaternion(0.0, 0.0, 0.0, 0.0);\n    };\n    /**\n     * Inverse a given quaternion\n     * @param q - defines the source quaternion\n     * @returns a new quaternion as the inverted current quaternion\n     */\n    Quaternion.Inverse = function (q) {\n        return new Quaternion(-q.x, -q.y, -q.z, q.w);\n    };\n    /**\n     * Gets a boolean indicating if the given quaternion is identity\n     * @param quaternion - defines the quaternion to check\n     * @returns true if the quaternion is identity\n     */\n    Quaternion.IsIdentity = function (quaternion) {\n        return quaternion && quaternion.x === 0 && quaternion.y === 0 && quaternion.z === 0 && quaternion.w === 1;\n    };\n    /**\n     * Creates a quaternion from a rotation around an axis\n     * @param axis - defines the axis to use\n     * @param angle - defines the angle to use (in Euler degrees)\n     * @returns a new quaternion created from the given axis (Vector3) and angle in radians (float)\n     */\n    Quaternion.RotationAxis = function (axis, angle) {\n        var angleRad = angle * types_1.DEG2RAD;\n        return Quaternion.RotationAxisToRef(axis, angleRad, new Quaternion());\n    };\n    /**\n     * Creates a rotation around an axis and stores it into the given quaternion\n     * @param axis - defines the axis to use\n     * @param angle - defines the angle to use (in Euler degrees)\n     * @param result - defines the target quaternion\n     * @returns the target quaternion\n     */\n    Quaternion.RotationAxisToRef = function (axis, angle, result) {\n        var angleRad = angle * types_1.DEG2RAD;\n        var sin = Math.sin(angleRad / 2);\n        axis.normalize();\n        result.w = Math.cos(angleRad / 2);\n        result.x = axis.x * sin;\n        result.y = axis.y * sin;\n        result.z = axis.z * sin;\n        return result;\n    };\n    /**\n     * Creates a new quaternion from data stored into an array\n     * @param array - defines the data source\n     * @param offset - defines the offset in the source array where the data starts\n     * @returns a new quaternion\n     */\n    Quaternion.FromArray = function (array, offset) {\n        if (offset === void 0) { offset = 0; }\n        return new Quaternion(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n    };\n    /**\n     * Creates a new quaternion from a set of euler angles and stores it in the target quaternion\n     */\n    Quaternion.FromEulerAnglesRef = function (x, y, z, result) {\n        return Quaternion.RotationYawPitchRollToRef(y * types_1.DEG2RAD, x * types_1.DEG2RAD, z * types_1.DEG2RAD, result);\n    };\n    /**\n     * Creates a new quaternion from the given Euler float angles (y, x, z)\n     * @param yaw - defines the rotation around Y axis\n     * @param pitch - defines the rotation around X axis\n     * @param roll - defines the rotation around Z axis\n     * @returns the new quaternion\n     */\n    Quaternion.RotationYawPitchRoll = function (yaw, pitch, roll) {\n        var q = new Quaternion();\n        Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, q);\n        return q;\n    };\n    /**\n     * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n     * @param yaw - defines the rotation around Y axis\n     * @param pitch - defines the rotation around X axis\n     * @param roll - defines the rotation around Z axis\n     * @param result - defines the target quaternion\n     */\n    Quaternion.RotationYawPitchRollToRef = function (yaw, pitch, roll, result) {\n        var halfRoll = roll * 0.5;\n        var halfPitch = pitch * 0.5;\n        var halfYaw = yaw * 0.5;\n        var c1 = Math.cos(halfPitch);\n        var c2 = Math.cos(halfYaw);\n        var c3 = Math.cos(halfRoll);\n        var s1 = Math.sin(halfPitch);\n        var s2 = Math.sin(halfYaw);\n        var s3 = Math.sin(halfRoll);\n        result.x = s1 * c2 * c3 + c1 * s2 * s3;\n        result.y = c1 * s2 * c3 - s1 * c2 * s3;\n        result.z = c1 * c2 * s3 + s1 * s2 * c3;\n        result.w = c1 * c2 * c3 - s1 * s2 * s3;\n    };\n    /**\n     * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation\n     * @param alpha - defines the rotation around first axis\n     * @param beta - defines the rotation around second axis\n     * @param gamma - defines the rotation around third axis\n     * @returns the new quaternion\n     */\n    Quaternion.RotationAlphaBetaGamma = function (alpha, beta, gamma) {\n        var result = new Quaternion();\n        Quaternion.RotationAlphaBetaGammaToRef(alpha, beta, gamma, result);\n        return result;\n    };\n    /**\n     * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion\n     * @param alpha - defines the rotation around first axis\n     * @param beta - defines the rotation around second axis\n     * @param gamma - defines the rotation around third axis\n     * @param result - defines the target quaternion\n     */\n    Quaternion.RotationAlphaBetaGammaToRef = function (alpha, beta, gamma, result) {\n        // Produces a quaternion from Euler angles in the z-x-z orientation\n        var halfGammaPlusAlpha = (gamma + alpha) * 0.5;\n        var halfGammaMinusAlpha = (gamma - alpha) * 0.5;\n        var halfBeta = beta * 0.5;\n        result.x = Math.cos(halfGammaMinusAlpha) * Math.sin(halfBeta);\n        result.y = Math.sin(halfGammaMinusAlpha) * Math.sin(halfBeta);\n        result.z = Math.sin(halfGammaPlusAlpha) * Math.cos(halfBeta);\n        result.w = Math.cos(halfGammaPlusAlpha) * Math.cos(halfBeta);\n    };\n    /**\n     * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\n     * @param axis1 - defines the first axis\n     * @param axis2 - defines the second axis\n     * @param axis3 - defines the third axis\n     * @returns the new quaternion\n     */\n    Quaternion.RotationQuaternionFromAxis = function (axis1, axis2, axis3) {\n        var quat = new Quaternion(0.0, 0.0, 0.0, 0.0);\n        Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n        return quat;\n    };\n    /**\n     * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\n     * @param axis1 - defines the first axis\n     * @param axis2 - defines the second axis\n     * @param axis3 - defines the third axis\n     * @param ref - defines the target quaternion\n     */\n    Quaternion.RotationQuaternionFromAxisToRef = function (axis1, axis2, axis3, ref) {\n        var rotMat = preallocatedVariables_1.MathTmp.Matrix[0];\n        Matrix_1.Matrix.FromXYZAxesToRef(axis1.normalize(), axis2.normalize(), axis3.normalize(), rotMat);\n        Quaternion.FromRotationMatrixToRef(rotMat, ref);\n    };\n    /**\n     * Interpolates between two quaternions\n     * @param left - defines first quaternion\n     * @param right - defines second quaternion\n     * @param amount - defines the gradient to use\n     * @returns the new interpolated quaternion\n     */\n    Quaternion.Slerp = function (left, right, amount) {\n        var result = Quaternion.Identity;\n        Quaternion.SlerpToRef(left, right, amount, result);\n        return result;\n    };\n    /**\n     * Interpolates between two quaternions and stores it into a target quaternion\n     * @param left - defines first quaternion\n     * @param right - defines second quaternion\n     * @param amount - defines the gradient to use\n     * @param result - defines the target quaternion\n     */\n    Quaternion.SlerpToRef = function (left, right, amount, result) {\n        var num2;\n        var num3;\n        var num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n        var flag = false;\n        if (num4 < 0) {\n            flag = true;\n            num4 = -num4;\n        }\n        if (num4 > 0.999999) {\n            num3 = 1 - amount;\n            num2 = flag ? -amount : amount;\n        }\n        else {\n            var num5 = Math.acos(num4);\n            var num6 = 1.0 / Math.sin(num5);\n            num3 = Math.sin((1.0 - amount) * num5) * num6;\n            num2 = flag ? -Math.sin(amount * num5) * num6 : Math.sin(amount * num5) * num6;\n        }\n        result.x = num3 * left.x + num2 * right.x;\n        result.y = num3 * left.y + num2 * right.y;\n        result.z = num3 * left.z + num2 * right.z;\n        result.w = num3 * left.w + num2 * right.w;\n    };\n    /**\n     * Interpolate between two quaternions using Hermite interpolation\n     * @param value1 - defines first quaternion\n     * @param tangent1 - defines the incoming tangent\n     * @param value2 - defines second quaternion\n     * @param tangent2 - defines the outgoing tangent\n     * @param amount - defines the target quaternion\n     * @returns the new interpolated quaternion\n     */\n    Quaternion.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n        var squared = amount * amount;\n        var cubed = amount * squared;\n        var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n        var part2 = -2.0 * cubed + 3.0 * squared;\n        var part3 = cubed - 2.0 * squared + amount;\n        var part4 = cubed - squared;\n        var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;\n        var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;\n        var z = value1.z * part1 + value2.z * part2 + tangent1.z * part3 + tangent2.z * part4;\n        var w = value1.w * part1 + value2.w * part2 + tangent1.w * part3 + tangent2.w * part4;\n        return new Quaternion(x, y, z, w);\n    };\n    Object.defineProperty(Quaternion, "Identity", {\n        /**\n         * Creates an identity quaternion\n         * @returns - the identity quaternion\n         */\n        get: function () {\n            return new Quaternion(0.0, 0.0, 0.0, 1.0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the angle in degrees between two rotations a and b.\n     * @param quat1 - defines the first quaternion\n     * @param quat2 - defines the second quaternion\n     */\n    Quaternion.Angle = function (quat1, quat2) {\n        var dot = Quaternion.Dot(quat1, quat2);\n        return Math.acos(Math.min(Math.abs(dot), 1)) * 2 * types_1.RAD2DEG;\n    };\n    /**\n     * Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.\n     * @param x - the rotation on the x axis in euler degrees\n     * @param y - the rotation on the y axis in euler degrees\n     * @param z - the rotation on the z axis in euler degrees\n     */\n    Quaternion.Euler = function (x, y, z) {\n        return Quaternion.RotationYawPitchRoll(y * types_1.DEG2RAD, x * types_1.DEG2RAD, z * types_1.DEG2RAD);\n    };\n    /**\n     * Creates a rotation with the specified forward and upwards directions.\n     * @param forward - the direction to look in\n     * @param up - the vector that defines in which direction up is\n     */\n    Quaternion.LookRotation = function (forward, up) {\n        if (up === void 0) { up = preallocatedVariables_1.MathTmp.staticUp; }\n        var forwardNew = Vector3_1.Vector3.Normalize(forward);\n        var right = Vector3_1.Vector3.Normalize(Vector3_1.Vector3.Cross(up, forwardNew));\n        var upNew = Vector3_1.Vector3.Cross(forwardNew, right);\n        var m00 = right.x;\n        var m01 = right.y;\n        var m02 = right.z;\n        var m10 = upNew.x;\n        var m11 = upNew.y;\n        var m12 = upNew.z;\n        var m20 = forwardNew.x;\n        var m21 = forwardNew.y;\n        var m22 = forwardNew.z;\n        var num8 = m00 + m11 + m22;\n        var quaternion = new Quaternion();\n        if (num8 > 0) {\n            var num = Math.sqrt(num8 + 1);\n            quaternion.w = num * 0.5;\n            num = 0.5 / num;\n            quaternion.x = (m12 - m21) * num;\n            quaternion.y = (m20 - m02) * num;\n            quaternion.z = (m01 - m10) * num;\n            return quaternion;\n        }\n        if (m00 >= m11 && m00 >= m22) {\n            var num7 = Math.sqrt(1 + m00 - m11 - m22);\n            var num4 = 0.5 / num7;\n            quaternion.x = 0.5 * num7;\n            quaternion.y = (m01 + m10) * num4;\n            quaternion.z = (m02 + m20) * num4;\n            quaternion.w = (m12 - m21) * num4;\n            return quaternion;\n        }\n        if (m11 > m22) {\n            var num6 = Math.sqrt(1 + m11 - m00 - m22);\n            var num3 = 0.5 / num6;\n            quaternion.x = (m10 + m01) * num3;\n            quaternion.y = 0.5 * num6;\n            quaternion.z = (m21 + m12) * num3;\n            quaternion.w = (m20 - m02) * num3;\n            return quaternion;\n        }\n        var num5 = Math.sqrt(1 + m22 - m00 - m11);\n        var num2 = 0.5 / num5;\n        quaternion.x = (m20 + m02) * num2;\n        quaternion.y = (m21 + m12) * num2;\n        quaternion.z = 0.5 * num5;\n        quaternion.w = (m01 - m10) * num2;\n        return quaternion;\n    };\n    /**\n     * The from quaternion is rotated towards to by an angular step of maxDegreesDelta.\n     * @param from - defines the first quaternion\n     * @param to - defines the second quaternion\n     * @param maxDegreesDelta - the interval step\n     */\n    Quaternion.RotateTowards = function (from, to, maxDegreesDelta) {\n        var num = Quaternion.Angle(from, to);\n        if (num === 0) {\n            return to;\n        }\n        var t = Math.min(1, maxDegreesDelta / num);\n        return Quaternion.Slerp(from, to, t);\n    };\n    /**\n     * Creates a rotation which rotates from fromDirection to toDirection.\n     * @param from - defines the first Vector\n     * @param to - defines the second Vector\n     */\n    Quaternion.FromToRotation = function (from, to) {\n        var result = new Quaternion();\n        var v0 = from.normalize();\n        var v1 = to.normalize();\n        var d = Vector3_1.Vector3.Dot(v0, v1);\n        if (d > -1 + types_1.Epsilon) {\n            var s = Math.sqrt((1 + d) * 2);\n            var invs = 1 / s;\n            var c = Vector3_1.Vector3.Cross(v0, v1).scaleInPlace(invs);\n            result.set(c.x, c.y, c.z, s * 0.5);\n        }\n        else if (d > 1 - types_1.Epsilon) {\n            return new Quaternion(0, 0, 0, 1);\n        }\n        else {\n            var axis = Vector3_1.Vector3.Cross(Vector3_1.Vector3.Right(), v0);\n            if (axis.lengthSquared() < types_1.Epsilon) {\n                axis = Vector3_1.Vector3.Cross(Vector3_1.Vector3.Forward(), v0);\n            }\n            result.set(axis.x, axis.y, axis.z, 0);\n        }\n        return result.normalize();\n    };\n    Object.defineProperty(Quaternion.prototype, "normalized", {\n        /**\n         * Converts this quaternion to one with the same orientation but with a magnitude of 1.\n         */\n        get: function () {\n            return this.normalize();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a rotation which rotates from fromDirection to toDirection.\n     * @param from - defines the first Vector\n     * @param to - defines the second Vector\n     * @param up - defines the direction\n     */\n    Quaternion.prototype.setFromToRotation = function (from, to, up) {\n        if (up === void 0) { up = preallocatedVariables_1.MathTmp.staticUp; }\n        preallocatedVariables_1.MathTmp.tmpMatrix = Matrix_1.Matrix.Zero(); // clean up preallocated matrix\n        Matrix_1.Matrix.LookAtLHToRef(from, to, up, preallocatedVariables_1.MathTmp.tmpMatrix);\n        preallocatedVariables_1.MathTmp.tmpMatrix.invert();\n        Quaternion.FromRotationMatrixToRef(preallocatedVariables_1.MathTmp.tmpMatrix, this);\n    };\n    Object.defineProperty(Quaternion.prototype, "eulerAngles", {\n        /**\n         * Sets the euler angle representation of the rotation.\n         */\n        get: function () {\n            var out = new Vector3_1.Vector3();\n            var mat = new Matrix_1.Matrix();\n            this.toRotationMatrix(mat);\n            var m = Matrix_1.Matrix.GetAsMatrix3x3(mat);\n            out.y = types_1.RAD2DEG * Math.asin(Math.max(-1, Math.min(1, m[6])));\n            if (Math.abs(m[6]) < 0.99999) {\n                out.x = types_1.RAD2DEG * Math.atan2(-m[7], m[8]);\n                out.z = types_1.RAD2DEG * Math.atan2(-m[3], m[0]);\n            }\n            else {\n                out.x = types_1.RAD2DEG * Math.atan2(m[5], m[4]);\n                out.z = 0;\n            }\n            return out;\n        },\n        /**\n         * Gets the euler angle representation of the rotation.\n         */\n        set: function (euler) {\n            this.setEuler(euler.x, euler.y, euler.z);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets a string representation for the current quaternion\n     * @returns a string with the Quaternion coordinates\n     */\n    Quaternion.prototype.toString = function () {\n        return "(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";\n    };\n    Object.defineProperty(Quaternion.prototype, "length", {\n        /**\n         * Gets length of current quaternion\n         * @returns the quaternion length (float)\n         */\n        get: function () {\n            return Math.sqrt(this.lengthSquared);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Quaternion.prototype, "lengthSquared", {\n        /**\n         * Gets length of current quaternion\n         * @returns the quaternion length (float)\n         */\n        get: function () {\n            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the class name of the quaternion\n     * @returns the string "Quaternion"\n     */\n    Quaternion.prototype.getClassName = function () {\n        return \'Quaternion\';\n    };\n    /**\n     * Gets a hash code for this quaternion\n     * @returns the quaternion hash code\n     */\n    Quaternion.prototype.getHashCode = function () {\n        var hash = this.x || 0;\n        hash = (hash * 397) ^ (this.y || 0);\n        hash = (hash * 397) ^ (this.z || 0);\n        hash = (hash * 397) ^ (this.w || 0);\n        return hash;\n    };\n    /**\n     * Copy the quaternion to an array\n     * @returns a new array populated with 4 elements from the quaternion coordinates\n     */\n    Quaternion.prototype.asArray = function () {\n        return [this.x, this.y, this.z, this.w];\n    };\n    /**\n     * Check if two quaternions are equals\n     * @param otherQuaternion - defines the second operand\n     * @returns true if the current quaternion and the given one coordinates are strictly equals\n     */\n    Quaternion.prototype.equals = function (otherQuaternion) {\n        return (otherQuaternion &&\n            this.x === otherQuaternion.x &&\n            this.y === otherQuaternion.y &&\n            this.z === otherQuaternion.z &&\n            this.w === otherQuaternion.w);\n    };\n    /**\n     * Clone the current quaternion\n     * @returns a new quaternion copied from the current one\n     */\n    Quaternion.prototype.clone = function () {\n        return new Quaternion(this.x, this.y, this.z, this.w);\n    };\n    /**\n     * Copy a quaternion to the current one\n     * @param other - defines the other quaternion\n     * @returns the updated current quaternion\n     */\n    Quaternion.prototype.copyFrom = function (other) {\n        this.x = other.x;\n        this.y = other.y;\n        this.z = other.z;\n        this.w = other.w;\n        return this;\n    };\n    /**\n     * Updates the current quaternion with the given float coordinates\n     * @param x - defines the x coordinate\n     * @param y - defines the y coordinate\n     * @param z - defines the z coordinate\n     * @param w - defines the w coordinate\n     * @returns the updated current quaternion\n     */\n    Quaternion.prototype.copyFromFloats = function (x, y, z, w) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n        return this;\n    };\n    /**\n     * Updates the current quaternion from the given float coordinates\n     * @param x - defines the x coordinate\n     * @param y - defines the y coordinate\n     * @param z - defines the z coordinate\n     * @param w - defines the w coordinate\n     * @returns the updated current quaternion\n     */\n    Quaternion.prototype.set = function (x, y, z, w) {\n        return this.copyFromFloats(x, y, z, w);\n    };\n    /**\n     * Updates the current quaternion from the given euler angles\n     * @returns the updated current quaternion\n     */\n    Quaternion.prototype.setEuler = function (x, y, z) {\n        Quaternion.RotationYawPitchRollToRef(y * types_1.DEG2RAD, x * types_1.DEG2RAD, z * types_1.DEG2RAD, this);\n        return this;\n    };\n    /**\n     * @internal\n     * Adds two quaternions\n     * @param other - defines the second operand\n     * @returns a new quaternion as the addition result of the given one and the current quaternion\n     */\n    Quaternion.prototype.add = function (other) {\n        return new Quaternion(this.x + other.x, this.y + other.y, this.z + other.z, this.w + other.w);\n    };\n    /**\n     * @internal\n     * Add a quaternion to the current one\n     * @param other - defines the quaternion to add\n     * @returns the current quaternion\n     */\n    Quaternion.prototype.addInPlace = function (other) {\n        this.x += other.x;\n        this.y += other.y;\n        this.z += other.z;\n        this.w += other.w;\n        return this;\n    };\n    /**\n     * Subtract two quaternions\n     * @param other - defines the second operand\n     * @returns a new quaternion as the subtraction result of the given one from the current one\n     */\n    Quaternion.prototype.subtract = function (other) {\n        return new Quaternion(this.x - other.x, this.y - other.y, this.z - other.z, this.w - other.w);\n    };\n    /**\n     * Multiplies the current quaternion by a scale factor\n     * @param value - defines the scale factor\n     * @returns a new quaternion set by multiplying the current quaternion coordinates by the float "scale"\n     */\n    Quaternion.prototype.scale = function (value) {\n        return new Quaternion(this.x * value, this.y * value, this.z * value, this.w * value);\n    };\n    /**\n     * Scale the current quaternion values by a factor and stores the result to a given quaternion\n     * @param scale - defines the scale factor\n     * @param result - defines the Quaternion object where to store the result\n     * @returns the unmodified current quaternion\n     */\n    Quaternion.prototype.scaleToRef = function (scale, result) {\n        result.x = this.x * scale;\n        result.y = this.y * scale;\n        result.z = this.z * scale;\n        result.w = this.w * scale;\n        return this;\n    };\n    /**\n     * Multiplies in place the current quaternion by a scale factor\n     * @param value - defines the scale factor\n     * @returns the current modified quaternion\n     */\n    Quaternion.prototype.scaleInPlace = function (value) {\n        this.x *= value;\n        this.y *= value;\n        this.z *= value;\n        this.w *= value;\n        return this;\n    };\n    /**\n     * Scale the current quaternion values by a factor and add the result to a given quaternion\n     * @param scale - defines the scale factor\n     * @param result - defines the Quaternion object where to store the result\n     * @returns the unmodified current quaternion\n     */\n    Quaternion.prototype.scaleAndAddToRef = function (scale, result) {\n        result.x += this.x * scale;\n        result.y += this.y * scale;\n        result.z += this.z * scale;\n        result.w += this.w * scale;\n        return this;\n    };\n    /**\n     * Multiplies two quaternions\n     * @param q1 - defines the second operand\n     * @returns a new quaternion set as the multiplication result of the current one with the given one "q1"\n     */\n    Quaternion.prototype.multiply = function (q1) {\n        var result = new Quaternion(0, 0, 0, 1.0);\n        this.multiplyToRef(q1, result);\n        return result;\n    };\n    /**\n     * Sets the given "result" as the the multiplication result of the current one with the given one "q1"\n     * @param q1 - defines the second operand\n     * @param result - defines the target quaternion\n     * @returns the current quaternion\n     */\n    Quaternion.prototype.multiplyToRef = function (q1, result) {\n        var x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x;\n        var y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y;\n        var z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z;\n        var w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w;\n        result.copyFromFloats(x, y, z, w);\n        return this;\n    };\n    /**\n     * Updates the current quaternion with the multiplication of itself with the given one "q1"\n     * @param q1 - defines the second operand\n     * @returns the currentupdated quaternion\n     */\n    Quaternion.prototype.multiplyInPlace = function (q1) {\n        this.multiplyToRef(q1, this);\n        return this;\n    };\n    /**\n     * Conjugates (1-q) the current quaternion and stores the result in the given quaternion\n     * @param ref - defines the target quaternion\n     * @returns the current quaternion\n     */\n    Quaternion.prototype.conjugateToRef = function (ref) {\n        ref.copyFromFloats(-this.x, -this.y, -this.z, this.w);\n        return this;\n    };\n    /**\n     * Conjugates in place (1-q) the current quaternion\n     * @returns the current updated quaternion\n     */\n    Quaternion.prototype.conjugateInPlace = function () {\n        this.x *= -1;\n        this.y *= -1;\n        this.z *= -1;\n        return this;\n    };\n    /**\n     * Conjugates in place (1-q) the current quaternion\n     * @returns a new quaternion\n     */\n    Quaternion.prototype.conjugate = function () {\n        var result = new Quaternion(-this.x, -this.y, -this.z, this.w);\n        return result;\n    };\n    /**\n     * Normalize in place the current quaternion\n     * @returns the current updated quaternion\n     */\n    Quaternion.prototype.normalize = function () {\n        var length = 1.0 / this.length;\n        this.x *= length;\n        this.y *= length;\n        this.z *= length;\n        this.w *= length;\n        return this;\n    };\n    Quaternion.prototype.angleAxis = function (degress, axis) {\n        if (axis.lengthSquared() === 0) {\n            return Quaternion.Identity;\n        }\n        var result = Quaternion.Identity;\n        var radians = degress * types_1.DEG2RAD;\n        radians *= 0.5;\n        var a2 = axis.normalize();\n        a2 = axis.scaleInPlace(Math.sin(radians));\n        result.x = a2.x;\n        result.y = a2.y;\n        result.z = a2.z;\n        result.w = Math.cos(radians);\n        return result.normalize();\n    };\n    /**\n     * Updates the given rotation matrix with the current quaternion values\n     * @param result - defines the target matrix\n     * @returns the current unchanged quaternion\n     */\n    Quaternion.prototype.toRotationMatrix = function (result) {\n        Matrix_1.Matrix.FromQuaternionToRef(this, result);\n        return this;\n    };\n    /**\n     * Updates the current quaternion from the given rotation matrix values\n     * @param matrix - defines the source matrix\n     * @returns the current updated quaternion\n     */\n    Quaternion.prototype.fromRotationMatrix = function (matrix) {\n        Quaternion.FromRotationMatrixToRef(matrix, this);\n        return this;\n    };\n    return Quaternion;\n}());\nexports.Quaternion = Quaternion;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Quaternion.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Scalar.ts":
/*!*******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Scalar.ts ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * Scalar computation library\n * @public\n */\nvar Scalar = /** @class */ (function () {\n    function Scalar() {\n    }\n    /**\n     * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n     * @param a - number\n     * @param b - number\n     * @param epsilon - (default = 1.401298E-45)\n     * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n     */\n    Scalar.WithinEpsilon = function (a, b, epsilon) {\n        if (epsilon === void 0) { epsilon = 1.401298e-45; }\n        var num = a - b;\n        return -epsilon <= num && num <= epsilon;\n    };\n    /**\n     * Returns a string : the upper case translation of the number i to hexadecimal.\n     * @param i - number\n     * @returns the upper case translation of the number i to hexadecimal.\n     */\n    Scalar.ToHex = function (i) {\n        var str = i.toString(16);\n        if (i <= 15) {\n            return (\'0\' + str).toUpperCase();\n        }\n        return str.toUpperCase();\n    };\n    /**\n     * Returns -1 if value is negative and +1 is value is positive.\n     * @param _value - the value\n     * @returns the value itself if it\'s equal to zero.\n     */\n    Scalar.Sign = function (value) {\n        var _value = +value; // convert to a number\n        if (_value === 0 || isNaN(_value)) {\n            return _value;\n        }\n        return _value > 0 ? 1 : -1;\n    };\n    /**\n     * Returns the value itself if it\'s between min and max.\n     * Returns min if the value is lower than min.\n     * Returns max if the value is greater than max.\n     * @param value - the value to clmap\n     * @param min - the min value to clamp to (default: 0)\n     * @param max - the max value to clamp to (default: 1)\n     * @returns the clamped value\n     */\n    Scalar.Clamp = function (value, min, max) {\n        if (min === void 0) { min = 0; }\n        if (max === void 0) { max = 1; }\n        return Math.min(max, Math.max(min, value));\n    };\n    /**\n     * the log2 of value.\n     * @param value - the value to compute log2 of\n     * @returns the log2 of value.\n     */\n    Scalar.Log2 = function (value) {\n        return Math.log(value) * Math.LOG2E;\n    };\n    /**\n     * Loops the value, so that it is never larger than length and never smaller than 0.\n     *\n     * This is similar to the modulo operator but it works with floating point numbers.\n     * For example, using 3.0 for t and 2.5 for length, the result would be 0.5.\n     * With t = 5 and length = 2.5, the result would be 0.0.\n     * Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\n     * @param value - the value\n     * @param length - the length\n     * @returns the looped value\n     */\n    Scalar.Repeat = function (value, length) {\n        return value - Math.floor(value / length) * length;\n    };\n    /**\n     * Normalize the value between 0.0 and 1.0 using min and max values\n     * @param value - value to normalize\n     * @param min - max to normalize between\n     * @param max - min to normalize between\n     * @returns the normalized value\n     */\n    Scalar.Normalize = function (value, min, max) {\n        return (value - min) / (max - min);\n    };\n    /**\n     * Denormalize the value from 0.0 and 1.0 using min and max values\n     * @param normalized - value to denormalize\n     * @param min - max to denormalize between\n     * @param max - min to denormalize between\n     * @returns the denormalized value\n     */\n    Scalar.Denormalize = function (normalized, min, max) {\n        return normalized * (max - min) + min;\n    };\n    /**\n     * Calculates the shortest difference between two given angles given in degrees.\n     * @param current - current angle in degrees\n     * @param target - target angle in degrees\n     * @returns the delta\n     */\n    Scalar.DeltaAngle = function (current, target) {\n        var num = Scalar.Repeat(target - current, 360.0);\n        if (num > 180.0) {\n            num -= 360.0;\n        }\n        return num;\n    };\n    /**\n     * PingPongs the value t, so that it is never larger than length and never smaller than 0.\n     * @param tx - value\n     * @param length - length\n     * @returns The returned value will move back and forth between 0 and length\n     */\n    Scalar.PingPong = function (tx, length) {\n        var t = Scalar.Repeat(tx, length * 2.0);\n        return length - Math.abs(t - length);\n    };\n    /**\n     * Interpolates between min and max with smoothing at the limits.\n     *\n     * This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up\n     * from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\n     * @param from - from\n     * @param to - to\n     * @param tx - value\n     * @returns the smooth stepped value\n     */\n    Scalar.SmoothStep = function (from, to, tx) {\n        var t = Scalar.Clamp(tx);\n        t = -2.0 * t * t * t + 3.0 * t * t;\n        return to * t + from * (1.0 - t);\n    };\n    /**\n     * Moves a value current towards target.\n     *\n     * This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta.\n     * Negative values of maxDelta pushes the value away from target.\n     * @param current - current value\n     * @param target - target value\n     * @param maxDelta - max distance to move\n     * @returns resulting value\n     */\n    Scalar.MoveTowards = function (current, target, maxDelta) {\n        var result = 0;\n        if (Math.abs(target - current) <= maxDelta) {\n            result = target;\n        }\n        else {\n            result = current + Scalar.Sign(target - current) * maxDelta;\n        }\n        return result;\n    };\n    /**\n     * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\n     *\n     * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta\n     *  are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\n     * @param current - current value\n     * @param target - target value\n     * @param maxDelta - max distance to move\n     * @returns resulting angle\n     */\n    Scalar.MoveTowardsAngle = function (current, target, maxDelta) {\n        var num = Scalar.DeltaAngle(current, target);\n        var result = 0;\n        if (-maxDelta < num && num < maxDelta) {\n            result = target;\n        }\n        else {\n            result = Scalar.MoveTowards(current, current + num, maxDelta);\n        }\n        return result;\n    };\n    /**\n     * Creates a new scalar with values linearly interpolated of "amount" between the start scalar and the end scalar.\n     * @param start - start value\n     * @param end - target value\n     * @param amount - amount to lerp between\n     * @returns the lerped value\n     */\n    Scalar.Lerp = function (start, end, amount) {\n        return start + (end - start) * amount;\n    };\n    /**\n     * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.\n     * The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\n     * @param start - start value\n     * @param end - target value\n     * @param amount - amount to lerp between\n     * @returns the lerped value\n     */\n    Scalar.LerpAngle = function (start, end, amount) {\n        var num = Scalar.Repeat(end - start, 360.0);\n        if (num > 180.0) {\n            num -= 360.0;\n        }\n        return start + num * Scalar.Clamp(amount);\n    };\n    /**\n     * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\n     * @param a - start value\n     * @param b - target value\n     * @param value - value between a and b\n     * @returns the inverseLerp value\n     */\n    Scalar.InverseLerp = function (a, b, value) {\n        var result = 0;\n        if (a !== b) {\n            result = Scalar.Clamp((value - a) / (b - a));\n        }\n        else {\n            result = 0.0;\n        }\n        return result;\n    };\n    /**\n     * Returns a new scalar located for "amount" (float) on the Hermite spline defined by the scalars "value1", "value3", "tangent1", "tangent2".\n     * {@link http://mathworld.wolfram.com/HermitePolynomial.html}\n     * @param value1 - spline value\n     * @param tangent1 - spline value\n     * @param value2 - spline value\n     * @param tangent2 - spline value\n     * @param amount - input value\n     * @returns hermite result\n     */\n    Scalar.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n        var squared = amount * amount;\n        var cubed = amount * squared;\n        var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n        var part2 = -2.0 * cubed + 3.0 * squared;\n        var part3 = cubed - 2.0 * squared + amount;\n        var part4 = cubed - squared;\n        return value1 * part1 + value2 * part2 + tangent1 * part3 + tangent2 * part4;\n    };\n    /**\n     * Returns a random float number between and min and max values\n     * @param min - min value of random\n     * @param max - max value of random\n     * @returns random value\n     */\n    Scalar.RandomRange = function (min, max) {\n        if (min === max) {\n            return min;\n        }\n        return Math.random() * (max - min) + min;\n    };\n    /**\n     * This function returns percentage of a number in a given range.\n     *\n     * RangeToPercent(40,20,60) will return 0.5 (50%)\n     * RangeToPercent(34,0,100) will return 0.34 (34%)\n     * @param num - to convert to percentage\n     * @param min - min range\n     * @param max - max range\n     * @returns the percentage\n     */\n    Scalar.RangeToPercent = function (num, min, max) {\n        return (num - min) / (max - min);\n    };\n    /**\n     * This function returns number that corresponds to the percentage in a given range.\n     *\n     * PercentToRange(0.34,0,100) will return 34.\n     * @param percent - to convert to number\n     * @param min - min range\n     * @param max - max range\n     * @returns the number\n     */\n    Scalar.PercentToRange = function (percent, min, max) {\n        return (max - min) * percent + min;\n    };\n    /**\n     * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\n     * @param angle - The angle to normalize in radian.\n     * @returns The converted angle.\n     */\n    Scalar.NormalizeRadians = function (angle) {\n        // More precise but slower version kept for reference.\n        // tslint:disable:no-commented-out-code\n        /*\n          // angle = angle % Tools.TwoPi;\n          // angle = (angle + Tools.TwoPi) % Tools.TwoPi;\n    \n          //if (angle > Math.PI) {\n          //\tangle -= Tools.TwoPi;\n          //}\n           */\n        return angle - Scalar.TwoPi * Math.floor((angle + Math.PI) / Scalar.TwoPi);\n    };\n    /**\n     * Two pi constants convenient for computation.\n     */\n    Scalar.TwoPi = Math.PI * 2;\n    return Scalar;\n}());\nexports.Scalar = Scalar;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Scalar.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Size.ts":
/*!*****************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Size.ts ***!
  \*****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * Size containing widht and height\n * @public\n */\nvar Size = /** @class */ (function () {\n    /**\n     * Creates a Size object from the given width and height (floats).\n     * @param width - width of the new size\n     * @param height - height of the new size\n     */\n    function Size(width, height) {\n        this.width = width;\n        this.height = height;\n    }\n    Object.defineProperty(Size.prototype, "surface", {\n        /**\n         * The surface of the Size : width * height (float).\n         */\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Create a new size of zero\n     * @returns a new Size set to (0.0, 0.0)\n     */\n    Size.Zero = function () {\n        return new Size(0.0, 0.0);\n    };\n    /**\n     * Creates a new Size set at the linear interpolation "amount" between "start" and "end"\n     * @param start - starting size to lerp between\n     * @param end - end size to lerp between\n     * @param amount - amount to lerp between the start and end values\n     * @returns a new Size set at the linear interpolation "amount" between "start" and "end"\n     */\n    Size.Lerp = function (start, end, amount) {\n        var w = start.width + (end.width - start.width) * amount;\n        var h = start.height + (end.height - start.height) * amount;\n        return new Size(w, h);\n    };\n    /**\n     * Returns a string with the Size width and height\n     * @returns a string with the Size width and height\n     */\n    Size.prototype.toString = function () {\n        return "{W: " + this.width + ", H: " + this.height + "}";\n    };\n    /**\n     * "Size"\n     * @returns the string "Size"\n     */\n    Size.prototype.getClassName = function () {\n        return \'Size\';\n    };\n    /**\n     * Returns the Size hash code.\n     * @returns a hash code for a unique width and height\n     */\n    Size.prototype.getHashCode = function () {\n        var hash = this.width || 0;\n        hash = (hash * 397) ^ (this.height || 0);\n        return hash;\n    };\n    /**\n     * Updates the current size from the given one.\n     * @param src - the given size\n     */\n    Size.prototype.copyFrom = function (src) {\n        this.width = src.width;\n        this.height = src.height;\n    };\n    /**\n     * Updates in place the current Size from the given floats.\n     * @param width - width of the new size\n     * @param height - height of the new size\n     * @returns the updated Size.\n     */\n    Size.prototype.copyFromFloats = function (width, height) {\n        this.width = width;\n        this.height = height;\n        return this;\n    };\n    /**\n     * Updates in place the current Size from the given floats.\n     * @param width - width to set\n     * @param height - height to set\n     * @returns the updated Size.\n     */\n    Size.prototype.set = function (width, height) {\n        return this.copyFromFloats(width, height);\n    };\n    /**\n     * Multiplies the width and height by numbers\n     * @param w - factor to multiple the width by\n     * @param h - factor to multiple the height by\n     * @returns a new Size set with the multiplication result of the current Size and the given floats.\n     */\n    Size.prototype.multiplyByFloats = function (w, h) {\n        return new Size(this.width * w, this.height * h);\n    };\n    /**\n     * Clones the size\n     * @returns a new Size copied from the given one.\n     */\n    Size.prototype.clone = function () {\n        return new Size(this.width, this.height);\n    };\n    /**\n     * True if the current Size and the given one width and height are strictly equal.\n     * @param other - the other size to compare against\n     * @returns True if the current Size and the given one width and height are strictly equal.\n     */\n    Size.prototype.equals = function (other) {\n        if (!other) {\n            return false;\n        }\n        return this.width === other.width && this.height === other.height;\n    };\n    /**\n     * Sums the width and height of two sizes\n     * @param otherSize - size to add to this size\n     * @returns a new Size set as the addition result of the current Size and the given one.\n     */\n    Size.prototype.add = function (otherSize) {\n        var r = new Size(this.width + otherSize.width, this.height + otherSize.height);\n        return r;\n    };\n    /**\n     * Subtracts the width and height of two\n     * @param otherSize - size to subtract to this size\n     * @returns a new Size set as the subtraction result of  the given one from the current Size.\n     */\n    Size.prototype.subtract = function (otherSize) {\n        var r = new Size(this.width - otherSize.width, this.height - otherSize.height);\n        return r;\n    };\n    return Size;\n}());\nexports.Size = Size;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Size.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Vector2.ts":
/*!********************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Vector2.ts ***!
  \********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\nvar Scalar_1 = __webpack_require__(/*! ./Scalar */ "./packages/decentraland-ecs/src/decentraland/math/Scalar.ts");\n/**\n * Class representing a vector containing 2 coordinates\n * @public\n */\nvar Vector2 = /** @class */ (function () {\n    /**\n     * Creates a new Vector2 from the given x and y coordinates\n     * @param x - defines the first coordinate\n     * @param y - defines the second coordinate\n     */\n    function Vector2(\n    /** defines the first coordinate */\n    x, \n    /** defines the second coordinate */\n    y) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * Gets a new Vector2(0, 0)\n     * @returns a new Vector2\n     */\n    Vector2.Zero = function () {\n        return new Vector2(0, 0);\n    };\n    /**\n     * Gets a new Vector2(1, 1)\n     * @returns a new Vector2\n     */\n    Vector2.One = function () {\n        return new Vector2(1, 1);\n    };\n    /**\n     * Returns a new Vector2 as the result of the addition of the two given vectors.\n     * @param vector1 - the first vector\n     * @param vector2 - the second vector\n     * @returns the resulting vector\n     */\n    Vector2.Add = function (vector1, vector2) {\n        return new Vector2(vector1.x, vector1.y).addInPlace(vector2);\n    };\n    /**\n     * Gets a new Vector2 set from the given index element of the given array\n     * @param array - defines the data source\n     * @param offset - defines the offset in the data source\n     * @returns a new Vector2\n     */\n    Vector2.FromArray = function (array, offset) {\n        if (offset === void 0) { offset = 0; }\n        return new Vector2(array[offset], array[offset + 1]);\n    };\n    /**\n     * Sets "result" from the given index element of the given array\n     * @param array - defines the data source\n     * @param offset - defines the offset in the data source\n     * @param result - defines the target vector\n     */\n    Vector2.FromArrayToRef = function (array, offset, result) {\n        result.x = array[offset];\n        result.y = array[offset + 1];\n    };\n    /**\n     * Gets a new Vector2 located for "amount" (float) on the CatmullRom spline defined by the given four Vector2\n     * @param value1 - defines 1st point of control\n     * @param value2 - defines 2nd point of control\n     * @param value3 - defines 3rd point of control\n     * @param value4 - defines 4th point of control\n     * @param amount - defines the interpolation factor\n     * @returns a new Vector2\n     */\n    Vector2.CatmullRom = function (value1, value2, value3, value4, amount) {\n        var squared = amount * amount;\n        var cubed = amount * squared;\n        var x = 0.5 *\n            (2.0 * value2.x +\n                (-value1.x + value3.x) * amount +\n                (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared +\n                (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n        var y = 0.5 *\n            (2.0 * value2.y +\n                (-value1.y + value3.y) * amount +\n                (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared +\n                (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n        return new Vector2(x, y);\n    };\n    /**\n     * Returns a new Vector2 set with same the coordinates than "value" ones if the vector "value" is in the square defined by "min" and "max".\n     * If a coordinate of "value" is lower than "min" coordinates, the returned Vector2 is given this "min" coordinate.\n     * If a coordinate of "value" is greater than "max" coordinates, the returned Vector2 is given this "max" coordinate\n     * @param value - defines the value to clamp\n     * @param min - defines the lower limit\n     * @param max - defines the upper limit\n     * @returns a new Vector2\n     */\n    Vector2.Clamp = function (value, min, max) {\n        var x = value.x;\n        x = x > max.x ? max.x : x;\n        x = x < min.x ? min.x : x;\n        var y = value.y;\n        y = y > max.y ? max.y : y;\n        y = y < min.y ? min.y : y;\n        return new Vector2(x, y);\n    };\n    /**\n     * Returns a new Vector2 located for "amount" (float) on the Hermite spline defined by the vectors "value1", "value3", "tangent1", "tangent2"\n     * @param value1 - defines the 1st control point\n     * @param tangent1 - defines the outgoing tangent\n     * @param value2 - defines the 2nd control point\n     * @param tangent2 - defines the incoming tangent\n     * @param amount - defines the interpolation factor\n     * @returns a new Vector2\n     */\n    Vector2.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n        var squared = amount * amount;\n        var cubed = amount * squared;\n        var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n        var part2 = -2.0 * cubed + 3.0 * squared;\n        var part3 = cubed - 2.0 * squared + amount;\n        var part4 = cubed - squared;\n        var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;\n        var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;\n        return new Vector2(x, y);\n    };\n    /**\n     * Returns a new Vector2 located for "amount" (float) on the linear interpolation between the vector "start" adn the vector "end".\n     * @param start - defines the start vector\n     * @param end - defines the end vector\n     * @param amount - defines the interpolation factor\n     * @returns a new Vector2\n     */\n    Vector2.Lerp = function (start, end, amount) {\n        var x = start.x + (end.x - start.x) * amount;\n        var y = start.y + (end.y - start.y) * amount;\n        return new Vector2(x, y);\n    };\n    /**\n     * Gets the dot product of the vector "left" and the vector "right"\n     * @param left - defines first vector\n     * @param right - defines second vector\n     * @returns the dot product (float)\n     */\n    Vector2.Dot = function (left, right) {\n        return left.x * right.x + left.y * right.y;\n    };\n    /**\n     * Returns a new Vector2 equal to the normalized given vector\n     * @param vector - defines the vector to normalize\n     * @returns a new Vector2\n     */\n    Vector2.Normalize = function (vector) {\n        var newVector = new Vector2(vector.x, vector.y);\n        newVector.normalize();\n        return newVector;\n    };\n    /**\n     * Gets a new Vector2 set with the minimal coordinate values from the "left" and "right" vectors\n     * @param left - defines 1st vector\n     * @param right - defines 2nd vector\n     * @returns a new Vector2\n     */\n    Vector2.Minimize = function (left, right) {\n        var x = left.x < right.x ? left.x : right.x;\n        var y = left.y < right.y ? left.y : right.y;\n        return new Vector2(x, y);\n    };\n    /**\n     * Gets a new Vecto2 set with the maximal coordinate values from the "left" and "right" vectors\n     * @param left - defines 1st vector\n     * @param right - defines 2nd vector\n     * @returns a new Vector2\n     */\n    Vector2.Maximize = function (left, right) {\n        var x = left.x > right.x ? left.x : right.x;\n        var y = left.y > right.y ? left.y : right.y;\n        return new Vector2(x, y);\n    };\n    /**\n     * Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix\n     * @param vector - defines the vector to transform\n     * @param transformation - defines the matrix to apply\n     * @returns a new Vector2\n     */\n    Vector2.Transform = function (vector, transformation) {\n        var r = Vector2.Zero();\n        Vector2.TransformToRef(vector, transformation, r);\n        return r;\n    };\n    /**\n     * Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector "result" coordinates\n     * @param vector - defines the vector to transform\n     * @param transformation - defines the matrix to apply\n     * @param result - defines the target vector\n     */\n    Vector2.TransformToRef = function (vector, transformation, result) {\n        var m = transformation.m;\n        var x = vector.x * m[0] + vector.y * m[4] + m[12];\n        var y = vector.x * m[1] + vector.y * m[5] + m[13];\n        result.x = x;\n        result.y = y;\n    };\n    /**\n     * Determines if a given vector is included in a triangle\n     * @param p - defines the vector to test\n     * @param p0 - defines 1st triangle point\n     * @param p1 - defines 2nd triangle point\n     * @param p2 - defines 3rd triangle point\n     * @returns true if the point "p" is in the triangle defined by the vertors "p0", "p1", "p2"\n     */\n    Vector2.PointInTriangle = function (p, p0, p1, p2) {\n        var a = (1 / 2) * (-p1.y * p2.x + p0.y * (-p1.x + p2.x) + p0.x * (p1.y - p2.y) + p1.x * p2.y);\n        var sign = a < 0 ? -1 : 1;\n        var s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) * sign;\n        var t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) * sign;\n        return s > 0 && t > 0 && s + t < 2 * a * sign;\n    };\n    /**\n     * Gets the distance between the vectors "value1" and "value2"\n     * @param value1 - defines first vector\n     * @param value2 - defines second vector\n     * @returns the distance between vectors\n     */\n    Vector2.Distance = function (value1, value2) {\n        return Math.sqrt(Vector2.DistanceSquared(value1, value2));\n    };\n    /**\n     * Returns the squared distance between the vectors "value1" and "value2"\n     * @param value1 - defines first vector\n     * @param value2 - defines second vector\n     * @returns the squared distance between vectors\n     */\n    Vector2.DistanceSquared = function (value1, value2) {\n        var x = value1.x - value2.x;\n        var y = value1.y - value2.y;\n        return x * x + y * y;\n    };\n    /**\n     * Gets a new Vector2 located at the center of the vectors "value1" and "value2"\n     * @param value1 - defines first vector\n     * @param value2 - defines second vector\n     * @returns a new Vector2\n     */\n    Vector2.Center = function (value1, value2) {\n        var center = Vector2.Add(value1, value2);\n        center.scaleInPlace(0.5);\n        return center;\n    };\n    /**\n     * Gets the shortest distance (float) between the point "p" and the segment defined by the two points "segA" and "segB".\n     * @param p - defines the middle point\n     * @param segA - defines one point of the segment\n     * @param segB - defines the other point of the segment\n     * @returns the shortest distance\n     */\n    Vector2.DistanceOfPointFromSegment = function (p, segA, segB) {\n        var l2 = Vector2.DistanceSquared(segA, segB);\n        if (l2 === 0.0) {\n            return Vector2.Distance(p, segA);\n        }\n        var v = segB.subtract(segA);\n        var t = Math.max(0, Math.min(1, Vector2.Dot(p.subtract(segA), v) / l2));\n        var proj = segA.add(v.multiplyByFloats(t, t));\n        return Vector2.Distance(p, proj);\n    };\n    /**\n     * Gets a string with the Vector2 coordinates\n     * @returns a string with the Vector2 coordinates\n     */\n    Vector2.prototype.toString = function () {\n        return \'{X: \' + this.x + \' Y:\' + this.y + \'}\';\n    };\n    /**\n     * Gets class name\n     * @returns the string "Vector2"\n     */\n    Vector2.prototype.getClassName = function () {\n        return \'Vector2\';\n    };\n    /**\n     * Gets current vector hash code\n     * @returns the Vector2 hash code as a number\n     */\n    Vector2.prototype.getHashCode = function () {\n        var hash = this.x || 0;\n        hash = (hash * 397) ^ (this.y || 0);\n        return hash;\n    };\n    // Operators\n    /**\n     * Sets the Vector2 coordinates in the given array or FloatArray from the given index.\n     * @param array - defines the source array\n     * @param index - defines the offset in source array\n     * @returns the current Vector2\n     */\n    Vector2.prototype.toArray = function (array, index) {\n        if (index === void 0) { index = 0; }\n        array[index] = this.x;\n        array[index + 1] = this.y;\n        return this;\n    };\n    /**\n     * Copy the current vector to an array\n     * @returns a new array with 2 elements: the Vector2 coordinates.\n     */\n    Vector2.prototype.asArray = function () {\n        var result = new Array();\n        this.toArray(result, 0);\n        return result;\n    };\n    /**\n     * Sets the Vector2 coordinates with the given Vector2 coordinates\n     * @param source - defines the source Vector2\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.copyFrom = function (source) {\n        this.x = source.x;\n        this.y = source.y;\n        return this;\n    };\n    /**\n     * Sets the Vector2 coordinates with the given floats\n     * @param x - defines the first coordinate\n     * @param y - defines the second coordinate\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.copyFromFloats = function (x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    };\n    /**\n     * Sets the Vector2 coordinates with the given floats\n     * @param x - defines the first coordinate\n     * @param y - defines the second coordinate\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.set = function (x, y) {\n        return this.copyFromFloats(x, y);\n    };\n    /**\n     * Add another vector with the current one\n     * @param otherVector - defines the other vector\n     * @returns a new Vector2 set with the addition of the current Vector2 and the given one coordinates\n     */\n    Vector2.prototype.add = function (otherVector) {\n        return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n    };\n    /**\n     * Sets the "result" coordinates with the addition of the current Vector2 and the given one coordinates\n     * @param otherVector - defines the other vector\n     * @param result - defines the target vector\n     * @returns the unmodified current Vector2\n     */\n    Vector2.prototype.addToRef = function (otherVector, result) {\n        result.x = this.x + otherVector.x;\n        result.y = this.y + otherVector.y;\n        return this;\n    };\n    /**\n     * Set the Vector2 coordinates by adding the given Vector2 coordinates\n     * @param otherVector - defines the other vector\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.addInPlace = function (otherVector) {\n        this.x += otherVector.x;\n        this.y += otherVector.y;\n        return this;\n    };\n    /**\n     * Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates\n     * @param otherVector - defines the other vector\n     * @returns a new Vector2\n     */\n    Vector2.prototype.addVector3 = function (otherVector) {\n        return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n    };\n    /**\n     * Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2\n     * @param otherVector - defines the other vector\n     * @returns a new Vector2\n     */\n    Vector2.prototype.subtract = function (otherVector) {\n        return new Vector2(this.x - otherVector.x, this.y - otherVector.y);\n    };\n    /**\n     * Sets the "result" coordinates with the subtraction of the given one from the current Vector2 coordinates.\n     * @param otherVector - defines the other vector\n     * @param result - defines the target vector\n     * @returns the unmodified current Vector2\n     */\n    Vector2.prototype.subtractToRef = function (otherVector, result) {\n        result.x = this.x - otherVector.x;\n        result.y = this.y - otherVector.y;\n        return this;\n    };\n    /**\n     * Sets the current Vector2 coordinates by subtracting from it the given one coordinates\n     * @param otherVector - defines the other vector\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.subtractInPlace = function (otherVector) {\n        this.x -= otherVector.x;\n        this.y -= otherVector.y;\n        return this;\n    };\n    /**\n     * Multiplies in place the current Vector2 coordinates by the given ones\n     * @param otherVector - defines the other vector\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.multiplyInPlace = function (otherVector) {\n        this.x *= otherVector.x;\n        this.y *= otherVector.y;\n        return this;\n    };\n    /**\n     * Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates\n     * @param otherVector - defines the other vector\n     * @returns a new Vector2\n     */\n    Vector2.prototype.multiply = function (otherVector) {\n        return new Vector2(this.x * otherVector.x, this.y * otherVector.y);\n    };\n    /**\n     * Sets "result" coordinates with the multiplication of the current Vector2 and the given one coordinates\n     * @param otherVector - defines the other vector\n     * @param result - defines the target vector\n     * @returns the unmodified current Vector2\n     */\n    Vector2.prototype.multiplyToRef = function (otherVector, result) {\n        result.x = this.x * otherVector.x;\n        result.y = this.y * otherVector.y;\n        return this;\n    };\n    /**\n     * Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats\n     * @param x - defines the first coordinate\n     * @param y - defines the second coordinate\n     * @returns a new Vector2\n     */\n    Vector2.prototype.multiplyByFloats = function (x, y) {\n        return new Vector2(this.x * x, this.y * y);\n    };\n    /**\n     * Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates\n     * @param otherVector - defines the other vector\n     * @returns a new Vector2\n     */\n    Vector2.prototype.divide = function (otherVector) {\n        return new Vector2(this.x / otherVector.x, this.y / otherVector.y);\n    };\n    /**\n     * Sets the "result" coordinates with the Vector2 divided by the given one coordinates\n     * @param otherVector - defines the other vector\n     * @param result - defines the target vector\n     * @returns the unmodified current Vector2\n     */\n    Vector2.prototype.divideToRef = function (otherVector, result) {\n        result.x = this.x / otherVector.x;\n        result.y = this.y / otherVector.y;\n        return this;\n    };\n    /**\n     * Divides the current Vector2 coordinates by the given ones\n     * @param otherVector - defines the other vector\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.divideInPlace = function (otherVector) {\n        return this.divideToRef(otherVector, this);\n    };\n    /**\n     * Gets a new Vector2 with current Vector2 negated coordinates\n     * @returns a new Vector2\n     */\n    Vector2.prototype.negate = function () {\n        return new Vector2(-this.x, -this.y);\n    };\n    /**\n     * Multiply the Vector2 coordinates by scale\n     * @param scale - defines the scaling factor\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.scaleInPlace = function (scale) {\n        this.x *= scale;\n        this.y *= scale;\n        return this;\n    };\n    /**\n     * Returns a new Vector2 scaled by "scale" from the current Vector2\n     * @param scale - defines the scaling factor\n     * @returns a new Vector2\n     */\n    Vector2.prototype.scale = function (scale) {\n        var result = new Vector2(0, 0);\n        this.scaleToRef(scale, result);\n        return result;\n    };\n    /**\n     * Scale the current Vector2 values by a factor to a given Vector2\n     * @param scale - defines the scale factor\n     * @param result - defines the Vector2 object where to store the result\n     * @returns the unmodified current Vector2\n     */\n    Vector2.prototype.scaleToRef = function (scale, result) {\n        result.x = this.x * scale;\n        result.y = this.y * scale;\n        return this;\n    };\n    /**\n     * Scale the current Vector2 values by a factor and add the result to a given Vector2\n     * @param scale - defines the scale factor\n     * @param result - defines the Vector2 object where to store the result\n     * @returns the unmodified current Vector2\n     */\n    Vector2.prototype.scaleAndAddToRef = function (scale, result) {\n        result.x += this.x * scale;\n        result.y += this.y * scale;\n        return this;\n    };\n    /**\n     * Gets a boolean if two vectors are equals\n     * @param otherVector - defines the other vector\n     * @returns true if the given vector coordinates strictly equal the current Vector2 ones\n     */\n    Vector2.prototype.equals = function (otherVector) {\n        return otherVector && this.x === otherVector.x && this.y === otherVector.y;\n    };\n    /**\n     * Gets a boolean if two vectors are equals (using an epsilon value)\n     * @param otherVector - defines the other vector\n     * @param epsilon - defines the minimal distance to consider equality\n     * @returns true if the given vector coordinates are close to the current ones by a distance of epsilon.\n     */\n    Vector2.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\n        if (epsilon === void 0) { epsilon = types_1.Epsilon; }\n        return (otherVector &&\n            Scalar_1.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n            Scalar_1.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon));\n    };\n    /**\n     * Gets a new Vector2 from current Vector2 floored values\n     * @returns a new Vector2\n     */\n    Vector2.prototype.floor = function () {\n        return new Vector2(Math.floor(this.x), Math.floor(this.y));\n    };\n    /**\n     * Gets a new Vector2 from current Vector2 floored values\n     * @returns a new Vector2\n     */\n    Vector2.prototype.fract = function () {\n        return new Vector2(this.x - Math.floor(this.x), this.y - Math.floor(this.y));\n    };\n    // Properties\n    /**\n     * Gets the length of the vector\n     * @returns the vector length (float)\n     */\n    Vector2.prototype.length = function () {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    };\n    /**\n     * Gets the vector squared length\n     * @returns the vector squared length (float)\n     */\n    Vector2.prototype.lengthSquared = function () {\n        return this.x * this.x + this.y * this.y;\n    };\n    // Methods\n    /**\n     * Normalize the vector\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.normalize = function () {\n        var len = this.length();\n        if (len === 0) {\n            return this;\n        }\n        var num = 1.0 / len;\n        this.x *= num;\n        this.y *= num;\n        return this;\n    };\n    /**\n     * Gets a new Vector2 copied from the Vector2\n     * @returns a new Vector2\n     */\n    Vector2.prototype.clone = function () {\n        return new Vector2(this.x, this.y);\n    };\n    return Vector2;\n}());\nexports.Vector2 = Vector2;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Vector2.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Vector3.ts":
/*!********************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Vector3.ts ***!
  \********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar preallocatedVariables_1 = __webpack_require__(/*! ./preallocatedVariables */ "./packages/decentraland-ecs/src/decentraland/math/preallocatedVariables.ts");\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\nvar Quaternion_1 = __webpack_require__(/*! ./Quaternion */ "./packages/decentraland-ecs/src/decentraland/math/Quaternion.ts");\nvar Scalar_1 = __webpack_require__(/*! ./Scalar */ "./packages/decentraland-ecs/src/decentraland/math/Scalar.ts");\n/**\n * Classed used to store (x,y,z) vector representation\n * A Vector3 is the main object used in 3D geometry\n * It can represent etiher the coordinates of a point the space, either a direction\n * Reminder: Babylon.js uses a left handed forward facing system\n * @public\n */\nvar Vector3 = /** @class */ (function () {\n    /**\n     * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\n     * @param x - defines the first coordinates (on X axis)\n     * @param y - defines the second coordinates (on Y axis)\n     * @param z - defines the third coordinates (on Z axis)\n     */\n    function Vector3(\n    /**\n     * Defines the first coordinates (on X axis)\n     */\n    x, \n    /**\n     * Defines the second coordinates (on Y axis)\n     */\n    y, \n    /**\n     * Defines the third coordinates (on Z axis)\n     */\n    z) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (z === void 0) { z = 0; }\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    Object.defineProperty(Vector3.prototype, "isNonUniform", {\n        /**\n         * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\n         */\n        get: function () {\n            var absX = Math.abs(this.x);\n            var absY = Math.abs(this.y);\n            if (absX !== absY) {\n                return true;\n            }\n            var absZ = Math.abs(this.z);\n            if (absX !== absZ) {\n                return true;\n            }\n            if (absY !== absZ) {\n                return true;\n            }\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Statics\n    /**\n     * Returns a new Vector3 as the result of the addition of the two given vectors.\n     * @param vector1 - the first vector\n     * @param vector2 - the second vector\n     * @returns the resulting vector\n     */\n    Vector3.Add = function (vector1, vector2) {\n        return new Vector3(vector1.x, vector1.y, vector1.z).addInPlace(vector2);\n    };\n    /**\n     * Get the clip factor between two vectors\n     * @param vector0 - defines the first operand\n     * @param vector1 - defines the second operand\n     * @param axis - defines the axis to use\n     * @param size - defines the size along the axis\n     * @returns the clip factor\n     */\n    Vector3.GetClipFactor = function (vector0, vector1, axis, size) {\n        var d0 = Vector3.Dot(vector0, axis) - size;\n        var d1 = Vector3.Dot(vector1, axis) - size;\n        var s = d0 / (d0 - d1);\n        return s;\n    };\n    /**\n     * Get angle between two vectors\n     * @param vector0 - angle between vector0 and vector1\n     * @param vector1 - angle between vector0 and vector1\n     * @param normal - direction of the normal\n     * @returns the angle between vector0 and vector1\n     */\n    Vector3.GetAngleBetweenVectors = function (vector0, vector1, normal) {\n        var v0 = vector0.normalizeToRef(preallocatedVariables_1.MathTmp.Vector3[1]);\n        var v1 = vector1.normalizeToRef(preallocatedVariables_1.MathTmp.Vector3[2]);\n        var dot = Vector3.Dot(v0, v1);\n        var n = preallocatedVariables_1.MathTmp.Vector3[3];\n        Vector3.CrossToRef(v0, v1, n);\n        if (Vector3.Dot(n, normal) > 0) {\n            return Math.acos(dot);\n        }\n        return -Math.acos(dot);\n    };\n    /**\n     * Returns a new Vector3 set from the index "offset" of the given array\n     * @param array - defines the source array\n     * @param offset - defines the offset in the source array\n     * @returns the new Vector3\n     */\n    Vector3.FromArray = function (array, offset) {\n        if (offset === void 0) { offset = 0; }\n        return new Vector3(array[offset], array[offset + 1], array[offset + 2]);\n    };\n    /**\n     * Returns a new Vector3 set from the index "offset" of the given FloatArray\n     * This function is deprecated.  Use FromArray instead\n     * @param array - defines the source array\n     * @param offset - defines the offset in the source array\n     * @returns the new Vector3\n     */\n    Vector3.FromFloatArray = function (array, offset) {\n        return Vector3.FromArray(array, offset);\n    };\n    /**\n     * Sets the given vector "result" with the element values from the index "offset" of the given array\n     * @param array - defines the source array\n     * @param offset - defines the offset in the source array\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.FromArrayToRef = function (array, offset, result) {\n        result.x = array[offset];\n        result.y = array[offset + 1];\n        result.z = array[offset + 2];\n    };\n    /**\n     * Sets the given vector "result" with the element values from the index "offset" of the given FloatArray\n     * This function is deprecated.  Use FromArrayToRef instead.\n     * @param array - defines the source array\n     * @param offset - defines the offset in the source array\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.FromFloatArrayToRef = function (array, offset, result) {\n        return Vector3.FromArrayToRef(array, offset, result);\n    };\n    /**\n     * Sets the given vector "result" with the given floats.\n     * @param x - defines the x coordinate of the source\n     * @param y - defines the y coordinate of the source\n     * @param z - defines the z coordinate of the source\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.FromFloatsToRef = function (x, y, z, result) {\n        result.copyFromFloats(x, y, z);\n    };\n    /**\n     * Returns a new Vector3 set to (0.0, 0.0, 0.0)\n     * @returns a new empty Vector3\n     */\n    Vector3.Zero = function () {\n        return new Vector3(0.0, 0.0, 0.0);\n    };\n    /**\n     * Returns a new Vector3 set to (1.0, 1.0, 1.0)\n     * @returns a new unit Vector3\n     */\n    Vector3.One = function () {\n        return new Vector3(1.0, 1.0, 1.0);\n    };\n    /**\n     * Returns a new Vector3 set to (0.0, 1.0, 0.0)\n     * @returns a new up Vector3\n     */\n    Vector3.Up = function () {\n        return new Vector3(0.0, 1.0, 0.0);\n    };\n    /**\n     * Returns a new Vector3 set to (0.0, -1.0, 0.0)\n     * @returns a new down Vector3\n     */\n    Vector3.Down = function () {\n        return new Vector3(0.0, -1.0, 0.0);\n    };\n    /**\n     * Returns a new Vector3 set to (0.0, 0.0, 1.0)\n     * @returns a new forward Vector3\n     */\n    Vector3.Forward = function () {\n        return new Vector3(0.0, 0.0, 1.0);\n    };\n    /**\n     * Returns a new Vector3 set to (0.0, 0.0, -1.0)\n     * @returns a new forward Vector3\n     */\n    Vector3.Backward = function () {\n        return new Vector3(0.0, 0.0, -1.0);\n    };\n    /**\n     * Returns a new Vector3 set to (1.0, 0.0, 0.0)\n     * @returns a new right Vector3\n     */\n    Vector3.Right = function () {\n        return new Vector3(1.0, 0.0, 0.0);\n    };\n    /**\n     * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\n     * @returns a new left Vector3\n     */\n    Vector3.Left = function () {\n        return new Vector3(-1.0, 0.0, 0.0);\n    };\n    /**\n     * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector.\n     * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n     * @param vector - defines the Vector3 to transform\n     * @param transformation - defines the transformation matrix\n     * @returns the transformed Vector3\n     */\n    Vector3.TransformCoordinates = function (vector, transformation) {\n        var result = Vector3.Zero();\n        Vector3.TransformCoordinatesToRef(vector, transformation, result);\n        return result;\n    };\n    /**\n     * Sets the given vector "result" coordinates with the result of the transformation by the given matrix of the given vector\n     * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n     * @param vector - defines the Vector3 to transform\n     * @param transformation - defines the transformation matrix\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.TransformCoordinatesToRef = function (vector, transformation, result) {\n        return Vector3.TransformCoordinatesFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\n    };\n    /**\n     * Sets the given vector "result" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)\n     * This method computes tranformed coordinates only, not transformed direction vectors\n     * @param x - define the x coordinate of the source vector\n     * @param y - define the y coordinate of the source vector\n     * @param z - define the z coordinate of the source vector\n     * @param transformation - defines the transformation matrix\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.TransformCoordinatesFromFloatsToRef = function (x, y, z, transformation, result) {\n        var m = transformation.m;\n        var rx = x * m[0] + y * m[4] + z * m[8] + m[12];\n        var ry = x * m[1] + y * m[5] + z * m[9] + m[13];\n        var rz = x * m[2] + y * m[6] + z * m[10] + m[14];\n        var rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15]);\n        result.x = rx * rw;\n        result.y = ry * rw;\n        result.z = rz * rw;\n    };\n    /**\n     * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector\n     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n     * @param vector - defines the Vector3 to transform\n     * @param transformation - defines the transformation matrix\n     * @returns the new Vector3\n     */\n    Vector3.TransformNormal = function (vector, transformation) {\n        var result = Vector3.Zero();\n        Vector3.TransformNormalToRef(vector, transformation, result);\n        return result;\n    };\n    /**\n     * Sets the given vector "result" with the result of the normal transformation by the given matrix of the given vector\n     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n     * @param vector - defines the Vector3 to transform\n     * @param transformation - defines the transformation matrix\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.TransformNormalToRef = function (vector, transformation, result) {\n        this.TransformNormalFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\n    };\n    /**\n     * Sets the given vector "result" with the result of the normal transformation by the given matrix of the given floats (x, y, z)\n     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n     * @param x - define the x coordinate of the source vector\n     * @param y - define the y coordinate of the source vector\n     * @param z - define the z coordinate of the source vector\n     * @param transformation - defines the transformation matrix\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.TransformNormalFromFloatsToRef = function (x, y, z, transformation, result) {\n        var m = transformation.m;\n        result.x = x * m[0] + y * m[4] + z * m[8];\n        result.y = x * m[1] + y * m[5] + z * m[9];\n        result.z = x * m[2] + y * m[6] + z * m[10];\n    };\n    /**\n     * Returns a new Vector3 located for "amount" on the CatmullRom interpolation spline defined by the vectors "value1", "value2", "value3", "value4"\n     * @param value1 - defines the first control point\n     * @param value2 - defines the second control point\n     * @param value3 - defines the third control point\n     * @param value4 - defines the fourth control point\n     * @param amount - defines the amount on the spline to use\n     * @returns the new Vector3\n     */\n    Vector3.CatmullRom = function (value1, value2, value3, value4, amount) {\n        var squared = amount * amount;\n        var cubed = amount * squared;\n        var x = 0.5 *\n            (2.0 * value2.x +\n                (-value1.x + value3.x) * amount +\n                (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared +\n                (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n        var y = 0.5 *\n            (2.0 * value2.y +\n                (-value1.y + value3.y) * amount +\n                (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared +\n                (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n        var z = 0.5 *\n            (2.0 * value2.z +\n                (-value1.z + value3.z) * amount +\n                (2.0 * value1.z - 5.0 * value2.z + 4.0 * value3.z - value4.z) * squared +\n                (-value1.z + 3.0 * value2.z - 3.0 * value3.z + value4.z) * cubed);\n        return new Vector3(x, y, z);\n    };\n    /**\n     * Returns a new Vector3 set with the coordinates of "value", if the vector "value" is in the cube defined by the vectors "min" and "max"\n     * If a coordinate value of "value" is lower than one of the "min" coordinate, then this "value" coordinate is set with the "min" one\n     * If a coordinate value of "value" is greater than one of the "max" coordinate, then this "value" coordinate is set with the "max" one\n     * @param value - defines the current value\n     * @param min - defines the lower range value\n     * @param max - defines the upper range value\n     * @returns the new Vector3\n     */\n    Vector3.Clamp = function (value, min, max) {\n        var v = new Vector3();\n        Vector3.ClampToRef(value, min, max, v);\n        return v;\n    };\n    /**\n     * Sets the given vector "result" with the coordinates of "value", if the vector "value" is in the cube defined by the vectors "min" and "max"\n     * If a coordinate value of "value" is lower than one of the "min" coordinate, then this "value" coordinate is set with the "min" one\n     * If a coordinate value of "value" is greater than one of the "max" coordinate, then this "value" coordinate is set with the "max" one\n     * @param value - defines the current value\n     * @param min - defines the lower range value\n     * @param max - defines the upper range value\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.ClampToRef = function (value, min, max, result) {\n        var x = value.x;\n        x = x > max.x ? max.x : x;\n        x = x < min.x ? min.x : x;\n        var y = value.y;\n        y = y > max.y ? max.y : y;\n        y = y < min.y ? min.y : y;\n        var z = value.z;\n        z = z > max.z ? max.z : z;\n        z = z < min.z ? min.z : z;\n        result.copyFromFloats(x, y, z);\n    };\n    /**\n     * Returns a new Vector3 located for "amount" (float) on the Hermite interpolation spline defined by the vectors "value1", "tangent1", "value2", "tangent2"\n     * @param value1 - defines the first control point\n     * @param tangent1 - defines the first tangent vector\n     * @param value2 - defines the second control point\n     * @param tangent2 - defines the second tangent vector\n     * @param amount - defines the amount on the interpolation spline (between 0 and 1)\n     * @returns the new Vector3\n     */\n    Vector3.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n        var squared = amount * amount;\n        var cubed = amount * squared;\n        var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n        var part2 = -2.0 * cubed + 3.0 * squared;\n        var part3 = cubed - 2.0 * squared + amount;\n        var part4 = cubed - squared;\n        var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;\n        var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;\n        var z = value1.z * part1 + value2.z * part2 + tangent1.z * part3 + tangent2.z * part4;\n        return new Vector3(x, y, z);\n    };\n    /**\n     * Returns a new Vector3 located for "amount" (float) on the linear interpolation between the vectors "start" and "end"\n     * @param start - defines the start value\n     * @param end - defines the end value\n     * @param amount - max defines amount between both (between 0 and 1)\n     * @returns the new Vector3\n     */\n    Vector3.Lerp = function (start, end, amount) {\n        var result = new Vector3(0, 0, 0);\n        Vector3.LerpToRef(start, end, amount, result);\n        return result;\n    };\n    /**\n     * Sets the given vector "result" with the result of the linear interpolation from the vector "start" for "amount" to the vector "end"\n     * @param start - defines the start value\n     * @param end - defines the end value\n     * @param amount - max defines amount between both (between 0 and 1)\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.LerpToRef = function (start, end, amount, result) {\n        result.x = start.x + (end.x - start.x) * amount;\n        result.y = start.y + (end.y - start.y) * amount;\n        result.z = start.z + (end.z - start.z) * amount;\n    };\n    /**\n     * Returns the dot product (float) between the vectors "left" and "right"\n     * @param left - defines the left operand\n     * @param right - defines the right operand\n     * @returns the dot product\n     */\n    Vector3.Dot = function (left, right) {\n        return left.x * right.x + left.y * right.y + left.z * right.z;\n    };\n    /**\n     * Returns a new Vector3 as the cross product of the vectors "left" and "right"\n     * The cross product is then orthogonal to both "left" and "right"\n     * @param left - defines the left operand\n     * @param right - defines the right operand\n     * @returns the cross product\n     */\n    Vector3.Cross = function (left, right) {\n        var result = Vector3.Zero();\n        Vector3.CrossToRef(left, right, result);\n        return result;\n    };\n    /**\n     * Sets the given vector "result" with the cross product of "left" and "right"\n     * The cross product is then orthogonal to both "left" and "right"\n     * @param left - defines the left operand\n     * @param right - defines the right operand\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.CrossToRef = function (left, right, result) {\n        var x = left.y * right.z - left.z * right.y;\n        var y = left.z * right.x - left.x * right.z;\n        var z = left.x * right.y - left.y * right.x;\n        result.copyFromFloats(x, y, z);\n    };\n    /**\n     * Returns a new Vector3 as the normalization of the given vector\n     * @param vector - defines the Vector3 to normalize\n     * @returns the new Vector3\n     */\n    Vector3.Normalize = function (vector) {\n        var result = Vector3.Zero();\n        Vector3.NormalizeToRef(vector, result);\n        return result;\n    };\n    /**\n     * Sets the given vector "result" with the normalization of the given first vector\n     * @param vector - defines the Vector3 to normalize\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.NormalizeToRef = function (vector, result) {\n        vector.normalizeToRef(result);\n    };\n    /**\n     * Gets the minimal coordinate values between two Vector3\n     * @param left - defines the first operand\n     * @param right - defines the second operand\n     * @returns the new Vector3\n     */\n    Vector3.Minimize = function (left, right) {\n        var min = new Vector3(left.x, left.y, left.z);\n        min.minimizeInPlace(right);\n        return min;\n    };\n    /**\n     * Gets the maximal coordinate values between two Vector3\n     * @param left - defines the first operand\n     * @param right - defines the second operand\n     * @returns the new Vector3\n     */\n    Vector3.Maximize = function (left, right) {\n        var max = new Vector3(left.x, left.y, left.z);\n        max.maximizeInPlace(right);\n        return max;\n    };\n    /**\n     * Returns the distance between the vectors "value1" and "value2"\n     * @param value1 - defines the first operand\n     * @param value2 - defines the second operand\n     * @returns the distance\n     */\n    Vector3.Distance = function (value1, value2) {\n        return Math.sqrt(Vector3.DistanceSquared(value1, value2));\n    };\n    /**\n     * Returns the squared distance between the vectors "value1" and "value2"\n     * @param value1 - defines the first operand\n     * @param value2 - defines the second operand\n     * @returns the squared distance\n     */\n    Vector3.DistanceSquared = function (value1, value2) {\n        var x = value1.x - value2.x;\n        var y = value1.y - value2.y;\n        var z = value1.z - value2.z;\n        return x * x + y * y + z * z;\n    };\n    /**\n     * Returns a new Vector3 located at the center between "value1" and "value2"\n     * @param value1 - defines the first operand\n     * @param value2 - defines the second operand\n     * @returns the new Vector3\n     */\n    Vector3.Center = function (value1, value2) {\n        var center = Vector3.Add(value1, value2);\n        center.scaleInPlace(0.5);\n        return center;\n    };\n    /**\n     * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),\n     * RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply\n     * to something in order to rotate it from its local system to the given target system\n     * Note: axis1, axis2 and axis3 are normalized during this operation\n     * @param axis1 - defines the first axis\n     * @param axis2 - defines the second axis\n     * @param axis3 - defines the third axis\n     * @returns a new Vector3\n     */\n    Vector3.RotationFromAxis = function (axis1, axis2, axis3) {\n        var rotation = Vector3.Zero();\n        Vector3.RotationFromAxisToRef(axis1, axis2, axis3, rotation);\n        return rotation;\n    };\n    /**\n     * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\n     * @param axis1 - defines the first axis\n     * @param axis2 - defines the second axis\n     * @param axis3 - defines the third axis\n     * @param ref - defines the Vector3 where to store the result\n     */\n    Vector3.RotationFromAxisToRef = function (axis1, axis2, axis3, ref) {\n        var quat = preallocatedVariables_1.MathTmp.Quaternion[0];\n        Quaternion_1.Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n        ref.copyFrom(quat.eulerAngles);\n    };\n    /**\n     * Creates a string representation of the Vector3\n     * @returns a string with the Vector3 coordinates.\n     */\n    Vector3.prototype.toString = function () {\n        return "(" + this.x + ", " + this.y + ", " + this.z + ")";\n    };\n    /**\n     * Gets the class name\n     * @returns the string "Vector3"\n     */\n    Vector3.prototype.getClassName = function () {\n        return \'Vector3\';\n    };\n    /**\n     * Creates the Vector3 hash code\n     * @returns a number which tends to be unique between Vector3 instances\n     */\n    Vector3.prototype.getHashCode = function () {\n        var hash = this.x || 0;\n        hash = (hash * 397) ^ (this.y || 0);\n        hash = (hash * 397) ^ (this.z || 0);\n        return hash;\n    };\n    // Operators\n    /**\n     * Creates an array containing three elements : the coordinates of the Vector3\n     * @returns a new array of numbers\n     */\n    Vector3.prototype.asArray = function () {\n        var result = [];\n        this.toArray(result, 0);\n        return result;\n    };\n    /**\n     * Populates the given array or FloatArray from the given index with the successive coordinates of the Vector3\n     * @param array - defines the destination array\n     * @param index - defines the offset in the destination array\n     * @returns the current Vector3\n     */\n    Vector3.prototype.toArray = function (array, index) {\n        if (index === void 0) { index = 0; }\n        array[index] = this.x;\n        array[index + 1] = this.y;\n        array[index + 2] = this.z;\n        return this;\n    };\n    /**\n     * Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)\n     * @returns a new Quaternion object, computed from the Vector3 coordinates\n     */\n    Vector3.prototype.toQuaternion = function () {\n        return Quaternion_1.Quaternion.Identity.setEuler(this.y, this.x, this.z);\n    };\n    /**\n     * Adds the given vector to the current Vector3\n     * @param otherVector - defines the second operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.addInPlace = function (otherVector) {\n        return this.addInPlaceFromFloats(otherVector.x, otherVector.y, otherVector.z);\n    };\n    /**\n     * Adds the given coordinates to the current Vector3\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.addInPlaceFromFloats = function (x, y, z) {\n        this.x += x;\n        this.y += y;\n        this.z += z;\n        return this;\n    };\n    /**\n     * Gets a new Vector3, result of the addition the current Vector3 and the given vector\n     * @param otherVector - defines the second operand\n     * @returns the resulting Vector3\n     */\n    Vector3.prototype.add = function (otherVector) {\n        return new Vector3(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);\n    };\n    /**\n     * Adds the current Vector3 to the given one and stores the result in the vector "result"\n     * @param otherVector - defines the second operand\n     * @param result - defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n    Vector3.prototype.addToRef = function (otherVector, result) {\n        return result.copyFromFloats(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);\n    };\n    /**\n     * Subtract the given vector from the current Vector3\n     * @param otherVector - defines the second operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.subtractInPlace = function (otherVector) {\n        this.x -= otherVector.x;\n        this.y -= otherVector.y;\n        this.z -= otherVector.z;\n        return this;\n    };\n    /**\n     * Returns a new Vector3, result of the subtraction of the given vector from the current Vector3\n     * @param otherVector - defines the second operand\n     * @returns the resulting Vector3\n     */\n    Vector3.prototype.subtract = function (otherVector) {\n        return new Vector3(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z);\n    };\n    /**\n     * Subtracts the given vector from the current Vector3 and stores the result in the vector "result".\n     * @param otherVector - defines the second operand\n     * @param result - defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n    Vector3.prototype.subtractToRef = function (otherVector, result) {\n        return this.subtractFromFloatsToRef(otherVector.x, otherVector.y, otherVector.z, result);\n    };\n    /**\n     * Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @returns the resulting Vector3\n     */\n    Vector3.prototype.subtractFromFloats = function (x, y, z) {\n        return new Vector3(this.x - x, this.y - y, this.z - z);\n    };\n    /**\n     * Subtracts the given floats from the current Vector3 coordinates and set the given vector "result" with this result\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @param result - defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n    Vector3.prototype.subtractFromFloatsToRef = function (x, y, z, result) {\n        return result.copyFromFloats(this.x - x, this.y - y, this.z - z);\n    };\n    /**\n     * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective\n     * @param matrix - The transformation matrix\n     */\n    Vector3.prototype.applyMatrix4 = function (matrix) {\n        this.applyMatrix4ToRef(matrix, this);\n    };\n    /**\n     * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective and set the given vector "result" with this result\n     * @param matrix - The transformation matrix\n     * @param result - defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n    Vector3.prototype.applyMatrix4ToRef = function (matrix, result) {\n        var _a = this, x = _a.x, y = _a.y, z = _a.z;\n        var m = matrix.m;\n        var w = 1 / (m[3] * x + m[7] * y + m[11] * z + m[15]);\n        result.x = (m[0] * x + m[4] * y + m[8] * z + m[12]) * w;\n        result.y = (m[1] * x + m[5] * y + m[9] * z + m[13]) * w;\n        result.z = (m[2] * x + m[6] * y + m[10] * z + m[14]) * w;\n        return result;\n    };\n    /**\n     * Rotates the current Vector3 based on the given quaternion\n     * @param q - defines the Quaternion\n     * @returns the current Vector3\n     */\n    Vector3.prototype.rotate = function (q) {\n        return this.rotateToRef(q, this);\n    };\n    /**\n     * Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3.\n     * @param q - defines the Quaternion\n     * @param result - defines the target Vector3\n     * @returns the current Vector3\n     */\n    Vector3.prototype.rotateToRef = function (q, result) {\n        var _a = this, x = _a.x, y = _a.y, z = _a.z;\n        var qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n        // calculate quat * vector\n        var ix = qw * x + qy * z - qz * y;\n        var iy = qw * y + qz * x - qx * z;\n        var iz = qw * z + qx * y - qy * x;\n        var iw = -qx * x - qy * y - qz * z;\n        // calculate result * inverse quat\n        result.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        result.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        result.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n        return result;\n    };\n    /**\n     * Gets a new Vector3 set with the current Vector3 negated coordinates\n     * @returns a new Vector3\n     */\n    Vector3.prototype.negate = function () {\n        return new Vector3(-this.x, -this.y, -this.z);\n    };\n    /**\n     * Multiplies the Vector3 coordinates by the float "scale"\n     * @param scale - defines the multiplier factor\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.scaleInPlace = function (scale) {\n        this.x *= scale;\n        this.y *= scale;\n        this.z *= scale;\n        return this;\n    };\n    /**\n     * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float "scale"\n     * @param scale - defines the multiplier factor\n     * @returns a new Vector3\n     */\n    Vector3.prototype.scale = function (scale) {\n        return new Vector3(this.x * scale, this.y * scale, this.z * scale);\n    };\n    /**\n     * Multiplies the current Vector3 coordinates by the float "scale" and stores the result in the given vector "result" coordinates\n     * @param scale - defines the multiplier factor\n     * @param result - defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n    Vector3.prototype.scaleToRef = function (scale, result) {\n        return result.copyFromFloats(this.x * scale, this.y * scale, this.z * scale);\n    };\n    /**\n     * Scale the current Vector3 values by a factor and add the result to a given Vector3\n     * @param scale - defines the scale factor\n     * @param result - defines the Vector3 object where to store the result\n     * @returns the unmodified current Vector3\n     */\n    Vector3.prototype.scaleAndAddToRef = function (scale, result) {\n        return result.addInPlaceFromFloats(this.x * scale, this.y * scale, this.z * scale);\n    };\n    /**\n     * Returns true if the current Vector3 and the given vector coordinates are strictly equal\n     * @param otherVector - defines the second operand\n     * @returns true if both vectors are equals\n     */\n    Vector3.prototype.equals = function (otherVector) {\n        return otherVector && this.x === otherVector.x && this.y === otherVector.y && this.z === otherVector.z;\n    };\n    /**\n     * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\n     * @param otherVector - defines the second operand\n     * @param epsilon - defines the minimal distance to define values as equals\n     * @returns true if both vectors are distant less than epsilon\n     */\n    Vector3.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\n        if (epsilon === void 0) { epsilon = types_1.Epsilon; }\n        return (otherVector &&\n            Scalar_1.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n            Scalar_1.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) &&\n            Scalar_1.Scalar.WithinEpsilon(this.z, otherVector.z, epsilon));\n    };\n    /**\n     * Returns true if the current Vector3 coordinates equals the given floats\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @returns true if both vectors are equals\n     */\n    Vector3.prototype.equalsToFloats = function (x, y, z) {\n        return this.x === x && this.y === y && this.z === z;\n    };\n    /**\n     * Multiplies the current Vector3 coordinates by the given ones\n     * @param otherVector - defines the second operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.multiplyInPlace = function (otherVector) {\n        this.x *= otherVector.x;\n        this.y *= otherVector.y;\n        this.z *= otherVector.z;\n        return this;\n    };\n    /**\n     * Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector\n     * @param otherVector - defines the second operand\n     * @returns the new Vector3\n     */\n    Vector3.prototype.multiply = function (otherVector) {\n        return this.multiplyByFloats(otherVector.x, otherVector.y, otherVector.z);\n    };\n    /**\n     * Multiplies the current Vector3 by the given one and stores the result in the given vector "result"\n     * @param otherVector - defines the second operand\n     * @param result - defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n    Vector3.prototype.multiplyToRef = function (otherVector, result) {\n        return result.copyFromFloats(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z);\n    };\n    /**\n     * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @returns the new Vector3\n     */\n    Vector3.prototype.multiplyByFloats = function (x, y, z) {\n        return new Vector3(this.x * x, this.y * y, this.z * z);\n    };\n    /**\n     * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\n     * @param otherVector - defines the second operand\n     * @returns the new Vector3\n     */\n    Vector3.prototype.divide = function (otherVector) {\n        return new Vector3(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);\n    };\n    /**\n     * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector "result"\n     * @param otherVector - defines the second operand\n     * @param result - defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n    Vector3.prototype.divideToRef = function (otherVector, result) {\n        return result.copyFromFloats(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);\n    };\n    /**\n     * Divides the current Vector3 coordinates by the given ones.\n     * @param otherVector - defines the second operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.divideInPlace = function (otherVector) {\n        return this.divideToRef(otherVector, this);\n    };\n    /**\n     * Updates the current Vector3 with the minimal coordinate values between its and the given vector ones\n     * @param other - defines the second operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.minimizeInPlace = function (other) {\n        return this.minimizeInPlaceFromFloats(other.x, other.y, other.z);\n    };\n    /**\n     * Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.\n     * @param other - defines the second operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.maximizeInPlace = function (other) {\n        return this.maximizeInPlaceFromFloats(other.x, other.y, other.z);\n    };\n    /**\n     * Updates the current Vector3 with the minimal coordinate values between its and the given coordinates\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.minimizeInPlaceFromFloats = function (x, y, z) {\n        if (x < this.x) {\n            this.x = x;\n        }\n        if (y < this.y) {\n            this.y = y;\n        }\n        if (z < this.z) {\n            this.z = z;\n        }\n        return this;\n    };\n    /**\n     * Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.maximizeInPlaceFromFloats = function (x, y, z) {\n        if (x > this.x) {\n            this.x = x;\n        }\n        if (y > this.y) {\n            this.y = y;\n        }\n        if (z > this.z) {\n            this.z = z;\n        }\n        return this;\n    };\n    /**\n     * Gets a new Vector3 from current Vector3 floored values\n     * @returns a new Vector3\n     */\n    Vector3.prototype.floor = function () {\n        return new Vector3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));\n    };\n    /**\n     * Gets a new Vector3 from current Vector3 floored values\n     * @returns a new Vector3\n     */\n    Vector3.prototype.fract = function () {\n        return new Vector3(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z));\n    };\n    // Properties\n    /**\n     * Gets the length of the Vector3\n     * @returns the length of the Vecto3\n     */\n    Vector3.prototype.length = function () {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    };\n    /**\n     * Gets the squared length of the Vector3\n     * @returns squared length of the Vector3\n     */\n    Vector3.prototype.lengthSquared = function () {\n        return this.x * this.x + this.y * this.y + this.z * this.z;\n    };\n    /**\n     * Normalize the current Vector3.\n     * Please note that this is an in place operation.\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.normalize = function () {\n        return this.normalizeFromLength(this.length());\n    };\n    /**\n     * Normalize the current Vector3 with the given input length.\n     * Please note that this is an in place operation.\n     * @param len - the length of the vector\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.normalizeFromLength = function (len) {\n        if (len === 0 || len === 1.0) {\n            return this;\n        }\n        return this.scaleInPlace(1.0 / len);\n    };\n    /**\n     * Normalize the current Vector3 to a new vector\n     * @returns the new Vector3\n     */\n    Vector3.prototype.normalizeToNew = function () {\n        var normalized = new Vector3(0, 0, 0);\n        this.normalizeToRef(normalized);\n        return normalized;\n    };\n    /**\n     * Normalize the current Vector3 to the reference\n     * @param reference - define the Vector3 to update\n     * @returns the updated Vector3\n     */\n    Vector3.prototype.normalizeToRef = function (reference) {\n        var len = this.length();\n        if (len === 0 || len === 1.0) {\n            return reference.copyFromFloats(this.x, this.y, this.z);\n        }\n        return this.scaleToRef(1.0 / len, reference);\n    };\n    /**\n     * Creates a new Vector3 copied from the current Vector3\n     * @returns the new Vector3\n     */\n    Vector3.prototype.clone = function () {\n        return new Vector3(this.x, this.y, this.z);\n    };\n    /**\n     * Copies the given vector coordinates to the current Vector3 ones\n     * @param source - defines the source Vector3\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.copyFrom = function (source) {\n        return this.copyFromFloats(source.x, source.y, source.z);\n    };\n    /**\n     * Copies the given floats to the current Vector3 coordinates\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.copyFromFloats = function (x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return this;\n    };\n    /**\n     * Copies the given floats to the current Vector3 coordinates\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.set = function (x, y, z) {\n        return this.copyFromFloats(x, y, z);\n    };\n    /**\n     * Copies the given float to the current Vector3 coordinates\n     * @param v - defines the x, y and z coordinates of the operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.setAll = function (v) {\n        this.x = this.y = this.z = v;\n        return this;\n    };\n    return Vector3;\n}());\nexports.Vector3 = Vector3;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Vector3.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Vector4.ts":
/*!********************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Vector4.ts ***!
  \********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\nvar Scalar_1 = __webpack_require__(/*! ./Scalar */ "./packages/decentraland-ecs/src/decentraland/math/Scalar.ts");\nvar Vector3_1 = __webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts");\n/**\n * Vector4 class created for EulerAngle class conversion to Quaternion\n * @public\n */\nvar Vector4 = /** @class */ (function () {\n    /**\n     * Creates a Vector4 object from the given floats.\n     * @param x - x value of the vector\n     * @param y - y value of the vector\n     * @param z - z value of the vector\n     * @param w - w value of the vector\n     */\n    function Vector4(\n    /** x value of the vector */\n    x, \n    /** y value of the vector */\n    y, \n    /** z value of the vector */\n    z, \n    /** w value of the vector */\n    w) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n    // Statics\n    /**\n     * Returns a new Vector4 as the result of the addition of the two given vectors.\n     * @param vector1 - the first vector\n     * @param vector2 - the second vector\n     * @returns the resulting vector\n     */\n    Vector4.Add = function (vector1, vector2) {\n        return new Vector4(vector1.x, vector1.y, vector1.z, vector1.w).addInPlace(vector2);\n    };\n    /**\n     * Returns a new Vector4 set from the starting index of the given array.\n     * @param array - the array to pull values from\n     * @param offset - the offset into the array to start at\n     * @returns the new vector\n     */\n    Vector4.FromArray = function (array, offset) {\n        if (offset === void 0) { offset = 0; }\n        return new Vector4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n    };\n    /**\n     * Updates the given vector "result" from the starting index of the given array.\n     * @param array - the array to pull values from\n     * @param offset - the offset into the array to start at\n     * @param result - the vector to store the result in\n     */\n    Vector4.FromArrayToRef = function (array, offset, result) {\n        result.x = array[offset];\n        result.y = array[offset + 1];\n        result.z = array[offset + 2];\n        result.w = array[offset + 3];\n    };\n    /**\n     * Updates the given vector "result" from the starting index of the given FloatArray.\n     * @param array - the array to pull values from\n     * @param offset - the offset into the array to start at\n     * @param result - the vector to store the result in\n     */\n    Vector4.FromFloatArrayToRef = function (array, offset, result) {\n        Vector4.FromArrayToRef(array, offset, result);\n    };\n    /**\n     * Updates the given vector "result" coordinates from the given floats.\n     * @param x - float to set from\n     * @param y - float to set from\n     * @param z - float to set from\n     * @param w - float to set from\n     * @param result - the vector to the floats in\n     */\n    Vector4.FromFloatsToRef = function (x, y, z, w, result) {\n        result.x = x;\n        result.y = y;\n        result.z = z;\n        result.w = w;\n    };\n    /**\n     * Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)\n     * @returns the new vector\n     */\n    Vector4.Zero = function () {\n        return new Vector4(0.0, 0.0, 0.0, 0.0);\n    };\n    /**\n     * Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)\n     * @returns the new vector\n     */\n    Vector4.One = function () {\n        return new Vector4(1.0, 1.0, 1.0, 1.0);\n    };\n    /**\n     * Returns a new normalized Vector4 from the given one.\n     * @param vector - the vector to normalize\n     * @returns the vector\n     */\n    Vector4.Normalize = function (vector) {\n        var result = Vector4.Zero();\n        Vector4.NormalizeToRef(vector, result);\n        return result;\n    };\n    /**\n     * Updates the given vector "result" from the normalization of the given one.\n     * @param vector - the vector to normalize\n     * @param result - the vector to store the result in\n     */\n    Vector4.NormalizeToRef = function (vector, result) {\n        result.copyFrom(vector);\n        result.normalize();\n    };\n    /**\n     * Returns a vector with the minimum values from the left and right vectors\n     * @param left - left vector to minimize\n     * @param right - right vector to minimize\n     * @returns a new vector with the minimum of the left and right vector values\n     */\n    Vector4.Minimize = function (left, right) {\n        var min = new Vector4(left.x, left.y, left.z, left.w);\n        min.minimizeInPlace(right);\n        return min;\n    };\n    /**\n     * Returns a vector with the maximum values from the left and right vectors\n     * @param left - left vector to maximize\n     * @param right - right vector to maximize\n     * @returns a new vector with the maximum of the left and right vector values\n     */\n    Vector4.Maximize = function (left, right) {\n        var max = new Vector4(left.x, left.y, left.z, left.w);\n        max.maximizeInPlace(right);\n        return max;\n    };\n    /**\n     * Returns the distance (float) between the vectors "value1" and "value2".\n     * @param value1 - value to calulate the distance between\n     * @param value2 - value to calulate the distance between\n     * @returns the distance between the two vectors\n     */\n    Vector4.Distance = function (value1, value2) {\n        return Math.sqrt(Vector4.DistanceSquared(value1, value2));\n    };\n    /**\n     * Returns the squared distance (float) between the vectors "value1" and "value2".\n     * @param value1 - value to calulate the distance between\n     * @param value2 - value to calulate the distance between\n     * @returns the distance between the two vectors squared\n     */\n    Vector4.DistanceSquared = function (value1, value2) {\n        var x = value1.x - value2.x;\n        var y = value1.y - value2.y;\n        var z = value1.z - value2.z;\n        var w = value1.w - value2.w;\n        return x * x + y * y + z * z + w * w;\n    };\n    /**\n     * Returns a new Vector4 located at the center between the vectors "value1" and "value2".\n     * @param value1 - value to calulate the center between\n     * @param value2 - value to calulate the center between\n     * @returns the center between the two vectors\n     */\n    Vector4.Center = function (value1, value2) {\n        var center = Vector4.Add(value1, value2);\n        center.scaleInPlace(0.5);\n        return center;\n    };\n    /**\n     * Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector.\n     * This methods computes transformed normalized direction vectors only.\n     * @param vector - the vector to transform\n     * @param transformation - the transformation matrix to apply\n     * @returns the new vector\n     */\n    Vector4.TransformNormal = function (vector, transformation) {\n        var result = Vector4.Zero();\n        Vector4.TransformNormalToRef(vector, transformation, result);\n        return result;\n    };\n    /**\n     * Sets the given vector "result" with the result of the normal transformation by the given matrix of the given vector.\n     * This methods computes transformed normalized direction vectors only.\n     * @param vector - the vector to transform\n     * @param transformation - the transformation matrix to apply\n     * @param result - the vector to store the result in\n     */\n    Vector4.TransformNormalToRef = function (vector, transformation, result) {\n        var m = transformation.m;\n        var x = vector.x * m[0] + vector.y * m[4] + vector.z * m[8];\n        var y = vector.x * m[1] + vector.y * m[5] + vector.z * m[9];\n        var z = vector.x * m[2] + vector.y * m[6] + vector.z * m[10];\n        result.x = x;\n        result.y = y;\n        result.z = z;\n        result.w = vector.w;\n    };\n    /**\n     * Sets the given vector "result" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w).\n     * This methods computes transformed normalized direction vectors only.\n     * @param x - value to transform\n     * @param y - value to transform\n     * @param z - value to transform\n     * @param w - value to transform\n     * @param transformation - the transformation matrix to apply\n     * @param result - the vector to store the results in\n     */\n    Vector4.TransformNormalFromFloatsToRef = function (x, y, z, w, transformation, result) {\n        var m = transformation.m;\n        result.x = x * m[0] + y * m[4] + z * m[8];\n        result.y = x * m[1] + y * m[5] + z * m[9];\n        result.z = x * m[2] + y * m[6] + z * m[10];\n        result.w = w;\n    };\n    /**\n     * Returns the string with the Vector4 coordinates.\n     * @returns a string containing all the vector values\n     */\n    Vector4.prototype.toString = function () {\n        return \'{X: \' + this.x + \' Y:\' + this.y + \' Z:\' + this.z + \' W:\' + this.w + \'}\';\n    };\n    /**\n     * Returns the string "Vector4".\n     * @returns "Vector4"\n     */\n    Vector4.prototype.getClassName = function () {\n        return \'Vector4\';\n    };\n    /**\n     * Returns the Vector4 hash code.\n     * @returns a unique hash code\n     */\n    Vector4.prototype.getHashCode = function () {\n        var hash = this.x || 0;\n        hash = (hash * 397) ^ (this.y || 0);\n        hash = (hash * 397) ^ (this.z || 0);\n        hash = (hash * 397) ^ (this.w || 0);\n        return hash;\n    };\n    // Operators\n    /**\n     * Returns a new array populated with 4 elements : the Vector4 coordinates.\n     * @returns the resulting array\n     */\n    Vector4.prototype.asArray = function () {\n        var result = new Array();\n        this.toArray(result, 0);\n        return result;\n    };\n    /**\n     * Populates the given array from the given index with the Vector4 coordinates.\n     * @param array - array to populate\n     * @param index - index of the array to start at (default: 0)\n     * @returns the Vector4.\n     */\n    Vector4.prototype.toArray = function (array, index) {\n        if (index === void 0) { index = 0; }\n        array[index] = this.x;\n        array[index + 1] = this.y;\n        array[index + 2] = this.z;\n        array[index + 3] = this.w;\n        return this;\n    };\n    /**\n     * Adds the given vector to the current Vector4.\n     * @param otherVector - the vector to add\n     * @returns the updated Vector4.\n     */\n    Vector4.prototype.addInPlace = function (otherVector) {\n        this.x += otherVector.x;\n        this.y += otherVector.y;\n        this.z += otherVector.z;\n        this.w += otherVector.w;\n        return this;\n    };\n    /**\n     * Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.\n     * @param otherVector - the vector to add\n     * @returns the resulting vector\n     */\n    Vector4.prototype.add = function (otherVector) {\n        return new Vector4(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z, this.w + otherVector.w);\n    };\n    /**\n     * Updates the given vector "result" with the result of the addition of the current Vector4 and the given one.\n     * @param otherVector - the vector to add\n     * @param result - the vector to store the result\n     * @returns the current Vector4.\n     */\n    Vector4.prototype.addToRef = function (otherVector, result) {\n        result.x = this.x + otherVector.x;\n        result.y = this.y + otherVector.y;\n        result.z = this.z + otherVector.z;\n        result.w = this.w + otherVector.w;\n        return this;\n    };\n    /**\n     * Subtract in place the given vector from the current Vector4.\n     * @param otherVector - the vector to subtract\n     * @returns the updated Vector4.\n     */\n    Vector4.prototype.subtractInPlace = function (otherVector) {\n        this.x -= otherVector.x;\n        this.y -= otherVector.y;\n        this.z -= otherVector.z;\n        this.w -= otherVector.w;\n        return this;\n    };\n    /**\n     * Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.\n     * @param otherVector - the vector to add\n     * @returns the new vector with the result\n     */\n    Vector4.prototype.subtract = function (otherVector) {\n        return new Vector4(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z, this.w - otherVector.w);\n    };\n    /**\n     * Sets the given vector "result" with the result of the subtraction of the given vector from the current Vector4.\n     * @param otherVector - the vector to subtract\n     * @param result - the vector to store the result\n     * @returns the current Vector4.\n     */\n    Vector4.prototype.subtractToRef = function (otherVector, result) {\n        result.x = this.x - otherVector.x;\n        result.y = this.y - otherVector.y;\n        result.z = this.z - otherVector.z;\n        result.w = this.w - otherVector.w;\n        return this;\n    };\n    /**\n     * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n     */\n    /**\n     * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n     * @param x - value to subtract\n     * @param y - value to subtract\n     * @param z - value to subtract\n     * @param w - value to subtract\n     * @returns new vector containing the result\n     */\n    Vector4.prototype.subtractFromFloats = function (x, y, z, w) {\n        return new Vector4(this.x - x, this.y - y, this.z - z, this.w - w);\n    };\n    /**\n     * Sets the given vector "result" set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n     * @param x - value to subtract\n     * @param y - value to subtract\n     * @param z - value to subtract\n     * @param w - value to subtract\n     * @param result - the vector to store the result in\n     * @returns the current Vector4.\n     */\n    Vector4.prototype.subtractFromFloatsToRef = function (x, y, z, w, result) {\n        result.x = this.x - x;\n        result.y = this.y - y;\n        result.z = this.z - z;\n        result.w = this.w - w;\n        return this;\n    };\n    /**\n     * Returns a new Vector4 set with the current Vector4 negated coordinates.\n     * @returns a new vector with the negated values\n     */\n    Vector4.prototype.negate = function () {\n        return new Vector4(-this.x, -this.y, -this.z, -this.w);\n    };\n    /**\n     * Multiplies the current Vector4 coordinates by scale (float).\n     * @param scale - the number to scale with\n     * @returns the updated Vector4.\n     */\n    Vector4.prototype.scaleInPlace = function (scale) {\n        this.x *= scale;\n        this.y *= scale;\n        this.z *= scale;\n        this.w *= scale;\n        return this;\n    };\n    /**\n     * Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).\n     * @param scale - the number to scale with\n     * @returns a new vector with the result\n     */\n    Vector4.prototype.scale = function (scale) {\n        return new Vector4(this.x * scale, this.y * scale, this.z * scale, this.w * scale);\n    };\n    /**\n     * Sets the given vector "result" with the current Vector4 coordinates multiplied by scale (float).\n     * @param scale - the number to scale with\n     * @param result - a vector to store the result in\n     * @returns the current Vector4.\n     */\n    Vector4.prototype.scaleToRef = function (scale, result) {\n        result.x = this.x * scale;\n        result.y = this.y * scale;\n        result.z = this.z * scale;\n        result.w = this.w * scale;\n        return this;\n    };\n    /**\n     * Scale the current Vector4 values by a factor and add the result to a given Vector4\n     * @param scale - defines the scale factor\n     * @param result - defines the Vector4 object where to store the result\n     * @returns the unmodified current Vector4\n     */\n    Vector4.prototype.scaleAndAddToRef = function (scale, result) {\n        result.x += this.x * scale;\n        result.y += this.y * scale;\n        result.z += this.z * scale;\n        result.w += this.w * scale;\n        return this;\n    };\n    /**\n     * Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.\n     * @param otherVector - the vector to compare against\n     * @returns true if they are equal\n     */\n    Vector4.prototype.equals = function (otherVector) {\n        return (otherVector &&\n            this.x === otherVector.x &&\n            this.y === otherVector.y &&\n            this.z === otherVector.z &&\n            this.w === otherVector.w);\n    };\n    /**\n     * Boolean : True if the current Vector4 coordinates are each beneath the distance "epsilon" from the given vector ones.\n     * @param otherVector - vector to compare against\n     * @param epsilon - (Default: very small number)\n     * @returns true if they are equal\n     */\n    Vector4.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\n        if (epsilon === void 0) { epsilon = types_1.Epsilon; }\n        return (otherVector &&\n            Scalar_1.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n            Scalar_1.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) &&\n            Scalar_1.Scalar.WithinEpsilon(this.z, otherVector.z, epsilon) &&\n            Scalar_1.Scalar.WithinEpsilon(this.w, otherVector.w, epsilon));\n    };\n    /**\n     * Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.\n     * @param x - x value to compare against\n     * @param y - y value to compare against\n     * @param z - z value to compare against\n     * @param w - w value to compare against\n     * @returns true if equal\n     */\n    Vector4.prototype.equalsToFloats = function (x, y, z, w) {\n        return this.x === x && this.y === y && this.z === z && this.w === w;\n    };\n    /**\n     * Multiplies in place the current Vector4 by the given one.\n     * @param otherVector - vector to multiple with\n     * @returns the updated Vector4.\n     */\n    Vector4.prototype.multiplyInPlace = function (otherVector) {\n        this.x *= otherVector.x;\n        this.y *= otherVector.y;\n        this.z *= otherVector.z;\n        this.w *= otherVector.w;\n        return this;\n    };\n    /**\n     * Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.\n     * @param otherVector - vector to multiple with\n     * @returns resulting new vector\n     */\n    Vector4.prototype.multiply = function (otherVector) {\n        return new Vector4(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z, this.w * otherVector.w);\n    };\n    /**\n     * Updates the given vector "result" with the multiplication result of the current Vector4 and the given one.\n     * @param otherVector - vector to multiple with\n     * @param result - vector to store the result\n     * @returns the current Vector4.\n     */\n    Vector4.prototype.multiplyToRef = function (otherVector, result) {\n        result.x = this.x * otherVector.x;\n        result.y = this.y * otherVector.y;\n        result.z = this.z * otherVector.z;\n        result.w = this.w * otherVector.w;\n        return this;\n    };\n    /**\n     * Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.\n     * @param x - x value multiply with\n     * @param y - y value multiply with\n     * @param z - z value multiply with\n     * @param w - w value multiply with\n     * @returns resulting new vector\n     */\n    Vector4.prototype.multiplyByFloats = function (x, y, z, w) {\n        return new Vector4(this.x * x, this.y * y, this.z * z, this.w * w);\n    };\n    /**\n     * Returns a new Vector4 set with the division result of the current Vector4 by the given one.\n     * @param otherVector - vector to devide with\n     * @returns resulting new vector\n     */\n    Vector4.prototype.divide = function (otherVector) {\n        return new Vector4(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z, this.w / otherVector.w);\n    };\n    /**\n     * Updates the given vector "result" with the division result of the current Vector4 by the given one.\n     * @param otherVector - vector to devide with\n     * @param result - vector to store the result\n     * @returns the current Vector4.\n     */\n    Vector4.prototype.divideToRef = function (otherVector, result) {\n        result.x = this.x / otherVector.x;\n        result.y = this.y / otherVector.y;\n        result.z = this.z / otherVector.z;\n        result.w = this.w / otherVector.w;\n        return this;\n    };\n    /**\n     * Divides the current Vector3 coordinates by the given ones.\n     * @param otherVector - vector to devide with\n     * @returns the updated Vector3.\n     */\n    Vector4.prototype.divideInPlace = function (otherVector) {\n        return this.divideToRef(otherVector, this);\n    };\n    /**\n     * Updates the Vector4 coordinates with the minimum values between its own and the given vector ones\n     * @param other - defines the second operand\n     * @returns the current updated Vector4\n     */\n    Vector4.prototype.minimizeInPlace = function (other) {\n        if (other.x < this.x) {\n            this.x = other.x;\n        }\n        if (other.y < this.y) {\n            this.y = other.y;\n        }\n        if (other.z < this.z) {\n            this.z = other.z;\n        }\n        if (other.w < this.w) {\n            this.w = other.w;\n        }\n        return this;\n    };\n    /**\n     * Updates the Vector4 coordinates with the maximum values between its own and the given vector ones\n     * @param other - defines the second operand\n     * @returns the current updated Vector4\n     */\n    Vector4.prototype.maximizeInPlace = function (other) {\n        if (other.x > this.x) {\n            this.x = other.x;\n        }\n        if (other.y > this.y) {\n            this.y = other.y;\n        }\n        if (other.z > this.z) {\n            this.z = other.z;\n        }\n        if (other.w > this.w) {\n            this.w = other.w;\n        }\n        return this;\n    };\n    /**\n     * Gets a new Vector4 from current Vector4 floored values\n     * @returns a new Vector4\n     */\n    Vector4.prototype.floor = function () {\n        return new Vector4(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w));\n    };\n    /**\n     * Gets a new Vector4 from current Vector3 floored values\n     * @returns a new Vector4\n     */\n    Vector4.prototype.fract = function () {\n        return new Vector4(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z), this.w - Math.floor(this.w));\n    };\n    // Properties\n    /**\n     * Returns the Vector4 length (float).\n     * @returns the length\n     */\n    Vector4.prototype.length = function () {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n    };\n    /**\n     * Returns the Vector4 squared length (float).\n     * @returns the length squared\n     */\n    Vector4.prototype.lengthSquared = function () {\n        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n    };\n    // Methods\n    /**\n     * Normalizes in place the Vector4.\n     * @returns the updated Vector4.\n     */\n    Vector4.prototype.normalize = function () {\n        var len = this.length();\n        if (len === 0) {\n            return this;\n        }\n        return this.scaleInPlace(1.0 / len);\n    };\n    /**\n     * Returns a new Vector3 from the Vector4 (x, y, z) coordinates.\n     * @returns this converted to a new vector3\n     */\n    Vector4.prototype.toVector3 = function () {\n        return new Vector3_1.Vector3(this.x, this.y, this.z);\n    };\n    /**\n     * Returns a new Vector4 copied from the current one.\n     * @returns the new cloned vector\n     */\n    Vector4.prototype.clone = function () {\n        return new Vector4(this.x, this.y, this.z, this.w);\n    };\n    /**\n     * Updates the current Vector4 with the given one coordinates.\n     * @param source - the source vector to copy from\n     * @returns the updated Vector4.\n     */\n    Vector4.prototype.copyFrom = function (source) {\n        this.x = source.x;\n        this.y = source.y;\n        this.z = source.z;\n        this.w = source.w;\n        return this;\n    };\n    /**\n     * Updates the current Vector4 coordinates with the given floats.\n     * @param x - float to copy from\n     * @param y - float to copy from\n     * @param z - float to copy from\n     * @param w - float to copy from\n     * @returns the updated Vector4.\n     */\n    Vector4.prototype.copyFromFloats = function (x, y, z, w) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n        return this;\n    };\n    /**\n     * Updates the current Vector4 coordinates with the given floats.\n     * @param x - float to set from\n     * @param y - float to set from\n     * @param z - float to set from\n     * @param w - float to set from\n     * @returns the updated Vector4.\n     */\n    Vector4.prototype.set = function (x, y, z, w) {\n        return this.copyFromFloats(x, y, z, w);\n    };\n    /**\n     * Copies the given float to the current Vector3 coordinates\n     * @param v - defines the x, y, z and w coordinates of the operand\n     * @returns the current updated Vector3\n     */\n    Vector4.prototype.setAll = function (v) {\n        this.x = this.y = this.z = this.w = v;\n        return this;\n    };\n    return Vector4;\n}());\nexports.Vector4 = Vector4;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Vector4.ts?')},"./packages/decentraland-ecs/src/decentraland/math/index.ts":
/*!******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/index.ts ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, "__esModule", { value: true });\n__export(__webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts"));\n__export(__webpack_require__(/*! ./preallocatedVariables */ "./packages/decentraland-ecs/src/decentraland/math/preallocatedVariables.ts"));\n__export(__webpack_require__(/*! ./Angle */ "./packages/decentraland-ecs/src/decentraland/math/Angle.ts"));\n__export(__webpack_require__(/*! ./Arc2 */ "./packages/decentraland-ecs/src/decentraland/math/Arc2.ts"));\n__export(__webpack_require__(/*! ./Axis */ "./packages/decentraland-ecs/src/decentraland/math/Axis.ts"));\n__export(__webpack_require__(/*! ./BezierCurve */ "./packages/decentraland-ecs/src/decentraland/math/BezierCurve.ts"));\n__export(__webpack_require__(/*! ./Color3 */ "./packages/decentraland-ecs/src/decentraland/math/Color3.ts"));\n__export(__webpack_require__(/*! ./Color4 */ "./packages/decentraland-ecs/src/decentraland/math/Color4.ts"));\n__export(__webpack_require__(/*! ./Curve3d */ "./packages/decentraland-ecs/src/decentraland/math/Curve3d.ts"));\n__export(__webpack_require__(/*! ./Furstum */ "./packages/decentraland-ecs/src/decentraland/math/Furstum.ts"));\n__export(__webpack_require__(/*! ./Matrix */ "./packages/decentraland-ecs/src/decentraland/math/Matrix.ts"));\n__export(__webpack_require__(/*! ./Path2d */ "./packages/decentraland-ecs/src/decentraland/math/Path2d.ts"));\n__export(__webpack_require__(/*! ./Path3d */ "./packages/decentraland-ecs/src/decentraland/math/Path3d.ts"));\n__export(__webpack_require__(/*! ./Plane */ "./packages/decentraland-ecs/src/decentraland/math/Plane.ts"));\n__export(__webpack_require__(/*! ./Quaternion */ "./packages/decentraland-ecs/src/decentraland/math/Quaternion.ts"));\n__export(__webpack_require__(/*! ./Scalar */ "./packages/decentraland-ecs/src/decentraland/math/Scalar.ts"));\n__export(__webpack_require__(/*! ./Size */ "./packages/decentraland-ecs/src/decentraland/math/Size.ts"));\n__export(__webpack_require__(/*! ./Vector2 */ "./packages/decentraland-ecs/src/decentraland/math/Vector2.ts"));\n__export(__webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts"));\n__export(__webpack_require__(/*! ./Vector4 */ "./packages/decentraland-ecs/src/decentraland/math/Vector4.ts"));\n__export(__webpack_require__(/*! ./index */ "./packages/decentraland-ecs/src/decentraland/math/index.ts"));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGVjZW50cmFsYW5kL21hdGgvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw2QkFBdUI7QUFFdkIsNkNBQXVDO0FBRXZDLDZCQUF1QjtBQUN2Qiw0QkFBc0I7QUFDdEIsNEJBQXNCO0FBQ3RCLG1DQUE2QjtBQUM3Qiw4QkFBd0I7QUFDeEIsOEJBQXdCO0FBQ3hCLCtCQUF5QjtBQUN6QiwrQkFBeUI7QUFDekIsOEJBQXdCO0FBQ3hCLDhCQUF3QjtBQUN4Qiw4QkFBd0I7QUFDeEIsNkJBQXVCO0FBQ3ZCLGtDQUE0QjtBQUM1Qiw4QkFBd0I7QUFDeEIsNEJBQXNCO0FBQ3RCLCtCQUF5QjtBQUN6QiwrQkFBeUI7QUFDekIsK0JBQXlCO0FBQ3pCLDZCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vdHlwZXMnXG5cbmV4cG9ydCAqIGZyb20gJy4vcHJlYWxsb2NhdGVkVmFyaWFibGVzJ1xuXG5leHBvcnQgKiBmcm9tICcuL0FuZ2xlJ1xuZXhwb3J0ICogZnJvbSAnLi9BcmMyJ1xuZXhwb3J0ICogZnJvbSAnLi9BeGlzJ1xuZXhwb3J0ICogZnJvbSAnLi9CZXppZXJDdXJ2ZSdcbmV4cG9ydCAqIGZyb20gJy4vQ29sb3IzJ1xuZXhwb3J0ICogZnJvbSAnLi9Db2xvcjQnXG5leHBvcnQgKiBmcm9tICcuL0N1cnZlM2QnXG5leHBvcnQgKiBmcm9tICcuL0Z1cnN0dW0nXG5leHBvcnQgKiBmcm9tICcuL01hdHJpeCdcbmV4cG9ydCAqIGZyb20gJy4vUGF0aDJkJ1xuZXhwb3J0ICogZnJvbSAnLi9QYXRoM2QnXG5leHBvcnQgKiBmcm9tICcuL1BsYW5lJ1xuZXhwb3J0ICogZnJvbSAnLi9RdWF0ZXJuaW9uJ1xuZXhwb3J0ICogZnJvbSAnLi9TY2FsYXInXG5leHBvcnQgKiBmcm9tICcuL1NpemUnXG5leHBvcnQgKiBmcm9tICcuL1ZlY3RvcjInXG5leHBvcnQgKiBmcm9tICcuL1ZlY3RvcjMnXG5leHBvcnQgKiBmcm9tICcuL1ZlY3RvcjQnXG5leHBvcnQgKiBmcm9tICcuL2luZGV4J1xuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/index.ts?')},"./packages/decentraland-ecs/src/decentraland/math/preallocatedVariables.ts":
/*!**********************************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/preallocatedVariables.ts ***!
  \**********************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar helpers_1 = __webpack_require__(/*! ../../ecs/helpers */ "./packages/decentraland-ecs/src/ecs/helpers.ts");\nvar Vector3_1 = __webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts");\nvar Quaternion_1 = __webpack_require__(/*! ./Quaternion */ "./packages/decentraland-ecs/src/decentraland/math/Quaternion.ts");\nvar Matrix_1 = __webpack_require__(/*! ./Matrix */ "./packages/decentraland-ecs/src/decentraland/math/Matrix.ts");\n// Temporary pre-allocated objects for engine internal use\n// usage in any internal function :\n// var tmp = Tmp.Vector3[0];   <= gets access to the first pre-created Vector3\n// There\'s a Tmp array per object type : int, float, Vector2, Vector3, Vector4, Quaternion, Matrix\n/**\n * @internal\n * Same as Tmp but not exported to keep it only for math functions to avoid conflicts\n */\nexports.MathTmp = {\n    Vector3: helpers_1.buildArray(6, Vector3_1.Vector3.Zero),\n    Matrix: helpers_1.buildArray(2, Matrix_1.Matrix.Identity),\n    Quaternion: helpers_1.buildArray(3, Quaternion_1.Quaternion.Zero),\n    staticUp: Vector3_1.Vector3.Up(),\n    tmpMatrix: Matrix_1.Matrix.Zero()\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlYWxsb2NhdGVkVmFyaWFibGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RlY2VudHJhbGFuZC9tYXRoL3ByZWFsbG9jYXRlZFZhcmlhYmxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUE4QztBQUM5QyxxQ0FBbUM7QUFDbkMsMkNBQXlDO0FBQ3pDLG1DQUFpQztBQUVqQywwREFBMEQ7QUFDMUQsbUNBQW1DO0FBQ25DLDhFQUE4RTtBQUM5RSxrR0FBa0c7QUFFbEc7OztHQUdHO0FBQ1UsUUFBQSxPQUFPLEdBQUc7SUFDckIsT0FBTyxFQUFFLG9CQUFVLENBQUMsQ0FBQyxFQUFFLGlCQUFPLENBQUMsSUFBSSxDQUFDO0lBQ3BDLE1BQU0sRUFBRSxvQkFBVSxDQUFDLENBQUMsRUFBRSxlQUFNLENBQUMsUUFBUSxDQUFDO0lBQ3RDLFVBQVUsRUFBRSxvQkFBVSxDQUFDLENBQUMsRUFBRSx1QkFBVSxDQUFDLElBQUksQ0FBQztJQUMxQyxRQUFRLEVBQUUsaUJBQU8sQ0FBQyxFQUFFLEVBQXVCO0lBQzNDLFNBQVMsRUFBRSxlQUFNLENBQUMsSUFBSSxFQUFFO0NBQ3pCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBidWlsZEFycmF5IH0gZnJvbSAnLi4vLi4vZWNzL2hlbHBlcnMnXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9WZWN0b3IzJ1xuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4vUXVhdGVybmlvbidcbmltcG9ydCB7IE1hdHJpeCB9IGZyb20gJy4vTWF0cml4J1xuXG4vLyBUZW1wb3JhcnkgcHJlLWFsbG9jYXRlZCBvYmplY3RzIGZvciBlbmdpbmUgaW50ZXJuYWwgdXNlXG4vLyB1c2FnZSBpbiBhbnkgaW50ZXJuYWwgZnVuY3Rpb24gOlxuLy8gdmFyIHRtcCA9IFRtcC5WZWN0b3IzWzBdOyAgIDw9IGdldHMgYWNjZXNzIHRvIHRoZSBmaXJzdCBwcmUtY3JlYXRlZCBWZWN0b3IzXG4vLyBUaGVyZSdzIGEgVG1wIGFycmF5IHBlciBvYmplY3QgdHlwZSA6IGludCwgZmxvYXQsIFZlY3RvcjIsIFZlY3RvcjMsIFZlY3RvcjQsIFF1YXRlcm5pb24sIE1hdHJpeFxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICogU2FtZSBhcyBUbXAgYnV0IG5vdCBleHBvcnRlZCB0byBrZWVwIGl0IG9ubHkgZm9yIG1hdGggZnVuY3Rpb25zIHRvIGF2b2lkIGNvbmZsaWN0c1xuICovXG5leHBvcnQgY29uc3QgTWF0aFRtcCA9IHtcbiAgVmVjdG9yMzogYnVpbGRBcnJheSg2LCBWZWN0b3IzLlplcm8pLFxuICBNYXRyaXg6IGJ1aWxkQXJyYXkoMiwgTWF0cml4LklkZW50aXR5KSxcbiAgUXVhdGVybmlvbjogYnVpbGRBcnJheSgzLCBRdWF0ZXJuaW9uLlplcm8pLFxuICBzdGF0aWNVcDogVmVjdG9yMy5VcCgpIGFzIFJlYWRvbmx5PFZlY3RvcjM+LFxuICB0bXBNYXRyaXg6IE1hdHJpeC5aZXJvKClcbn1cbiJdfQ==\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/preallocatedVariables.ts?')},"./packages/decentraland-ecs/src/decentraland/math/types.ts":
/*!******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/types.ts ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * Defines potential orientation for back face culling\n * @public\n */\nvar Orientation;\n(function (Orientation) {\n    /**\n     * Clockwise\n     */\n    Orientation[Orientation["CW"] = 0] = "CW";\n    /** Counter clockwise */\n    Orientation[Orientation["CCW"] = 1] = "CCW";\n})(Orientation = exports.Orientation || (exports.Orientation = {}));\n/**\n * Defines supported spaces\n * @public\n */\nvar Space;\n(function (Space) {\n    /** Local (object) space */\n    Space[Space["LOCAL"] = 0] = "LOCAL";\n    /** World space */\n    Space[Space["WORLD"] = 1] = "WORLD";\n    /** Bone space */\n    Space[Space["BONE"] = 2] = "BONE";\n})(Space = exports.Space || (exports.Space = {}));\n/**\n * Constant used to convert a value to gamma space\n * @public\n */\nexports.ToGammaSpace = 1 / 2.2;\n/**\n * Constant used to convert a value to linear space\n * @public\n */\nexports.ToLinearSpace = 2.2;\n/**\n * Constant used to define the minimal number value in Babylon.js\n * @public\n */\nexports.Epsilon = 0.000001;\n/**\n * Constant used to convert from Euler degrees to radians\n * @public\n */\nexports.DEG2RAD = Math.PI / 180;\n/**\n * Constant used to convert from radians to Euler degrees\n * @public\n */\nexports.RAD2DEG = 360 / (Math.PI * 2);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGVjZW50cmFsYW5kL21hdGgvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7O0dBR0c7QUFDSCxJQUFZLFdBT1g7QUFQRCxXQUFZLFdBQVc7SUFDckI7O09BRUc7SUFDSCx5Q0FBTSxDQUFBO0lBQ04sd0JBQXdCO0lBQ3hCLDJDQUFPLENBQUE7QUFDVCxDQUFDLEVBUFcsV0FBVyxHQUFYLG1CQUFXLEtBQVgsbUJBQVcsUUFPdEI7QUFFRDs7O0dBR0c7QUFDSCxJQUFZLEtBT1g7QUFQRCxXQUFZLEtBQUs7SUFDZiwyQkFBMkI7SUFDM0IsbUNBQVMsQ0FBQTtJQUNULGtCQUFrQjtJQUNsQixtQ0FBUyxDQUFBO0lBQ1QsaUJBQWlCO0lBQ2pCLGlDQUFRLENBQUE7QUFDVixDQUFDLEVBUFcsS0FBSyxHQUFMLGFBQUssS0FBTCxhQUFLLFFBT2hCO0FBV0Q7OztHQUdHO0FBQ1UsUUFBQSxZQUFZLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtBQUVuQzs7O0dBR0c7QUFDVSxRQUFBLGFBQWEsR0FBRyxHQUFHLENBQUE7QUFFaEM7OztHQUdHO0FBQ1UsUUFBQSxPQUFPLEdBQUcsUUFBUSxDQUFBO0FBRS9COzs7R0FHRztBQUNVLFFBQUEsT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFBO0FBRXBDOzs7R0FHRztBQUNVLFFBQUEsT0FBTyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERlZmluZXMgcG90ZW50aWFsIG9yaWVudGF0aW9uIGZvciBiYWNrIGZhY2UgY3VsbGluZ1xuICogQHB1YmxpY1xuICovXG5leHBvcnQgZW51bSBPcmllbnRhdGlvbiB7XG4gIC8qKlxuICAgKiBDbG9ja3dpc2VcbiAgICovXG4gIENXID0gMCxcbiAgLyoqIENvdW50ZXIgY2xvY2t3aXNlICovXG4gIENDVyA9IDFcbn1cblxuLyoqXG4gKiBEZWZpbmVzIHN1cHBvcnRlZCBzcGFjZXNcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGVudW0gU3BhY2Uge1xuICAvKiogTG9jYWwgKG9iamVjdCkgc3BhY2UgKi9cbiAgTE9DQUwgPSAwLFxuICAvKiogV29ybGQgc3BhY2UgKi9cbiAgV09STEQgPSAxLFxuICAvKiogQm9uZSBzcGFjZSAqL1xuICBCT05FID0gMlxufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgTnVsbGFibGU8VD4gPSBUIHwgbnVsbFxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIEZsb2F0QXJyYXkgPSBudW1iZXJbXVxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIGZsb2F0ID0gbnVtYmVyXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgZG91YmxlID0gbnVtYmVyXG5cbi8qKlxuICogQ29uc3RhbnQgdXNlZCB0byBjb252ZXJ0IGEgdmFsdWUgdG8gZ2FtbWEgc3BhY2VcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFRvR2FtbWFTcGFjZSA9IDEgLyAyLjJcblxuLyoqXG4gKiBDb25zdGFudCB1c2VkIHRvIGNvbnZlcnQgYSB2YWx1ZSB0byBsaW5lYXIgc3BhY2VcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFRvTGluZWFyU3BhY2UgPSAyLjJcblxuLyoqXG4gKiBDb25zdGFudCB1c2VkIHRvIGRlZmluZSB0aGUgbWluaW1hbCBudW1iZXIgdmFsdWUgaW4gQmFieWxvbi5qc1xuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgRXBzaWxvbiA9IDAuMDAwMDAxXG5cbi8qKlxuICogQ29uc3RhbnQgdXNlZCB0byBjb252ZXJ0IGZyb20gRXVsZXIgZGVncmVlcyB0byByYWRpYW5zXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBERUcyUkFEID0gTWF0aC5QSSAvIDE4MFxuXG4vKipcbiAqIENvbnN0YW50IHVzZWQgdG8gY29udmVydCBmcm9tIHJhZGlhbnMgdG8gRXVsZXIgZGVncmVlc1xuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgUkFEMkRFRyA9IDM2MCAvIChNYXRoLlBJICogMilcblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIHRoZSBzaXplIGNvbnRhaW5pbmcgd2lkdGggYW5kIGhlaWdodFxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIElTaXplIHtcbiAgLyoqXG4gICAqIFdpZHRoXG4gICAqL1xuICB3aWR0aDogbnVtYmVyXG4gIC8qKlxuICAgKiBIZWlnaGh0XG4gICAqL1xuICBoZWlnaHQ6IG51bWJlclxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/types.ts?')},"./packages/decentraland-ecs/src/ecs/Component.ts":
/*!********************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/Component.ts ***!
  \********************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i["return"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar helpers_1 = __webpack_require__(/*! ./helpers */ "./packages/decentraland-ecs/src/ecs/helpers.ts");\nvar EventManager_1 = __webpack_require__(/*! ./EventManager */ "./packages/decentraland-ecs/src/ecs/EventManager.ts");\nvar UIValue_1 = __webpack_require__(/*! ./UIValue */ "./packages/decentraland-ecs/src/ecs/UIValue.ts");\nvar componentSymbol = \'__name__symbol_\';\nvar componentClassIdSymbol = \'__classId__symbol_\';\nvar componentIdSymbol = \'__component__id_\';\n/**\n * @public\n */\nvar DisposableComponentCreated = /** @class */ (function () {\n    function DisposableComponentCreated(componentId, componentName, classId) {\n        this.componentId = componentId;\n        this.componentName = componentName;\n        this.classId = classId;\n        // stub\n    }\n    DisposableComponentCreated = __decorate([\n        EventManager_1.EventConstructor()\n    ], DisposableComponentCreated);\n    return DisposableComponentCreated;\n}());\nexports.DisposableComponentCreated = DisposableComponentCreated;\n/**\n * @public\n */\nvar DisposableComponentRemoved = /** @class */ (function () {\n    function DisposableComponentRemoved(componentId) {\n        this.componentId = componentId;\n        // stub\n    }\n    DisposableComponentRemoved = __decorate([\n        EventManager_1.EventConstructor()\n    ], DisposableComponentRemoved);\n    return DisposableComponentRemoved;\n}());\nexports.DisposableComponentRemoved = DisposableComponentRemoved;\n/**\n * @public\n */\nvar DisposableComponentUpdated = /** @class */ (function () {\n    function DisposableComponentUpdated(componentId, component) {\n        this.componentId = componentId;\n        this.component = component;\n        // stub\n    }\n    DisposableComponentUpdated = __decorate([\n        EventManager_1.EventConstructor()\n    ], DisposableComponentUpdated);\n    return DisposableComponentUpdated;\n}());\nexports.DisposableComponentUpdated = DisposableComponentUpdated;\n/**\n * @public\n */\nfunction Component(componentName, classId) {\n    return function (target) {\n        if (target.isComponent) {\n            throw new TypeError("You cannot extend a component. Trying to extend " + target.originalClassName + " with: " + componentName);\n        }\n        var extendedClass = target;\n        var RegisteredComponent = function RegisteredComponent() {\n            var args = Array.prototype.slice.call(arguments);\n            var ret = new (extendedClass.bind.apply(extendedClass, __spread([void 0], args)))();\n            Object.defineProperty(ret, componentSymbol, {\n                enumerable: false,\n                writable: false,\n                configurable: false,\n                value: componentName\n            });\n            if (classId !== undefined) {\n                Object.defineProperty(ret, componentClassIdSymbol, {\n                    enumerable: false,\n                    writable: false,\n                    configurable: false,\n                    value: classId\n                });\n            }\n            return ret;\n        };\n        if (classId !== undefined) {\n            RegisteredComponent[componentClassIdSymbol] = classId;\n        }\n        RegisteredComponent[componentSymbol] = componentName;\n        RegisteredComponent.isComponent = true;\n        RegisteredComponent.originalClassName = componentName;\n        RegisteredComponent.prototype = target.prototype;\n        RegisteredComponent.prototype.constructor = target;\n        return RegisteredComponent;\n    };\n}\nexports.Component = Component;\n/**\n * @public\n */\nfunction DisposableComponent(componentName, classId) {\n    return function (target) {\n        if (target.isComponent) {\n            throw new TypeError("You cannot extend a component. Trying to extend " + target.originalClassName + " with: " + componentName);\n        }\n        if (typeof classId !== \'number\' || isNaN(classId)) {\n            throw new Error("classId: " + classId + " is an invalid integer");\n        }\n        var extendedClass = target;\n        var RegisteredComponent = function RegisteredComponent() {\n            if (!DisposableComponent.engine) {\n                throw new Error(\'You need to set a DisposableComponent.engine before creating disposable components\');\n            }\n            var args = Array.prototype.slice.call(arguments);\n            var ret = new (extendedClass.bind.apply(extendedClass, __spread([void 0], args)))();\n            var id = helpers_1.newId(\'C\');\n            Object.defineProperty(ret, componentSymbol, {\n                enumerable: false,\n                writable: false,\n                configurable: false,\n                value: componentName\n            });\n            Object.defineProperty(ret, componentIdSymbol, {\n                enumerable: false,\n                writable: false,\n                configurable: false,\n                value: id\n            });\n            if (classId !== undefined) {\n                Object.defineProperty(ret, componentClassIdSymbol, {\n                    enumerable: false,\n                    writable: false,\n                    configurable: false,\n                    value: classId\n                });\n            }\n            if (DisposableComponent.engine) {\n                DisposableComponent.engine.registerComponent(ret);\n            }\n            return ret;\n        };\n        if (classId !== undefined) {\n            RegisteredComponent[componentClassIdSymbol] = classId;\n        }\n        RegisteredComponent[componentSymbol] = componentName;\n        RegisteredComponent.isComponent = true;\n        RegisteredComponent.isDisposableComponent = true;\n        RegisteredComponent.originalClassName = componentName;\n        RegisteredComponent.prototype = target.prototype;\n        RegisteredComponent.prototype.constructor = target;\n        return RegisteredComponent;\n    };\n}\nexports.DisposableComponent = DisposableComponent;\n/** @internal */\n(function (DisposableComponent) {\n    /** @internal */\n    // tslint:disable-next-line:whitespace\n    DisposableComponent.engine = null;\n})(DisposableComponent = exports.DisposableComponent || (exports.DisposableComponent = {}));\n/**\n * @public\n */\nfunction getComponentName(component) {\n    if (!component) {\n        throw new TypeError(component + \' is not a component.\');\n    }\n    if (component[componentSymbol]) {\n        return component[componentSymbol];\n    }\n    throw new TypeError(component + \' is not a registered component.\');\n}\nexports.getComponentName = getComponentName;\n/**\n * @public\n */\nfunction getComponentClassId(component) {\n    if (!component) {\n        throw new TypeError(component + \' is not a component.\');\n    }\n    if (component[componentClassIdSymbol]) {\n        return component[componentClassIdSymbol];\n    }\n    if (!component[componentSymbol]) {\n        throw new TypeError(component + \' is not a registered component.\');\n    }\n    return null;\n}\nexports.getComponentClassId = getComponentClassId;\n/**\n * @public\n */\nfunction getComponentId(component) {\n    if (!component) {\n        throw new TypeError(component + \' is not a component.\');\n    }\n    if (component[componentIdSymbol]) {\n        return component[componentIdSymbol];\n    }\n    throw new TypeError(component + \' is not a registered disposable component.\');\n}\nexports.getComponentId = getComponentId;\n/**\n * @public\n */\nvar ObservableComponent = /** @class */ (function () {\n    function ObservableComponent() {\n        this.dirty = false;\n        this.data = {};\n        this.subscriptions = [];\n    }\n    ObservableComponent.component = function (target, propertyKey) {\n        if (delete target[propertyKey]) {\n            var componentSymbol_1 = propertyKey + \'_\' + Math.random();\n            target[componentSymbol_1] = undefined;\n            Object.defineProperty(target, componentSymbol_1, __assign(__assign({}, Object.getOwnPropertyDescriptor(target, componentSymbol_1)), { enumerable: false }));\n            Object.defineProperty(target, propertyKey.toString(), {\n                get: function () {\n                    return this[componentSymbol_1];\n                },\n                set: function (value) {\n                    var oldValue = this[componentSymbol_1];\n                    if (value) {\n                        this.data[propertyKey] = getComponentId(value);\n                    }\n                    else {\n                        this.data[propertyKey] = null;\n                    }\n                    this[componentSymbol_1] = value;\n                    if (value !== oldValue) {\n                        this.dirty = true;\n                        for (var i = 0; i < this.subscriptions.length; i++) {\n                            this.subscriptions[i](propertyKey, value, oldValue);\n                        }\n                    }\n                },\n                enumerable: true\n            });\n        }\n    };\n    ObservableComponent.field = function (target, propertyKey) {\n        if (delete target[propertyKey]) {\n            Object.defineProperty(target, propertyKey.toString(), {\n                get: function () {\n                    return this.data[propertyKey];\n                },\n                set: function (value) {\n                    var oldValue = this.data[propertyKey];\n                    this.data[propertyKey] = value;\n                    if (value !== oldValue) {\n                        this.dirty = true;\n                        for (var i = 0; i < this.subscriptions.length; i++) {\n                            this.subscriptions[i](propertyKey, value, oldValue);\n                        }\n                    }\n                },\n                enumerable: true\n            });\n        }\n    };\n    ObservableComponent.uiValue = function (target, propertyKey) {\n        if (delete target[propertyKey]) {\n            Object.defineProperty(target, propertyKey.toString(), {\n                get: function () {\n                    return this.data[propertyKey].toString();\n                },\n                set: function (value) {\n                    var oldValue = this.data[propertyKey];\n                    var finalValue = new UIValue_1.UIValue(value);\n                    this.data[propertyKey] = finalValue;\n                    if (finalValue !== oldValue) {\n                        this.dirty = true;\n                        for (var i = 0; i < this.subscriptions.length; i++) {\n                            this.subscriptions[i](propertyKey, finalValue, oldValue);\n                        }\n                    }\n                },\n                enumerable: true\n            });\n        }\n    };\n    ObservableComponent.readonly = function (target, propertyKey) {\n        if (delete target[propertyKey]) {\n            Object.defineProperty(target, propertyKey.toString(), {\n                get: function () {\n                    if (propertyKey in this.data === false) {\n                        throw new Error("The field " + propertyKey + " is uninitialized");\n                    }\n                    return this.data[propertyKey];\n                },\n                set: function (value) {\n                    if (propertyKey in this.data) {\n                        throw new Error("The field " + propertyKey + " is readonly");\n                    }\n                    this.data[propertyKey] = value;\n                    this.dirty = true;\n                },\n                enumerable: true,\n                configurable: false\n            });\n        }\n    };\n    ObservableComponent.prototype.onChange = function (fn) {\n        this.subscriptions.push(fn);\n        return this;\n    };\n    ObservableComponent.prototype.toJSON = function () {\n        return this.data;\n    };\n    return ObservableComponent;\n}());\nexports.ObservableComponent = ObservableComponent;\n/**\n * @public\n */\nfunction isDisposableComponent(component) {\n    return componentIdSymbol in component;\n}\nexports.isDisposableComponent = isDisposableComponent;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/Component.ts?')},"./packages/decentraland-ecs/src/ecs/ComponentGroup.ts":
/*!*************************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/ComponentGroup.ts ***!
  \*************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Component_1 = __webpack_require__(/*! ./Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\n/**\n * @public\n */\nvar ComponentGroup = /** @class */ (function () {\n    function ComponentGroup() {\n        var requires = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            requires[_i] = arguments[_i];\n        }\n        this.entities = [];\n        this.active = false;\n        this._requiresNames = [];\n        // validate requires list\n        if (!requires) {\n            throw new Error(\'ComponentGroup: Could not load the requires list\');\n        }\n        if (!(requires instanceof Array)) {\n            throw new Error(\'ComponentGroup: requires list is not an Array\');\n        }\n        Object.defineProperty(this, \'requires\', {\n            get: function () {\n                return requires.slice();\n            }\n        });\n        Object.defineProperty(this, \'requiresNames\', {\n            get: function () {\n                return this._requiresNames.slice();\n            }\n        });\n        var _loop_1 = function (ix) {\n            var component = requires[ix];\n            var name_1 = null;\n            if (!component) {\n                throw new Error("ComponentGroup: the required component at location " + ix + " is invalid");\n            }\n            try {\n                name_1 = Component_1.getComponentName(component);\n            }\n            catch (e) {\n                throw new Error("ComponentGroup: the required component at location " + ix + " is not registered as a @Component. Remember to provide the class of the component, not the name");\n            }\n            if (this_1._requiresNames.some(function ($) { return $ === name_1; })) {\n                throw new Error("ComponentGroup: the required component list has a repeated name " + name_1);\n            }\n            this_1._requiresNames.push(name_1);\n        };\n        var this_1 = this;\n        for (var ix = 0; ix < requires.length; ix++) {\n            _loop_1(ix);\n        }\n    }\n    ComponentGroup.prototype.hasEntity = function (entity) {\n        if (!entity.isAddedToEngine())\n            return false;\n        return this.entities.indexOf(entity) !== -1;\n    };\n    // @internal\n    ComponentGroup.prototype.addEntity = function (entity) {\n        if (!entity.isAddedToEngine()) {\n            throw new TypeError(\'ComponentGroup: Cannot add a entity that is not added to the engine\');\n        }\n        if (this.entities.indexOf(entity) === -1) {\n            // tslint:disable-next-line:semicolon\n            ;\n            this.entities.push(entity);\n        }\n    };\n    // @internal\n    ComponentGroup.prototype.removeEntity = function (entity) {\n        var id = this.entities.indexOf(entity);\n        if (id !== -1) {\n            // tslint:disable-next-line:semicolon\n            ;\n            this.entities.splice(id, 1);\n        }\n    };\n    // @internal\n    ComponentGroup.prototype.componentRemoved = function (entity, component) {\n        if (this._requiresNames.indexOf(component) !== -1) {\n            this.removeEntity(entity);\n        }\n    };\n    // @internal\n    ComponentGroup.prototype.meetsRequirements = function (entity) {\n        for (var i = 0; i < this._requiresNames.length; i++) {\n            var componentName = this._requiresNames[i];\n            if (!(componentName in entity.components)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return ComponentGroup;\n}());\nexports.ComponentGroup = ComponentGroup;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG9uZW50R3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZWNzL0NvbXBvbmVudEdyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQW9FO0FBR3BFOztHQUVHO0FBQ0g7SUFTRTtRQUFZLGtCQUF3QzthQUF4QyxVQUF3QyxFQUF4QyxxQkFBd0MsRUFBeEMsSUFBd0M7WUFBeEMsNkJBQXdDOztRQVIzQyxhQUFRLEdBQTJCLEVBQUUsQ0FBQTtRQUk5QyxXQUFNLEdBQVksS0FBSyxDQUFBO1FBRWYsbUJBQWMsR0FBYSxFQUFFLENBQUE7UUFHbkMseUJBQXlCO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixNQUFNLElBQUksS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUE7U0FDcEU7UUFDRCxJQUFJLENBQUMsQ0FBQyxRQUFRLFlBQVksS0FBSyxDQUFDLEVBQUU7WUFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFBO1NBQ2pFO1FBRUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQ3RDLEdBQUcsRUFBRTtnQkFDSCxPQUFPLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtZQUN6QixDQUFDO1NBQ0YsQ0FBQyxDQUFBO1FBRUYsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFO1lBQzNDLEdBQUcsRUFBRTtnQkFDSCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUE7WUFDcEMsQ0FBQztTQUNGLENBQUMsQ0FBQTtnQ0FFTyxFQUFFO1lBQ1QsSUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQzlCLElBQUksTUFBSSxHQUFrQixJQUFJLENBQUE7WUFFOUIsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDZCxNQUFNLElBQUksS0FBSyxDQUFDLHdEQUFzRCxFQUFFLGdCQUFhLENBQUMsQ0FBQTthQUN2RjtZQUVELElBQUk7Z0JBQ0YsTUFBSSxHQUFHLDRCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFBO2FBQ25DO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsTUFBTSxJQUFJLEtBQUssQ0FDYix3REFBc0QsRUFBRSxxR0FBa0csQ0FDM0osQ0FBQTthQUNGO1lBRUQsSUFBSSxPQUFLLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEtBQUssTUFBSSxFQUFWLENBQVUsQ0FBQyxFQUFFO2dCQUM3QyxNQUFNLElBQUksS0FBSyxDQUFDLHFFQUFtRSxNQUFNLENBQUMsQ0FBQTthQUMzRjtZQUVELE9BQUssY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFJLENBQUMsQ0FBQTs7O1FBcEJoQyxLQUFLLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUU7b0JBQWxDLEVBQUU7U0FxQlY7SUFDSCxDQUFDO0lBRUQsa0NBQVMsR0FBVCxVQUFVLE1BQWU7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUU7WUFBRSxPQUFPLEtBQUssQ0FBQTtRQUUzQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQzdDLENBQUM7SUFFRCxZQUFZO0lBQ1osa0NBQVMsR0FBVCxVQUFVLE1BQWU7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsRUFBRTtZQUM3QixNQUFNLElBQUksU0FBUyxDQUFDLHFFQUFxRSxDQUFDLENBQUE7U0FDM0Y7UUFFRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ3hDLHFDQUFxQztZQUNyQyxDQUFDO1lBQUMsSUFBSSxDQUFDLFFBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1NBQzNDO0lBQ0gsQ0FBQztJQUVELFlBQVk7SUFDWixxQ0FBWSxHQUFaLFVBQWEsTUFBZTtRQUMxQixJQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUV4QyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNiLHFDQUFxQztZQUNyQyxDQUFDO1lBQUMsSUFBSSxDQUFDLFFBQXNCLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtTQUM1QztJQUNILENBQUM7SUFFRCxZQUFZO0lBQ1oseUNBQWdCLEdBQWhCLFVBQWlCLE1BQWUsRUFBRSxTQUFpQjtRQUNqRCxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2pELElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUE7U0FDMUI7SUFDSCxDQUFDO0lBRUQsWUFBWTtJQUNaLDBDQUFpQixHQUFqQixVQUFrQixNQUFlO1FBQy9CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNuRCxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQzVDLElBQUksQ0FBQyxDQUFDLGFBQWEsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQ3pDLE9BQU8sS0FBSyxDQUFBO2FBQ2I7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQW5HRCxJQW1HQztBQW5HWSx3Q0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldENvbXBvbmVudE5hbWUsIENvbXBvbmVudENvbnN0cnVjdG9yIH0gZnJvbSAnLi9Db21wb25lbnQnXG5pbXBvcnQgeyBJRW50aXR5IH0gZnJvbSAnLi9JRW50aXR5J1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIENvbXBvbmVudEdyb3VwIHtcbiAgcmVhZG9ubHkgZW50aXRpZXM6IFJlYWRvbmx5QXJyYXk8SUVudGl0eT4gPSBbXVxuICByZWFkb25seSByZXF1aXJlcyE6IFJlYWRvbmx5QXJyYXk8Q29tcG9uZW50Q29uc3RydWN0b3I8YW55Pj5cbiAgcmVhZG9ubHkgcmVxdWlyZXNOYW1lcyE6IFJlYWRvbmx5QXJyYXk8c3RyaW5nPlxuXG4gIGFjdGl2ZTogYm9vbGVhbiA9IGZhbHNlXG5cbiAgcHJpdmF0ZSBfcmVxdWlyZXNOYW1lczogc3RyaW5nW10gPSBbXVxuXG4gIGNvbnN0cnVjdG9yKC4uLnJlcXVpcmVzOiBDb21wb25lbnRDb25zdHJ1Y3Rvcjxhbnk+W10pIHtcbiAgICAvLyB2YWxpZGF0ZSByZXF1aXJlcyBsaXN0XG4gICAgaWYgKCFyZXF1aXJlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnRHcm91cDogQ291bGQgbm90IGxvYWQgdGhlIHJlcXVpcmVzIGxpc3QnKVxuICAgIH1cbiAgICBpZiAoIShyZXF1aXJlcyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnRHcm91cDogcmVxdWlyZXMgbGlzdCBpcyBub3QgYW4gQXJyYXknKVxuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncmVxdWlyZXMnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZXMuc2xpY2UoKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3JlcXVpcmVzTmFtZXMnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWlyZXNOYW1lcy5zbGljZSgpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGZvciAobGV0IGl4ID0gMDsgaXggPCByZXF1aXJlcy5sZW5ndGg7IGl4KyspIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHJlcXVpcmVzW2l4XVxuICAgICAgbGV0IG5hbWU6IHN0cmluZyB8IG51bGwgPSBudWxsXG5cbiAgICAgIGlmICghY29tcG9uZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29tcG9uZW50R3JvdXA6IHRoZSByZXF1aXJlZCBjb21wb25lbnQgYXQgbG9jYXRpb24gJHtpeH0gaXMgaW52YWxpZGApXG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDb21wb25lbnRHcm91cDogdGhlIHJlcXVpcmVkIGNvbXBvbmVudCBhdCBsb2NhdGlvbiAke2l4fSBpcyBub3QgcmVnaXN0ZXJlZCBhcyBhIEBDb21wb25lbnQuIFJlbWVtYmVyIHRvIHByb3ZpZGUgdGhlIGNsYXNzIG9mIHRoZSBjb21wb25lbnQsIG5vdCB0aGUgbmFtZWBcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcmVxdWlyZXNOYW1lcy5zb21lKCQgPT4gJCA9PT0gbmFtZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb21wb25lbnRHcm91cDogdGhlIHJlcXVpcmVkIGNvbXBvbmVudCBsaXN0IGhhcyBhIHJlcGVhdGVkIG5hbWUgJHtuYW1lfWApXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlcXVpcmVzTmFtZXMucHVzaChuYW1lKVxuICAgIH1cbiAgfVxuXG4gIGhhc0VudGl0eShlbnRpdHk6IElFbnRpdHkpOiBib29sZWFuIHtcbiAgICBpZiAoIWVudGl0eS5pc0FkZGVkVG9FbmdpbmUoKSkgcmV0dXJuIGZhbHNlXG5cbiAgICByZXR1cm4gdGhpcy5lbnRpdGllcy5pbmRleE9mKGVudGl0eSkgIT09IC0xXG4gIH1cblxuICAvLyBAaW50ZXJuYWxcbiAgYWRkRW50aXR5KGVudGl0eTogSUVudGl0eSkge1xuICAgIGlmICghZW50aXR5LmlzQWRkZWRUb0VuZ2luZSgpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb21wb25lbnRHcm91cDogQ2Fubm90IGFkZCBhIGVudGl0eSB0aGF0IGlzIG5vdCBhZGRlZCB0byB0aGUgZW5naW5lJylcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lbnRpdGllcy5pbmRleE9mKGVudGl0eSkgPT09IC0xKSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c2VtaWNvbG9uXG4gICAgICA7KHRoaXMuZW50aXRpZXMgYXMgSUVudGl0eVtdKS5wdXNoKGVudGl0eSlcbiAgICB9XG4gIH1cblxuICAvLyBAaW50ZXJuYWxcbiAgcmVtb3ZlRW50aXR5KGVudGl0eTogSUVudGl0eSkge1xuICAgIGNvbnN0IGlkID0gdGhpcy5lbnRpdGllcy5pbmRleE9mKGVudGl0eSlcblxuICAgIGlmIChpZCAhPT0gLTEpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzZW1pY29sb25cbiAgICAgIDsodGhpcy5lbnRpdGllcyBhcyBJRW50aXR5W10pLnNwbGljZShpZCwgMSlcbiAgICB9XG4gIH1cblxuICAvLyBAaW50ZXJuYWxcbiAgY29tcG9uZW50UmVtb3ZlZChlbnRpdHk6IElFbnRpdHksIGNvbXBvbmVudDogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuX3JlcXVpcmVzTmFtZXMuaW5kZXhPZihjb21wb25lbnQpICE9PSAtMSkge1xuICAgICAgdGhpcy5yZW1vdmVFbnRpdHkoZW50aXR5KVxuICAgIH1cbiAgfVxuXG4gIC8vIEBpbnRlcm5hbFxuICBtZWV0c1JlcXVpcmVtZW50cyhlbnRpdHk6IElFbnRpdHkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3JlcXVpcmVzTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudE5hbWUgPSB0aGlzLl9yZXF1aXJlc05hbWVzW2ldXG4gICAgICBpZiAoIShjb21wb25lbnROYW1lIGluIGVudGl0eS5jb21wb25lbnRzKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/ComponentGroup.ts?')},"./packages/decentraland-ecs/src/ecs/Engine.ts":
/*!*****************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/Engine.ts ***!
  \*****************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i["return"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar IEntity_1 = __webpack_require__(/*! ./IEntity */ "./packages/decentraland-ecs/src/ecs/IEntity.ts");\nvar Component_1 = __webpack_require__(/*! ./Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nvar EventManager_1 = __webpack_require__(/*! ./EventManager */ "./packages/decentraland-ecs/src/ecs/EventManager.ts");\nvar ComponentGroup_1 = __webpack_require__(/*! ./ComponentGroup */ "./packages/decentraland-ecs/src/ecs/ComponentGroup.ts");\nvar helpers_1 = __webpack_require__(/*! ./helpers */ "./packages/decentraland-ecs/src/ecs/helpers.ts");\n/**\n * @public\n */\nvar Engine = /** @class */ (function () {\n    function Engine(rootEntity) {\n        this.eventManager = new EventManager_1.EventManager();\n        // @internal\n        this.systems = [];\n        // @internal\n        this.entityLists = {};\n        // @internal\n        this.addedSystems = [];\n        this._entities = {};\n        this._disposableComponents = {};\n        this._componentGroups = {};\n        // systems that doesn\'t require any component or handle their own logic\n        this.simpleSystems = [];\n        this.eventManager.addListener(IEntity_1.ComponentAdded, this, this.componentAddedHandler);\n        this.eventManager.addListener(IEntity_1.ComponentRemoved, this, this.componentRemovedHandler);\n        this.rootEntity = rootEntity;\n    }\n    Object.defineProperty(Engine.prototype, "entities", {\n        get: function () {\n            return this._entities;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Engine.prototype, "disposableComponents", {\n        get: function () {\n            return this._disposableComponents;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Engine.prototype.addEntity = function (entity) {\n        var parent = entity.getParent();\n        if (entity.isAddedToEngine()) {\n            return entity;\n        }\n        entity.eventManager = this.eventManager;\n        entity.engine = this;\n        this._entities[entity.uuid] = entity;\n        this.checkRequirementsAndAdd(entity);\n        if (!parent) {\n            entity.setParent(this.rootEntity);\n        }\n        else {\n            if (!parent.isAddedToEngine() && parent !== this.rootEntity) {\n                helpers_1.log(\'Engine: warning, added an entity with a parent not present in the engine. Parent id: \' + parent.uuid);\n            }\n        }\n        entity.alive = true;\n        for (var i in entity.children) {\n            var child = entity.children[i];\n            if (child) {\n                if (!child.isAddedToEngine()) {\n                    this.addEntity(child);\n                }\n            }\n        }\n        return entity;\n    };\n    Engine.prototype.removeEntity = function (entity) {\n        var id = entity.uuid;\n        if (entity.isAddedToEngine()) {\n            for (var componentName in entity.components) {\n                var componentGroups = this._componentGroups[componentName];\n                if (componentGroups) {\n                    for (var groupIndex in componentGroups) {\n                        componentGroups[groupIndex].removeEntity(entity);\n                    }\n                }\n                delete this.entityLists[componentName][id];\n            }\n            for (var i = 0; i < this.simpleSystems.length; i++) {\n                var system = this.simpleSystems[i];\n                if (system.onRemoveEntity) {\n                    system.onRemoveEntity(entity);\n                }\n            }\n            for (var i in entity.children) {\n                var child = entity.children[i];\n                if (child) {\n                    this.removeEntity(child);\n                }\n            }\n            entity.alive = false;\n            entity.eventManager = null;\n            delete this._entities[id];\n            return true;\n        }\n        else {\n            helpers_1.log(\'Engine: Trying to remove non existent entity from engine.\');\n            if (!entity.isAddedToEngine()) {\n                helpers_1.log("Engine: Entity \\"" + entity.uuid + "\\" has not been added to any engine yet.");\n            }\n            else {\n                helpers_1.log(\'Engine: Entity id: \' + id);\n            }\n            helpers_1.log("Engine: Entity\'s components:");\n            for (var componentName in entity.components) {\n                helpers_1.log(componentName);\n            }\n            return false;\n        }\n    };\n    Engine.prototype.addSystem = function (system, priority) {\n        if (priority === void 0) { priority = 0; }\n        if (this.addedSystems.indexOf(system) !== -1) {\n            helpers_1.log(\'Engine: Trying to add a system that is already added. Aborting\');\n            return system;\n        }\n        if (this.systems.length > 0) {\n            for (var i = 0; i < this.systems.length; i++) {\n                var entry = this.systems[i];\n                var isLast = i === this.systems.length - 1;\n                if (entry.priority > priority) {\n                    this.addedSystems.push(system);\n                    this.systems.splice(i, 0, { system: system, priority: priority });\n                    break;\n                }\n                else if (isLast) {\n                    this.addedSystems.push(system);\n                    this.systems.splice(i + 1, 0, { system: system, priority: priority });\n                    break;\n                }\n            }\n        }\n        else {\n            this.addedSystems.push(system);\n            this.systems.splice(1, 0, { system: system, priority: priority });\n        }\n        this.registerSystem(system);\n        return system;\n    };\n    Engine.prototype.removeSystem = function (system) {\n        var idx = this.addedSystems.indexOf(system);\n        if (idx !== -1) {\n            system.active = false;\n            if (system.deactivate) {\n                system.deactivate();\n            }\n            this.addedSystems.splice(idx, 1);\n            for (var i = 0; i < this.systems.length; i++) {\n                var sys = this.systems[i].system;\n                if (sys === system) {\n                    this.systems.splice(i, 1);\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n    Engine.prototype.update = function (dt) {\n        for (var i in this.systems) {\n            var system = this.systems[i].system;\n            if (system.active && system.update) {\n                try {\n                    system.update(dt);\n                }\n                catch (e) {\n                    helpers_1.error(e);\n                }\n            }\n        }\n        return this;\n    };\n    Engine.prototype.getEntitiesWithComponent = function (component) {\n        var componentName = typeof component === \'string\' ? component : Component_1.getComponentName(component);\n        if (componentName in this.entityLists) {\n            return this.entityLists[componentName];\n        }\n        else {\n            return (this.entityLists[componentName] = {});\n        }\n    };\n    Engine.prototype.registerComponent = function (component) {\n        var id = Component_1.getComponentId(component);\n        var name = Component_1.getComponentName(component);\n        var classId = Component_1.getComponentClassId(component);\n        this._disposableComponents[id] = component;\n        if (classId !== null) {\n            this.eventManager.fireEvent(new Component_1.DisposableComponentCreated(id, name, classId));\n            this.eventManager.fireEvent(new Component_1.DisposableComponentUpdated(id, component));\n        }\n    };\n    Engine.prototype.disposeComponent = function (component) {\n        var id = Component_1.getComponentId(component);\n        if (delete this._disposableComponents[id]) {\n            this.eventManager.fireEvent(new Component_1.DisposableComponentRemoved(id));\n            if (component.onDispose) {\n                component.onDispose();\n            }\n            return true;\n        }\n        return false;\n    };\n    Engine.prototype.updateComponent = function (component) {\n        this.eventManager.fireEvent(new Component_1.DisposableComponentUpdated(Component_1.getComponentId(component), component));\n    };\n    Engine.prototype.getComponentGroup = function () {\n        var requires = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            requires[_i] = arguments[_i];\n        }\n        // TODO: memoize?\n        var componentGroup = new (ComponentGroup_1.ComponentGroup.bind.apply(ComponentGroup_1.ComponentGroup, __spread([void 0], requires)))();\n        componentGroup.active = true;\n        var requiresNames = componentGroup.requiresNames;\n        for (var i = 0; i < requiresNames.length; i++) {\n            var componentName = requiresNames[i];\n            var componentGroups = this._componentGroups[componentName];\n            if (!componentGroups) {\n                this._componentGroups[componentName] = componentGroups = [];\n            }\n            if (componentGroups.indexOf(componentGroup) === -1) {\n                componentGroups.push(componentGroup);\n            }\n        }\n        for (var entityId in this._entities) {\n            this.checkRequirements(this._entities[entityId], componentGroup);\n        }\n        return componentGroup;\n    };\n    Engine.prototype.removeComponentGroup = function (componentGroup) {\n        if (componentGroup.active) {\n            componentGroup.active = false;\n            var requiresNames = componentGroup.requiresNames;\n            for (var i = 0; i < requiresNames.length; i++) {\n                var componentName = requiresNames[i];\n                var componentGroups = this._componentGroups[componentName];\n                if (componentGroups) {\n                    var idx = componentGroups.indexOf(componentGroup);\n                    if (idx !== -1) {\n                        componentGroups.splice(idx, 1);\n                    }\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n    Engine.prototype.registerSystem = function (system) {\n        system.active = true;\n        if (system.activate) {\n            system.activate(this);\n        }\n        this.simpleSystems.push(system);\n    };\n    Engine.prototype.checkRequirementsAndAdd = function (entity) {\n        if (!entity.isAddedToEngine())\n            return;\n        for (var componentName in entity.components) {\n            if (!(componentName in this.entityLists)) {\n                this.entityLists[componentName] = {};\n            }\n            this.entityLists[componentName][entity.uuid] = entity;\n            var componentGroups = this._componentGroups[componentName];\n            if (componentGroups) {\n                for (var systemIndex in componentGroups) {\n                    this.checkRequirements(entity, componentGroups[systemIndex]);\n                }\n            }\n        }\n        for (var i = 0; i < this.simpleSystems.length; i++) {\n            var system = this.simpleSystems[i];\n            if (system.onAddEntity) {\n                system.onAddEntity(entity);\n            }\n        }\n    };\n    Engine.prototype.checkRequirements = function (entity, system) {\n        if (system.meetsRequirements(entity)) {\n            if (!system.hasEntity(entity)) {\n                system.addEntity(entity);\n            }\n        }\n        else {\n            if (system.hasEntity(entity)) {\n                system.removeEntity(entity);\n            }\n        }\n    };\n    Engine.prototype.componentAddedHandler = function (event) {\n        var _a;\n        var entity = event.entity, componentName = event.componentName;\n        if (!entity.isAddedToEngine())\n            return;\n        if (!this.entityLists[componentName]) {\n            this.entityLists[componentName] = (_a = {}, _a[entity.uuid] = entity, _a);\n        }\n        else {\n            this.entityLists[componentName][entity.uuid] = entity;\n        }\n        var componentGroups = this._componentGroups[componentName];\n        if (componentGroups) {\n            for (var i in componentGroups) {\n                this.checkRequirements(entity, componentGroups[i]);\n            }\n        }\n    };\n    Engine.prototype.componentRemovedHandler = function (event) {\n        // In case a single component gets removed from an entity, we inform\n        // all systems that this entity lost this specific component.\n        var entity = event.entity, componentName = event.componentName;\n        if (!entity.isAddedToEngine())\n            return;\n        delete this.entityLists[componentName][entity.uuid];\n        var componentGroups = this._componentGroups[componentName];\n        if (componentGroups) {\n            for (var i in componentGroups) {\n                this.checkRequirements(entity, componentGroups[i]);\n            }\n        }\n    };\n    return Engine;\n}());\nexports.Engine = Engine;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5naW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Vjcy9FbmdpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHFDQUF1RjtBQUV2Rix5Q0FTb0I7QUFDcEIsK0NBQTZDO0FBQzdDLG1EQUFpRDtBQUVqRCxxQ0FBc0M7QUFRdEM7O0dBRUc7QUFDSDtJQTRCRSxnQkFBWSxVQUFtQjtRQTNCdEIsaUJBQVksR0FBaUIsSUFBSSwyQkFBWSxFQUFFLENBQUE7UUFHeEQsWUFBWTtRQUNILFlBQU8sR0FBa0IsRUFBRSxDQUFBO1FBRXBDLFlBQVk7UUFDSCxnQkFBVyxHQUE0QyxFQUFFLENBQUE7UUFFbEUsWUFBWTtRQUNILGlCQUFZLEdBQWMsRUFBRSxDQUFBO1FBRXBCLGNBQVMsR0FBNEIsRUFBRSxDQUFBO1FBQ3ZDLDBCQUFxQixHQUE0QyxFQUFFLENBQUE7UUFDbkUscUJBQWdCLEdBQXFDLEVBQUUsQ0FBQTtRQUV4RSx1RUFBdUU7UUFDdEQsa0JBQWEsR0FBYyxFQUFFLENBQUE7UUFXNUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsd0JBQWMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUE7UUFDL0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsMEJBQWdCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO1FBQ25GLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFBO0lBQzlCLENBQUM7SUFaRCxzQkFBSSw0QkFBUTthQUFaO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBOEMsQ0FBQTtRQUM1RCxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHdDQUFvQjthQUF4QjtZQUNFLE9BQU8sSUFBSSxDQUFDLHFCQUEwRSxDQUFBO1FBQ3hGLENBQUM7OztPQUFBO0lBUUQsMEJBQVMsR0FBVCxVQUFVLE1BQWU7UUFDdkIsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFBO1FBRWpDLElBQUksTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFFO1lBQzVCLE9BQU8sTUFBTSxDQUFBO1NBQ2Q7UUFFRCxNQUFNLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQ3RDO1FBQUMsTUFBaUIsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFBO1FBRWpDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQTtRQUVwQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUE7UUFFcEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1NBQ2xDO2FBQU07WUFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUMzRCxhQUFHLENBQUMsdUZBQXVGLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO2FBQzNHO1NBQ0Y7UUFFRCxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQTtRQUVuQixLQUFLLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDN0IsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNoQyxJQUFJLEtBQUssRUFBRTtnQkFDVCxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRSxFQUFFO29CQUM1QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFBO2lCQUN0QjthQUNGO1NBQ0Y7UUFFRCxPQUFPLE1BQU0sQ0FBQTtJQUNmLENBQUM7SUFFRCw2QkFBWSxHQUFaLFVBQWEsTUFBZTtRQUMxQixJQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFBO1FBRXRCLElBQUksTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFFO1lBQzVCLEtBQUssSUFBSSxhQUFhLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRTtnQkFDM0MsSUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFBO2dCQUU1RCxJQUFJLGVBQWUsRUFBRTtvQkFDbkIsS0FBSyxJQUFJLFVBQVUsSUFBSSxlQUFlLEVBQUU7d0JBQ3RDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUE7cUJBQ2pEO2lCQUNGO2dCQUVELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQTthQUMzQztZQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDbEQsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFFcEMsSUFBSSxNQUFNLENBQUMsY0FBYyxFQUFFO29CQUN6QixNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFBO2lCQUM5QjthQUNGO1lBRUQsS0FBSyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO2dCQUM3QixJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUNoQyxJQUFJLEtBQUssRUFBRTtvQkFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFBO2lCQUN6QjthQUNGO1lBRUQsTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7WUFDcEIsTUFBTSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUE7WUFFMUIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBRXpCLE9BQU8sSUFBSSxDQUFBO1NBQ1o7YUFBTTtZQUNMLGFBQUcsQ0FBQywyREFBMkQsQ0FBQyxDQUFBO1lBQ2hFLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLEVBQUU7Z0JBQzdCLGFBQUcsQ0FBQyxzQkFBbUIsTUFBTSxDQUFDLElBQUksNkNBQXlDLENBQUMsQ0FBQTthQUM3RTtpQkFBTTtnQkFDTCxhQUFHLENBQUMscUJBQXFCLEdBQUcsRUFBRSxDQUFDLENBQUE7YUFDaEM7WUFDRCxhQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQTtZQUNuQyxLQUFLLElBQUksYUFBYSxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7Z0JBQzNDLGFBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQTthQUNuQjtZQUNELE9BQU8sS0FBSyxDQUFBO1NBQ2I7SUFDSCxDQUFDO0lBRUQsMEJBQVMsR0FBVCxVQUFVLE1BQWUsRUFBRSxRQUFvQjtRQUFwQix5QkFBQSxFQUFBLFlBQW9CO1FBQzdDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDNUMsYUFBRyxDQUFDLGdFQUFnRSxDQUFDLENBQUE7WUFDckUsT0FBTyxNQUFNLENBQUE7U0FDZDtRQUVELElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzNCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDNUMsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDN0IsSUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtnQkFFNUMsSUFBSSxLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsRUFBRTtvQkFDN0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7b0JBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxNQUFNLFFBQUEsRUFBRSxRQUFRLFVBQUEsRUFBRSxDQUFDLENBQUE7b0JBQy9DLE1BQUs7aUJBQ047cUJBQU0sSUFBSSxNQUFNLEVBQUU7b0JBQ2pCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO29CQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLE1BQU0sUUFBQSxFQUFFLFFBQVEsVUFBQSxFQUFFLENBQUMsQ0FBQTtvQkFDbkQsTUFBSztpQkFDTjthQUNGO1NBQ0Y7YUFBTTtZQUNMLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxNQUFNLFFBQUEsRUFBRSxRQUFRLFVBQUEsRUFBRSxDQUFDLENBQUE7U0FDaEQ7UUFFRCxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBRTNCLE9BQU8sTUFBTSxDQUFBO0lBQ2YsQ0FBQztJQUVELDZCQUFZLEdBQVosVUFBYSxNQUFlO1FBQzFCLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBRTdDLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2QsTUFBTSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUE7WUFFckIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO2dCQUNyQixNQUFNLENBQUMsVUFBVSxFQUFFLENBQUE7YUFDcEI7WUFFRCxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFFaEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUM1QyxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQTtnQkFDbEMsSUFBSSxHQUFHLEtBQUssTUFBTSxFQUFFO29CQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7aUJBQzFCO2FBQ0Y7WUFDRCxPQUFPLElBQUksQ0FBQTtTQUNaO1FBQ0QsT0FBTyxLQUFLLENBQUE7SUFDZCxDQUFDO0lBRUQsdUJBQU0sR0FBTixVQUFPLEVBQVU7UUFDZixLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDMUIsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7WUFDckMsSUFBSSxNQUFNLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7Z0JBQ2xDLElBQUk7b0JBQ0YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtpQkFDbEI7Z0JBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ1YsZUFBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO2lCQUNUO2FBQ0Y7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztJQUlELHlDQUF3QixHQUF4QixVQUF5QixTQUE2QztRQUNwRSxJQUFNLGFBQWEsR0FBRyxPQUFPLFNBQVMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsNEJBQWdCLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFN0YsSUFBSSxhQUFhLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNyQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUE7U0FDdkM7YUFBTTtZQUNMLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFBO1NBQzlDO0lBQ0gsQ0FBQztJQUVELGtDQUFpQixHQUFqQixVQUFrQixTQUFrQztRQUNsRCxJQUFNLEVBQUUsR0FBRywwQkFBYyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3BDLElBQU0sSUFBSSxHQUFHLDRCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3hDLElBQU0sT0FBTyxHQUFHLCtCQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQzlDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUE7UUFDMUMsSUFBSSxPQUFPLEtBQUssSUFBSSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksc0NBQTBCLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFBO1lBQzlFLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksc0NBQTBCLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUE7U0FDM0U7SUFDSCxDQUFDO0lBRUQsaUNBQWdCLEdBQWhCLFVBQWlCLFNBQWtDO1FBQ2pELElBQU0sRUFBRSxHQUFHLDBCQUFjLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFcEMsSUFBSSxPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLHNDQUEwQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFFL0QsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFO2dCQUN2QixTQUFTLENBQUMsU0FBUyxFQUFFLENBQUE7YUFDdEI7WUFDRCxPQUFPLElBQUksQ0FBQTtTQUNaO1FBQ0QsT0FBTyxLQUFLLENBQUE7SUFDZCxDQUFDO0lBRUQsZ0NBQWUsR0FBZixVQUFnQixTQUFrQztRQUNoRCxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLHNDQUEwQixDQUFDLDBCQUFjLENBQUMsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQTtJQUNuRyxDQUFDO0lBRUQsa0NBQWlCLEdBQWpCO1FBQWtCLGtCQUF3QzthQUF4QyxVQUF3QyxFQUF4QyxxQkFBd0MsRUFBeEMsSUFBd0M7WUFBeEMsNkJBQXdDOztRQUN4RCxpQkFBaUI7UUFDakIsSUFBTSxjQUFjLFFBQU8sK0JBQWMsWUFBZCwrQkFBYyxxQkFBSSxRQUFRLEtBQUMsQ0FBQTtRQUV0RCxjQUFjLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQTtRQUU1QixJQUFNLGFBQWEsR0FBRyxjQUFjLENBQUMsYUFBYSxDQUFBO1FBRWxELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdDLElBQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUV0QyxJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUE7WUFFMUQsSUFBSSxDQUFDLGVBQWUsRUFBRTtnQkFDcEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxHQUFHLGVBQWUsR0FBRyxFQUFFLENBQUE7YUFDNUQ7WUFFRCxJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ2xELGVBQWUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUE7YUFDckM7U0FDRjtRQUVELEtBQUssSUFBSSxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNuQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQTtTQUNqRTtRQUVELE9BQU8sY0FBYyxDQUFBO0lBQ3ZCLENBQUM7SUFFRCxxQ0FBb0IsR0FBcEIsVUFBcUIsY0FBOEI7UUFDakQsSUFBSSxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ3pCLGNBQWMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO1lBQzdCLElBQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQyxhQUFhLENBQUE7WUFDbEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzdDLElBQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFFdEMsSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFBO2dCQUUxRCxJQUFJLGVBQWUsRUFBRTtvQkFDbkIsSUFBTSxHQUFHLEdBQUcsZUFBZSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQTtvQkFDbkQsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUU7d0JBQ2QsZUFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7cUJBQy9CO2lCQUNGO2FBQ0Y7WUFDRCxPQUFPLElBQUksQ0FBQTtTQUNaO1FBQ0QsT0FBTyxLQUFLLENBQUE7SUFDZCxDQUFDO0lBRU8sK0JBQWMsR0FBdEIsVUFBdUIsTUFBZTtRQUNwQyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQTtRQUVwQixJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDbkIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUN0QjtRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ2pDLENBQUM7SUFFTyx3Q0FBdUIsR0FBL0IsVUFBZ0MsTUFBZTtRQUM3QyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRTtZQUFFLE9BQU07UUFFckMsS0FBSyxJQUFJLGFBQWEsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQzNDLElBQUksQ0FBQyxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUU7Z0JBQ3hDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFBO2FBQ3JDO1lBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFBO1lBRXJELElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQTtZQUU1RCxJQUFJLGVBQWUsRUFBRTtnQkFDbkIsS0FBSyxJQUFJLFdBQVcsSUFBSSxlQUFlLEVBQUU7b0JBQ3ZDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUE7aUJBQzdEO2FBQ0Y7U0FDRjtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsRCxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBRXBDLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRTtnQkFDdEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQTthQUMzQjtTQUNGO0lBQ0gsQ0FBQztJQUVPLGtDQUFpQixHQUF6QixVQUEwQixNQUFlLEVBQUUsTUFBc0I7UUFDL0QsSUFBSSxNQUFNLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQzdCLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7YUFDekI7U0FDRjthQUFNO1lBQ0wsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUM1QixNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFBO2FBQzVCO1NBQ0Y7SUFDSCxDQUFDO0lBRU8sc0NBQXFCLEdBQTdCLFVBQThCLEtBQXFCOztRQUN6QyxJQUFBLHFCQUFNLEVBQUUsbUNBQWEsQ0FBVTtRQUV2QyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRTtZQUFFLE9BQU07UUFFckMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsYUFBSyxHQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUcsTUFBTSxLQUFFLENBQUE7U0FDNUQ7YUFBTTtZQUNMLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQTtTQUN0RDtRQUVELElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUU1RCxJQUFJLGVBQWUsRUFBRTtZQUNuQixLQUFLLElBQUksQ0FBQyxJQUFJLGVBQWUsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUNuRDtTQUNGO0lBQ0gsQ0FBQztJQUVPLHdDQUF1QixHQUEvQixVQUFnQyxLQUF1QjtRQUNyRCxvRUFBb0U7UUFDcEUsNkRBQTZEO1FBQ3JELElBQUEscUJBQU0sRUFBRSxtQ0FBYSxDQUFVO1FBRXZDLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFO1lBQUUsT0FBTTtRQUVyQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRW5ELElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUU1RCxJQUFJLGVBQWUsRUFBRTtZQUNuQixLQUFLLElBQUksQ0FBQyxJQUFJLGVBQWUsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUNuRDtTQUNGO0lBQ0gsQ0FBQztJQUNILGFBQUM7QUFBRCxDQUFDLEFBaFhELElBZ1hDO0FBaFhZLHdCQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUVuZ2luZSwgSVN5c3RlbSwgSUVudGl0eSwgQ29tcG9uZW50QWRkZWQsIENvbXBvbmVudFJlbW92ZWQgfSBmcm9tICcuL0lFbnRpdHknXG5cbmltcG9ydCB7XG4gIGdldENvbXBvbmVudE5hbWUsXG4gIGdldENvbXBvbmVudElkLFxuICBEaXNwb3NhYmxlQ29tcG9uZW50VXBkYXRlZCxcbiAgRGlzcG9zYWJsZUNvbXBvbmVudExpa2UsXG4gIENvbXBvbmVudENvbnN0cnVjdG9yLFxuICBEaXNwb3NhYmxlQ29tcG9uZW50Q3JlYXRlZCxcbiAgRGlzcG9zYWJsZUNvbXBvbmVudFJlbW92ZWQsXG4gIGdldENvbXBvbmVudENsYXNzSWRcbn0gZnJvbSAnLi9Db21wb25lbnQnXG5pbXBvcnQgeyBFdmVudE1hbmFnZXIgfSBmcm9tICcuL0V2ZW50TWFuYWdlcidcbmltcG9ydCB7IENvbXBvbmVudEdyb3VwIH0gZnJvbSAnLi9Db21wb25lbnRHcm91cCdcblxuaW1wb3J0IHsgbG9nLCBlcnJvciB9IGZyb20gJy4vaGVscGVycydcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gJy4vRW50aXR5J1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG50eXBlIFN5c3RlbUVudHJ5ID0geyBzeXN0ZW06IElTeXN0ZW07IHByaW9yaXR5OiBudW1iZXIgfVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEVuZ2luZSBpbXBsZW1lbnRzIElFbmdpbmUge1xuICByZWFkb25seSBldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlciA9IG5ldyBFdmVudE1hbmFnZXIoKVxuICByZWFkb25seSByb290RW50aXR5OiBJRW50aXR5XG5cbiAgLy8gQGludGVybmFsXG4gIHJlYWRvbmx5IHN5c3RlbXM6IFN5c3RlbUVudHJ5W10gPSBbXVxuXG4gIC8vIEBpbnRlcm5hbFxuICByZWFkb25seSBlbnRpdHlMaXN0czogUmVjb3JkPHN0cmluZywgUmVjb3JkPHN0cmluZywgSUVudGl0eT4+ID0ge31cblxuICAvLyBAaW50ZXJuYWxcbiAgcmVhZG9ubHkgYWRkZWRTeXN0ZW1zOiBJU3lzdGVtW10gPSBbXVxuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2VudGl0aWVzOiBSZWNvcmQ8c3RyaW5nLCBJRW50aXR5PiA9IHt9XG4gIHByaXZhdGUgcmVhZG9ubHkgX2Rpc3Bvc2FibGVDb21wb25lbnRzOiBSZWNvcmQ8c3RyaW5nLCBEaXNwb3NhYmxlQ29tcG9uZW50TGlrZT4gPSB7fVxuICBwcml2YXRlIHJlYWRvbmx5IF9jb21wb25lbnRHcm91cHM6IFJlY29yZDxzdHJpbmcsIENvbXBvbmVudEdyb3VwW10+ID0ge31cblxuICAvLyBzeXN0ZW1zIHRoYXQgZG9lc24ndCByZXF1aXJlIGFueSBjb21wb25lbnQgb3IgaGFuZGxlIHRoZWlyIG93biBsb2dpY1xuICBwcml2YXRlIHJlYWRvbmx5IHNpbXBsZVN5c3RlbXM6IElTeXN0ZW1bXSA9IFtdXG5cbiAgZ2V0IGVudGl0aWVzKCkge1xuICAgIHJldHVybiB0aGlzLl9lbnRpdGllcyBhcyBSZWFkb25seTxSZWNvcmQ8c3RyaW5nLCBJRW50aXR5Pj5cbiAgfVxuXG4gIGdldCBkaXNwb3NhYmxlQ29tcG9uZW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzcG9zYWJsZUNvbXBvbmVudHMgYXMgUmVhZG9ubHk8UmVjb3JkPHN0cmluZywgRGlzcG9zYWJsZUNvbXBvbmVudExpa2U+PlxuICB9XG5cbiAgY29uc3RydWN0b3Iocm9vdEVudGl0eTogSUVudGl0eSkge1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyLmFkZExpc3RlbmVyKENvbXBvbmVudEFkZGVkLCB0aGlzLCB0aGlzLmNvbXBvbmVudEFkZGVkSGFuZGxlcilcbiAgICB0aGlzLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcihDb21wb25lbnRSZW1vdmVkLCB0aGlzLCB0aGlzLmNvbXBvbmVudFJlbW92ZWRIYW5kbGVyKVxuICAgIHRoaXMucm9vdEVudGl0eSA9IHJvb3RFbnRpdHlcbiAgfVxuXG4gIGFkZEVudGl0eShlbnRpdHk6IElFbnRpdHkpOiBJRW50aXR5IHtcbiAgICBjb25zdCBwYXJlbnQgPSBlbnRpdHkuZ2V0UGFyZW50KClcblxuICAgIGlmIChlbnRpdHkuaXNBZGRlZFRvRW5naW5lKCkpIHtcbiAgICAgIHJldHVybiBlbnRpdHlcbiAgICB9XG5cbiAgICBlbnRpdHkuZXZlbnRNYW5hZ2VyID0gdGhpcy5ldmVudE1hbmFnZXJcbiAgICA7KGVudGl0eSBhcyBFbnRpdHkpLmVuZ2luZSA9IHRoaXNcblxuICAgIHRoaXMuX2VudGl0aWVzW2VudGl0eS51dWlkXSA9IGVudGl0eVxuXG4gICAgdGhpcy5jaGVja1JlcXVpcmVtZW50c0FuZEFkZChlbnRpdHkpXG5cbiAgICBpZiAoIXBhcmVudCkge1xuICAgICAgZW50aXR5LnNldFBhcmVudCh0aGlzLnJvb3RFbnRpdHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghcGFyZW50LmlzQWRkZWRUb0VuZ2luZSgpICYmIHBhcmVudCAhPT0gdGhpcy5yb290RW50aXR5KSB7XG4gICAgICAgIGxvZygnRW5naW5lOiB3YXJuaW5nLCBhZGRlZCBhbiBlbnRpdHkgd2l0aCBhIHBhcmVudCBub3QgcHJlc2VudCBpbiB0aGUgZW5naW5lLiBQYXJlbnQgaWQ6ICcgKyBwYXJlbnQudXVpZClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbnRpdHkuYWxpdmUgPSB0cnVlXG5cbiAgICBmb3IgKGxldCBpIGluIGVudGl0eS5jaGlsZHJlbikge1xuICAgICAgY29uc3QgY2hpbGQgPSBlbnRpdHkuY2hpbGRyZW5baV1cbiAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICBpZiAoIWNoaWxkLmlzQWRkZWRUb0VuZ2luZSgpKSB7XG4gICAgICAgICAgdGhpcy5hZGRFbnRpdHkoY2hpbGQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZW50aXR5XG4gIH1cblxuICByZW1vdmVFbnRpdHkoZW50aXR5OiBJRW50aXR5KTogYm9vbGVhbiB7XG4gICAgY29uc3QgaWQgPSBlbnRpdHkudXVpZFxuXG4gICAgaWYgKGVudGl0eS5pc0FkZGVkVG9FbmdpbmUoKSkge1xuICAgICAgZm9yIChsZXQgY29tcG9uZW50TmFtZSBpbiBlbnRpdHkuY29tcG9uZW50cykge1xuICAgICAgICBjb25zdCBjb21wb25lbnRHcm91cHMgPSB0aGlzLl9jb21wb25lbnRHcm91cHNbY29tcG9uZW50TmFtZV1cblxuICAgICAgICBpZiAoY29tcG9uZW50R3JvdXBzKSB7XG4gICAgICAgICAgZm9yIChsZXQgZ3JvdXBJbmRleCBpbiBjb21wb25lbnRHcm91cHMpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudEdyb3Vwc1tncm91cEluZGV4XS5yZW1vdmVFbnRpdHkoZW50aXR5KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSB0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdW2lkXVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2ltcGxlU3lzdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzeXN0ZW0gPSB0aGlzLnNpbXBsZVN5c3RlbXNbaV1cblxuICAgICAgICBpZiAoc3lzdGVtLm9uUmVtb3ZlRW50aXR5KSB7XG4gICAgICAgICAgc3lzdGVtLm9uUmVtb3ZlRW50aXR5KGVudGl0eSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpIGluIGVudGl0eS5jaGlsZHJlbikge1xuICAgICAgICBjb25zdCBjaGlsZCA9IGVudGl0eS5jaGlsZHJlbltpXVxuICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUVudGl0eShjaGlsZClcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlbnRpdHkuYWxpdmUgPSBmYWxzZVxuICAgICAgZW50aXR5LmV2ZW50TWFuYWdlciA9IG51bGxcblxuICAgICAgZGVsZXRlIHRoaXMuX2VudGl0aWVzW2lkXVxuXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2coJ0VuZ2luZTogVHJ5aW5nIHRvIHJlbW92ZSBub24gZXhpc3RlbnQgZW50aXR5IGZyb20gZW5naW5lLicpXG4gICAgICBpZiAoIWVudGl0eS5pc0FkZGVkVG9FbmdpbmUoKSkge1xuICAgICAgICBsb2coYEVuZ2luZTogRW50aXR5IFwiJHtlbnRpdHkudXVpZH1cIiBoYXMgbm90IGJlZW4gYWRkZWQgdG8gYW55IGVuZ2luZSB5ZXQuYClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZygnRW5naW5lOiBFbnRpdHkgaWQ6ICcgKyBpZClcbiAgICAgIH1cbiAgICAgIGxvZyhcIkVuZ2luZTogRW50aXR5J3MgY29tcG9uZW50czpcIilcbiAgICAgIGZvciAobGV0IGNvbXBvbmVudE5hbWUgaW4gZW50aXR5LmNvbXBvbmVudHMpIHtcbiAgICAgICAgbG9nKGNvbXBvbmVudE5hbWUpXG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICBhZGRTeXN0ZW0oc3lzdGVtOiBJU3lzdGVtLCBwcmlvcml0eTogbnVtYmVyID0gMCkge1xuICAgIGlmICh0aGlzLmFkZGVkU3lzdGVtcy5pbmRleE9mKHN5c3RlbSkgIT09IC0xKSB7XG4gICAgICBsb2coJ0VuZ2luZTogVHJ5aW5nIHRvIGFkZCBhIHN5c3RlbSB0aGF0IGlzIGFscmVhZHkgYWRkZWQuIEFib3J0aW5nJylcbiAgICAgIHJldHVybiBzeXN0ZW1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5zeXN0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zeXN0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5zeXN0ZW1zW2ldXG4gICAgICAgIGNvbnN0IGlzTGFzdCA9IGkgPT09IHRoaXMuc3lzdGVtcy5sZW5ndGggLSAxXG5cbiAgICAgICAgaWYgKGVudHJ5LnByaW9yaXR5ID4gcHJpb3JpdHkpIHtcbiAgICAgICAgICB0aGlzLmFkZGVkU3lzdGVtcy5wdXNoKHN5c3RlbSlcbiAgICAgICAgICB0aGlzLnN5c3RlbXMuc3BsaWNlKGksIDAsIHsgc3lzdGVtLCBwcmlvcml0eSB9KVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH0gZWxzZSBpZiAoaXNMYXN0KSB7XG4gICAgICAgICAgdGhpcy5hZGRlZFN5c3RlbXMucHVzaChzeXN0ZW0pXG4gICAgICAgICAgdGhpcy5zeXN0ZW1zLnNwbGljZShpICsgMSwgMCwgeyBzeXN0ZW0sIHByaW9yaXR5IH0pXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFkZGVkU3lzdGVtcy5wdXNoKHN5c3RlbSlcbiAgICAgIHRoaXMuc3lzdGVtcy5zcGxpY2UoMSwgMCwgeyBzeXN0ZW0sIHByaW9yaXR5IH0pXG4gICAgfVxuXG4gICAgdGhpcy5yZWdpc3RlclN5c3RlbShzeXN0ZW0pXG5cbiAgICByZXR1cm4gc3lzdGVtXG4gIH1cblxuICByZW1vdmVTeXN0ZW0oc3lzdGVtOiBJU3lzdGVtKSB7XG4gICAgY29uc3QgaWR4ID0gdGhpcy5hZGRlZFN5c3RlbXMuaW5kZXhPZihzeXN0ZW0pXG5cbiAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgc3lzdGVtLmFjdGl2ZSA9IGZhbHNlXG5cbiAgICAgIGlmIChzeXN0ZW0uZGVhY3RpdmF0ZSkge1xuICAgICAgICBzeXN0ZW0uZGVhY3RpdmF0ZSgpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWRkZWRTeXN0ZW1zLnNwbGljZShpZHgsIDEpXG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zeXN0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHN5cyA9IHRoaXMuc3lzdGVtc1tpXS5zeXN0ZW1cbiAgICAgICAgaWYgKHN5cyA9PT0gc3lzdGVtKSB7XG4gICAgICAgICAgdGhpcy5zeXN0ZW1zLnNwbGljZShpLCAxKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHVwZGF0ZShkdDogbnVtYmVyKSB7XG4gICAgZm9yIChsZXQgaSBpbiB0aGlzLnN5c3RlbXMpIHtcbiAgICAgIGNvbnN0IHN5c3RlbSA9IHRoaXMuc3lzdGVtc1tpXS5zeXN0ZW1cbiAgICAgIGlmIChzeXN0ZW0uYWN0aXZlICYmIHN5c3RlbS51cGRhdGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBzeXN0ZW0udXBkYXRlKGR0KVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZXJyb3IoZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgZ2V0RW50aXRpZXNXaXRoQ29tcG9uZW50KGNvbXBvbmVudDogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgYW55PlxuICBnZXRFbnRpdGllc1dpdGhDb21wb25lbnQoY29tcG9uZW50OiBDb21wb25lbnRDb25zdHJ1Y3Rvcjxhbnk+KTogUmVjb3JkPHN0cmluZywgSUVudGl0eT5cbiAgZ2V0RW50aXRpZXNXaXRoQ29tcG9uZW50KGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8YW55PiB8IHN0cmluZyk6IFJlY29yZDxzdHJpbmcsIElFbnRpdHk+IHtcbiAgICBjb25zdCBjb21wb25lbnROYW1lID0gdHlwZW9mIGNvbXBvbmVudCA9PT0gJ3N0cmluZycgPyBjb21wb25lbnQgOiBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudClcblxuICAgIGlmIChjb21wb25lbnROYW1lIGluIHRoaXMuZW50aXR5TGlzdHMpIHtcbiAgICAgIHJldHVybiB0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAodGhpcy5lbnRpdHlMaXN0c1tjb21wb25lbnROYW1lXSA9IHt9KVxuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyQ29tcG9uZW50KGNvbXBvbmVudDogRGlzcG9zYWJsZUNvbXBvbmVudExpa2UpIHtcbiAgICBjb25zdCBpZCA9IGdldENvbXBvbmVudElkKGNvbXBvbmVudClcbiAgICBjb25zdCBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnQpXG4gICAgY29uc3QgY2xhc3NJZCA9IGdldENvbXBvbmVudENsYXNzSWQoY29tcG9uZW50KVxuICAgIHRoaXMuX2Rpc3Bvc2FibGVDb21wb25lbnRzW2lkXSA9IGNvbXBvbmVudFxuICAgIGlmIChjbGFzc0lkICE9PSBudWxsKSB7XG4gICAgICB0aGlzLmV2ZW50TWFuYWdlci5maXJlRXZlbnQobmV3IERpc3Bvc2FibGVDb21wb25lbnRDcmVhdGVkKGlkLCBuYW1lLCBjbGFzc0lkKSlcbiAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLmZpcmVFdmVudChuZXcgRGlzcG9zYWJsZUNvbXBvbmVudFVwZGF0ZWQoaWQsIGNvbXBvbmVudCkpXG4gICAgfVxuICB9XG5cbiAgZGlzcG9zZUNvbXBvbmVudChjb21wb25lbnQ6IERpc3Bvc2FibGVDb21wb25lbnRMaWtlKSB7XG4gICAgY29uc3QgaWQgPSBnZXRDb21wb25lbnRJZChjb21wb25lbnQpXG5cbiAgICBpZiAoZGVsZXRlIHRoaXMuX2Rpc3Bvc2FibGVDb21wb25lbnRzW2lkXSkge1xuICAgICAgdGhpcy5ldmVudE1hbmFnZXIuZmlyZUV2ZW50KG5ldyBEaXNwb3NhYmxlQ29tcG9uZW50UmVtb3ZlZChpZCkpXG5cbiAgICAgIGlmIChjb21wb25lbnQub25EaXNwb3NlKSB7XG4gICAgICAgIGNvbXBvbmVudC5vbkRpc3Bvc2UoKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICB1cGRhdGVDb21wb25lbnQoY29tcG9uZW50OiBEaXNwb3NhYmxlQ29tcG9uZW50TGlrZSkge1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyLmZpcmVFdmVudChuZXcgRGlzcG9zYWJsZUNvbXBvbmVudFVwZGF0ZWQoZ2V0Q29tcG9uZW50SWQoY29tcG9uZW50KSwgY29tcG9uZW50KSlcbiAgfVxuXG4gIGdldENvbXBvbmVudEdyb3VwKC4uLnJlcXVpcmVzOiBDb21wb25lbnRDb25zdHJ1Y3Rvcjxhbnk+W10pIHtcbiAgICAvLyBUT0RPOiBtZW1vaXplP1xuICAgIGNvbnN0IGNvbXBvbmVudEdyb3VwID0gbmV3IENvbXBvbmVudEdyb3VwKC4uLnJlcXVpcmVzKVxuXG4gICAgY29tcG9uZW50R3JvdXAuYWN0aXZlID0gdHJ1ZVxuXG4gICAgY29uc3QgcmVxdWlyZXNOYW1lcyA9IGNvbXBvbmVudEdyb3VwLnJlcXVpcmVzTmFtZXNcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVxdWlyZXNOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY29tcG9uZW50TmFtZSA9IHJlcXVpcmVzTmFtZXNbaV1cblxuICAgICAgbGV0IGNvbXBvbmVudEdyb3VwcyA9IHRoaXMuX2NvbXBvbmVudEdyb3Vwc1tjb21wb25lbnROYW1lXVxuXG4gICAgICBpZiAoIWNvbXBvbmVudEdyb3Vwcykge1xuICAgICAgICB0aGlzLl9jb21wb25lbnRHcm91cHNbY29tcG9uZW50TmFtZV0gPSBjb21wb25lbnRHcm91cHMgPSBbXVxuICAgICAgfVxuXG4gICAgICBpZiAoY29tcG9uZW50R3JvdXBzLmluZGV4T2YoY29tcG9uZW50R3JvdXApID09PSAtMSkge1xuICAgICAgICBjb21wb25lbnRHcm91cHMucHVzaChjb21wb25lbnRHcm91cClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCBlbnRpdHlJZCBpbiB0aGlzLl9lbnRpdGllcykge1xuICAgICAgdGhpcy5jaGVja1JlcXVpcmVtZW50cyh0aGlzLl9lbnRpdGllc1tlbnRpdHlJZF0sIGNvbXBvbmVudEdyb3VwKVxuICAgIH1cblxuICAgIHJldHVybiBjb21wb25lbnRHcm91cFxuICB9XG5cbiAgcmVtb3ZlQ29tcG9uZW50R3JvdXAoY29tcG9uZW50R3JvdXA6IENvbXBvbmVudEdyb3VwKSB7XG4gICAgaWYgKGNvbXBvbmVudEdyb3VwLmFjdGl2ZSkge1xuICAgICAgY29tcG9uZW50R3JvdXAuYWN0aXZlID0gZmFsc2VcbiAgICAgIGNvbnN0IHJlcXVpcmVzTmFtZXMgPSBjb21wb25lbnRHcm91cC5yZXF1aXJlc05hbWVzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcXVpcmVzTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50TmFtZSA9IHJlcXVpcmVzTmFtZXNbaV1cblxuICAgICAgICBsZXQgY29tcG9uZW50R3JvdXBzID0gdGhpcy5fY29tcG9uZW50R3JvdXBzW2NvbXBvbmVudE5hbWVdXG5cbiAgICAgICAgaWYgKGNvbXBvbmVudEdyb3Vwcykge1xuICAgICAgICAgIGNvbnN0IGlkeCA9IGNvbXBvbmVudEdyb3Vwcy5pbmRleE9mKGNvbXBvbmVudEdyb3VwKVxuICAgICAgICAgIGlmIChpZHggIT09IC0xKSB7XG4gICAgICAgICAgICBjb21wb25lbnRHcm91cHMuc3BsaWNlKGlkeCwgMSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcHJpdmF0ZSByZWdpc3RlclN5c3RlbShzeXN0ZW06IElTeXN0ZW0pIHtcbiAgICBzeXN0ZW0uYWN0aXZlID0gdHJ1ZVxuXG4gICAgaWYgKHN5c3RlbS5hY3RpdmF0ZSkge1xuICAgICAgc3lzdGVtLmFjdGl2YXRlKHRoaXMpXG4gICAgfVxuXG4gICAgdGhpcy5zaW1wbGVTeXN0ZW1zLnB1c2goc3lzdGVtKVxuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1JlcXVpcmVtZW50c0FuZEFkZChlbnRpdHk6IElFbnRpdHkpIHtcbiAgICBpZiAoIWVudGl0eS5pc0FkZGVkVG9FbmdpbmUoKSkgcmV0dXJuXG5cbiAgICBmb3IgKGxldCBjb21wb25lbnROYW1lIGluIGVudGl0eS5jb21wb25lbnRzKSB7XG4gICAgICBpZiAoIShjb21wb25lbnROYW1lIGluIHRoaXMuZW50aXR5TGlzdHMpKSB7XG4gICAgICAgIHRoaXMuZW50aXR5TGlzdHNbY29tcG9uZW50TmFtZV0gPSB7fVxuICAgICAgfVxuXG4gICAgICB0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdW2VudGl0eS51dWlkXSA9IGVudGl0eVxuXG4gICAgICBjb25zdCBjb21wb25lbnRHcm91cHMgPSB0aGlzLl9jb21wb25lbnRHcm91cHNbY29tcG9uZW50TmFtZV1cblxuICAgICAgaWYgKGNvbXBvbmVudEdyb3Vwcykge1xuICAgICAgICBmb3IgKGxldCBzeXN0ZW1JbmRleCBpbiBjb21wb25lbnRHcm91cHMpIHtcbiAgICAgICAgICB0aGlzLmNoZWNrUmVxdWlyZW1lbnRzKGVudGl0eSwgY29tcG9uZW50R3JvdXBzW3N5c3RlbUluZGV4XSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaW1wbGVTeXN0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzeXN0ZW0gPSB0aGlzLnNpbXBsZVN5c3RlbXNbaV1cblxuICAgICAgaWYgKHN5c3RlbS5vbkFkZEVudGl0eSkge1xuICAgICAgICBzeXN0ZW0ub25BZGRFbnRpdHkoZW50aXR5KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tSZXF1aXJlbWVudHMoZW50aXR5OiBJRW50aXR5LCBzeXN0ZW06IENvbXBvbmVudEdyb3VwKSB7XG4gICAgaWYgKHN5c3RlbS5tZWV0c1JlcXVpcmVtZW50cyhlbnRpdHkpKSB7XG4gICAgICBpZiAoIXN5c3RlbS5oYXNFbnRpdHkoZW50aXR5KSkge1xuICAgICAgICBzeXN0ZW0uYWRkRW50aXR5KGVudGl0eSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN5c3RlbS5oYXNFbnRpdHkoZW50aXR5KSkge1xuICAgICAgICBzeXN0ZW0ucmVtb3ZlRW50aXR5KGVudGl0eSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNvbXBvbmVudEFkZGVkSGFuZGxlcihldmVudDogQ29tcG9uZW50QWRkZWQpIHtcbiAgICBjb25zdCB7IGVudGl0eSwgY29tcG9uZW50TmFtZSB9ID0gZXZlbnRcblxuICAgIGlmICghZW50aXR5LmlzQWRkZWRUb0VuZ2luZSgpKSByZXR1cm5cblxuICAgIGlmICghdGhpcy5lbnRpdHlMaXN0c1tjb21wb25lbnROYW1lXSkge1xuICAgICAgdGhpcy5lbnRpdHlMaXN0c1tjb21wb25lbnROYW1lXSA9IHsgW2VudGl0eS51dWlkXTogZW50aXR5IH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbnRpdHlMaXN0c1tjb21wb25lbnROYW1lXVtlbnRpdHkudXVpZF0gPSBlbnRpdHlcbiAgICB9XG5cbiAgICBjb25zdCBjb21wb25lbnRHcm91cHMgPSB0aGlzLl9jb21wb25lbnRHcm91cHNbY29tcG9uZW50TmFtZV1cblxuICAgIGlmIChjb21wb25lbnRHcm91cHMpIHtcbiAgICAgIGZvciAobGV0IGkgaW4gY29tcG9uZW50R3JvdXBzKSB7XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlbWVudHMoZW50aXR5LCBjb21wb25lbnRHcm91cHNbaV0pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjb21wb25lbnRSZW1vdmVkSGFuZGxlcihldmVudDogQ29tcG9uZW50UmVtb3ZlZCkge1xuICAgIC8vIEluIGNhc2UgYSBzaW5nbGUgY29tcG9uZW50IGdldHMgcmVtb3ZlZCBmcm9tIGFuIGVudGl0eSwgd2UgaW5mb3JtXG4gICAgLy8gYWxsIHN5c3RlbXMgdGhhdCB0aGlzIGVudGl0eSBsb3N0IHRoaXMgc3BlY2lmaWMgY29tcG9uZW50LlxuICAgIGNvbnN0IHsgZW50aXR5LCBjb21wb25lbnROYW1lIH0gPSBldmVudFxuXG4gICAgaWYgKCFlbnRpdHkuaXNBZGRlZFRvRW5naW5lKCkpIHJldHVyblxuXG4gICAgZGVsZXRlIHRoaXMuZW50aXR5TGlzdHNbY29tcG9uZW50TmFtZV1bZW50aXR5LnV1aWRdXG5cbiAgICBjb25zdCBjb21wb25lbnRHcm91cHMgPSB0aGlzLl9jb21wb25lbnRHcm91cHNbY29tcG9uZW50TmFtZV1cblxuICAgIGlmIChjb21wb25lbnRHcm91cHMpIHtcbiAgICAgIGZvciAobGV0IGkgaW4gY29tcG9uZW50R3JvdXBzKSB7XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlbWVudHMoZW50aXR5LCBjb21wb25lbnRHcm91cHNbaV0pXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/Engine.ts?')},"./packages/decentraland-ecs/src/ecs/Entity.ts":
/*!*****************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/Entity.ts ***!
  \*****************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Component_1 = __webpack_require__(/*! ./Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nvar IEntity_1 = __webpack_require__(/*! ./IEntity */ "./packages/decentraland-ecs/src/ecs/IEntity.ts");\nvar helpers_1 = __webpack_require__(/*! ./helpers */ "./packages/decentraland-ecs/src/ecs/helpers.ts");\n// tslint:disable:no-use-before-declare\n/**\n * @public\n */\nvar Entity = /** @class */ (function () {\n    function Entity(name) {\n        this.name = name;\n        this.children = {};\n        this.eventManager = null;\n        this.alive = false;\n        this.uuid = helpers_1.newId(\'E\');\n        this.components = {};\n        // @internal\n        this.engine = null;\n        // @internal\n        this._parent = null;\n        // stub\n    }\n    /**\n     * Adds or replaces a component in the entity.\n     * @param component - component instance.\n     */\n    Entity.prototype.addComponentOrReplace = function (component) {\n        if (typeof component === \'function\') {\n            throw new Error(\'You passed a function or class as a component, an instance of component is expected\');\n        }\n        if (typeof component !== \'object\') {\n            throw new Error("You passed a " + typeof component + ", an instance of component is expected");\n        }\n        var componentName = Component_1.getComponentName(component);\n        if (this.components[componentName]) {\n            if (this.components[componentName] === component) {\n                return component;\n            }\n            this.removeComponent(this.components[componentName], false);\n        }\n        return this.addComponent(component);\n    };\n    Entity.prototype.hasComponent = function (component) {\n        var typeOfComponent = typeof component;\n        if (typeOfComponent !== \'string\' && typeOfComponent !== \'object\' && typeOfComponent !== \'function\') {\n            throw new Error(\'Entity#has(component): component is not a class, name or instance\');\n        }\n        if (component == null)\n            return false;\n        var componentName = typeOfComponent === \'string\' ? component : Component_1.getComponentName(component);\n        var storedComponent = this.components[componentName];\n        if (!storedComponent) {\n            return false;\n        }\n        if (typeOfComponent === \'object\') {\n            return storedComponent === component;\n        }\n        if (typeOfComponent === \'function\') {\n            return storedComponent instanceof component;\n        }\n        return true;\n    };\n    Entity.prototype.getComponent = function (component) {\n        var typeOfComponent = typeof component;\n        if (typeOfComponent !== \'string\' && typeOfComponent !== \'function\') {\n            throw new Error(\'Entity#get(component): component is not a class or name\');\n        }\n        var componentName = typeOfComponent === \'string\' ? component : Component_1.getComponentName(component);\n        var storedComponent = this.components[componentName];\n        if (!storedComponent) {\n            throw new Error("Can not get component \\"" + componentName + "\\" from entity \\"" + this.identifier + "\\"");\n        }\n        if (typeOfComponent === \'function\') {\n            if (storedComponent instanceof component) {\n                return storedComponent;\n            }\n            else {\n                throw new Error("Can not get component \\"" + componentName + "\\" from entity \\"" + this.identifier + "\\" (by instance)");\n            }\n        }\n        return storedComponent;\n    };\n    Entity.prototype.getComponentOrNull = function (component) {\n        var typeOfComponent = typeof component;\n        if (typeOfComponent !== \'string\' && typeOfComponent !== \'function\') {\n            throw new Error(\'Entity#getOrNull(component): component is not a class or name\');\n        }\n        var componentName = typeOfComponent === \'string\' ? component : Component_1.getComponentName(component);\n        var storedComponent = this.components[componentName];\n        if (!storedComponent) {\n            return null;\n        }\n        if (typeOfComponent === \'function\') {\n            if (storedComponent instanceof component) {\n                return storedComponent;\n            }\n            else {\n                return null;\n            }\n        }\n        return storedComponent;\n    };\n    /**\n     * Gets a component, if it doesn\'t exist, it creates the component and returns it.\n     * @param component - component class\n     */\n    Entity.prototype.getComponentOrCreate = function (component) {\n        if (typeof component !== \'function\') {\n            throw new Error(\'Entity#getOrCreate(component): component is not a class\');\n        }\n        var ret = this.getComponentOrNull(component);\n        if (!ret) {\n            ret = new component();\n            // Safe-guard to only add registered components to entities\n            Component_1.getComponentName(ret);\n            this.addComponentOrReplace(ret);\n        }\n        return ret;\n    };\n    /**\n     * Adds a component. If the component already exist, it throws an Error.\n     * @param component - component instance.\n     */\n    Entity.prototype.addComponent = function (component) {\n        if (typeof component !== \'object\') {\n            throw new Error(\'Entity#add(component): You passed a function or class as a component, an instance of component is expected\');\n        }\n        var componentName = Component_1.getComponentName(component);\n        var classId = Component_1.getComponentClassId(component);\n        if (this.components[componentName]) {\n            throw new Error("A component of type \\"" + componentName + "\\" is already present in entity \\"" + this.identifier + "\\"");\n        }\n        this.components[componentName] = component;\n        if (this.eventManager) {\n            this.eventManager.fireEvent(new IEntity_1.ComponentAdded(this, componentName, classId));\n        }\n        var storedComponent = component;\n        if (typeof storedComponent.addedToEntity === \'function\') {\n            storedComponent.addedToEntity(this);\n        }\n        return component;\n    };\n    Entity.prototype.removeComponent = function (component, triggerRemovedEvent) {\n        if (triggerRemovedEvent === void 0) { triggerRemovedEvent = true; }\n        var typeOfComponent = typeof component;\n        if (typeOfComponent !== \'string\' && typeOfComponent !== \'function\' && typeOfComponent !== \'object\') {\n            throw new Error(\'Entity#remove(component): component is not a class, class or name\');\n        }\n        var componentName = typeOfComponent === \'string\' ? component : Component_1.getComponentName(component);\n        var storedComponent = this.components[componentName];\n        if (!storedComponent) {\n            helpers_1.log("Entity Warning: Trying to remove inexisting component \\"" + componentName + "\\" from entity \\"" + this.identifier + "\\"");\n            return;\n        }\n        if (typeOfComponent === \'function\') {\n            if (storedComponent instanceof component) {\n                delete this.components[componentName];\n                if (storedComponent) {\n                    if (triggerRemovedEvent && this.eventManager) {\n                        this.eventManager.fireEvent(new IEntity_1.ComponentRemoved(this, componentName, storedComponent));\n                    }\n                    if (typeof storedComponent.removedFromEntity === \'function\') {\n                        storedComponent.removedFromEntity(this);\n                    }\n                }\n                return;\n            }\n            else {\n                helpers_1.log("Entity Warning: Trying to remove wrong (by constructor) component \\"" + componentName + "\\" from entity \\"" + this.identifier + "\\"");\n                return;\n            }\n        }\n        delete this.components[componentName];\n        if (storedComponent) {\n            if (triggerRemovedEvent && this.eventManager) {\n                this.eventManager.fireEvent(new IEntity_1.ComponentRemoved(this, componentName, storedComponent));\n            }\n            if (typeof storedComponent.removedFromEntity === \'function\') {\n                storedComponent.removedFromEntity(this);\n            }\n        }\n        return;\n    };\n    /**\n     * Returns true if the entity is already added to the engine.\n     * Returns false if no engine was defined.\n     */\n    Entity.prototype.isAddedToEngine = function () {\n        if (this.engine && (this.uuid in this.engine.entities || this.engine.rootEntity === this)) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Sets the parent entity\n     */\n    Entity.prototype.setParent = function (_parent) {\n        var newParent = !_parent && this.engine ? this.engine.rootEntity : _parent;\n        var currentParent = this.getParent();\n        if (newParent === this) {\n            throw new Error("Failed to set parent for entity \\"" + this.identifier + "\\": An entity can\'t set itself as a its own parent");\n        }\n        if (newParent === currentParent) {\n            return this;\n        }\n        var circularAncestor = this.getCircularAncestor(newParent);\n        if (circularAncestor) {\n            throw new Error("Failed to set parent for entity \\"" + this.identifier + "\\": Circular parent references are not allowed (See entity \\"" + circularAncestor + "\\")");\n        }\n        if (currentParent) {\n            delete currentParent.children[this.uuid];\n        }\n        if (newParent !== null && newParent.uuid !== \'0\') {\n            if (!newParent.isAddedToEngine() && this.isAddedToEngine()) {\n                // tslint:disable-next-line:semicolon\n                ;\n                this.engine.removeEntity(this);\n            }\n            if (newParent.isAddedToEngine() && !this.isAddedToEngine()) {\n                // tslint:disable-next-line:semicolon\n                ;\n                newParent.engine.addEntity(this);\n            }\n        }\n        this._parent = newParent || null;\n        this.registerAsChild();\n        if (this.eventManager && this.engine) {\n            this.eventManager.fireEvent(new IEntity_1.ParentChanged(this, newParent));\n        }\n        return this;\n    };\n    /**\n     * Gets the parent entity\n     */\n    Entity.prototype.getParent = function () {\n        return this._parent;\n    };\n    Object.defineProperty(Entity.prototype, "identifier", {\n        get: function () {\n            return this.name || this.uuid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Entity.prototype.getCircularAncestor = function (ent) {\n        var root = this.engine ? this.engine.rootEntity : null;\n        var e = ent;\n        while (e && e !== root) {\n            var parent_1 = e.getParent();\n            if (parent_1 === this) {\n                return e.uuid;\n            }\n            e = parent_1;\n        }\n        return null;\n    };\n    Entity.prototype.registerAsChild = function () {\n        var parent = this.getParent();\n        if (this.uuid && parent) {\n            parent.children[this.uuid] = this;\n        }\n    };\n    return Entity;\n}());\nexports.Entity = Entity;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/Entity.ts?')},"./packages/decentraland-ecs/src/ecs/EventManager.ts":
/*!***********************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/EventManager.ts ***!
  \***********************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar helpers_1 = __webpack_require__(/*! ./helpers */ \"./packages/decentraland-ecs/src/ecs/helpers.ts\");\nvar eventNameSymbol = '__event_name__';\nvar takenEventNames = [];\nfunction getEventNameFromConstructor(ctor) {\n    if (!(eventNameSymbol in ctor) || typeof ctor[eventNameSymbol] !== 'string') {\n        throw new Error('The EventConstructor is not registered');\n    }\n    return ctor[eventNameSymbol];\n}\n/**\n * @public\n */\nvar EventManager = /** @class */ (function () {\n    function EventManager() {\n        this.listeners = {};\n    }\n    EventManager.prototype.addListener = function (eventClass, listener, listenerFunction) {\n        if (!eventClass || typeof eventClass !== 'function') {\n            throw new Error('Invalid EventConstructor');\n        }\n        var eventName = getEventNameFromConstructor(eventClass);\n        var listeners = this.listeners[eventName];\n        if (!listeners) {\n            listeners = this.listeners[eventName] = [];\n        }\n        for (var i = 0; i < listeners.length; i++) {\n            var x = listeners[i];\n            if (x.listener === listener) {\n                throw new Error('The provided listener is already registered');\n            }\n        }\n        listeners.push({\n            listener: listener,\n            fn: listenerFunction\n        });\n        return this;\n    };\n    EventManager.prototype.removeListener = function (listener, eventClass) {\n        if (!eventClass || typeof eventClass !== 'function') {\n            throw new Error('Invalid EventConstructor');\n        }\n        var eventName = getEventNameFromConstructor(eventClass);\n        var listeners = this.listeners[eventName];\n        if (!listeners) {\n            return false;\n        }\n        for (var i = 0; i < listeners.length; i++) {\n            var x = listeners[i];\n            if (x.listener === listener) {\n                listeners.splice(i, 1);\n                return true;\n            }\n        }\n        return false;\n    };\n    EventManager.prototype.fireEvent = function (event) {\n        var eventName = getEventNameFromConstructor(event.constructor);\n        var listeners = this.listeners[eventName];\n        if (listeners) {\n            for (var i = 0; i < listeners.length; i++) {\n                try {\n                    var l = listeners[i];\n                    l.fn.call(l.listener, event);\n                }\n                catch (e) {\n                    helpers_1.error(e);\n                }\n            }\n        }\n        return this;\n    };\n    return EventManager;\n}());\nexports.EventManager = EventManager;\n/**\n * @public\n */\nfunction EventConstructor() {\n    var eventName = helpers_1.newId('EV');\n    if (takenEventNames.indexOf(eventName) !== -1) {\n        throw new Error(\"The event name \" + eventName + \" is already taken\");\n    }\n    takenEventNames.push(eventName);\n    return function (target) {\n        // tslint:disable-next-line:semicolon\n        ;\n        target[eventNameSymbol] = eventName;\n        return target;\n    };\n}\nexports.EventConstructor = EventConstructor;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Vjcy9FdmVudE1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBd0M7QUFFeEMsSUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUE7QUFXeEMsSUFBTSxlQUFlLEdBQWEsRUFBRSxDQUFBO0FBRXBDLFNBQVMsMkJBQTJCLENBQUksSUFBMEI7SUFDaEUsSUFBSSxDQUFDLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUMzRSxNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUE7S0FDMUQ7SUFDRCxPQUFRLElBQUksQ0FBQyxlQUFlLENBQW1CLENBQUE7QUFDakQsQ0FBQztBQU9EOztHQUVHO0FBQ0g7SUFBQTtRQUNVLGNBQVMsR0FBOEMsRUFBRSxDQUFBO0lBdUVuRSxDQUFDO0lBckVDLGtDQUFXLEdBQVgsVUFBa0IsVUFBZ0MsRUFBRSxRQUFXLEVBQUUsZ0JBQTZDO1FBQzVHLElBQUksQ0FBQyxVQUFVLElBQUksT0FBUSxVQUFrQixLQUFLLFVBQVUsRUFBRTtZQUM1RCxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUE7U0FDNUM7UUFDRCxJQUFNLFNBQVMsR0FBRywyQkFBMkIsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUV6RCxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRXpDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUE7U0FDM0M7UUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN6QyxJQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDdEIsSUFBSSxDQUFDLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRTtnQkFDM0IsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFBO2FBQy9EO1NBQ0Y7UUFFRCxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQ2IsUUFBUSxVQUFBO1lBQ1IsRUFBRSxFQUFFLGdCQUFnQjtTQUNyQixDQUFDLENBQUE7UUFFRixPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFFRCxxQ0FBYyxHQUFkLFVBQWtCLFFBQVcsRUFBRSxVQUFrQztRQUMvRCxJQUFJLENBQUMsVUFBVSxJQUFJLE9BQVEsVUFBa0IsS0FBSyxVQUFVLEVBQUU7WUFDNUQsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFBO1NBQzVDO1FBRUQsSUFBTSxTQUFTLEdBQUcsMkJBQTJCLENBQUMsVUFBVSxDQUFDLENBQUE7UUFFekQsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUV6QyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsT0FBTyxLQUFLLENBQUE7U0FDYjtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3pDLElBQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUN0QixJQUFJLENBQUMsQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO2dCQUMzQixTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtnQkFDdEIsT0FBTyxJQUFJLENBQUE7YUFDWjtTQUNGO1FBRUQsT0FBTyxLQUFLLENBQUE7SUFDZCxDQUFDO0lBRUQsZ0NBQVMsR0FBVCxVQUE0QixLQUFRO1FBQ2xDLElBQU0sU0FBUyxHQUFHLDJCQUEyQixDQUFFLEtBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUV6RSxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRXpDLElBQUksU0FBUyxFQUFFO1lBQ2IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3pDLElBQUk7b0JBQ0YsSUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO29CQUN0QixDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFBO2lCQUM3QjtnQkFBQyxPQUFPLENBQUMsRUFBRTtvQkFDVixlQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7aUJBQ1Q7YUFDRjtTQUNGO1FBRUQsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQUFDLEFBeEVELElBd0VDO0FBeEVZLG9DQUFZO0FBMEV6Qjs7R0FFRztBQUNILFNBQWdCLGdCQUFnQjtJQUM5QixJQUFNLFNBQVMsR0FBRyxlQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFN0IsSUFBSSxlQUFlLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQzdDLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQWtCLFNBQVMsc0JBQW1CLENBQUMsQ0FBQTtLQUNoRTtJQUVELGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFL0IsT0FBTyxVQUE2QixNQUFpQjtRQUNuRCxxQ0FBcUM7UUFDckMsQ0FBQztRQUFDLE1BQWMsQ0FBQyxlQUFlLENBQUMsR0FBRyxTQUFTLENBQUE7UUFDN0MsT0FBTyxNQUFNLENBQUE7SUFDZixDQUFDLENBQUE7QUFDSCxDQUFDO0FBZEQsNENBY0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvciwgbmV3SWQgfSBmcm9tICcuL2hlbHBlcnMnXG5cbmNvbnN0IGV2ZW50TmFtZVN5bWJvbCA9ICdfX2V2ZW50X25hbWVfXydcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUV2ZW50Q29uc3RydWN0b3I8VD4ge1xuICAvLyBAaW50ZXJuYWxcbiAgW2V2ZW50TmFtZVN5bWJvbF0/OiBzdHJpbmdcbiAgbmV3ICguLi5hcmdzOiBhbnlbXSk6IFRcbn1cblxuY29uc3QgdGFrZW5FdmVudE5hbWVzOiBzdHJpbmdbXSA9IFtdXG5cbmZ1bmN0aW9uIGdldEV2ZW50TmFtZUZyb21Db25zdHJ1Y3RvcjxUPihjdG9yOiBJRXZlbnRDb25zdHJ1Y3RvcjxUPik6IHN0cmluZyB7XG4gIGlmICghKGV2ZW50TmFtZVN5bWJvbCBpbiBjdG9yKSB8fCB0eXBlb2YgY3RvcltldmVudE5hbWVTeW1ib2xdICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIEV2ZW50Q29uc3RydWN0b3IgaXMgbm90IHJlZ2lzdGVyZWQnKVxuICB9XG4gIHJldHVybiAoY3RvcltldmVudE5hbWVTeW1ib2xdIGFzIGFueSkgYXMgc3RyaW5nXG59XG5cbnR5cGUgRXZlbnRMaXN0ZW5lcjxYPiA9IHtcbiAgbGlzdGVuZXI6IFhcbiAgZm46ICh0aGlzOiBYLCBldmVudDogYW55KSA9PiB2b2lkXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRXZlbnRNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IFJlY29yZDxzdHJpbmcsIEFycmF5PEV2ZW50TGlzdGVuZXI8YW55Pj4+ID0ge31cblxuICBhZGRMaXN0ZW5lcjxULCBYPihldmVudENsYXNzOiBJRXZlbnRDb25zdHJ1Y3RvcjxUPiwgbGlzdGVuZXI6IFgsIGxpc3RlbmVyRnVuY3Rpb246ICh0aGlzOiBYLCBldmVudDogVCkgPT4gdm9pZCkge1xuICAgIGlmICghZXZlbnRDbGFzcyB8fCB0eXBlb2YgKGV2ZW50Q2xhc3MgYXMgYW55KSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEV2ZW50Q29uc3RydWN0b3InKVxuICAgIH1cbiAgICBjb25zdCBldmVudE5hbWUgPSBnZXRFdmVudE5hbWVGcm9tQ29uc3RydWN0b3IoZXZlbnRDbGFzcylcblxuICAgIGxldCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdXG5cbiAgICBpZiAoIWxpc3RlbmVycykge1xuICAgICAgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXSA9IFtdXG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHggPSBsaXN0ZW5lcnNbaV1cbiAgICAgIGlmICh4Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwcm92aWRlZCBsaXN0ZW5lciBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQnKVxuICAgICAgfVxuICAgIH1cblxuICAgIGxpc3RlbmVycy5wdXNoKHtcbiAgICAgIGxpc3RlbmVyLFxuICAgICAgZm46IGxpc3RlbmVyRnVuY3Rpb25cbiAgICB9KVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHJlbW92ZUxpc3RlbmVyPFg+KGxpc3RlbmVyOiBYLCBldmVudENsYXNzOiBJRXZlbnRDb25zdHJ1Y3Rvcjxhbnk+KTogYm9vbGVhbiB7XG4gICAgaWYgKCFldmVudENsYXNzIHx8IHR5cGVvZiAoZXZlbnRDbGFzcyBhcyBhbnkpICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgRXZlbnRDb25zdHJ1Y3RvcicpXG4gICAgfVxuXG4gICAgY29uc3QgZXZlbnROYW1lID0gZ2V0RXZlbnROYW1lRnJvbUNvbnN0cnVjdG9yKGV2ZW50Q2xhc3MpXG5cbiAgICBsZXQgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXVxuXG4gICAgaWYgKCFsaXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB4ID0gbGlzdGVuZXJzW2ldXG4gICAgICBpZiAoeC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZmlyZUV2ZW50PFQgZXh0ZW5kcyBvYmplY3Q+KGV2ZW50OiBUKSB7XG4gICAgY29uc3QgZXZlbnROYW1lID0gZ2V0RXZlbnROYW1lRnJvbUNvbnN0cnVjdG9yKChldmVudCBhcyBhbnkpLmNvbnN0cnVjdG9yKVxuXG4gICAgbGV0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV1cblxuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgbCA9IGxpc3RlbmVyc1tpXVxuICAgICAgICAgIGwuZm4uY2FsbChsLmxpc3RlbmVyLCBldmVudClcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGVycm9yKGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gRXZlbnRDb25zdHJ1Y3RvcigpOiBDbGFzc0RlY29yYXRvciB7XG4gIGNvbnN0IGV2ZW50TmFtZSA9IG5ld0lkKCdFVicpXG5cbiAgaWYgKHRha2VuRXZlbnROYW1lcy5pbmRleE9mKGV2ZW50TmFtZSkgIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgZXZlbnQgbmFtZSAke2V2ZW50TmFtZX0gaXMgYWxyZWFkeSB0YWtlbmApXG4gIH1cblxuICB0YWtlbkV2ZW50TmFtZXMucHVzaChldmVudE5hbWUpXG5cbiAgcmV0dXJuIDxURnVuY3Rpb24gZXh0ZW5kcyBGdW5jdGlvbj4odGFyZ2V0OiBURnVuY3Rpb24pOiBURnVuY3Rpb24gfCB2b2lkID0+IHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c2VtaWNvbG9uXG4gICAgOyh0YXJnZXQgYXMgYW55KVtldmVudE5hbWVTeW1ib2xdID0gZXZlbnROYW1lXG4gICAgcmV0dXJuIHRhcmdldFxuICB9XG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/EventManager.ts?")},"./packages/decentraland-ecs/src/ecs/IEntity.ts":
/*!******************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/IEntity.ts ***!
  \******************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar EventManager_1 = __webpack_require__(/*! ./EventManager */ "./packages/decentraland-ecs/src/ecs/EventManager.ts");\n/**\n * @public\n */\nvar ComponentRemoved = /** @class */ (function () {\n    function ComponentRemoved(entity, componentName, component) {\n        this.entity = entity;\n        this.componentName = componentName;\n        this.component = component;\n        // stub\n    }\n    ComponentRemoved = __decorate([\n        EventManager_1.EventConstructor()\n    ], ComponentRemoved);\n    return ComponentRemoved;\n}());\nexports.ComponentRemoved = ComponentRemoved;\n/**\n * @public\n */\nvar ComponentAdded = /** @class */ (function () {\n    function ComponentAdded(entity, componentName, classId) {\n        this.entity = entity;\n        this.componentName = componentName;\n        this.classId = classId;\n        // stub\n    }\n    ComponentAdded = __decorate([\n        EventManager_1.EventConstructor()\n    ], ComponentAdded);\n    return ComponentAdded;\n}());\nexports.ComponentAdded = ComponentAdded;\n/**\n * @public\n */\nvar ParentChanged = /** @class */ (function () {\n    function ParentChanged(entity, parent) {\n        this.entity = entity;\n        this.parent = parent;\n        // stub\n    }\n    ParentChanged = __decorate([\n        EventManager_1.EventConstructor()\n    ], ParentChanged);\n    return ParentChanged;\n}());\nexports.ParentChanged = ParentChanged;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSUVudGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lY3MvSUVudGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNBLCtDQUErRDtBQTZFL0Q7O0dBRUc7QUFFSDtJQUNFLDBCQUFtQixNQUFlLEVBQVMsYUFBcUIsRUFBUyxTQUF3QjtRQUE5RSxXQUFNLEdBQU4sTUFBTSxDQUFTO1FBQVMsa0JBQWEsR0FBYixhQUFhLENBQVE7UUFBUyxjQUFTLEdBQVQsU0FBUyxDQUFlO1FBQy9GLE9BQU87SUFDVCxDQUFDO0lBSFUsZ0JBQWdCO1FBRDVCLCtCQUFnQixFQUFFO09BQ04sZ0JBQWdCLENBSTVCO0lBQUQsdUJBQUM7Q0FBQSxBQUpELElBSUM7QUFKWSw0Q0FBZ0I7QUFNN0I7O0dBRUc7QUFFSDtJQUNFLHdCQUFtQixNQUFlLEVBQVMsYUFBcUIsRUFBUyxPQUFzQjtRQUE1RSxXQUFNLEdBQU4sTUFBTSxDQUFTO1FBQVMsa0JBQWEsR0FBYixhQUFhLENBQVE7UUFBUyxZQUFPLEdBQVAsT0FBTyxDQUFlO1FBQzdGLE9BQU87SUFDVCxDQUFDO0lBSFUsY0FBYztRQUQxQiwrQkFBZ0IsRUFBRTtPQUNOLGNBQWMsQ0FJMUI7SUFBRCxxQkFBQztDQUFBLEFBSkQsSUFJQztBQUpZLHdDQUFjO0FBTTNCOztHQUVHO0FBRUg7SUFDRSx1QkFBbUIsTUFBZSxFQUFTLE1BQXNCO1FBQTlDLFdBQU0sR0FBTixNQUFNLENBQVM7UUFBUyxXQUFNLEdBQU4sTUFBTSxDQUFnQjtRQUMvRCxPQUFPO0lBQ1QsQ0FBQztJQUhVLGFBQWE7UUFEekIsK0JBQWdCLEVBQUU7T0FDTixhQUFhLENBSXpCO0lBQUQsb0JBQUM7Q0FBQSxBQUpELElBSUM7QUFKWSxzQ0FBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudExpa2UsIENvbXBvbmVudENvbnN0cnVjdG9yIH0gZnJvbSAnLi9Db21wb25lbnQnXG5pbXBvcnQgeyBFdmVudENvbnN0cnVjdG9yLCBFdmVudE1hbmFnZXIgfSBmcm9tICcuL0V2ZW50TWFuYWdlcidcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVN5c3RlbSB7XG4gIGFjdGl2ZT86IGJvb2xlYW5cblxuICBhY3RpdmF0ZT8oZW5naW5lOiBJRW5naW5lKTogdm9pZFxuICBkZWFjdGl2YXRlPygpOiB2b2lkXG5cbiAgdXBkYXRlPyhkdDogbnVtYmVyKTogdm9pZFxuXG4gIG9uQWRkRW50aXR5PyhlbnRpdHk6IElFbnRpdHkpOiB2b2lkXG4gIG9uUmVtb3ZlRW50aXR5PyhlbnRpdHk6IElFbnRpdHkpOiB2b2lkXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIElFbmdpbmUge1xuICByb290RW50aXR5OiBJRW50aXR5XG4gIHJlYWRvbmx5IGVudGl0aWVzOiBSZWFkb25seTxSZWNvcmQ8c3RyaW5nLCBJRW50aXR5Pj5cblxuICBhZGRFbnRpdHkoZW50aXR5OiBJRW50aXR5KTogdm9pZFxuICByZW1vdmVFbnRpdHkoZW50aXR5OiBJRW50aXR5KTogdm9pZFxuICBhZGRTeXN0ZW0oc3lzdGVtOiBJU3lzdGVtLCBwcmlvcml0eTogbnVtYmVyKTogdm9pZFxuICByZW1vdmVTeXN0ZW0oc3lzdGVtOiBJU3lzdGVtKTogdm9pZFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRW50aXR5IHtcbiAgY2hpbGRyZW46IFJlY29yZDxzdHJpbmcsIElFbnRpdHk+XG4gIGV2ZW50TWFuYWdlcjogRXZlbnRNYW5hZ2VyIHwgbnVsbFxuICBhbGl2ZTogYm9vbGVhblxuICByZWFkb25seSB1dWlkOiBzdHJpbmdcbiAgcmVhZG9ubHkgY29tcG9uZW50czogUmVjb3JkPHN0cmluZywgYW55PlxuXG4gIGlzQWRkZWRUb0VuZ2luZSgpOiBib29sZWFuXG4gIGdldFBhcmVudCgpOiBJRW50aXR5IHwgbnVsbFxuICBzZXRQYXJlbnQoZTogSUVudGl0eSk6IHZvaWRcblxuICBnZXRDb21wb25lbnQ8VCA9IGFueT4oY29tcG9uZW50OiBzdHJpbmcpOiBUXG4gIGdldENvbXBvbmVudDxUPihjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPFQ+KTogVFxuICBnZXRDb21wb25lbnQ8VD4oY29tcG9uZW50OiBDb21wb25lbnRDb25zdHJ1Y3RvcjxUPiB8IHN0cmluZyk6IFRcblxuICAvKipcbiAgICogR2V0cyBhIGNvbXBvbmVudCwgaWYgaXQgZG9lc24ndCBleGlzdCwgaXQgcmV0dXJucyBudWxsLlxuICAgKiBAcGFyYW0gY29tcG9uZW50IC0gY29tcG9uZW50IGNsYXNzIG9yIG5hbWVcbiAgICovXG4gIGdldENvbXBvbmVudE9yTnVsbDxUID0gYW55Pihjb21wb25lbnQ6IHN0cmluZyk6IFQgfCBudWxsXG4gIGdldENvbXBvbmVudE9yTnVsbDxUPihjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPFQ+KTogVCB8IG51bGxcbiAgZ2V0Q29tcG9uZW50T3JOdWxsPFQ+KGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD4gfCBzdHJpbmcpOiBUIHwgbnVsbFxuXG4gIGdldENvbXBvbmVudE9yQ3JlYXRlPFQ+KGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD4gJiB7IG5ldyAoKTogVCB9KTogVFxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY29tcG9uZW50LiBJZiB0aGUgY29tcG9uZW50IGFscmVhZHkgZXhpc3QsIGl0IHRocm93cyBhbiBFcnJvci5cbiAgICogQHBhcmFtIGNvbXBvbmVudCAtIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICovXG4gIGFkZENvbXBvbmVudDxUIGV4dGVuZHMgb2JqZWN0Pihjb21wb25lbnQ6IFQpOiB2b2lkXG5cbiAgYWRkQ29tcG9uZW50T3JSZXBsYWNlPFQgZXh0ZW5kcyBvYmplY3Q+KGNvbXBvbmVudDogVCk6IHZvaWRcblxuICByZW1vdmVDb21wb25lbnQoY29tcG9uZW50OiBzdHJpbmcsIHRyaWdnZXJSZW1vdmVkRXZlbnQ/OiBib29sZWFuKTogdm9pZFxuICByZW1vdmVDb21wb25lbnQ8VCBleHRlbmRzIG9iamVjdD4oY29tcG9uZW50OiBULCB0cmlnZ2VyUmVtb3ZlZEV2ZW50PzogYm9vbGVhbik6IHZvaWRcbiAgcmVtb3ZlQ29tcG9uZW50KGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8YW55PiwgdHJpZ2dlclJlbW92ZWRFdmVudD86IGJvb2xlYW4pOiB2b2lkXG4gIHJlbW92ZUNvbXBvbmVudChjb21wb25lbnQ6IG9iamVjdCB8IHN0cmluZyB8IEZ1bmN0aW9uLCB0cmlnZ2VyUmVtb3ZlZEV2ZW50OiBhbnkpOiB2b2lkXG5cbiAgaGFzQ29tcG9uZW50PFQgPSBhbnk+KGNvbXBvbmVudDogc3RyaW5nKTogYm9vbGVhblxuICBoYXNDb21wb25lbnQ8VD4oY29tcG9uZW50OiBDb21wb25lbnRDb25zdHJ1Y3RvcjxUPik6IGJvb2xlYW5cbiAgaGFzQ29tcG9uZW50PFQgZXh0ZW5kcyBvYmplY3Q+KGNvbXBvbmVudDogVCk6IGJvb2xlYW5cbiAgaGFzQ29tcG9uZW50PFQ+KGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD4gfCBzdHJpbmcpOiBib29sZWFuXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARXZlbnRDb25zdHJ1Y3RvcigpXG5leHBvcnQgY2xhc3MgQ29tcG9uZW50UmVtb3ZlZCB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlbnRpdHk6IElFbnRpdHksIHB1YmxpYyBjb21wb25lbnROYW1lOiBzdHJpbmcsIHB1YmxpYyBjb21wb25lbnQ6IENvbXBvbmVudExpa2UpIHtcbiAgICAvLyBzdHViXG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBFdmVudENvbnN0cnVjdG9yKClcbmV4cG9ydCBjbGFzcyBDb21wb25lbnRBZGRlZCB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlbnRpdHk6IElFbnRpdHksIHB1YmxpYyBjb21wb25lbnROYW1lOiBzdHJpbmcsIHB1YmxpYyBjbGFzc0lkOiBudW1iZXIgfCBudWxsKSB7XG4gICAgLy8gc3R1YlxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARXZlbnRDb25zdHJ1Y3RvcigpXG5leHBvcnQgY2xhc3MgUGFyZW50Q2hhbmdlZCB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlbnRpdHk6IElFbnRpdHksIHB1YmxpYyBwYXJlbnQ6IElFbnRpdHkgfCBudWxsKSB7XG4gICAgLy8gc3R1YlxuICB9XG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/IEntity.ts?')},"./packages/decentraland-ecs/src/ecs/Observable.ts":
/*!*********************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/Observable.ts ***!
  \*********************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError("Generator is already executing.");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === "number") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Task_1 = __webpack_require__(/*! ./Task */ "./packages/decentraland-ecs/src/ecs/Task.ts");\n/**\n * A class serves as a medium between the observable and its observers\n * @public\n */\nvar ObserverEventState = /** @class */ (function () {\n    /**\n     * Create a new EventState\n     * @param mask - defines the mask associated with this state\n     * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\n     * @param target - defines the original target of the state\n     * @param currentTarget - defines the current target of the state\n     */\n    function ObserverEventState(mask, skipNextObservers, target, currentTarget) {\n        if (skipNextObservers === void 0) { skipNextObservers = false; }\n        this.initalize(mask, skipNextObservers, target, currentTarget);\n    }\n    /**\n     * Initialize the current event state\n     * @param mask - defines the mask associated with this state\n     * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\n     * @param target - defines the original target of the state\n     * @param currentTarget - defines the current target of the state\n     * @returns the current event state\n     */\n    ObserverEventState.prototype.initalize = function (mask, skipNextObservers, target, currentTarget) {\n        if (skipNextObservers === void 0) { skipNextObservers = false; }\n        this.mask = mask;\n        this.skipNextObservers = skipNextObservers;\n        this.target = target;\n        this.currentTarget = currentTarget;\n        return this;\n    };\n    return ObserverEventState;\n}());\nexports.ObserverEventState = ObserverEventState;\n/**\n * Represent an Observer registered to a given Observable object.\n * @public\n */\nvar Observer = /** @class */ (function () {\n    /**\n     * Creates a new observer\n     * @param callback - defines the callback to call when the observer is notified\n     * @param mask - defines the mask of the observer (used to filter notifications)\n     * @param scope - defines the current scope used to restore the JS context\n     */\n    function Observer(\n    /**\n     * Defines the callback to call when the observer is notified\n     */\n    callback, \n    /**\n     * Defines the mask of the observer (used to filter notifications)\n     */\n    mask, \n    /**\n     * Defines the current scope used to restore the JS context\n     */\n    scope) {\n        if (scope === void 0) { scope = null; }\n        this.callback = callback;\n        this.mask = mask;\n        this.scope = scope;\n        /**\n         * Gets or sets a property defining that the observer as to be unregistered after the next notification\n         */\n        this.unregisterOnNextCall = false;\n        /** For internal usage */\n        this._willBeUnregistered = false;\n    }\n    return Observer;\n}());\nexports.Observer = Observer;\n/**\n * Represent a list of observers registered to multiple Observables object.\n * @public\n */\nvar MultiObserver = /** @class */ (function () {\n    function MultiObserver() {\n        this._observers = null;\n        this._observables = null;\n    }\n    /**\n     * Raise a callback when one of the observable will notify\n     * @param observables - defines a list of observables to watch\n     * @param callback - defines the callback to call on notification\n     * @param mask - defines the mask used to filter notifications\n     * @param scope - defines the current scope used to restore the JS context\n     * @returns the new MultiObserver\n     */\n    MultiObserver.Watch = function (observables, callback, mask, scope) {\n        var e_1, _a;\n        if (mask === void 0) { mask = -1; }\n        if (scope === void 0) { scope = null; }\n        var result = new MultiObserver();\n        result._observers = new Array();\n        result._observables = observables;\n        try {\n            for (var observables_1 = __values(observables), observables_1_1 = observables_1.next(); !observables_1_1.done; observables_1_1 = observables_1.next()) {\n                var observable = observables_1_1.value;\n                var observer = observable.add(callback, mask, false, scope);\n                if (observer) {\n                    result._observers.push(observer);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (observables_1_1 && !observables_1_1.done && (_a = observables_1.return)) _a.call(observables_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return result;\n    };\n    /**\n     * Release associated resources\n     */\n    MultiObserver.prototype.dispose = function () {\n        if (this._observers && this._observables) {\n            for (var index = 0; index < this._observers.length; index++) {\n                this._observables[index].remove(this._observers[index]);\n            }\n        }\n        this._observers = null;\n        this._observables = null;\n    };\n    return MultiObserver;\n}());\nexports.MultiObserver = MultiObserver;\n/**\n * The Observable class is a simple implementation of the Observable pattern.\n *\n * There\'s one slight particularity though: a given Observable can notify its observer using a particular mask value, only the Observers registered with this mask value will be notified.\n * This enable a more fine grained execution without having to rely on multiple different Observable objects.\n * For instance you may have a given Observable that have four different types of notifications: Move (mask = 0x01), Stop (mask = 0x02), Turn Right (mask = 0X04), Turn Left (mask = 0X08).\n * A given observer can register itself with only Move and Stop (mask = 0x03), then it will only be notified when one of these two occurs and will never be for Turn Left/Right.\n *\n * @public\n */\nvar Observable = /** @class */ (function () {\n    /**\n     * Creates a new observable\n     * @param onObserverAdded - defines a callback to call when a new observer is added\n     */\n    function Observable(onObserverAdded) {\n        this._observers = new Array();\n        this._onObserverAdded = null;\n        this._eventState = new ObserverEventState(0);\n        if (onObserverAdded) {\n            this._onObserverAdded = onObserverAdded;\n        }\n    }\n    /**\n     * Create a new Observer with the specified callback\n     * @param callback - the callback that will be executed for that Observer\n     * @param mask - the mask used to filter observers\n     * @param insertFirst - if true the callback will be inserted at the first position, hence executed before the others ones. If false (default behavior) the callback will be inserted at the last position, executed after all the others already present.\n     * @param scope - optional scope for the callback to be called from\n     * @param unregisterOnFirstCall - defines if the observer as to be unregistered after the next notification\n     * @returns the new observer created for the callback\n     */\n    Observable.prototype.add = function (callback, mask, insertFirst, scope, unregisterOnFirstCall) {\n        if (mask === void 0) { mask = -1; }\n        if (insertFirst === void 0) { insertFirst = false; }\n        if (scope === void 0) { scope = null; }\n        if (unregisterOnFirstCall === void 0) { unregisterOnFirstCall = false; }\n        if (!callback) {\n            return null;\n        }\n        var observer = new Observer(callback, mask, scope);\n        observer.unregisterOnNextCall = unregisterOnFirstCall;\n        if (insertFirst) {\n            this._observers.unshift(observer);\n        }\n        else {\n            this._observers.push(observer);\n        }\n        if (this._onObserverAdded) {\n            this._onObserverAdded(observer);\n        }\n        return observer;\n    };\n    /**\n     * Create a new Observer with the specified callback and unregisters after the next notification\n     * @param callback - the callback that will be executed for that Observer\n     * @returns the new observer created for the callback\n     */\n    Observable.prototype.addOnce = function (callback) {\n        return this.add(callback, undefined, undefined, undefined, true);\n    };\n    /**\n     * Remove an Observer from the Observable object\n     * @param observer - the instance of the Observer to remove\n     * @returns false if it doesn\'t belong to this Observable\n     */\n    Observable.prototype.remove = function (observer) {\n        if (!observer) {\n            return false;\n        }\n        var index = this._observers.indexOf(observer);\n        if (index !== -1) {\n            this._deferUnregister(observer);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Remove a callback from the Observable object\n     * @param callback - the callback to remove\n     * @param scope - optional scope. If used only the callbacks with this scope will be removed\n     * @returns false if it doesn\'t belong to this Observable\n     */\n    Observable.prototype.removeCallback = function (callback, scope) {\n        for (var index = 0; index < this._observers.length; index++) {\n            if (this._observers[index].callback === callback && (!scope || scope === this._observers[index].scope)) {\n                this._deferUnregister(this._observers[index]);\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Notify all Observers by calling their respective callback with the given data\n     * Will return true if all observers were executed, false if an observer set skipNextObservers to true, then prevent the subsequent ones to execute\n     * @param eventData - defines the data to send to all observers\n     * @param mask - defines the mask of the current notification (observers with incompatible mask (ie mask & observer.mask === 0) will not be notified)\n     * @param target - defines the original target of the state\n     * @param currentTarget - defines the current target of the state\n     * @returns false if the complete observer chain was not processed (because one observer set the skipNextObservers to true)\n     */\n    Observable.prototype.notifyObservers = function (eventData, mask, target, currentTarget) {\n        var e_2, _a;\n        if (mask === void 0) { mask = -1; }\n        if (!this._observers.length) {\n            return true;\n        }\n        var state = this._eventState;\n        state.mask = mask;\n        state.target = target;\n        state.currentTarget = currentTarget;\n        state.skipNextObservers = false;\n        state.lastReturnValue = eventData;\n        try {\n            for (var _b = __values(this._observers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var obs = _c.value;\n                if (obs._willBeUnregistered) {\n                    continue;\n                }\n                if (obs.mask & mask) {\n                    if (obs.scope) {\n                        state.lastReturnValue = obs.callback.apply(obs.scope, [eventData, state]);\n                    }\n                    else {\n                        state.lastReturnValue = obs.callback(eventData, state);\n                    }\n                    if (obs.unregisterOnNextCall) {\n                        this._deferUnregister(obs);\n                    }\n                }\n                if (state.skipNextObservers) {\n                    return false;\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return true;\n    };\n    /**\n     * Calling this will execute each callback, expecting it to be a promise or return a value.\n     * If at any point in the chain one function fails, the promise will fail and the execution will not continue.\n     * This is useful when a chain of events (sometimes async events) is needed to initialize a certain object\n     * and it is crucial that all callbacks will be executed.\n     * The order of the callbacks is kept, callbacks are not executed parallel.\n     *\n     * @param eventData - The data to be sent to each callback\n     * @param mask - is used to filter observers defaults to -1\n     * @param target - defines the callback target (see EventState)\n     * @param currentTarget - defines he current object in the bubbling phase\n     * @returns will return a Promise than resolves when all callbacks executed successfully.\n     */\n    Observable.prototype.notifyObserversWithPromise = function (eventData, mask, target, currentTarget) {\n        var _this = this;\n        if (mask === void 0) { mask = -1; }\n        // create an empty promise\n        var p = Promise.resolve(eventData);\n        // no observers? return this promise.\n        if (!this._observers.length) {\n            return p;\n        }\n        var state = this._eventState;\n        state.mask = mask;\n        state.target = target;\n        state.currentTarget = currentTarget;\n        state.skipNextObservers = false;\n        // execute one callback after another (not using Promise.all, the order is important)\n        this._observers.forEach(function (obs) {\n            if (state.skipNextObservers) {\n                return;\n            }\n            if (obs._willBeUnregistered) {\n                return;\n            }\n            if (obs.mask & mask) {\n                if (obs.scope) {\n                    p = p.then(function (lastReturnedValue) {\n                        state.lastReturnValue = lastReturnedValue;\n                        return obs.callback.apply(obs.scope, [eventData, state]);\n                    });\n                }\n                else {\n                    p = p.then(function (lastReturnedValue) {\n                        state.lastReturnValue = lastReturnedValue;\n                        return obs.callback(eventData, state);\n                    });\n                }\n                if (obs.unregisterOnNextCall) {\n                    _this._deferUnregister(obs);\n                }\n            }\n        });\n        // return the eventData\n        return p.then(function () {\n            return eventData;\n        });\n    };\n    /**\n     * Notify a specific observer\n     * @param observer - defines the observer to notify\n     * @param eventData - defines the data to be sent to each callback\n     * @param mask - is used to filter observers defaults to -1\n     */\n    Observable.prototype.notifyObserver = function (observer, eventData, mask) {\n        if (mask === void 0) { mask = -1; }\n        var state = this._eventState;\n        state.mask = mask;\n        state.skipNextObservers = false;\n        observer.callback(eventData, state);\n    };\n    /**\n     * Gets a boolean indicating if the observable has at least one observer\n     * @returns true is the Observable has at least one Observer registered\n     */\n    Observable.prototype.hasObservers = function () {\n        return this._observers.length > 0;\n    };\n    /**\n     * Clear the list of observers\n     */\n    Observable.prototype.clear = function () {\n        this._observers = new Array();\n        this._onObserverAdded = null;\n    };\n    /**\n     * Clone the current observable\n     * @returns a new observable\n     */\n    Observable.prototype.clone = function () {\n        var result = new Observable();\n        result._observers = this._observers.slice(0);\n        return result;\n    };\n    /**\n     * Does this observable handles observer registered with a given mask\n     * @param mask - defines the mask to be tested\n     * @returns whether or not one observer registered with the given mask is handeled\n     */\n    Observable.prototype.hasSpecificMask = function (mask) {\n        var e_3, _a;\n        if (mask === void 0) { mask = -1; }\n        try {\n            for (var _b = __values(this._observers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var obs = _c.value;\n                if (obs.mask & mask || obs.mask === mask) {\n                    return true;\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        return false;\n    };\n    Observable.prototype._deferUnregister = function (observer) {\n        var _this = this;\n        observer.unregisterOnNextCall = false;\n        observer._willBeUnregistered = true;\n        Task_1.executeTask(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\n            return [2 /*return*/, this._remove(observer)];\n        }); }); });\n    };\n    // This should only be called when not iterating over _observers to avoid callback skipping.\n    // Removes an observer from the _observer Array.\n    Observable.prototype._remove = function (observer) {\n        if (!observer) {\n            return false;\n        }\n        var index = this._observers.indexOf(observer);\n        if (index !== -1) {\n            this._observers.splice(index, 1);\n            return true;\n        }\n        return false;\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/Observable.ts?')},"./packages/decentraland-ecs/src/ecs/Task.ts":
/*!***************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/Task.ts ***!
  \***************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar helpers_1 = __webpack_require__(/*! ./helpers */ "./packages/decentraland-ecs/src/ecs/helpers.ts");\nvar _defer = Promise.resolve().then.bind(Promise.resolve());\n/**\n * Executes an asynchronous task\n * @param task - the task to execute\n * @public\n */\nfunction executeTask(task) {\n    var result = _defer(task);\n    result.isComplete = false;\n    result\n        .then(function ($) {\n        result.isComplete = true;\n        result.result = $;\n        result.didFail = false;\n    })\n        .catch(function ($) {\n        result.isComplete = true;\n        result.error = $;\n        result.didFail = true;\n        helpers_1.error(\'executeTask: FAILED \' + $.toString(), $);\n    });\n    return result;\n}\nexports.executeTask = executeTask;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFzay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lY3MvVGFzay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFpQztBQVlqQyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtBQUU3RDs7OztHQUlHO0FBQ0gsU0FBZ0IsV0FBVyxDQUFJLElBQXNCO0lBQ25ELElBQU0sTUFBTSxHQUFrQixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFMUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUE7SUFFekIsTUFBTTtTQUNILElBQUksQ0FBQyxVQUFBLENBQUM7UUFDTCxNQUFNLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQTtRQUN4QixNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtRQUNqQixNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQTtJQUN4QixDQUFDLENBQUM7U0FDRCxLQUFLLENBQUMsVUFBQSxDQUFDO1FBQ04sTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUE7UUFDeEIsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUE7UUFDaEIsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUE7UUFDckIsZUFBSyxDQUFDLHNCQUFzQixHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUNqRCxDQUFDLENBQUMsQ0FBQTtJQUVKLE9BQU8sTUFBTSxDQUFBO0FBQ2YsQ0FBQztBQW5CRCxrQ0FtQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvciB9IGZyb20gJy4vaGVscGVycydcblxuZGVjbGFyZSB2YXIgUHJvbWlzZTogYW55XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBUYXNrUmVzdWx0PFQ+ID0gUHJvbWlzZTxUPiAmIHtcbiAgaXNDb21wbGV0ZTogYm9vbGVhblxuICBkaWRGYWlsPzogYm9vbGVhblxuICBlcnJvcj86IEVycm9yXG4gIHJlc3VsdD86IFRcbn1cblxuY29uc3QgX2RlZmVyID0gUHJvbWlzZS5yZXNvbHZlKCkudGhlbi5iaW5kKFByb21pc2UucmVzb2x2ZSgpKVxuXG4vKipcbiAqIEV4ZWN1dGVzIGFuIGFzeW5jaHJvbm91cyB0YXNrXG4gKiBAcGFyYW0gdGFzayAtIHRoZSB0YXNrIHRvIGV4ZWN1dGVcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVUYXNrPFQ+KHRhc2s6ICgpID0+IFByb21pc2U8VD4pOiBUYXNrUmVzdWx0PFQ+IHtcbiAgY29uc3QgcmVzdWx0OiBUYXNrUmVzdWx0PFQ+ID0gX2RlZmVyKHRhc2spXG5cbiAgcmVzdWx0LmlzQ29tcGxldGUgPSBmYWxzZVxuXG4gIHJlc3VsdFxuICAgIC50aGVuKCQgPT4ge1xuICAgICAgcmVzdWx0LmlzQ29tcGxldGUgPSB0cnVlXG4gICAgICByZXN1bHQucmVzdWx0ID0gJFxuICAgICAgcmVzdWx0LmRpZEZhaWwgPSBmYWxzZVxuICAgIH0pXG4gICAgLmNhdGNoKCQgPT4ge1xuICAgICAgcmVzdWx0LmlzQ29tcGxldGUgPSB0cnVlXG4gICAgICByZXN1bHQuZXJyb3IgPSAkXG4gICAgICByZXN1bHQuZGlkRmFpbCA9IHRydWVcbiAgICAgIGVycm9yKCdleGVjdXRlVGFzazogRkFJTEVEICcgKyAkLnRvU3RyaW5nKCksICQpXG4gICAgfSlcblxuICByZXR1cm4gcmVzdWx0XG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/Task.ts?')},"./packages/decentraland-ecs/src/ecs/UIValue.ts":
/*!******************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/UIValue.ts ***!
  \******************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @public\n */\nvar UIValueType;\n(function (UIValueType) {\n    UIValueType[UIValueType[\"PERCENT\"] = 0] = \"PERCENT\";\n    UIValueType[UIValueType[\"PIXELS\"] = 1] = \"PIXELS\";\n})(UIValueType = exports.UIValueType || (exports.UIValueType = {}));\n/**\n * @public\n */\nvar UIValue = /** @class */ (function () {\n    function UIValue(value) {\n        this.type = UIValueType.PIXELS;\n        if (typeof value === 'string') {\n            var valueAsString = value;\n            if (valueAsString.indexOf('px') > -1) {\n                this.type = UIValueType.PIXELS;\n            }\n            else if (valueAsString.indexOf('%') > -1) {\n                this.type = UIValueType.PERCENT;\n            }\n            this.value = parseFloat(valueAsString);\n        }\n        else {\n            this.value = value;\n        }\n    }\n    UIValue.prototype.toString = function () {\n        var result = this.value.toString();\n        if (this.type === UIValueType.PERCENT) {\n            result += '%';\n        }\n        else {\n            result += 'px';\n        }\n        return result;\n    };\n    return UIValue;\n}());\nexports.UIValue = UIValue;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVUlWYWx1ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lY3MvVUlWYWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztHQUVHO0FBQ0gsSUFBWSxXQUdYO0FBSEQsV0FBWSxXQUFXO0lBQ3JCLG1EQUFXLENBQUE7SUFDWCxpREFBVSxDQUFBO0FBQ1osQ0FBQyxFQUhXLFdBQVcsR0FBWCxtQkFBVyxLQUFYLG1CQUFXLFFBR3RCO0FBRUQ7O0dBRUc7QUFDSDtJQUlFLGlCQUFZLEtBQXNCO1FBQ2hDLElBQUksQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQTtRQUU5QixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM3QixJQUFJLGFBQWEsR0FBVyxLQUFLLENBQUE7WUFDakMsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUNwQyxJQUFJLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUE7YUFDL0I7aUJBQU0sSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUMxQyxJQUFJLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUE7YUFDaEM7WUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQTtTQUN2QzthQUFNO1lBQ0wsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7U0FDbkI7SUFDSCxDQUFDO0lBRUQsMEJBQVEsR0FBUjtRQUNFLElBQUksTUFBTSxHQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUE7UUFFMUMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQyxPQUFPLEVBQUU7WUFDckMsTUFBTSxJQUFJLEdBQUcsQ0FBQTtTQUNkO2FBQU07WUFDTCxNQUFNLElBQUksSUFBSSxDQUFBO1NBQ2Y7UUFFRCxPQUFPLE1BQU0sQ0FBQTtJQUNmLENBQUM7SUFDSCxjQUFDO0FBQUQsQ0FBQyxBQWhDRCxJQWdDQztBQWhDWSwwQkFBTyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZW51bSBVSVZhbHVlVHlwZSB7XG4gIFBFUkNFTlQgPSAwLFxuICBQSVhFTFMgPSAxXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgVUlWYWx1ZSB7XG4gIHZhbHVlOiBudW1iZXJcbiAgdHlwZTogVUlWYWx1ZVR5cGVcblxuICBjb25zdHJ1Y3Rvcih2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgdGhpcy50eXBlID0gVUlWYWx1ZVR5cGUuUElYRUxTXG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgbGV0IHZhbHVlQXNTdHJpbmc6IHN0cmluZyA9IHZhbHVlXG4gICAgICBpZiAodmFsdWVBc1N0cmluZy5pbmRleE9mKCdweCcpID4gLTEpIHtcbiAgICAgICAgdGhpcy50eXBlID0gVUlWYWx1ZVR5cGUuUElYRUxTXG4gICAgICB9IGVsc2UgaWYgKHZhbHVlQXNTdHJpbmcuaW5kZXhPZignJScpID4gLTEpIHtcbiAgICAgICAgdGhpcy50eXBlID0gVUlWYWx1ZVR5cGUuUEVSQ0VOVFxuICAgICAgfVxuXG4gICAgICB0aGlzLnZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZUFzU3RyaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWVcbiAgICB9XG4gIH1cblxuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIGxldCByZXN1bHQ6IHN0cmluZyA9IHRoaXMudmFsdWUudG9TdHJpbmcoKVxuXG4gICAgaWYgKHRoaXMudHlwZSA9PT0gVUlWYWx1ZVR5cGUuUEVSQ0VOVCkge1xuICAgICAgcmVzdWx0ICs9ICclJ1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgKz0gJ3B4J1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/UIValue.ts?")},"./packages/decentraland-ecs/src/ecs/helpers.ts":
/*!******************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/helpers.ts ***!
  \******************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar lastGeneratedId = 0;\n/**\n * Log function. Only works in debug mode, otherwise it does nothing.\n * @param args - any loggable parameter\n * @public\n */\nfunction log() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (typeof dcl !== 'undefined') {\n        dcl.log.apply(dcl, __spread(args));\n    }\n    else {\n        // tslint:disable-next-line:no-console\n        console.log.apply(console, __spread(['DEBUG:'], args));\n    }\n}\nexports.log = log;\n/**\n * Error function. Prints a console error. Only works in debug mode, otherwise it does nothing.\n * @param error - string or Error object.\n * @param data - any debug information.\n * @public\n */\nfunction error(error, data) {\n    if (typeof dcl !== 'undefined') {\n        dcl.error(error, data);\n    }\n    else {\n        // tslint:disable-next-line:no-console\n        console.error('ERROR:', error, data);\n    }\n}\nexports.error = error;\n/**\n * Generates a new prefixed id\n * @beta\n */\nfunction newId(type) {\n    lastGeneratedId++;\n    if (type.length === 0)\n        throw new Error('newId(type: string): type cannot be empty');\n    return type + lastGeneratedId.toString(36);\n}\nexports.newId = newId;\n/**\n * @internal\n */\nfunction uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (Math.random() * 16) | 0;\n        var v = c === 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\nexports.uuid = uuid;\n/**\n * Returns an array of the given size filled with element built from the given constructor and the paramters\n * @param size - the number of element to construct and put in the array\n * @param itemBuilder - a callback responsible for creating new instance of item. Called once per array entry.\n * @returns a new array filled with new objects\n * @internal\n */\nfunction buildArray(size, itemBuilder) {\n    var a = [];\n    for (var i = 0; i < size; ++i) {\n        a.push(itemBuilder());\n    }\n    return a;\n}\nexports.buildArray = buildArray;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lY3MvaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSSxlQUFlLEdBQUcsQ0FBQyxDQUFBO0FBS3ZCOzs7O0dBSUc7QUFDSCxTQUFnQixHQUFHO0lBQUMsY0FBYztTQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7UUFBZCx5QkFBYzs7SUFDaEMsSUFBSSxPQUFPLEdBQUcsS0FBSyxXQUFXLEVBQUU7UUFDOUIsR0FBRyxDQUFDLEdBQUcsT0FBUCxHQUFHLFdBQVEsSUFBSSxHQUFDO0tBQ2pCO1NBQU07UUFDTCxzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLEdBQUcsT0FBWCxPQUFPLFlBQUssUUFBUSxHQUFLLElBQUksR0FBQztLQUMvQjtBQUNILENBQUM7QUFQRCxrQkFPQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsS0FBSyxDQUFDLEtBQXFCLEVBQUUsSUFBVTtJQUNyRCxJQUFJLE9BQU8sR0FBRyxLQUFLLFdBQVcsRUFBRTtRQUM5QixHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtLQUN2QjtTQUFNO1FBQ0wsc0NBQXNDO1FBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtLQUNyQztBQUNILENBQUM7QUFQRCxzQkFPQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLEtBQUssQ0FBQyxJQUFZO0lBQ2hDLGVBQWUsRUFBRSxDQUFBO0lBQ2pCLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFBO0lBQ25GLE9BQU8sSUFBSSxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDNUMsQ0FBQztBQUpELHNCQUlDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixJQUFJO0lBQ2xCLE9BQU8sc0NBQXNDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxVQUFTLENBQUM7UUFDdkUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2hDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFBO1FBQ3ZDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUN2QixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFORCxvQkFNQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQWdCLFVBQVUsQ0FBSSxJQUFZLEVBQUUsV0FBb0I7SUFDOUQsSUFBTSxDQUFDLEdBQVEsRUFBRSxDQUFBO0lBQ2pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDN0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFBO0tBQ3RCO0lBQ0QsT0FBTyxDQUFDLENBQUE7QUFDVixDQUFDO0FBTkQsZ0NBTUMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgbGFzdEdlbmVyYXRlZElkID0gMFxuXG5kZWNsYXJlIHZhciBjb25zb2xlOiBhbnlcbmRlY2xhcmUgdmFyIGRjbDogYW55XG5cbi8qKlxuICogTG9nIGZ1bmN0aW9uLiBPbmx5IHdvcmtzIGluIGRlYnVnIG1vZGUsIG90aGVyd2lzZSBpdCBkb2VzIG5vdGhpbmcuXG4gKiBAcGFyYW0gYXJncyAtIGFueSBsb2dnYWJsZSBwYXJhbWV0ZXJcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvZyguLi5hcmdzOiBhbnlbXSkge1xuICBpZiAodHlwZW9mIGRjbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkY2wubG9nKC4uLmFyZ3MpXG4gIH0gZWxzZSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZygnREVCVUc6JywgLi4uYXJncylcbiAgfVxufVxuXG4vKipcbiAqIEVycm9yIGZ1bmN0aW9uLiBQcmludHMgYSBjb25zb2xlIGVycm9yLiBPbmx5IHdvcmtzIGluIGRlYnVnIG1vZGUsIG90aGVyd2lzZSBpdCBkb2VzIG5vdGhpbmcuXG4gKiBAcGFyYW0gZXJyb3IgLSBzdHJpbmcgb3IgRXJyb3Igb2JqZWN0LlxuICogQHBhcmFtIGRhdGEgLSBhbnkgZGVidWcgaW5mb3JtYXRpb24uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlcnJvcihlcnJvcjogc3RyaW5nIHwgRXJyb3IsIGRhdGE/OiBhbnkpIHtcbiAgaWYgKHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGNsLmVycm9yKGVycm9yLCBkYXRhKVxuICB9IGVsc2Uge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgY29uc29sZS5lcnJvcignRVJST1I6JywgZXJyb3IsIGRhdGEpXG4gIH1cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBuZXcgcHJlZml4ZWQgaWRcbiAqIEBiZXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXdJZCh0eXBlOiBzdHJpbmcpIHtcbiAgbGFzdEdlbmVyYXRlZElkKytcbiAgaWYgKHR5cGUubGVuZ3RoID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ25ld0lkKHR5cGU6IHN0cmluZyk6IHR5cGUgY2Fubm90IGJlIGVtcHR5JylcbiAgcmV0dXJuIHR5cGUgKyBsYXN0R2VuZXJhdGVkSWQudG9TdHJpbmcoMzYpXG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1dWlkKCkge1xuICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbihjKSB7XG4gICAgbGV0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDBcbiAgICBsZXQgdiA9IGMgPT09ICd4JyA/IHIgOiAociAmIDB4MykgfCAweDhcbiAgICByZXR1cm4gdi50b1N0cmluZygxNilcbiAgfSlcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBnaXZlbiBzaXplIGZpbGxlZCB3aXRoIGVsZW1lbnQgYnVpbHQgZnJvbSB0aGUgZ2l2ZW4gY29uc3RydWN0b3IgYW5kIHRoZSBwYXJhbXRlcnNcbiAqIEBwYXJhbSBzaXplIC0gdGhlIG51bWJlciBvZiBlbGVtZW50IHRvIGNvbnN0cnVjdCBhbmQgcHV0IGluIHRoZSBhcnJheVxuICogQHBhcmFtIGl0ZW1CdWlsZGVyIC0gYSBjYWxsYmFjayByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIGl0ZW0uIENhbGxlZCBvbmNlIHBlciBhcnJheSBlbnRyeS5cbiAqIEByZXR1cm5zIGEgbmV3IGFycmF5IGZpbGxlZCB3aXRoIG5ldyBvYmplY3RzXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkQXJyYXk8VD4oc2l6ZTogbnVtYmVyLCBpdGVtQnVpbGRlcjogKCkgPT4gVCk6IEFycmF5PFQ+IHtcbiAgY29uc3QgYTogVFtdID0gW11cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICBhLnB1c2goaXRlbUJ1aWxkZXIoKSlcbiAgfVxuICByZXR1cm4gYVxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/helpers.ts?")},"./packages/decentraland-ecs/src/index.ts":
/*!************************************************!*\
  !*** ./packages/decentraland-ecs/src/index.ts ***!
  \************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, "__esModule", { value: true });\n// CORE DEPENDENCIES\n__export(__webpack_require__(/*! ./ecs/Engine */ "./packages/decentraland-ecs/src/ecs/Engine.ts"));\n__export(__webpack_require__(/*! ./ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts"));\n__export(__webpack_require__(/*! ./ecs/Entity */ "./packages/decentraland-ecs/src/ecs/Entity.ts"));\n__export(__webpack_require__(/*! ./ecs/IEntity */ "./packages/decentraland-ecs/src/ecs/IEntity.ts"));\n__export(__webpack_require__(/*! ./ecs/Task */ "./packages/decentraland-ecs/src/ecs/Task.ts"));\n__export(__webpack_require__(/*! ./ecs/helpers */ "./packages/decentraland-ecs/src/ecs/helpers.ts"));\n__export(__webpack_require__(/*! ./ecs/Observable */ "./packages/decentraland-ecs/src/ecs/Observable.ts"));\n__export(__webpack_require__(/*! ./ecs/UIValue */ "./packages/decentraland-ecs/src/ecs/UIValue.ts"));\n__export(__webpack_require__(/*! ./ecs/EventManager */ "./packages/decentraland-ecs/src/ecs/EventManager.ts"));\nvar Implementation_1 = __webpack_require__(/*! ./decentraland/Implementation */ "./packages/decentraland-ecs/src/decentraland/Implementation.ts");\n// ECS INITIALIZATION\nvar Engine_1 = __webpack_require__(/*! ./ecs/Engine */ "./packages/decentraland-ecs/src/ecs/Engine.ts");\nvar Entity_1 = __webpack_require__(/*! ./ecs/Entity */ "./packages/decentraland-ecs/src/ecs/Entity.ts");\nvar entity = new Entity_1.Entity(\'scene\');\nentity.uuid = \'0\';\n// Initialize engine\n/** @public */\nvar engine = new Engine_1.Engine(entity);\nexports.engine = engine;\nvar Component_1 = __webpack_require__(/*! ./ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nComponent_1.DisposableComponent.engine = engine;\nif (typeof dcl !== \'undefined\') {\n    engine.addSystem(new Implementation_1.DecentralandSynchronizationSystem(dcl), Infinity);\n}\nvar Systems_1 = __webpack_require__(/*! ./decentraland/Systems */ "./packages/decentraland-ecs/src/decentraland/Systems.ts");\n// Initialize UUID Events system\nengine.addSystem(Systems_1.uuidEventSystem);\n// Initialize Pointer Events System\nengine.addSystem(Systems_1.pointerEventSystem);\n// Initialize Raycast Events System\nengine.addSystem(Systems_1.raycastEventSystem);\n// DECENTRALAND DEPENDENCIES\n__export(__webpack_require__(/*! ./decentraland/Types */ "./packages/decentraland-ecs/src/decentraland/Types.ts"));\n__export(__webpack_require__(/*! ./decentraland/Components */ "./packages/decentraland-ecs/src/decentraland/Components.ts"));\n__export(__webpack_require__(/*! ./decentraland/Systems */ "./packages/decentraland-ecs/src/decentraland/Systems.ts"));\n__export(__webpack_require__(/*! ./decentraland/Events */ "./packages/decentraland-ecs/src/decentraland/Events.ts"));\n__export(__webpack_require__(/*! ./decentraland/Camera */ "./packages/decentraland-ecs/src/decentraland/Camera.ts"));\n__export(__webpack_require__(/*! ./decentraland/math */ "./packages/decentraland-ecs/src/decentraland/math/index.ts"));\n__export(__webpack_require__(/*! ./decentraland/AnimationState */ "./packages/decentraland-ecs/src/decentraland/AnimationState.ts"));\n__export(__webpack_require__(/*! ./decentraland/Input */ "./packages/decentraland-ecs/src/decentraland/Input.ts"));\n__export(__webpack_require__(/*! ./decentraland/Audio */ "./packages/decentraland-ecs/src/decentraland/Audio.ts"));\n__export(__webpack_require__(/*! ./decentraland/Gizmos */ "./packages/decentraland-ecs/src/decentraland/Gizmos.ts"));\n__export(__webpack_require__(/*! ./decentraland/UIShapes */ "./packages/decentraland-ecs/src/decentraland/UIShapes.ts"));\n__export(__webpack_require__(/*! ./decentraland/AvatarShape */ "./packages/decentraland-ecs/src/decentraland/AvatarShape.ts"));\n__export(__webpack_require__(/*! ./decentraland/UIEvents */ "./packages/decentraland-ecs/src/decentraland/UIEvents.ts"));\n__export(__webpack_require__(/*! ./decentraland/MessageBus */ "./packages/decentraland-ecs/src/decentraland/MessageBus.ts"));\n__export(__webpack_require__(/*! ./decentraland/PhysicsCast */ "./packages/decentraland-ecs/src/decentraland/PhysicsCast.ts"));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxvQkFBb0I7QUFDcEIsa0NBQTRCO0FBQzVCLHFDQUErQjtBQUMvQixrQ0FBNEI7QUFDNUIsbUNBQTZCO0FBQzdCLGdDQUEwQjtBQUMxQixtQ0FBNkI7QUFDN0Isc0NBQWdDO0FBQ2hDLG1DQUE2QjtBQUM3Qix3Q0FBa0M7QUFFbEMsZ0VBQWlGO0FBRWpGLHFCQUFxQjtBQUNyQix1Q0FBcUM7QUFDckMsdUNBQXFDO0FBRXJDLElBQU0sTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUNqQztBQUFDLE1BQWMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFBO0FBRTNCLG9CQUFvQjtBQUNwQixjQUFjO0FBQ2QsSUFBTSxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7QUEwQ3hCLHdCQUFNO0FBeENmLDZDQUFxRDtBQUNyRCwrQkFBbUIsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0FBUW5DLElBQUksT0FBTyxHQUFHLEtBQUssV0FBVyxFQUFFO0lBQzlCLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxrREFBaUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQTtDQUN2RTtBQUVELGtEQUFnRztBQUVoRyxnQ0FBZ0M7QUFDaEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyx5QkFBZSxDQUFDLENBQUE7QUFDakMsbUNBQW1DO0FBQ25DLE1BQU0sQ0FBQyxTQUFTLENBQUMsNEJBQWtCLENBQUMsQ0FBQTtBQUVwQyxtQ0FBbUM7QUFDbkMsTUFBTSxDQUFDLFNBQVMsQ0FBQyw0QkFBa0IsQ0FBQyxDQUFBO0FBRXBDLDRCQUE0QjtBQUM1QiwwQ0FBb0M7QUFDcEMsK0NBQXlDO0FBQ3pDLDRDQUFzQztBQUN0QywyQ0FBcUM7QUFDckMsMkNBQXFDO0FBQ3JDLHlDQUFtQztBQUNuQyxtREFBNkM7QUFDN0MsMENBQW9DO0FBQ3BDLDBDQUFvQztBQUNwQywyQ0FBcUM7QUFDckMsNkNBQXVDO0FBQ3ZDLGdEQUEwQztBQUMxQyw2Q0FBdUM7QUFDdkMsK0NBQXlDO0FBQ3pDLGdEQUEwQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENPUkUgREVQRU5ERU5DSUVTXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9FbmdpbmUnXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9Db21wb25lbnQnXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9FbnRpdHknXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9JRW50aXR5J1xuZXhwb3J0ICogZnJvbSAnLi9lY3MvVGFzaydcbmV4cG9ydCAqIGZyb20gJy4vZWNzL2hlbHBlcnMnXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9PYnNlcnZhYmxlJ1xuZXhwb3J0ICogZnJvbSAnLi9lY3MvVUlWYWx1ZSdcbmV4cG9ydCAqIGZyb20gJy4vZWNzL0V2ZW50TWFuYWdlcidcblxuaW1wb3J0IHsgRGVjZW50cmFsYW5kU3luY2hyb25pemF0aW9uU3lzdGVtIH0gZnJvbSAnLi9kZWNlbnRyYWxhbmQvSW1wbGVtZW50YXRpb24nXG5cbi8vIEVDUyBJTklUSUFMSVpBVElPTlxuaW1wb3J0IHsgRW5naW5lIH0gZnJvbSAnLi9lY3MvRW5naW5lJ1xuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi9lY3MvRW50aXR5J1xuXG5jb25zdCBlbnRpdHkgPSBuZXcgRW50aXR5KCdzY2VuZScpXG47KGVudGl0eSBhcyBhbnkpLnV1aWQgPSAnMCdcblxuLy8gSW5pdGlhbGl6ZSBlbmdpbmVcbi8qKiBAcHVibGljICovXG5jb25zdCBlbmdpbmUgPSBuZXcgRW5naW5lKGVudGl0eSlcblxuaW1wb3J0IHsgRGlzcG9zYWJsZUNvbXBvbmVudCB9IGZyb20gJy4vZWNzL0NvbXBvbmVudCdcbkRpc3Bvc2FibGVDb21wb25lbnQuZW5naW5lID0gZW5naW5lXG5cbi8vIEluaXRpYWxpemUgRGVjZW50cmFsYW5kIGludGVyZmFjZVxuLyoqIEBpbnRlcm5hbCAqL1xuaW1wb3J0IHsgRGVjZW50cmFsYW5kSW50ZXJmYWNlIH0gZnJvbSAnLi9kZWNlbnRyYWxhbmQvVHlwZXMnXG5cbi8qKiBAaW50ZXJuYWwgKi9cbmRlY2xhcmUgbGV0IGRjbDogRGVjZW50cmFsYW5kSW50ZXJmYWNlIHwgdm9pZFxuaWYgKHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnKSB7XG4gIGVuZ2luZS5hZGRTeXN0ZW0obmV3IERlY2VudHJhbGFuZFN5bmNocm9uaXphdGlvblN5c3RlbShkY2wpLCBJbmZpbml0eSlcbn1cblxuaW1wb3J0IHsgdXVpZEV2ZW50U3lzdGVtLCBwb2ludGVyRXZlbnRTeXN0ZW0sIHJheWNhc3RFdmVudFN5c3RlbSB9IGZyb20gJy4vZGVjZW50cmFsYW5kL1N5c3RlbXMnXG5cbi8vIEluaXRpYWxpemUgVVVJRCBFdmVudHMgc3lzdGVtXG5lbmdpbmUuYWRkU3lzdGVtKHV1aWRFdmVudFN5c3RlbSlcbi8vIEluaXRpYWxpemUgUG9pbnRlciBFdmVudHMgU3lzdGVtXG5lbmdpbmUuYWRkU3lzdGVtKHBvaW50ZXJFdmVudFN5c3RlbSlcblxuLy8gSW5pdGlhbGl6ZSBSYXljYXN0IEV2ZW50cyBTeXN0ZW1cbmVuZ2luZS5hZGRTeXN0ZW0ocmF5Y2FzdEV2ZW50U3lzdGVtKVxuXG4vLyBERUNFTlRSQUxBTkQgREVQRU5ERU5DSUVTXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9UeXBlcydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL0NvbXBvbmVudHMnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9TeXN0ZW1zJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvRXZlbnRzJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvQ2FtZXJhJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvbWF0aCdcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL0FuaW1hdGlvblN0YXRlJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvSW5wdXQnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9BdWRpbydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL0dpem1vcydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL1VJU2hhcGVzJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvQXZhdGFyU2hhcGUnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9VSUV2ZW50cydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL01lc3NhZ2VCdXMnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9QaHlzaWNzQ2FzdCdcblxuZXhwb3J0IHsgZW5naW5lIH1cbiJdfQ==\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/index.ts?')}}));var loader;(function(e){"use strict";var r=1;var d=2;var i=[];var f={baseUrl:""};var c={};function n(e){if(typeof e==="object"){for(var n in e){if(e.hasOwnProperty(n)){f[n]=e[n]}}}}e.config=n;function l(t,e,o){var n=arguments.length;if(n===1){o=t;e=["require","exports","module"];t=null}else if(n===2){if(f.toString.call(t)==="[object Array]"){o=e;e=t;t=null}else{o=e;e=["require","exports","module"]}}if(!t){i.push([e,o]);return}function r(){var e,n;if(c[t]){e=c[t].handlers;n=c[t].context}var r=c[t]=typeof o==="function"?o.apply(null,i.slice.call(arguments,0))||c[t]||{}:o;r.dclamd=d;r.context=n;for(var l=0,a=e?e.length:0;l<a;l++){e[l](r)}}u(e,r,t)}e.define=l;(function(e){e.amd={}})(l=e.define||(e.define={}));function u(r,l,a){var t=[];var o=0;var i=false;if(typeof r==="string"){if(c[r]&&c[r].dclamd===d){return c[r]}throw new Error(r+" has not been defined. Please include it as a dependency in "+a+"'s define()")}var f=r.length;var e=function(n){switch(r[n]){case"require":var e=function(e,n){return u(e,n,a)};e.toUrl=function(e){return p(e,a)};t[n]=e;o++;break;case"exports":t[n]=c[a]||(c[a]={});o++;break;case"module":t[n]={id:a,uri:p(a)};o++;break;case c[a]?c[a].context:"":t[n]=c[c[a].context];o++;break;default:s(r[n],function(e){t[n]=e;o++;if(o===f&&l){i=true;l.apply(null,t)}if(c[r[n]]){c[r[n]].dclamd=d}},a)}};for(var n=0;n<f;n++){e(n)}if(!i&&o===f&&l){l.apply(null,t)}}e.require=u;function t(e,n){return function(){return dcl.callRpc(e,n.name,i.slice.call(arguments,0))}}function s(e,a,n){e=n?p(e,n):e;if(c[e]){if(c[e].dclamd===r){a&&c[e].handlers.push(a)}else{a&&a(c[e])}return}else{c[e]={name:e,dclamd:r,handlers:[a],context:n}}if(e.indexOf("@")===0){if(typeof dcl!=="undefined"){dcl.loadModule(e).then(function(e){var n={};for(var r in e.methods){var l=e.methods[r];n[l.name]=t(e.rpcHandle,l)}a(n)})}}}if(typeof dcl!=="undefined"){dcl.onStart(function(){var e=[];for(var n in c){if(c[n]&&c[n].dclamd===r){e.push(c[n])}}if(e.length){throw new Error("These modules didn't load: "+e.map(function(e){return e.name}).join(", "))}})}function p(e,n){var r=false;switch(e){case"require":case"exports":case"module":return e}var l=(n||f.baseUrl).split("/");l.pop();var a=e.split("/");var t=a.length;while(--t){switch(e[0]){case"..":l.pop();case".":case"":a.shift();r=true}}return(l.length&&r?l.join("/")+"/":"")+a.join("/")}u.toUrl=p})(loader||(loader={}));global=typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof this!=="undefined"?this:null;if(!global)throw new Error("unknown global context");global.define=loader.define;global.dclamd=loader;eval('var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError("Generator is already executing.");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i["return"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __spread = (this && this.__spread) || function () {\r\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n};\r\ndefine("node_modules/eth-connect/eth-connect.esm", ["require", "exports"], function (require, exports) {\r\n    "use strict";\r\n    Object.defineProperty(exports, "__esModule", { value: true });\r\n    var ethconnect = function (t) { var e = {}; function r(n) { if (e[n])\r\n        return e[n].exports; var o = e[n] = { i: n, l: !1, exports: {} }; return t[n].call(o.exports, o, o.exports, r), o.l = !0, o.exports; } return r.m = t, r.c = e, r.d = function (t, e, n) { r.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: n }); }, r.r = function (t) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }); }, r.t = function (t, e) { if (1 & e && (t = r(t)), 8 & e)\r\n        return t; if (4 & e && "object" == typeof t && t && t.__esModule)\r\n        return t; var n = Object.create(null); if (r.r(n), Object.defineProperty(n, "default", { enumerable: !0, value: t }), 2 & e && "string" != typeof t)\r\n        for (var o in t)\r\n            r.d(n, o, function (e) { return t[e]; }.bind(null, o)); return n; }, r.n = function (t) { var e = t && t.__esModule ? function () { return t.default; } : function () { return t; }; return r.d(e, "a", e), e; }, r.o = function (t, e) { return Object.prototype.hasOwnProperty.call(t, e); }, r.p = "", r(r.s = 28); }([function (t, e, r) { var n; t.exports = (n = n || function (t, e) { var r = Object.create || function () { function t() { } return function (e) { var r; return t.prototype = e, r = new t, t.prototype = null, r; }; }(), n = {}, o = n.lib = {}, i = o.Base = { extend: function (t) { var e = r(this); return t && e.mixIn(t), e.hasOwnProperty("init") && this.init !== e.init || (e.init = function () { e.$super.init.apply(this, arguments); }), e.init.prototype = e, e.$super = this, e; }, create: function () { var t = this.extend(); return t.init.apply(t, arguments), t; }, init: function () { }, mixIn: function (t) { for (var e in t)\r\n                t.hasOwnProperty(e) && (this[e] = t[e]); t.hasOwnProperty("toString") && (this.toString = t.toString); }, clone: function () { return this.init.prototype.extend(this); } }, s = o.WordArray = i.extend({ init: function (t, e) { t = this.words = t || [], this.sigBytes = null != e ? e : 4 * t.length; }, toString: function (t) { return (t || c).stringify(this); }, concat: function (t) { var e = this.words, r = t.words, n = this.sigBytes, o = t.sigBytes; if (this.clamp(), n % 4)\r\n                for (var i = 0; i < o; i++) {\r\n                    var s = r[i >>> 2] >>> 24 - i % 4 * 8 & 255;\r\n                    e[n + i >>> 2] |= s << 24 - (n + i) % 4 * 8;\r\n                }\r\n            else\r\n                for (var i = 0; i < o; i += 4)\r\n                    e[n + i >>> 2] = r[i >>> 2]; return this.sigBytes += o, this; }, clamp: function () { var e = this.words, r = this.sigBytes; e[r >>> 2] &= 4294967295 << 32 - r % 4 * 8, e.length = t.ceil(r / 4); }, clone: function () { var t = i.clone.call(this); return t.words = this.words.slice(0), t; }, random: function (e) { for (var r, n = [], o = function (e) { var e = e, r = 987654321, n = 4294967295; return function () { var o = ((r = 36969 * (65535 & r) + (r >> 16) & n) << 16) + (e = 18e3 * (65535 & e) + (e >> 16) & n) & n; return o /= 4294967296, (o += .5) * (t.random() > .5 ? 1 : -1); }; }, i = 0; i < e; i += 4) {\r\n                var a = o(4294967296 * (r || t.random()));\r\n                r = 987654071 * a(), n.push(4294967296 * a() | 0);\r\n            } return new s.init(n, e); } }), a = n.enc = {}, c = a.Hex = { stringify: function (t) { for (var e = t.words, r = t.sigBytes, n = [], o = 0; o < r; o++) {\r\n                var i = e[o >>> 2] >>> 24 - o % 4 * 8 & 255;\r\n                n.push((i >>> 4).toString(16)), n.push((15 & i).toString(16));\r\n            } return n.join(""); }, parse: function (t) { for (var e = t.length, r = [], n = 0; n < e; n += 2)\r\n                r[n >>> 3] |= parseInt(t.substr(n, 2), 16) << 24 - n % 8 * 4; return new s.init(r, e / 2); } }, u = a.Latin1 = { stringify: function (t) { for (var e = t.words, r = t.sigBytes, n = [], o = 0; o < r; o++) {\r\n                var i = e[o >>> 2] >>> 24 - o % 4 * 8 & 255;\r\n                n.push(String.fromCharCode(i));\r\n            } return n.join(""); }, parse: function (t) { for (var e = t.length, r = [], n = 0; n < e; n++)\r\n                r[n >>> 2] |= (255 & t.charCodeAt(n)) << 24 - n % 4 * 8; return new s.init(r, e); } }, l = a.Utf8 = { stringify: function (t) { try {\r\n                return decodeURIComponent(escape(u.stringify(t)));\r\n            }\r\n            catch (t) {\r\n                throw new Error("Malformed UTF-8 data");\r\n            } }, parse: function (t) { return u.parse(unescape(encodeURIComponent(t))); } }, h = o.BufferedBlockAlgorithm = i.extend({ reset: function () { this._data = new s.init, this._nDataBytes = 0; }, _append: function (t) { "string" == typeof t && (t = l.parse(t)), this._data.concat(t), this._nDataBytes += t.sigBytes; }, _process: function (e) { var r = this._data, n = r.words, o = r.sigBytes, i = this.blockSize, a = 4 * i, c = o / a, u = (c = e ? t.ceil(c) : t.max((0 | c) - this._minBufferSize, 0)) * i, l = t.min(4 * u, o); if (u) {\r\n                for (var h = 0; h < u; h += i)\r\n                    this._doProcessBlock(n, h);\r\n                var f = n.splice(0, u);\r\n                r.sigBytes -= l;\r\n            } return new s.init(f, l); }, clone: function () { var t = i.clone.call(this); return t._data = this._data.clone(), t; }, _minBufferSize: 0 }), f = (o.Hasher = h.extend({ cfg: i.extend(), init: function (t) { this.cfg = this.cfg.extend(t), this.reset(); }, reset: function () { h.reset.call(this), this._doReset(); }, update: function (t) { return this._append(t), this._process(), this; }, finalize: function (t) { t && this._append(t); var e = this._doFinalize(); return e; }, blockSize: 16, _createHelper: function (t) { return function (e, r) { return new t.init(r).finalize(e); }; }, _createHmacHelper: function (t) { return function (e, r) { return new f.HMAC.init(t, r).finalize(e); }; } }), n.algo = {}); return n; }(Math), n); }, function (t, e, r) { var n; t.exports = (n = r(0), r(5), void (n.lib.Cipher || function (t) { var e = n, r = e.lib, o = r.Base, i = r.WordArray, s = r.BufferedBlockAlgorithm, a = e.enc, c = (a.Utf8, a.Base64), u = e.algo, l = u.EvpKDF, h = r.Cipher = s.extend({ cfg: o.extend(), createEncryptor: function (t, e) { return this.create(this._ENC_XFORM_MODE, t, e); }, createDecryptor: function (t, e) { return this.create(this._DEC_XFORM_MODE, t, e); }, init: function (t, e, r) { this.cfg = this.cfg.extend(r), this._xformMode = t, this._key = e, this.reset(); }, reset: function () { s.reset.call(this), this._doReset(); }, process: function (t) { return this._append(t), this._process(); }, finalize: function (t) { t && this._append(t); var e = this._doFinalize(); return e; }, keySize: 4, ivSize: 4, _ENC_XFORM_MODE: 1, _DEC_XFORM_MODE: 2, _createHelper: function () { function t(t) { return "string" == typeof t ? F : w; } return function (e) { return { encrypt: function (r, n, o) { return t(n).encrypt(e, r, n, o); }, decrypt: function (r, n, o) { return t(n).decrypt(e, r, n, o); } }; }; }() }), f = (r.StreamCipher = h.extend({ _doFinalize: function () { var t = this._process(!0); return t; }, blockSize: 1 }), e.mode = {}), p = r.BlockCipherMode = o.extend({ createEncryptor: function (t, e) { return this.Encryptor.create(t, e); }, createDecryptor: function (t, e) { return this.Decryptor.create(t, e); }, init: function (t, e) { this._cipher = t, this._iv = e; } }), d = f.CBC = function () { var e = p.extend(); function r(e, r, n) { var o = this._iv; if (o) {\r\n            var i = o;\r\n            this._iv = t;\r\n        }\r\n        else\r\n            var i = this._prevBlock; for (var s = 0; s < n; s++)\r\n            e[r + s] ^= i[s]; } return e.Encryptor = e.extend({ processBlock: function (t, e) { var n = this._cipher, o = n.blockSize; r.call(this, t, e, o), n.encryptBlock(t, e), this._prevBlock = t.slice(e, e + o); } }), e.Decryptor = e.extend({ processBlock: function (t, e) { var n = this._cipher, o = n.blockSize, i = t.slice(e, e + o); n.decryptBlock(t, e), r.call(this, t, e, o), this._prevBlock = i; } }), e; }(), m = e.pad = {}, y = m.Pkcs7 = { pad: function (t, e) { for (var r = 4 * e, n = r - t.sigBytes % r, o = n << 24 | n << 16 | n << 8 | n, s = [], a = 0; a < n; a += 4)\r\n                s.push(o); var c = i.create(s, n); t.concat(c); }, unpad: function (t) { var e = 255 & t.words[t.sigBytes - 1 >>> 2]; t.sigBytes -= e; } }, g = (r.BlockCipher = h.extend({ cfg: h.cfg.extend({ mode: d, padding: y }), reset: function () { h.reset.call(this); var t = this.cfg, e = t.iv, r = t.mode; if (this._xformMode == this._ENC_XFORM_MODE)\r\n                var n = r.createEncryptor;\r\n            else {\r\n                var n = r.createDecryptor;\r\n                this._minBufferSize = 1;\r\n            } this._mode && this._mode.__creator == n ? this._mode.init(this, e && e.words) : (this._mode = n.call(r, this, e && e.words), this._mode.__creator = n); }, _doProcessBlock: function (t, e) { this._mode.processBlock(t, e); }, _doFinalize: function () { var t = this.cfg.padding; if (this._xformMode == this._ENC_XFORM_MODE) {\r\n                t.pad(this._data, this.blockSize);\r\n                var e = this._process(!0);\r\n            }\r\n            else {\r\n                var e = this._process(!0);\r\n                t.unpad(e);\r\n            } return e; }, blockSize: 4 }), r.CipherParams = o.extend({ init: function (t) { this.mixIn(t); }, toString: function (t) { return (t || this.formatter).stringify(this); } })), _ = e.format = {}, v = _.OpenSSL = { stringify: function (t) { var e = t.ciphertext, r = t.salt; if (r)\r\n                var n = i.create([1398893684, 1701076831]).concat(r).concat(e);\r\n            else\r\n                var n = e; return n.toString(c); }, parse: function (t) { var e = c.parse(t), r = e.words; if (1398893684 == r[0] && 1701076831 == r[1]) {\r\n                var n = i.create(r.slice(2, 4));\r\n                r.splice(0, 4), e.sigBytes -= 16;\r\n            } return g.create({ ciphertext: e, salt: n }); } }, w = r.SerializableCipher = o.extend({ cfg: o.extend({ format: v }), encrypt: function (t, e, r, n) { n = this.cfg.extend(n); var o = t.createEncryptor(r, n), i = o.finalize(e), s = o.cfg; return g.create({ ciphertext: i, key: r, iv: s.iv, algorithm: t, mode: s.mode, padding: s.padding, blockSize: t.blockSize, formatter: n.format }); }, decrypt: function (t, e, r, n) { n = this.cfg.extend(n), e = this._parse(e, n.format); var o = t.createDecryptor(r, n).finalize(e.ciphertext); return o; }, _parse: function (t, e) { return "string" == typeof t ? e.parse(t, this) : t; } }), b = e.kdf = {}, B = b.OpenSSL = { execute: function (t, e, r, n) { n || (n = i.random(8)); var o = l.create({ keySize: e + r }).compute(t, n), s = i.create(o.words.slice(e), 4 * r); return o.sigBytes = 4 * e, g.create({ key: o, iv: s, salt: n }); } }, F = r.PasswordBasedCipher = w.extend({ cfg: w.cfg.extend({ kdf: B }), encrypt: function (t, e, r, n) { var o = (n = this.cfg.extend(n)).kdf.execute(r, t.keySize, t.ivSize); n.iv = o.iv; var i = w.encrypt.call(this, t, e, o.key, n); return i.mixIn(o), i; }, decrypt: function (t, e, r, n) { n = this.cfg.extend(n), e = this._parse(e, n.format); var o = n.kdf.execute(r, t.keySize, t.ivSize, e.salt); n.iv = o.iv; var i = w.decrypt.call(this, t, e, o.key, n); return i; } }); }())); }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(17), o = r(3), i = r(14), s = r(25);\r\n            function a(t) { n.BigNumber.config(i.ETH_BIGNUMBER_ROUNDING_MODE); var e = o.padLeft(o.toTwosComplement(t).toString(16), 64); return new s.SolidityParam(e); }\r\n            function c(t) { return "1" === new n.BigNumber(t.substr(0, 1), 16).toString(2).substr(0, 1); }\r\n            function u(t) { var e = t.staticPart() || "0"; return c(e) ? new n.BigNumber(e, 16).minus(new n.BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16)).minus(1) : new n.BigNumber(e, 16); }\r\n            function l(t) { var e = t.staticPart() || "0"; return new n.BigNumber(e, 16); }\r\n            e.formatInputInt = a, e.formatInputBytes = function (t) { var e = o.toHex(t).substr(2), r = Math.floor((e.length + 63) / 64); return e = o.padRight(e, 64 * r), new s.SolidityParam(e); }, e.formatInputDynamicBytes = function (t) { var e = o.toHex(t).substr(2), r = e.length / 2, n = Math.floor((e.length + 63) / 64); return e = o.padRight(e, 64 * n), new s.SolidityParam(a(r).value + e); }, e.formatInputString = function (t) { var e = o.fromUtf8(t).substr(2), r = e.length / 2, n = Math.floor((e.length + 63) / 64); return e = o.padRight(e, 64 * n), new s.SolidityParam(a(r).value + e); }, e.formatInputBool = function (t) { var e = "000000000000000000000000000000000000000000000000000000000000000" + (t ? "1" : "0"); return new s.SolidityParam(e); }, e.formatInputReal = function (t) { return a(new n.BigNumber(t).times(new n.BigNumber(2).pow(128))); }, e.signedIsNegative = c, e.formatOutputInt = u, e.formatOutputUInt = l, e.formatOutputReal = function (t) { return u(t).dividedBy(new n.BigNumber(2).pow(128)); }, e.formatOutputUReal = function (t) { return l(t).dividedBy(new n.BigNumber(2).pow(128)); }, e.formatOutputBool = function (t) { return "0000000000000000000000000000000000000000000000000000000000000001" === t.staticPart(); }, e.formatOutputBytes = function (t, e) { var r = e.match(/^bytes([0-9]*)/), n = parseInt(r[1], 10); return "0x" + t.staticPart().slice(0, 2 * n); }, e.formatOutputDynamicBytes = function (t) { var e = 2 * new n.BigNumber(t.dynamicPart().slice(0, 64), 16).toNumber(); return "0x" + t.dynamicPart().substr(64, e); }, e.formatOutputString = function (t) { var e = 2 * new n.BigNumber(t.dynamicPart().slice(0, 64), 16).toNumber(); return o.toUtf8(t.dynamicPart().substr(64, e)); }, e.formatOutputAddress = function (t) { var e = t.staticPart(); return "0x" + e.slice(e.length - 40, e.length); };\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(17), o = r(31), i = r(32), s = r(20);\r\n            function a(t, e) { var r = t; return e && "hex" === e.encoding && (r.length > 2 && "0x" === r.substr(0, 2) && (r = r.substr(2)), r = i.enc.Hex.parse(r)), s(r, { outputLength: 256 }).toString(); }\r\n            e.sha3 = a;\r\n            var c = { noether: "0", wei: "1", kwei: "1000", Kwei: "1000", babbage: "1000", femtoether: "1000", mwei: "1000000", Mwei: "1000000", lovelace: "1000000", picoether: "1000000", gwei: "1000000000", Gwei: "1000000000", shannon: "1000000000", nanoether: "1000000000", nano: "1000000000", szabo: "1000000000000", microether: "1000000000000", micro: "1000000000000", finney: "1000000000000000", milliether: "1000000000000000", milli: "1000000000000000", ether: "1000000000000000000", kether: "1000000000000000000000", grand: "1000000000000000000000", mether: "1000000000000000000000000", gether: "1000000000000000000000000000", tether: "1000000000000000000000000000000" };\r\n            function u(t, e, r) { return new Array(e - t.length + 1).join(r || "0") + t; }\r\n            function l(t, e) {\r\n                if (e === void 0) { e = !1; }\r\n                var r = o.encode(t), n = "";\r\n                for (var t_1 = 0; t_1 < r.length; t_1++) {\r\n                    var o_1 = r.charCodeAt(t_1);\r\n                    if (0 === o_1) {\r\n                        if (!e)\r\n                            break;\r\n                        n += "00";\r\n                    }\r\n                    else {\r\n                        var t_2 = o_1.toString(16);\r\n                        n += t_2.length < 2 ? "0" + t_2 : t_2;\r\n                    }\r\n                }\r\n                return "0x" + n;\r\n            }\r\n            function h(t) { var e = d(t), r = e.toString(16); return e.isLessThan(0) ? "-0x" + r.substr(1) : "0x" + r; }\r\n            function f(t) { if (v(t))\r\n                return h(+t); if (g(t))\r\n                return h(t); if ("object" == typeof t)\r\n                return l(JSON.stringify(t)); if (_(t)) {\r\n                var e_1 = t;\r\n                if (0 === e_1.indexOf("-0x"))\r\n                    return h(e_1);\r\n                if (0 === e_1.indexOf("0x"))\r\n                    return e_1;\r\n                if (!isFinite(e_1))\r\n                    return l(e_1, !0);\r\n            } return h(t); }\r\n            function p(t) { var e = t ? t.toLowerCase() : "ether", r = c[e]; if (void 0 === r)\r\n                throw new Error("This unit doesn\'t exists, please use the one of the following units" + JSON.stringify(c, null, 2)); return new n.BigNumber(r, 10); }\r\n            function d(t) { var e = t || 0; return g(e) ? e : "string" != typeof e || 0 !== e.indexOf("0x") && 0 !== e.indexOf("-0x") ? new n.BigNumber(e.toString(10), 10) : new n.BigNumber(e.replace("0x", ""), 16); }\r\n            function m(t) { return /^0x[0-9a-f]{40}$/i.test(t); }\r\n            function y(t) { var e = t.replace("0x", ""); var r = a(e.toLowerCase()); for (var t_3 = 0; t_3 < 40; t_3++)\r\n                if (parseInt(r[t_3], 16) > 7 && e[t_3].toUpperCase() !== e[t_3] || parseInt(r[t_3], 16) <= 7 && e[t_3].toLowerCase() !== e[t_3])\r\n                    return !1; return !0; }\r\n            function g(t) { return t instanceof n.BigNumber; }\r\n            function _(t) { return "string" == typeof t || t && t.constructor && "String" === t.constructor.name; }\r\n            function v(t) { return "boolean" == typeof t; }\r\n            e.padLeft = u, e.padRight = function (t, e, r) { return t + new Array(e - t.length + 1).join(r || "0"); }, e.toUtf8 = function (t) { var e = "", r = 0, n = t.length; for ("0x" === t.substring(0, 2) && (r = 2); r < n; r += 2) {\r\n                var n_1 = parseInt(t.substr(r, 2), 16);\r\n                if (0 === n_1)\r\n                    break;\r\n                e += String.fromCharCode(n_1);\r\n            } return o.decode(e); }, e.toAscii = function (t) { var e = "", r = 0, n = t.length; for ("0x" === t.substring(0, 2) && (r = 2); r < n; r += 2) {\r\n                var n_2 = parseInt(t.substr(r, 2), 16);\r\n                e += String.fromCharCode(n_2);\r\n            } return e; }, e.fromUtf8 = l, e.fromAscii = function (t, e) {\r\n                if (e === void 0) { e = 0; }\r\n                var r = "";\r\n                for (var e_2 = 0; e_2 < t.length; e_2++) {\r\n                    var n_3 = t.charCodeAt(e_2).toString(16);\r\n                    r += n_3.length < 2 ? "0" + n_3 : n_3;\r\n                }\r\n                return "0x" + r.padEnd(e, "0");\r\n            }, e.transformToFullName = function (t) { if (-1 !== t.name.indexOf("("))\r\n                return t.name; var e = t.inputs.map(function (t) { return t.type; }).join(); return t.name + "(" + e + ")"; }, e.extractDisplayName = function (t) { var e = t.indexOf("("), r = t.indexOf(")"); return -1 !== e && -1 !== r ? t.substr(0, e) : t; }, e.extractTypeName = function (t) { var e = t.indexOf("("), r = t.indexOf(")"); return -1 !== e && -1 !== r ? t.substr(e + 1, r - e - 1).replace(" ", "") : ""; }, e.isHex = function (t) { return "string" == typeof t && /^0x[0-9a-fA-F]+$/.test(t); }, e.toNullDecimal = function (t) { return null == t ? t : d(t).toNumber(); }, e.toDecimal = function (t) { return d(t).toNumber(); }, e.toString = function (t) { return g(t) ? t.toString(10) : "" + t; }, e.toData = function (t) { return "string" == typeof t && !t.startsWith("0x") && /^[A-Za-z0-9]+$/.test(t) ? "0x" + t : f(t); }, e.toBoolean = function (t) { return "boolean" == typeof t ? t : 0 !== d(t).toNumber(); }, e.fromDecimal = h, e.toHex = f, e.getValueOfUnit = p, e.fromWei = function (t, e) { var r = d(t).dividedBy(p(e)); return g(t) ? r : r.toString(10); }, e.toWei = function (t, e) { var r = d(t).times(p(e)); return g(t) ? r : r.toString(10); }, e.toBigNumber = d, e.toTwosComplement = function (t) { var e = d(t).integerValue(); return e.isLessThan(0) ? new n.BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16).plus(e).plus(1) : e; }, e.isStrictAddress = m, e.isAddress = function (t) { return !!/^(0x)?[0-9a-f]{40}$/i.test(t) && (!(!/^(0x)?[0-9a-f]{40}$/.test(t) && !/^(0x)?[0-9A-F]{40}$/.test(t)) || y(t)); }, e.isChecksumAddress = y, e.toChecksumAddress = function (t) { if (void 0 === t)\r\n                return ""; var e = t.toLowerCase().replace("0x", ""), r = a(e); var n = "0x"; for (var t_4 = 0; t_4 < e.length; t_4++)\r\n                parseInt(r[t_4], 16) > 7 ? n += e[t_4].toUpperCase() : n += e[t_4]; return n; }, e.toArray = function (t) { if (!Array.isArray(t))\r\n                throw new Error("Value was not an array: " + JSON.stringify(t)); return t; }, e.toAddress = function (t) { return m(t) ? t : /^[0-9a-f]{40}$/.test(t) ? "0x" + t : "0x" + u(f(t).substr(2), 40); }, e.isBigNumber = g, e.isString = _, e.isFunction = function (t) { return "function" == typeof t; }, e.isObject = function (t) { return null !== t && !Array.isArray(t) && "object" == typeof t; }, e.isBoolean = v, e.isArray = function (t) { return Array.isArray(t); }, e.isJson = function (t) { try {\r\n                return !!JSON.parse(t);\r\n            }\r\n            catch (t) {\r\n                return !1;\r\n            } }, e.isBloom = function (t) { return !(!/^(0x)?[0-9a-f]{512}$/i.test(t) || !/^(0x)?[0-9a-f]{512}$/.test(t) && !/^(0x)?[0-9A-F]{512}$/.test(t)); }, e.isTopic = function (t) { return !(!/^(0x)?[0-9a-f]{64}$/i.test(t) || !/^(0x)?[0-9a-f]{64}$/.test(t) && !/^(0x)?[0-9A-F]{64}$/.test(t)); };\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(2), o = r(25);\r\n            e.SolidityType = /** @class */ (function () {\r\n                function SolidityType(t) {\r\n                    this._inputFormatter = t.inputFormatter, this._outputFormatter = t.outputFormatter;\r\n                }\r\n                SolidityType.prototype.isType = function (t) { throw new Error("this method should be overrwritten for type " + t); };\r\n                SolidityType.prototype.staticPartLength = function (t) { return (this.nestedTypes(t) || ["[1]"]).map(function (t) { return parseInt(t.slice(1, -1), 10) || 1; }).reduce(function (t, e) { return t * e; }, 32); };\r\n                SolidityType.prototype.isDynamicArray = function (t) { var e = this.nestedTypes(t); return !!e && !e[e.length - 1].match(/[0-9]{1,}/g); };\r\n                SolidityType.prototype.isStaticArray = function (t) { var e = this.nestedTypes(t); return !!e && !!e[e.length - 1].match(/[0-9]{1,}/g); };\r\n                SolidityType.prototype.staticArrayLength = function (t) { var e = this.nestedTypes(t); if (e) {\r\n                    var t_5 = e[e.length - 1].match(/[0-9]{1,}/g);\r\n                    return parseInt(t_5[t_5.length - 1] || "1", 10);\r\n                } return 1; };\r\n                SolidityType.prototype.nestedName = function (t) { var e = this.nestedTypes(t); return e ? t.substr(0, t.length - e[e.length - 1].length) : t; };\r\n                SolidityType.prototype.isDynamicType = function (t) { return !1; };\r\n                SolidityType.prototype.nestedTypes = function (t) { return t.match(/(\\[[0-9]*\\])/g); };\r\n                SolidityType.prototype.encode = function (t, e) {\r\n                    var _this = this;\r\n                    if (this.isDynamicArray(e)) {\r\n                        var r_1 = t.length, o_2 = this.nestedName(e), i_1 = [];\r\n                        return i_1.push(n.formatInputInt(r_1).encode()), t.forEach(function (t) { i_1.push(_this.encode(t, o_2)); }), i_1;\r\n                    }\r\n                    if (this.isStaticArray(e)) {\r\n                        var r_2 = this.staticArrayLength(e), n_4 = this.nestedName(e), o_3 = [];\r\n                        for (var e_3 = 0; e_3 < r_2; e_3++)\r\n                            o_3.push(this.encode(t[e_3], n_4));\r\n                        return o_3;\r\n                    }\r\n                    return this._inputFormatter(t, e).encode();\r\n                };\r\n                SolidityType.prototype.decode = function (t, e, r) { if (this.isDynamicArray(r)) {\r\n                    var n_5 = parseInt("0x" + t.substr(2 * e, 64), 16), o_4 = parseInt("0x" + t.substr(2 * n_5, 64), 16), i_2 = n_5 + 32, s = this.nestedName(r), a = this.staticPartLength(s), c = 32 * Math.floor((a + 31) / 32), u = [];\r\n                    for (var e_4 = 0; e_4 < o_4 * c; e_4 += c)\r\n                        u.push(this.decode(t, i_2 + e_4, s));\r\n                    return u;\r\n                } if (this.isStaticArray(r)) {\r\n                    var n_6 = this.staticArrayLength(r), o_5 = e, i_3 = this.nestedName(r), s = this.staticPartLength(i_3), a = 32 * Math.floor((s + 31) / 32), c = [];\r\n                    for (var e_5 = 0; e_5 < n_6 * a; e_5 += a)\r\n                        c.push(this.decode(t, o_5 + e_5, i_3));\r\n                    return c;\r\n                } if (this.isDynamicType(r)) {\r\n                    var n_7 = parseInt("0x" + t.substr(2 * e, 64), 16), i_4 = parseInt("0x" + t.substr(2 * n_7, 64), 16), s = Math.floor((i_4 + 31) / 32), a = new o.SolidityParam(t.substr(2 * n_7, 64 * (1 + s)), 0);\r\n                    return this._outputFormatter(a, r);\r\n                } var n = this.staticPartLength(r), i = new o.SolidityParam(t.substr(2 * e, 2 * n)); return this._outputFormatter(i, r); };\r\n                return SolidityType;\r\n            }());\r\n        }, function (t, e, r) { var n, o, i, s, a, c, u, l; t.exports = (n = r(0), r(11), r(12), i = (o = n).lib, s = i.Base, a = i.WordArray, c = o.algo, u = c.MD5, l = c.EvpKDF = s.extend({ cfg: s.extend({ keySize: 4, hasher: u, iterations: 1 }), init: function (t) { this.cfg = this.cfg.extend(t); }, compute: function (t, e) { for (var r = this.cfg, n = r.hasher.create(), o = a.create(), i = o.words, s = r.keySize, c = r.iterations; i.length < s;) {\r\n                u && n.update(u);\r\n                var u = n.update(t).finalize(e);\r\n                n.reset();\r\n                for (var l = 1; l < c; l++)\r\n                    u = n.finalize(u), n.reset();\r\n                o.concat(u);\r\n            } return o.sigBytes = 4 * s, o; } }), o.EvpKDF = function (t, e, r) { return l.create(r).compute(t, e); }, n.EvpKDF); }, function (t, e, r) { var n, o, i; t.exports = (n = r(0), i = (o = n).lib.WordArray, o.enc.Base64 = { stringify: function (t) { var e = t.words, r = t.sigBytes, n = this._map; t.clamp(); for (var o = [], i = 0; i < r; i += 3)\r\n                for (var s = (e[i >>> 2] >>> 24 - i % 4 * 8 & 255) << 16 | (e[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255) << 8 | e[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255, a = 0; a < 4 && i + .75 * a < r; a++)\r\n                    o.push(n.charAt(s >>> 6 * (3 - a) & 63)); var c = n.charAt(64); if (c)\r\n                for (; o.length % 4;)\r\n                    o.push(c); return o.join(""); }, parse: function (t) { var e = t.length, r = this._map, n = this._reverseMap; if (!n) {\r\n                n = this._reverseMap = [];\r\n                for (var o = 0; o < r.length; o++)\r\n                    n[r.charCodeAt(o)] = o;\r\n            } var s = r.charAt(64); if (s) {\r\n                var a = t.indexOf(s);\r\n                -1 !== a && (e = a);\r\n            } return function (t, e, r) { for (var n = [], o = 0, s = 0; s < e; s++)\r\n                if (s % 4) {\r\n                    var a = r[t.charCodeAt(s - 1)] << s % 4 * 2, c = r[t.charCodeAt(s)] >>> 6 - s % 4 * 2;\r\n                    n[o >>> 2] |= (a | c) << 24 - o % 4 * 8, o++;\r\n                } return i.create(n, o); }(t, e, n); }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" }, n.enc.Base64); }, function (t, e, r) { var n; t.exports = (n = r(0), function (t) { var e = n, r = e.lib, o = r.WordArray, i = r.Hasher, s = e.algo, a = []; !function () { for (var e = 0; e < 64; e++)\r\n            a[e] = 4294967296 * t.abs(t.sin(e + 1)) | 0; }(); var c = s.MD5 = i.extend({ _doReset: function () { this._hash = new o.init([1732584193, 4023233417, 2562383102, 271733878]); }, _doProcessBlock: function (t, e) { for (var r = 0; r < 16; r++) {\r\n                var n = e + r, o = t[n];\r\n                t[n] = 16711935 & (o << 8 | o >>> 24) | 4278255360 & (o << 24 | o >>> 8);\r\n            } var i = this._hash.words, s = t[e + 0], c = t[e + 1], p = t[e + 2], d = t[e + 3], m = t[e + 4], y = t[e + 5], g = t[e + 6], _ = t[e + 7], v = t[e + 8], w = t[e + 9], b = t[e + 10], B = t[e + 11], F = t[e + 12], N = t[e + 13], k = t[e + 14], x = t[e + 15], S = i[0], A = i[1], O = i[2], T = i[3]; S = u(S, A, O, T, s, 7, a[0]), T = u(T, S, A, O, c, 12, a[1]), O = u(O, T, S, A, p, 17, a[2]), A = u(A, O, T, S, d, 22, a[3]), S = u(S, A, O, T, m, 7, a[4]), T = u(T, S, A, O, y, 12, a[5]), O = u(O, T, S, A, g, 17, a[6]), A = u(A, O, T, S, _, 22, a[7]), S = u(S, A, O, T, v, 7, a[8]), T = u(T, S, A, O, w, 12, a[9]), O = u(O, T, S, A, b, 17, a[10]), A = u(A, O, T, S, B, 22, a[11]), S = u(S, A, O, T, F, 7, a[12]), T = u(T, S, A, O, N, 12, a[13]), O = u(O, T, S, A, k, 17, a[14]), S = l(S, A = u(A, O, T, S, x, 22, a[15]), O, T, c, 5, a[16]), T = l(T, S, A, O, g, 9, a[17]), O = l(O, T, S, A, B, 14, a[18]), A = l(A, O, T, S, s, 20, a[19]), S = l(S, A, O, T, y, 5, a[20]), T = l(T, S, A, O, b, 9, a[21]), O = l(O, T, S, A, x, 14, a[22]), A = l(A, O, T, S, m, 20, a[23]), S = l(S, A, O, T, w, 5, a[24]), T = l(T, S, A, O, k, 9, a[25]), O = l(O, T, S, A, d, 14, a[26]), A = l(A, O, T, S, v, 20, a[27]), S = l(S, A, O, T, N, 5, a[28]), T = l(T, S, A, O, p, 9, a[29]), O = l(O, T, S, A, _, 14, a[30]), S = h(S, A = l(A, O, T, S, F, 20, a[31]), O, T, y, 4, a[32]), T = h(T, S, A, O, v, 11, a[33]), O = h(O, T, S, A, B, 16, a[34]), A = h(A, O, T, S, k, 23, a[35]), S = h(S, A, O, T, c, 4, a[36]), T = h(T, S, A, O, m, 11, a[37]), O = h(O, T, S, A, _, 16, a[38]), A = h(A, O, T, S, b, 23, a[39]), S = h(S, A, O, T, N, 4, a[40]), T = h(T, S, A, O, s, 11, a[41]), O = h(O, T, S, A, d, 16, a[42]), A = h(A, O, T, S, g, 23, a[43]), S = h(S, A, O, T, w, 4, a[44]), T = h(T, S, A, O, F, 11, a[45]), O = h(O, T, S, A, x, 16, a[46]), S = f(S, A = h(A, O, T, S, p, 23, a[47]), O, T, s, 6, a[48]), T = f(T, S, A, O, _, 10, a[49]), O = f(O, T, S, A, k, 15, a[50]), A = f(A, O, T, S, y, 21, a[51]), S = f(S, A, O, T, F, 6, a[52]), T = f(T, S, A, O, d, 10, a[53]), O = f(O, T, S, A, b, 15, a[54]), A = f(A, O, T, S, c, 21, a[55]), S = f(S, A, O, T, v, 6, a[56]), T = f(T, S, A, O, x, 10, a[57]), O = f(O, T, S, A, g, 15, a[58]), A = f(A, O, T, S, N, 21, a[59]), S = f(S, A, O, T, m, 6, a[60]), T = f(T, S, A, O, B, 10, a[61]), O = f(O, T, S, A, p, 15, a[62]), A = f(A, O, T, S, w, 21, a[63]), i[0] = i[0] + S | 0, i[1] = i[1] + A | 0, i[2] = i[2] + O | 0, i[3] = i[3] + T | 0; }, _doFinalize: function () { var e = this._data, r = e.words, n = 8 * this._nDataBytes, o = 8 * e.sigBytes; r[o >>> 5] |= 128 << 24 - o % 32; var i = t.floor(n / 4294967296), s = n; r[15 + (o + 64 >>> 9 << 4)] = 16711935 & (i << 8 | i >>> 24) | 4278255360 & (i << 24 | i >>> 8), r[14 + (o + 64 >>> 9 << 4)] = 16711935 & (s << 8 | s >>> 24) | 4278255360 & (s << 24 | s >>> 8), e.sigBytes = 4 * (r.length + 1), this._process(); for (var a = this._hash, c = a.words, u = 0; u < 4; u++) {\r\n                var l = c[u];\r\n                c[u] = 16711935 & (l << 8 | l >>> 24) | 4278255360 & (l << 24 | l >>> 8);\r\n            } return a; }, clone: function () { var t = i.clone.call(this); return t._hash = this._hash.clone(), t; } }); function u(t, e, r, n, o, i, s) { var a = t + (e & r | ~e & n) + o + s; return (a << i | a >>> 32 - i) + e; } function l(t, e, r, n, o, i, s) { var a = t + (e & n | r & ~n) + o + s; return (a << i | a >>> 32 - i) + e; } function h(t, e, r, n, o, i, s) { var a = t + (e ^ r ^ n) + o + s; return (a << i | a >>> 32 - i) + e; } function f(t, e, r, n, o, i, s) { var a = t + (r ^ (e | ~n)) + o + s; return (a << i | a >>> 32 - i) + e; } e.MD5 = i._createHelper(c), e.HmacMD5 = i._createHmacHelper(c); }(Math), n.MD5); }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(3), o = r(14);\r\n            function i(t) { return "latest" === t || "pending" === t || "earliest" === t; }\r\n            function s(t) { if (void 0 !== t && null != t)\r\n                return i(t) ? t : n.toHex(t); }\r\n            function a(t) { return t ? (null !== t.blockNumber && (t.blockNumber = n.toDecimal(t.blockNumber)), null !== t.transactionIndex && (t.transactionIndex = n.toDecimal(t.transactionIndex)), t.nonce = n.toDecimal(t.nonce), t.gas = n.toDecimal(t.gas), t.gasPrice = n.toBigNumber(t.gasPrice), t.value = n.toBigNumber(t.value), t) : null; }\r\n            function c(t) { return t ? (t.blockNumber && (t.blockNumber = n.toDecimal(t.blockNumber)), t.transactionIndex && (t.transactionIndex = n.toDecimal(t.transactionIndex)), t.logIndex && (t.logIndex = n.toDecimal(t.logIndex)), t) : null; }\r\n            function u(t) { if (n.isStrictAddress(t))\r\n                return t; if (n.isAddress(t))\r\n                return "0x" + t; throw new Error("Invalid address: " + JSON.stringify(t)); }\r\n            e.outputBigNumberFormatter = function (t) { return n.toBigNumber(t); }, e.isPredefinedBlockNumber = i, e.inputDefaultBlockNumberFormatter = function (t) { return void 0 === t ? o.defaultBlock : s(t); }, e.inputBlockNumberFormatter = s, e.inputCallFormatter = function (t) { return t.from = t.from, t.from && (t.from = u(t.from)), t.to && (t.to = u(t.to)), ["gasPrice", "gas", "value", "nonce"].filter(function (e) { return void 0 !== t[e]; }).forEach(function (e) { t[e] = n.fromDecimal(t[e]); }), t.data && !t.data.startsWith("0x") && /^[A-Za-z0-9]+$/.test(t.data) && (t.data = "0x" + t.data), t; }, e.inputTransactionFormatter = function (t) { if ("object" != typeof t)\r\n                throw new Error("Did not provide transaction options"); if (!t.from)\r\n                throw new Error(\'Missing "from" in transaction options\'); return t.from = u(t.from), t.to && (t.to = u(t.to)), ["gasPrice", "gas", "value", "nonce"].filter(function (e) { return void 0 !== t[e]; }).forEach(function (e) { t[e] = n.fromDecimal(t[e]); }), t.data && !t.data.startsWith("0x") && /^[A-Za-z0-9]+$/.test(t.data) && (t.data = "0x" + t.data), t; }, e.outputTransactionFormatter = a, e.outputTransactionReceiptFormatter = function (t) { return t ? (null !== t.blockNumber && (t.blockNumber = n.toDecimal(t.blockNumber)), null !== t.transactionIndex && (t.transactionIndex = n.toDecimal(t.transactionIndex)), t.cumulativeGasUsed = n.toDecimal(t.cumulativeGasUsed), t.gasUsed = n.toDecimal(t.gasUsed), n.isArray(t.logs) && (t.logs = t.logs.map(function (t) { return c(t); })), t.status = n.toDecimal(t.status), t) : null; }, e.outputBlockFormatter = function (t) { return t ? (t.gasLimit = n.toDecimal(t.gasLimit), t.gasUsed = n.toDecimal(t.gasUsed), t.size = n.toDecimal(t.size), t.timestamp = n.toDecimal(t.timestamp), null !== t.number && (t.number = n.toDecimal(t.number)), t.difficulty = n.toBigNumber(t.difficulty), t.totalDifficulty = n.toBigNumber(t.totalDifficulty), n.isArray(t.transactions) && t.transactions.forEach(function (t) { if (!n.isString(t))\r\n                return a(t); }), t) : null; }, e.outputLogFormatter = c, e.inputPostFormatter = function (t) { return t ? (t.ttl = n.fromDecimal(t.ttl), t.workToProve = n.fromDecimal(t.workToProve), t.priority = n.fromDecimal(t.priority), n.isArray(t.topics) || (t.topics = t.topics ? [t.topics] : []), t.topics = t.topics.map(function (t) { return 0 === t.indexOf("0x") ? t : n.fromUtf8(t); }), t) : null; }, e.outputPostFormatter = function (t) { return t ? (t.expiry = n.toDecimal(t.expiry), t.sent = n.toDecimal(t.sent), t.ttl = n.toDecimal(t.ttl), t.workProved = n.toDecimal(t.workProved), t.topics || (t.topics = []), t.topics = t.topics.map(function (t) { return n.toAscii(t); }), t) : null; }, e.inputAddressFormatter = u, e.outputSyncingFormatter = function (t) { return t ? (t.startingBlock = n.toDecimal(t.startingBlock), t.currentBlock = n.toDecimal(t.currentBlock), t.highestBlock = n.toDecimal(t.highestBlock), t.knownStates && (t.knownStates = n.toDecimal(t.knownStates), t.pulledStates = n.toDecimal(t.pulledStates)), t) : t; };\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            function n() { var t, e; var r = new Promise(function (n, o) { t = (function (t) { n(t), r.isPending = !1; }), e = (function (t) { o(t), r.isPending = !1; }); }).catch(function (t) { return Promise.reject(t); }); return r.resolve = t, r.reject = e, "finally" in r || (r.finally = (function (t) { r.then(t), r.catch(t); })), r.isPending = !0, r; }\r\n            Object.defineProperty(e, "__esModule", { value: !0 }), e.future = n, e.default = n;\r\n        }, function (t, e, r) { var n, o, i, s, a, c; t.exports = (n = r(0), i = (o = n).lib, s = i.Base, a = i.WordArray, (c = o.x64 = {}).Word = s.extend({ init: function (t, e) { this.high = t, this.low = e; } }), c.WordArray = s.extend({ init: function (t, e) { t = this.words = t || [], this.sigBytes = null != e ? e : 8 * t.length; }, toX32: function () { for (var t = this.words, e = t.length, r = [], n = 0; n < e; n++) {\r\n                var o = t[n];\r\n                r.push(o.high), r.push(o.low);\r\n            } return a.create(r, this.sigBytes); }, clone: function () { for (var t = s.clone.call(this), e = t.words = this.words.slice(0), r = e.length, n = 0; n < r; n++)\r\n                e[n] = e[n].clone(); return t; } }), n); }, function (t, e, r) { var n, o, i, s, a, c, u, l; t.exports = (n = r(0), i = (o = n).lib, s = i.WordArray, a = i.Hasher, c = o.algo, u = [], l = c.SHA1 = a.extend({ _doReset: function () { this._hash = new s.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520]); }, _doProcessBlock: function (t, e) { for (var r = this._hash.words, n = r[0], o = r[1], i = r[2], s = r[3], a = r[4], c = 0; c < 80; c++) {\r\n                if (c < 16)\r\n                    u[c] = 0 | t[e + c];\r\n                else {\r\n                    var l = u[c - 3] ^ u[c - 8] ^ u[c - 14] ^ u[c - 16];\r\n                    u[c] = l << 1 | l >>> 31;\r\n                }\r\n                var h = (n << 5 | n >>> 27) + a + u[c];\r\n                h += c < 20 ? 1518500249 + (o & i | ~o & s) : c < 40 ? 1859775393 + (o ^ i ^ s) : c < 60 ? (o & i | o & s | i & s) - 1894007588 : (o ^ i ^ s) - 899497514, a = s, s = i, i = o << 30 | o >>> 2, o = n, n = h;\r\n            } r[0] = r[0] + n | 0, r[1] = r[1] + o | 0, r[2] = r[2] + i | 0, r[3] = r[3] + s | 0, r[4] = r[4] + a | 0; }, _doFinalize: function () { var t = this._data, e = t.words, r = 8 * this._nDataBytes, n = 8 * t.sigBytes; return e[n >>> 5] |= 128 << 24 - n % 32, e[14 + (n + 64 >>> 9 << 4)] = Math.floor(r / 4294967296), e[15 + (n + 64 >>> 9 << 4)] = r, t.sigBytes = 4 * e.length, this._process(), this._hash; }, clone: function () { var t = a.clone.call(this); return t._hash = this._hash.clone(), t; } }), o.SHA1 = a._createHelper(l), o.HmacSHA1 = a._createHmacHelper(l), n.SHA1); }, function (t, e, r) { var n, o, i, s, a, c, u; t.exports = (n = r(0), i = (o = n).lib, s = i.Base, a = o.enc, c = a.Utf8, u = o.algo, void (u.HMAC = s.extend({ init: function (t, e) { t = this._hasher = new t.init, "string" == typeof e && (e = c.parse(e)); var r = t.blockSize, n = 4 * r; e.sigBytes > n && (e = t.finalize(e)), e.clamp(); for (var o = this._oKey = e.clone(), i = this._iKey = e.clone(), s = o.words, a = i.words, u = 0; u < r; u++)\r\n                s[u] ^= 1549556828, a[u] ^= 909522486; o.sigBytes = i.sigBytes = n, this.reset(); }, reset: function () { var t = this._hasher; t.reset(), t.update(this._iKey); }, update: function (t) { return this._hasher.update(t), this; }, finalize: function (t) { var e = this._hasher, r = e.finalize(t); e.reset(); var n = e.finalize(this._oKey.clone().concat(r)); return n; } }))); }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 }), e.InvalidNumberOfSolidityArgs = function (t, e) { return new Error("Invalid number of arguments to Solidity function. given: " + t + ", expected: " + e); }, e.InvalidNumberOfRPCParams = function (t, e, r) { return new Error("Invalid number of input parameters to RPC method \\"" + t + "\\" given: " + e + ", expected: " + r); }, e.InvalidConnection = function (t) { return new Error("CONNECTION ERROR: Couldn\'t connect to node " + t + "."); }, e.InvalidProvider = function () { return new Error("Provider not set or invalid"); }, e.InvalidResponse = function (t) { var e = t && t.error && t.error.message ? t.error.message : "Invalid JSON RPC response: " + JSON.stringify(t); return new Error(e); }, e.ConnectionTimeout = function (t) { return new Error("CONNECTION TIMEOUT: timeout of " + t + " ms achived"); };\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(57);\r\n            e.ETH_UNITS = ["wei", "kwei", "Mwei", "Gwei", "szabo", "finney", "femtoether", "picoether", "nanoether", "microether", "milliether", "nano", "micro", "milli", "ether", "grand", "Mether", "Gether", "Tether", "Pether", "Eether", "Zether", "Yether", "Nether", "Dether", "Vether", "Uether"], e.ETH_PADDING = 32, e.ETH_SIGNATURE_LENGTH = 4, e.ETH_BIGNUMBER_ROUNDING_MODE = { ROUNDING_MODE: n.BigNumberRoundingMode.ROUND_DOWN }, e.ETH_POLLING_TIMEOUT = 500, e.defaultBlock = "latest";\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(2), o = r(61), i = r(62), s = r(63), a = r(64), c = r(65), u = r(66), l = r(67), h = r(68), f = r(69);\r\n            function p(t, e) { return t.isDynamicType(e) || t.isDynamicArray(e); }\r\n            var d = /** @class */ (function () {\r\n                function d(t) {\r\n                    this._types = t;\r\n                }\r\n                d.prototype._requireType = function (t) { var e = this._types.filter(function (e) { return e.isType(t); })[0]; if (!e)\r\n                    throw Error("invalid solidity type!: " + t); return e; };\r\n                d.prototype.encodeParam = function (t, e) { return this.encodeParams([t], [e]); };\r\n                d.prototype.encodeParams = function (t, e) { var r = this.getSolidityTypes(t), n = r.map(function (r, n) { return r.encode(e[n], t[n]); }), o = r.reduce(function (e, n, o) { var i = n.staticPartLength(t[o]), s = 32 * Math.floor((i + 31) / 32); return e + (p(r[o], t[o]) ? 32 : s); }, 0); return this.encodeMultiWithOffset(t, r, n, o); };\r\n                d.prototype.encodeMultiWithOffset = function (t, e, r, o) {\r\n                    var _this = this;\r\n                    var i = o, s = "";\r\n                    return t.forEach(function (o, a) { if (p(e[a], t[a])) {\r\n                        s += n.formatInputInt(i).encode();\r\n                        var o_6 = _this.encodeWithOffset(t[a], e[a], r[a], i);\r\n                        i += o_6.length / 2;\r\n                    }\r\n                    else\r\n                        s += _this.encodeWithOffset(t[a], e[a], r[a], i); }), t.forEach(function (n, o) { if (p(e[o], t[o])) {\r\n                        var n_8 = _this.encodeWithOffset(t[o], e[o], r[o], i);\r\n                        i += n_8.length / 2, s += n_8;\r\n                    } }), s;\r\n                };\r\n                d.prototype.encodeWithOffset = function (t, e, r, o) { var i = 1, s = 2, a = 3, c = e.isDynamicArray(t) ? i : e.isStaticArray(t) ? s : a; if (c !== a) {\r\n                    var a_1 = e.nestedName(t), u_1 = e.staticPartLength(a_1), l_1 = c === i ? r[0] : "";\r\n                    if (e.isDynamicArray(a_1)) {\r\n                        var t_6 = c === i ? 2 : 0;\r\n                        for (var e_6 = 0; e_6 < r.length; e_6++)\r\n                            c === i ? t_6 += +r[e_6 - 1][0] || 0 : c === s && (t_6 += +(r[e_6 - 1] || [])[0] || 0), l_1 += n.formatInputInt(o + e_6 * u_1 + 32 * t_6).encode();\r\n                    }\r\n                    var h_1 = c === i ? r.length - 1 : r.length;\r\n                    for (var t_7 = 0; t_7 < h_1; t_7++) {\r\n                        var n_9 = l_1 / 2;\r\n                        c === i ? l_1 += this.encodeWithOffset(a_1, e, r[t_7 + 1], o + n_9) : c === s && (l_1 += this.encodeWithOffset(a_1, e, r[t_7], o + n_9));\r\n                    }\r\n                    return l_1;\r\n                } return r; };\r\n                d.prototype.decodeParam = function (t, e) { return this.decodeParams([t], e)[0]; };\r\n                d.prototype.decodeParams = function (t, e) { var r = this.getSolidityTypes(t), n = this.getOffsets(t, r); return r.map(function (r, o) { return r.decode(e, n[o], t[o]); }); };\r\n                d.prototype.getOffsets = function (t, e) { var r = e.map(function (e, r) { return e.staticPartLength(t[r]); }); for (var t_8 = 1; t_8 < r.length; t_8++)\r\n                    r[t_8] += r[t_8 - 1]; return r.map(function (r, n) { return r - e[n].staticPartLength(t[n]); }); };\r\n                d.prototype.getSolidityTypes = function (t) {\r\n                    var _this = this;\r\n                    return t.map(function (t) { return _this._requireType(t); });\r\n                };\r\n                return d;\r\n            }());\r\n            e.SolidityCoder = d, e.coder = new d([new o.SolidityTypeAddress, new i.SolidityTypeBool, new s.SolidityTypeInt, new a.SolidityTypeUInt, new c.SolidityTypeDynamicBytes, new f.SolidityTypeBytes, new u.SolidityTypeString, new l.SolidityTypeReal, new h.SolidityTypeUReal]);\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 }), e.toRPC = function (t) { if (t.jsonrpc = "2.0", !t.id || "number" != typeof t.id || Math.floor(t.id) !== t.id)\r\n                throw new Error("Invalid RPC message(invalid id) message: " + JSON.stringify(t)); if (!t.method || "string" != typeof t.method || 0 === t.method.trim().length)\r\n                throw new Error("Invalid RPC message(invalid method) message: " + JSON.stringify(t)); if (!t.params || "object" != typeof t.params)\r\n                throw new Error("Invalid RPC message(invalid params) message: " + JSON.stringify(t)); return t; };\r\n        }, function (t, e, r) { var n; !function (o) {\r\n            "use strict";\r\n            var i, s = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i, a = Math.ceil, c = Math.floor, u = "[BigNumber Error] ", l = u + "Number primitive has more than 15 significant digits: ", h = 1e14, f = 14, p = 9007199254740991, d = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], m = 1e7, y = 1e9;\r\n            function g(t) { var e = 0 | t; return t > 0 || t === e ? e : e - 1; }\r\n            function _(t) { for (var e, r, n = 1, o = t.length, i = t[0] + ""; n < o;) {\r\n                for (e = t[n++] + "", r = f - e.length; r--; e = "0" + e)\r\n                    ;\r\n                i += e;\r\n            } for (o = i.length; 48 === i.charCodeAt(--o);)\r\n                ; return i.slice(0, o + 1 || 1); }\r\n            function v(t, e) { var r, n, o = t.c, i = e.c, s = t.s, a = e.s, c = t.e, u = e.e; if (!s || !a)\r\n                return null; if (r = o && !o[0], n = i && !i[0], r || n)\r\n                return r ? n ? 0 : -a : s; if (s != a)\r\n                return s; if (r = s < 0, n = c == u, !o || !i)\r\n                return n ? 0 : !o ^ r ? 1 : -1; if (!n)\r\n                return c > u ^ r ? 1 : -1; for (a = (c = o.length) < (u = i.length) ? c : u, s = 0; s < a; s++)\r\n                if (o[s] != i[s])\r\n                    return o[s] > i[s] ^ r ? 1 : -1; return c == u ? 0 : c > u ^ r ? 1 : -1; }\r\n            function w(t, e, r, n) { if (t < e || t > r || t !== (t < 0 ? a(t) : c(t)))\r\n                throw Error(u + (n || "Argument") + ("number" == typeof t ? t < e || t > r ? " out of range: " : " not an integer: " : " not a primitive number: ") + t); }\r\n            function b(t) { return "[object Array]" == Object.prototype.toString.call(t); }\r\n            function B(t) { var e = t.c.length - 1; return g(t.e / f) == e && t.c[e] % 2 != 0; }\r\n            function F(t, e) { return (t.length > 1 ? t.charAt(0) + "." + t.slice(1) : t) + (e < 0 ? "e" : "e+") + e; }\r\n            function N(t, e, r) { var n, o; if (e < 0) {\r\n                for (o = r + "."; ++e; o += r)\r\n                    ;\r\n                t = o + t;\r\n            }\r\n            else if (++e > (n = t.length)) {\r\n                for (o = r, e -= n; --e; o += r)\r\n                    ;\r\n                t += o;\r\n            }\r\n            else\r\n                e < n && (t = t.slice(0, e) + "." + t.slice(e)); return t; }\r\n            (i = function t(e) { var r, n, o, i, k, x, S, A, O, T = W.prototype = { constructor: W, toString: null, valueOf: null }, P = new W(1), M = 20, C = 4, E = -7, D = 21, R = -1e7, I = 1e7, H = !1, j = 1, U = 0, L = { decimalSeparator: ".", groupSeparator: ",", groupSize: 3, secondaryGroupSize: 0, fractionGroupSeparator: " ", fractionGroupSize: 0 }, z = "0123456789abcdefghijklmnopqrstuvwxyz"; function W(t, e) { var r, i, a, u, h, d, m, y = this; if (!(y instanceof W))\r\n                return new W(t, e); if (null == e) {\r\n                if (t instanceof W)\r\n                    return y.s = t.s, y.e = t.e, void (y.c = (t = t.c) ? t.slice() : t);\r\n                if ((h = "number" == typeof t) && 0 * t == 0) {\r\n                    if (y.s = 1 / t < 0 ? (t = -t, -1) : 1, t === ~~t) {\r\n                        for (a = 0, u = t; u >= 10; u /= 10, a++)\r\n                            ;\r\n                        return y.e = a, void (y.c = [t]);\r\n                    }\r\n                    m = t + "";\r\n                }\r\n                else {\r\n                    if (!s.test(m = t + ""))\r\n                        return o(y, m, h);\r\n                    y.s = 45 == m.charCodeAt(0) ? (m = m.slice(1), -1) : 1;\r\n                }\r\n            }\r\n            else {\r\n                if (w(e, 2, z.length, "Base"), m = t + "", 10 == e)\r\n                    return V(y = new W(t instanceof W ? t : m), M + y.e + 1, C);\r\n                if (h = "number" == typeof t) {\r\n                    if (0 * t != 0)\r\n                        return o(y, m, h, e);\r\n                    if (y.s = 1 / t < 0 ? (m = m.slice(1), -1) : 1, W.DEBUG && m.replace(/^0\\.0*|\\./, "").length > 15)\r\n                        throw Error(l + t);\r\n                    h = !1;\r\n                }\r\n                else\r\n                    y.s = 45 === m.charCodeAt(0) ? (m = m.slice(1), -1) : 1, e > 10 && e < 37 && (m = m.toLowerCase());\r\n                for (r = z.slice(0, e), a = u = 0, d = m.length; u < d; u++)\r\n                    if (r.indexOf(i = m.charAt(u)) < 0) {\r\n                        if ("." == i && u > a) {\r\n                            a = d;\r\n                            continue;\r\n                        }\r\n                        return o(y, t + "", h, e);\r\n                    }\r\n                m = n(m, e, 10, y.s);\r\n            } for ((a = m.indexOf(".")) > -1 && (m = m.replace(".", "")), (u = m.search(/e/i)) > 0 ? (a < 0 && (a = u), a += +m.slice(u + 1), m = m.substring(0, u)) : a < 0 && (a = m.length), u = 0; 48 === m.charCodeAt(u); u++)\r\n                ; for (d = m.length; 48 === m.charCodeAt(--d);)\r\n                ; if (m = m.slice(u, ++d)) {\r\n                if (d -= u, h && W.DEBUG && d > 15 && (t > p || t !== c(t)))\r\n                    throw Error(l + y.s * t);\r\n                if ((a = a - u - 1) > I)\r\n                    y.c = y.e = null;\r\n                else if (a < R)\r\n                    y.c = [y.e = 0];\r\n                else {\r\n                    if (y.e = a, y.c = [], u = (a + 1) % f, a < 0 && (u += f), u < d) {\r\n                        for (u && y.c.push(+m.slice(0, u)), d -= f; u < d;)\r\n                            y.c.push(+m.slice(u, u += f));\r\n                        m = m.slice(u), u = f - m.length;\r\n                    }\r\n                    else\r\n                        u -= d;\r\n                    for (; u--; m += "0")\r\n                        ;\r\n                    y.c.push(+m);\r\n                }\r\n            }\r\n            else\r\n                y.c = [y.e = 0]; } function q(t, e, r, n) { var o, i, s, a, c; if (null == r ? r = C : w(r, 0, 8), !t.c)\r\n                return t.toString(); if (o = t.c[0], s = t.e, null == e)\r\n                c = _(t.c), c = 1 == n || 2 == n && s <= E ? F(c, s) : N(c, s, "0");\r\n            else if (i = (t = V(new W(t), e, r)).e, a = (c = _(t.c)).length, 1 == n || 2 == n && (e <= i || i <= E)) {\r\n                for (; a < e; c += "0", a++)\r\n                    ;\r\n                c = F(c, i);\r\n            }\r\n            else if (e -= s, c = N(c, i, "0"), i + 1 > a) {\r\n                if (--e > 0)\r\n                    for (c += "."; e--; c += "0")\r\n                        ;\r\n            }\r\n            else if ((e += i - a) > 0)\r\n                for (i + 1 == a && (c += "."); e--; c += "0")\r\n                    ; return t.s < 0 && o ? "-" + c : c; } function $(t, e) { var r, n, o = 0; for (b(t[0]) && (t = t[0]), r = new W(t[0]); ++o < t.length;) {\r\n                if (!(n = new W(t[o])).s) {\r\n                    r = n;\r\n                    break;\r\n                }\r\n                e.call(r, n) && (r = n);\r\n            } return r; } function G(t, e, r) { for (var n = 1, o = e.length; !e[--o]; e.pop())\r\n                ; for (o = e[0]; o >= 10; o /= 10, n++)\r\n                ; return (r = n + r * f - 1) > I ? t.c = t.e = null : r < R ? t.c = [t.e = 0] : (t.e = r, t.c = e), t; } function V(t, e, r, n) { var o, i, s, u, l, p, m, y = t.c, g = d; if (y) {\r\n                t: {\r\n                    for (o = 1, u = y[0]; u >= 10; u /= 10, o++)\r\n                        ;\r\n                    if ((i = e - o) < 0)\r\n                        i += f, s = e, m = (l = y[p = 0]) / g[o - s - 1] % 10 | 0;\r\n                    else if ((p = a((i + 1) / f)) >= y.length) {\r\n                        if (!n)\r\n                            break t;\r\n                        for (; y.length <= p; y.push(0))\r\n                            ;\r\n                        l = m = 0, o = 1, s = (i %= f) - f + 1;\r\n                    }\r\n                    else {\r\n                        for (l = u = y[p], o = 1; u >= 10; u /= 10, o++)\r\n                            ;\r\n                        m = (s = (i %= f) - f + o) < 0 ? 0 : l / g[o - s - 1] % 10 | 0;\r\n                    }\r\n                    if (n = n || e < 0 || null != y[p + 1] || (s < 0 ? l : l % g[o - s - 1]), n = r < 4 ? (m || n) && (0 == r || r == (t.s < 0 ? 3 : 2)) : m > 5 || 5 == m && (4 == r || n || 6 == r && (i > 0 ? s > 0 ? l / g[o - s] : 0 : y[p - 1]) % 10 & 1 || r == (t.s < 0 ? 8 : 7)), e < 1 || !y[0])\r\n                        return y.length = 0, n ? (e -= t.e + 1, y[0] = g[(f - e % f) % f], t.e = -e || 0) : y[0] = t.e = 0, t;\r\n                    if (0 == i ? (y.length = p, u = 1, p--) : (y.length = p + 1, u = g[f - i], y[p] = s > 0 ? c(l / g[o - s] % g[s]) * u : 0), n)\r\n                        for (;;) {\r\n                            if (0 == p) {\r\n                                for (i = 1, s = y[0]; s >= 10; s /= 10, i++)\r\n                                    ;\r\n                                for (s = y[0] += u, u = 1; s >= 10; s /= 10, u++)\r\n                                    ;\r\n                                i != u && (t.e++, y[0] == h && (y[0] = 1));\r\n                                break;\r\n                            }\r\n                            if (y[p] += u, y[p] != h)\r\n                                break;\r\n                            y[p--] = 0, u = 1;\r\n                        }\r\n                    for (i = y.length; 0 === y[--i]; y.pop())\r\n                        ;\r\n                }\r\n                t.e > I ? t.c = t.e = null : t.e < R && (t.c = [t.e = 0]);\r\n            } return t; } return W.clone = t, W.ROUND_UP = 0, W.ROUND_DOWN = 1, W.ROUND_CEIL = 2, W.ROUND_FLOOR = 3, W.ROUND_HALF_UP = 4, W.ROUND_HALF_DOWN = 5, W.ROUND_HALF_EVEN = 6, W.ROUND_HALF_CEIL = 7, W.ROUND_HALF_FLOOR = 8, W.EUCLID = 9, W.config = W.set = function (t) { var e, r; if (null != t) {\r\n                if ("object" != typeof t)\r\n                    throw Error(u + "Object expected: " + t);\r\n                if (t.hasOwnProperty(e = "DECIMAL_PLACES") && (w(r = t[e], 0, y, e), M = r), t.hasOwnProperty(e = "ROUNDING_MODE") && (w(r = t[e], 0, 8, e), C = r), t.hasOwnProperty(e = "EXPONENTIAL_AT") && (b(r = t[e]) ? (w(r[0], -y, 0, e), w(r[1], 0, y, e), E = r[0], D = r[1]) : (w(r, -y, y, e), E = -(D = r < 0 ? -r : r))), t.hasOwnProperty(e = "RANGE"))\r\n                    if (b(r = t[e]))\r\n                        w(r[0], -y, -1, e), w(r[1], 1, y, e), R = r[0], I = r[1];\r\n                    else {\r\n                        if (w(r, -y, y, e), !r)\r\n                            throw Error(u + e + " cannot be zero: " + r);\r\n                        R = -(I = r < 0 ? -r : r);\r\n                    }\r\n                if (t.hasOwnProperty(e = "CRYPTO")) {\r\n                    if ((r = t[e]) !== !!r)\r\n                        throw Error(u + e + " not true or false: " + r);\r\n                    if (r) {\r\n                        if ("undefined" == typeof crypto || !crypto || !crypto.getRandomValues && !crypto.randomBytes)\r\n                            throw H = !r, Error(u + "crypto unavailable");\r\n                        H = r;\r\n                    }\r\n                    else\r\n                        H = r;\r\n                }\r\n                if (t.hasOwnProperty(e = "MODULO_MODE") && (w(r = t[e], 0, 9, e), j = r), t.hasOwnProperty(e = "POW_PRECISION") && (w(r = t[e], 0, y, e), U = r), t.hasOwnProperty(e = "FORMAT")) {\r\n                    if ("object" != typeof (r = t[e]))\r\n                        throw Error(u + e + " not an object: " + r);\r\n                    L = r;\r\n                }\r\n                if (t.hasOwnProperty(e = "ALPHABET")) {\r\n                    if ("string" != typeof (r = t[e]) || /^.$|\\.|(.).*\\1/.test(r))\r\n                        throw Error(u + e + " invalid: " + r);\r\n                    z = r;\r\n                }\r\n            } return { DECIMAL_PLACES: M, ROUNDING_MODE: C, EXPONENTIAL_AT: [E, D], RANGE: [R, I], CRYPTO: H, MODULO_MODE: j, POW_PRECISION: U, FORMAT: L, ALPHABET: z }; }, W.isBigNumber = function (t) { return t instanceof W || t && !0 === t._isBigNumber || !1; }, W.maximum = W.max = function () { return $(arguments, T.lt); }, W.minimum = W.min = function () { return $(arguments, T.gt); }, W.random = (i = 9007199254740992 * Math.random() & 2097151 ? function () { return c(9007199254740992 * Math.random()); } : function () { return 8388608 * (1073741824 * Math.random() | 0) + (8388608 * Math.random() | 0); }, function (t) { var e, r, n, o, s, l = 0, h = [], p = new W(P); if (null == t ? t = M : w(t, 0, y), o = a(t / f), H)\r\n                if (crypto.getRandomValues) {\r\n                    for (e = crypto.getRandomValues(new Uint32Array(o *= 2)); l < o;)\r\n                        (s = 131072 * e[l] + (e[l + 1] >>> 11)) >= 9e15 ? (r = crypto.getRandomValues(new Uint32Array(2)), e[l] = r[0], e[l + 1] = r[1]) : (h.push(s % 1e14), l += 2);\r\n                    l = o / 2;\r\n                }\r\n                else {\r\n                    if (!crypto.randomBytes)\r\n                        throw H = !1, Error(u + "crypto unavailable");\r\n                    for (e = crypto.randomBytes(o *= 7); l < o;)\r\n                        (s = 281474976710656 * (31 & e[l]) + 1099511627776 * e[l + 1] + 4294967296 * e[l + 2] + 16777216 * e[l + 3] + (e[l + 4] << 16) + (e[l + 5] << 8) + e[l + 6]) >= 9e15 ? crypto.randomBytes(7).copy(e, l) : (h.push(s % 1e14), l += 7);\r\n                    l = o / 7;\r\n                } if (!H)\r\n                for (; l < o;)\r\n                    (s = i()) < 9e15 && (h[l++] = s % 1e14); for (o = h[--l], t %= f, o && t && (s = d[f - t], h[l] = c(o / s) * s); 0 === h[l]; h.pop(), l--)\r\n                ; if (l < 0)\r\n                h = [n = 0];\r\n            else {\r\n                for (n = -1; 0 === h[0]; h.splice(0, 1), n -= f)\r\n                    ;\r\n                for (l = 1, s = h[0]; s >= 10; s /= 10, l++)\r\n                    ;\r\n                l < f && (n -= f - l);\r\n            } return p.e = n, p.c = h, p; }), n = function () { function t(t, e, r, n) { for (var o, i, s = [0], a = 0, c = t.length; a < c;) {\r\n                for (i = s.length; i--; s[i] *= e)\r\n                    ;\r\n                for (s[0] += n.indexOf(t.charAt(a++)), o = 0; o < s.length; o++)\r\n                    s[o] > r - 1 && (null == s[o + 1] && (s[o + 1] = 0), s[o + 1] += s[o] / r | 0, s[o] %= r);\r\n            } return s.reverse(); } return function (e, n, o, i, s) { var a, c, u, l, h, f, p, d, m = e.indexOf("."), y = M, g = C; for (m >= 0 && (l = U, U = 0, e = e.replace(".", ""), f = (d = new W(n)).pow(e.length - m), U = l, d.c = t(N(_(f.c), f.e, "0"), 10, o, "0123456789"), d.e = d.c.length), u = l = (p = t(e, n, o, s ? (a = z, "0123456789") : (a = "0123456789", z))).length; 0 == p[--l]; p.pop())\r\n                ; if (!p[0])\r\n                return a.charAt(0); if (m < 0 ? --u : (f.c = p, f.e = u, f.s = i, p = (f = r(f, d, y, g, o)).c, h = f.r, u = f.e), m = p[c = u + y + 1], l = o / 2, h = h || c < 0 || null != p[c + 1], h = g < 4 ? (null != m || h) && (0 == g || g == (f.s < 0 ? 3 : 2)) : m > l || m == l && (4 == g || h || 6 == g && 1 & p[c - 1] || g == (f.s < 0 ? 8 : 7)), c < 1 || !p[0])\r\n                e = h ? N(a.charAt(1), -y, a.charAt(0)) : a.charAt(0);\r\n            else {\r\n                if (p.length = c, h)\r\n                    for (--o; ++p[--c] > o;)\r\n                        p[c] = 0, c || (++u, p = [1].concat(p));\r\n                for (l = p.length; !p[--l];)\r\n                    ;\r\n                for (m = 0, e = ""; m <= l; e += a.charAt(p[m++]))\r\n                    ;\r\n                e = N(e, u, a.charAt(0));\r\n            } return e; }; }(), r = function () { function t(t, e, r) { var n, o, i, s, a = 0, c = t.length, u = e % m, l = e / m | 0; for (t = t.slice(); c--;)\r\n                a = ((o = u * (i = t[c] % m) + (n = l * i + (s = t[c] / m | 0) * u) % m * m + a) / r | 0) + (n / m | 0) + l * s, t[c] = o % r; return a && (t = [a].concat(t)), t; } function e(t, e, r, n) { var o, i; if (r != n)\r\n                i = r > n ? 1 : -1;\r\n            else\r\n                for (o = i = 0; o < r; o++)\r\n                    if (t[o] != e[o]) {\r\n                        i = t[o] > e[o] ? 1 : -1;\r\n                        break;\r\n                    } return i; } function r(t, e, r, n) { for (var o = 0; r--;)\r\n                t[r] -= o, o = t[r] < e[r] ? 1 : 0, t[r] = o * n + t[r] - e[r]; for (; !t[0] && t.length > 1; t.splice(0, 1))\r\n                ; } return function (n, o, i, s, a) { var u, l, p, d, m, y, _, v, w, b, B, F, N, k, x, S, A, O = n.s == o.s ? 1 : -1, T = n.c, P = o.c; if (!(T && T[0] && P && P[0]))\r\n                return new W(n.s && o.s && (T ? !P || T[0] != P[0] : P) ? T && 0 == T[0] || !P ? 0 * O : O / 0 : NaN); for (w = (v = new W(O)).c = [], O = i + (l = n.e - o.e) + 1, a || (a = h, l = g(n.e / f) - g(o.e / f), O = O / f | 0), p = 0; P[p] == (T[p] || 0); p++)\r\n                ; if (P[p] > (T[p] || 0) && l--, O < 0)\r\n                w.push(1), d = !0;\r\n            else {\r\n                for (k = T.length, S = P.length, p = 0, O += 2, (m = c(a / (P[0] + 1))) > 1 && (P = t(P, m, a), T = t(T, m, a), S = P.length, k = T.length), N = S, B = (b = T.slice(0, S)).length; B < S; b[B++] = 0)\r\n                    ;\r\n                A = P.slice(), A = [0].concat(A), x = P[0], P[1] >= a / 2 && x++;\r\n                do {\r\n                    if (m = 0, (u = e(P, b, S, B)) < 0) {\r\n                        if (F = b[0], S != B && (F = F * a + (b[1] || 0)), (m = c(F / x)) > 1)\r\n                            for (m >= a && (m = a - 1), _ = (y = t(P, m, a)).length, B = b.length; 1 == e(y, b, _, B);)\r\n                                m--, r(y, S < _ ? A : P, _, a), _ = y.length, u = 1;\r\n                        else\r\n                            0 == m && (u = m = 1), _ = (y = P.slice()).length;\r\n                        if (_ < B && (y = [0].concat(y)), r(b, y, B, a), B = b.length, -1 == u)\r\n                            for (; e(P, b, S, B) < 1;)\r\n                                m++, r(b, S < B ? A : P, B, a), B = b.length;\r\n                    }\r\n                    else\r\n                        0 === u && (m++, b = [0]);\r\n                    w[p++] = m, b[0] ? b[B++] = T[N] || 0 : (b = [T[N]], B = 1);\r\n                } while ((N++ < k || null != b[0]) && O--);\r\n                d = null != b[0], w[0] || w.splice(0, 1);\r\n            } if (a == h) {\r\n                for (p = 1, O = w[0]; O >= 10; O /= 10, p++)\r\n                    ;\r\n                V(v, i + (v.e = p + l * f - 1) + 1, s, d);\r\n            }\r\n            else\r\n                v.e = l, v.r = +d; return v; }; }(), k = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i, x = /^([^.]+)\\.$/, S = /^\\.([^.]+)$/, A = /^-?(Infinity|NaN)$/, O = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g, o = function (t, e, r, n) { var o, i = r ? e : e.replace(O, ""); if (A.test(i))\r\n                t.s = isNaN(i) ? null : i < 0 ? -1 : 1, t.c = t.e = null;\r\n            else {\r\n                if (!r && (i = i.replace(k, function (t, e, r) { return o = "x" == (r = r.toLowerCase()) ? 16 : "b" == r ? 2 : 8, n && n != o ? t : e; }), n && (o = n, i = i.replace(x, "$1").replace(S, "0.$1")), e != i))\r\n                    return new W(i, o);\r\n                if (W.DEBUG)\r\n                    throw Error(u + "Not a" + (n ? " base " + n : "") + " number: " + e);\r\n                t.c = t.e = t.s = null;\r\n            } }, T.absoluteValue = T.abs = function () { var t = new W(this); return t.s < 0 && (t.s = 1), t; }, T.comparedTo = function (t, e) { return v(this, new W(t, e)); }, T.decimalPlaces = T.dp = function (t, e) { var r, n, o, i = this; if (null != t)\r\n                return w(t, 0, y), null == e ? e = C : w(e, 0, 8), V(new W(i), t + i.e + 1, e); if (!(r = i.c))\r\n                return null; if (n = ((o = r.length - 1) - g(this.e / f)) * f, o = r[o])\r\n                for (; o % 10 == 0; o /= 10, n--)\r\n                    ; return n < 0 && (n = 0), n; }, T.dividedBy = T.div = function (t, e) { return r(this, new W(t, e), M, C); }, T.dividedToIntegerBy = T.idiv = function (t, e) { return r(this, new W(t, e), 0, 1); }, T.exponentiatedBy = T.pow = function (t, e) { var r, n, o, i, s, l, h, p = this; if ((t = new W(t)).c && !t.isInteger())\r\n                throw Error(u + "Exponent not an integer: " + t); if (null != e && (e = new W(e)), i = t.e > 14, !p.c || !p.c[0] || 1 == p.c[0] && !p.e && 1 == p.c.length || !t.c || !t.c[0])\r\n                return h = new W(Math.pow(+p.valueOf(), i ? 2 - B(t) : +t)), e ? h.mod(e) : h; if (s = t.s < 0, e) {\r\n                if (e.c ? !e.c[0] : !e.s)\r\n                    return new W(NaN);\r\n                (n = !s && p.isInteger() && e.isInteger()) && (p = p.mod(e));\r\n            }\r\n            else {\r\n                if (t.e > 9 && (p.e > 0 || p.e < -1 || (0 == p.e ? p.c[0] > 1 || i && p.c[1] >= 24e7 : p.c[0] < 8e13 || i && p.c[0] <= 9999975e7)))\r\n                    return o = p.s < 0 && B(t) ? -0 : 0, p.e > -1 && (o = 1 / o), new W(s ? 1 / o : o);\r\n                U && (o = a(U / f + 2));\r\n            } for (i ? (r = new W(.5), l = B(t)) : l = t % 2, s && (t.s = 1), h = new W(P);;) {\r\n                if (l) {\r\n                    if (!(h = h.times(p)).c)\r\n                        break;\r\n                    o ? h.c.length > o && (h.c.length = o) : n && (h = h.mod(e));\r\n                }\r\n                if (i) {\r\n                    if (V(t = t.times(r), t.e + 1, 1), !t.c[0])\r\n                        break;\r\n                    i = t.e > 14, l = B(t);\r\n                }\r\n                else {\r\n                    if (!(t = c(t / 2)))\r\n                        break;\r\n                    l = t % 2;\r\n                }\r\n                p = p.times(p), o ? p.c && p.c.length > o && (p.c.length = o) : n && (p = p.mod(e));\r\n            } return n ? h : (s && (h = P.div(h)), e ? h.mod(e) : o ? V(h, U, C, void 0) : h); }, T.integerValue = function (t) { var e = new W(this); return null == t ? t = C : w(t, 0, 8), V(e, e.e + 1, t); }, T.isEqualTo = T.eq = function (t, e) { return 0 === v(this, new W(t, e)); }, T.isFinite = function () { return !!this.c; }, T.isGreaterThan = T.gt = function (t, e) { return v(this, new W(t, e)) > 0; }, T.isGreaterThanOrEqualTo = T.gte = function (t, e) { return 1 === (e = v(this, new W(t, e))) || 0 === e; }, T.isInteger = function () { return !!this.c && g(this.e / f) > this.c.length - 2; }, T.isLessThan = T.lt = function (t, e) { return v(this, new W(t, e)) < 0; }, T.isLessThanOrEqualTo = T.lte = function (t, e) { return -1 === (e = v(this, new W(t, e))) || 0 === e; }, T.isNaN = function () { return !this.s; }, T.isNegative = function () { return this.s < 0; }, T.isPositive = function () { return this.s > 0; }, T.isZero = function () { return !!this.c && 0 == this.c[0]; }, T.minus = function (t, e) { var r, n, o, i, s = this, a = s.s; if (e = (t = new W(t, e)).s, !a || !e)\r\n                return new W(NaN); if (a != e)\r\n                return t.s = -e, s.plus(t); var c = s.e / f, u = t.e / f, l = s.c, p = t.c; if (!c || !u) {\r\n                if (!l || !p)\r\n                    return l ? (t.s = -e, t) : new W(p ? s : NaN);\r\n                if (!l[0] || !p[0])\r\n                    return p[0] ? (t.s = -e, t) : new W(l[0] ? s : 3 == C ? -0 : 0);\r\n            } if (c = g(c), u = g(u), l = l.slice(), a = c - u) {\r\n                for ((i = a < 0) ? (a = -a, o = l) : (u = c, o = p), o.reverse(), e = a; e--; o.push(0))\r\n                    ;\r\n                o.reverse();\r\n            }\r\n            else\r\n                for (n = (i = (a = l.length) < (e = p.length)) ? a : e, a = e = 0; e < n; e++)\r\n                    if (l[e] != p[e]) {\r\n                        i = l[e] < p[e];\r\n                        break;\r\n                    } if (i && (o = l, l = p, p = o, t.s = -t.s), (e = (n = p.length) - (r = l.length)) > 0)\r\n                for (; e--; l[r++] = 0)\r\n                    ; for (e = h - 1; n > a;) {\r\n                if (l[--n] < p[n]) {\r\n                    for (r = n; r && !l[--r]; l[r] = e)\r\n                        ;\r\n                    --l[r], l[n] += h;\r\n                }\r\n                l[n] -= p[n];\r\n            } for (; 0 == l[0]; l.splice(0, 1), --u)\r\n                ; return l[0] ? G(t, l, u) : (t.s = 3 == C ? -1 : 1, t.c = [t.e = 0], t); }, T.modulo = T.mod = function (t, e) { var n, o, i = this; return t = new W(t, e), !i.c || !t.s || t.c && !t.c[0] ? new W(NaN) : !t.c || i.c && !i.c[0] ? new W(i) : (9 == j ? (o = t.s, t.s = 1, n = r(i, t, 0, 3), t.s = o, n.s *= o) : n = r(i, t, 0, j), (t = i.minus(n.times(t))).c[0] || 1 != j || (t.s = i.s), t); }, T.multipliedBy = T.times = function (t, e) { var r, n, o, i, s, a, c, u, l, p, d, y, _, v, w, b = this, B = b.c, F = (t = new W(t, e)).c; if (!(B && F && B[0] && F[0]))\r\n                return !b.s || !t.s || B && !B[0] && !F || F && !F[0] && !B ? t.c = t.e = t.s = null : (t.s *= b.s, B && F ? (t.c = [0], t.e = 0) : t.c = t.e = null), t; for (n = g(b.e / f) + g(t.e / f), t.s *= b.s, (c = B.length) < (p = F.length) && (_ = B, B = F, F = _, o = c, c = p, p = o), o = c + p, _ = []; o--; _.push(0))\r\n                ; for (v = h, w = m, o = p; --o >= 0;) {\r\n                for (r = 0, d = F[o] % w, y = F[o] / w | 0, i = o + (s = c); i > o;)\r\n                    r = ((u = d * (u = B[--s] % w) + (a = y * u + (l = B[s] / w | 0) * d) % w * w + _[i] + r) / v | 0) + (a / w | 0) + y * l, _[i--] = u % v;\r\n                _[i] = r;\r\n            } return r ? ++n : _.splice(0, 1), G(t, _, n); }, T.negated = function () { var t = new W(this); return t.s = -t.s || null, t; }, T.plus = function (t, e) { var r, n = this, o = n.s; if (e = (t = new W(t, e)).s, !o || !e)\r\n                return new W(NaN); if (o != e)\r\n                return t.s = -e, n.minus(t); var i = n.e / f, s = t.e / f, a = n.c, c = t.c; if (!i || !s) {\r\n                if (!a || !c)\r\n                    return new W(o / 0);\r\n                if (!a[0] || !c[0])\r\n                    return c[0] ? t : new W(a[0] ? n : 0 * o);\r\n            } if (i = g(i), s = g(s), a = a.slice(), o = i - s) {\r\n                for (o > 0 ? (s = i, r = c) : (o = -o, r = a), r.reverse(); o--; r.push(0))\r\n                    ;\r\n                r.reverse();\r\n            } for ((o = a.length) - (e = c.length) < 0 && (r = c, c = a, a = r, e = o), o = 0; e;)\r\n                o = (a[--e] = a[e] + c[e] + o) / h | 0, a[e] = h === a[e] ? 0 : a[e] % h; return o && (a = [o].concat(a), ++s), G(t, a, s); }, T.precision = T.sd = function (t, e) { var r, n, o, i = this; if (null != t && t !== !!t)\r\n                return w(t, 1, y), null == e ? e = C : w(e, 0, 8), V(new W(i), t, e); if (!(r = i.c))\r\n                return null; if (n = (o = r.length - 1) * f + 1, o = r[o]) {\r\n                for (; o % 10 == 0; o /= 10, n--)\r\n                    ;\r\n                for (o = r[0]; o >= 10; o /= 10, n++)\r\n                    ;\r\n            } return t && i.e + 1 > n && (n = i.e + 1), n; }, T.shiftedBy = function (t) { return w(t, -p, p), this.times("1e" + t); }, T.squareRoot = T.sqrt = function () { var t, e, n, o, i, s = this, a = s.c, c = s.s, u = s.e, l = M + 4, h = new W("0.5"); if (1 !== c || !a || !a[0])\r\n                return new W(!c || c < 0 && (!a || a[0]) ? NaN : a ? s : 1 / 0); if (0 == (c = Math.sqrt(+s)) || c == 1 / 0 ? (((e = _(a)).length + u) % 2 == 0 && (e += "0"), c = Math.sqrt(e), u = g((u + 1) / 2) - (u < 0 || u % 2), n = new W(e = c == 1 / 0 ? "1e" + u : (e = c.toExponential()).slice(0, e.indexOf("e") + 1) + u)) : n = new W(c + ""), n.c[0])\r\n                for ((c = (u = n.e) + l) < 3 && (c = 0);;)\r\n                    if (i = n, n = h.times(i.plus(r(s, i, l, 1))), _(i.c).slice(0, c) === (e = _(n.c)).slice(0, c)) {\r\n                        if (n.e < u && --c, "9999" != (e = e.slice(c - 3, c + 1)) && (o || "4999" != e)) {\r\n                            +e && (+e.slice(1) || "5" != e.charAt(0)) || (V(n, n.e + M + 2, 1), t = !n.times(n).eq(s));\r\n                            break;\r\n                        }\r\n                        if (!o && (V(i, i.e + M + 2, 0), i.times(i).eq(s))) {\r\n                            n = i;\r\n                            break;\r\n                        }\r\n                        l += 4, c += 4, o = 1;\r\n                    } return V(n, n.e + M + 1, C, t); }, T.toExponential = function (t, e) { return null != t && (w(t, 0, y), t++), q(this, t, e, 1); }, T.toFixed = function (t, e) { return null != t && (w(t, 0, y), t = t + this.e + 1), q(this, t, e); }, T.toFormat = function (t, e) { var r = this.toFixed(t, e); if (this.c) {\r\n                var n, o = r.split("."), i = +L.groupSize, s = +L.secondaryGroupSize, a = L.groupSeparator, c = o[0], u = o[1], l = this.s < 0, h = l ? c.slice(1) : c, f = h.length;\r\n                if (s && (n = i, i = s, s = n, f -= n), i > 0 && f > 0) {\r\n                    for (n = f % i || i, c = h.substr(0, n); n < f; n += i)\r\n                        c += a + h.substr(n, i);\r\n                    s > 0 && (c += a + h.slice(n)), l && (c = "-" + c);\r\n                }\r\n                r = u ? c + L.decimalSeparator + ((s = +L.fractionGroupSize) ? u.replace(new RegExp("\\\\d{" + s + "}\\\\B", "g"), "$&" + L.fractionGroupSeparator) : u) : c;\r\n            } return r; }, T.toFraction = function (t) { var e, n, o, i, s, a, c, l, h, p, m, y, g = this, v = g.c; if (null != t && (!(l = new W(t)).isInteger() && (l.c || 1 !== l.s) || l.lt(P)))\r\n                throw Error(u + "Argument " + (l.isInteger() ? "out of range: " : "not an integer: ") + t); if (!v)\r\n                return g.toString(); for (n = new W(P), p = o = new W(P), i = h = new W(P), y = _(v), a = n.e = y.length - g.e - 1, n.c[0] = d[(c = a % f) < 0 ? f + c : c], t = !t || l.comparedTo(n) > 0 ? a > 0 ? n : p : l, c = I, I = 1 / 0, l = new W(y), h.c[0] = 0; m = r(l, n, 0, 1), 1 != (s = o.plus(m.times(i))).comparedTo(t);)\r\n                o = i, i = s, p = h.plus(m.times(s = p)), h = s, n = l.minus(m.times(s = n)), l = s; return s = r(t.minus(o), i, 0, 1), h = h.plus(s.times(p)), o = o.plus(s.times(i)), h.s = p.s = g.s, e = r(p, i, a *= 2, C).minus(g).abs().comparedTo(r(h, o, a, C).minus(g).abs()) < 1 ? [p.toString(), i.toString()] : [h.toString(), o.toString()], I = c, e; }, T.toNumber = function () { return +this; }, T.toPrecision = function (t, e) { return null != t && w(t, 1, y), q(this, t, e, 2); }, T.toString = function (t) { var e, r = this, o = r.s, i = r.e; return null === i ? o ? (e = "Infinity", o < 0 && (e = "-" + e)) : e = "NaN" : (e = _(r.c), null == t ? e = i <= E || i >= D ? F(e, i) : N(e, i, "0") : (w(t, 2, z.length, "Base"), e = n(N(e, i, "0"), 10, t, o, !0)), o < 0 && r.c[0] && (e = "-" + e)), e; }, T.valueOf = T.toJSON = function () { var t, e = this, r = e.e; return null === r ? e.toString() : (t = _(e.c), t = r <= E || r >= D ? F(t, r) : N(t, r, "0"), e.s < 0 ? "-" + t : t); }, T._isBigNumber = !0, null != e && W.set(e), W; }()).default = i.BigNumber = i, void 0 === (n = function () { return i; }.call(e, r, e, t)) || (t.exports = n);\r\n        }(); }, function (t, e, r) { var n; t.exports = (n = r(0), function (t) { var e = n, r = e.lib, o = r.WordArray, i = r.Hasher, s = e.algo, a = [], c = []; !function () { function e(e) { for (var r = t.sqrt(e), n = 2; n <= r; n++)\r\n            if (!(e % n))\r\n                return !1; return !0; } function r(t) { return 4294967296 * (t - (0 | t)) | 0; } for (var n = 2, o = 0; o < 64;)\r\n            e(n) && (o < 8 && (a[o] = r(t.pow(n, .5))), c[o] = r(t.pow(n, 1 / 3)), o++), n++; }(); var u = [], l = s.SHA256 = i.extend({ _doReset: function () { this._hash = new o.init(a.slice(0)); }, _doProcessBlock: function (t, e) { for (var r = this._hash.words, n = r[0], o = r[1], i = r[2], s = r[3], a = r[4], l = r[5], h = r[6], f = r[7], p = 0; p < 64; p++) {\r\n                if (p < 16)\r\n                    u[p] = 0 | t[e + p];\r\n                else {\r\n                    var d = u[p - 15], m = (d << 25 | d >>> 7) ^ (d << 14 | d >>> 18) ^ d >>> 3, y = u[p - 2], g = (y << 15 | y >>> 17) ^ (y << 13 | y >>> 19) ^ y >>> 10;\r\n                    u[p] = m + u[p - 7] + g + u[p - 16];\r\n                }\r\n                var _ = n & o ^ n & i ^ o & i, v = (n << 30 | n >>> 2) ^ (n << 19 | n >>> 13) ^ (n << 10 | n >>> 22), w = f + ((a << 26 | a >>> 6) ^ (a << 21 | a >>> 11) ^ (a << 7 | a >>> 25)) + (a & l ^ ~a & h) + c[p] + u[p];\r\n                f = h, h = l, l = a, a = s + w | 0, s = i, i = o, o = n, n = w + (v + _) | 0;\r\n            } r[0] = r[0] + n | 0, r[1] = r[1] + o | 0, r[2] = r[2] + i | 0, r[3] = r[3] + s | 0, r[4] = r[4] + a | 0, r[5] = r[5] + l | 0, r[6] = r[6] + h | 0, r[7] = r[7] + f | 0; }, _doFinalize: function () { var e = this._data, r = e.words, n = 8 * this._nDataBytes, o = 8 * e.sigBytes; return r[o >>> 5] |= 128 << 24 - o % 32, r[14 + (o + 64 >>> 9 << 4)] = t.floor(n / 4294967296), r[15 + (o + 64 >>> 9 << 4)] = n, e.sigBytes = 4 * r.length, this._process(), this._hash; }, clone: function () { var t = i.clone.call(this); return t._hash = this._hash.clone(), t; } }); e.SHA256 = i._createHelper(l), e.HmacSHA256 = i._createHmacHelper(l); }(Math), n.SHA256); }, function (t, e, r) { var n; t.exports = (n = r(0), r(10), function () { var t = n, e = t.lib.Hasher, r = t.x64, o = r.Word, i = r.WordArray, s = t.algo; function a() { return o.create.apply(o, arguments); } var c = [a(1116352408, 3609767458), a(1899447441, 602891725), a(3049323471, 3964484399), a(3921009573, 2173295548), a(961987163, 4081628472), a(1508970993, 3053834265), a(2453635748, 2937671579), a(2870763221, 3664609560), a(3624381080, 2734883394), a(310598401, 1164996542), a(607225278, 1323610764), a(1426881987, 3590304994), a(1925078388, 4068182383), a(2162078206, 991336113), a(2614888103, 633803317), a(3248222580, 3479774868), a(3835390401, 2666613458), a(4022224774, 944711139), a(264347078, 2341262773), a(604807628, 2007800933), a(770255983, 1495990901), a(1249150122, 1856431235), a(1555081692, 3175218132), a(1996064986, 2198950837), a(2554220882, 3999719339), a(2821834349, 766784016), a(2952996808, 2566594879), a(3210313671, 3203337956), a(3336571891, 1034457026), a(3584528711, 2466948901), a(113926993, 3758326383), a(338241895, 168717936), a(666307205, 1188179964), a(773529912, 1546045734), a(1294757372, 1522805485), a(1396182291, 2643833823), a(1695183700, 2343527390), a(1986661051, 1014477480), a(2177026350, 1206759142), a(2456956037, 344077627), a(2730485921, 1290863460), a(2820302411, 3158454273), a(3259730800, 3505952657), a(3345764771, 106217008), a(3516065817, 3606008344), a(3600352804, 1432725776), a(4094571909, 1467031594), a(275423344, 851169720), a(430227734, 3100823752), a(506948616, 1363258195), a(659060556, 3750685593), a(883997877, 3785050280), a(958139571, 3318307427), a(1322822218, 3812723403), a(1537002063, 2003034995), a(1747873779, 3602036899), a(1955562222, 1575990012), a(2024104815, 1125592928), a(2227730452, 2716904306), a(2361852424, 442776044), a(2428436474, 593698344), a(2756734187, 3733110249), a(3204031479, 2999351573), a(3329325298, 3815920427), a(3391569614, 3928383900), a(3515267271, 566280711), a(3940187606, 3454069534), a(4118630271, 4000239992), a(116418474, 1914138554), a(174292421, 2731055270), a(289380356, 3203993006), a(460393269, 320620315), a(685471733, 587496836), a(852142971, 1086792851), a(1017036298, 365543100), a(1126000580, 2618297676), a(1288033470, 3409855158), a(1501505948, 4234509866), a(1607167915, 987167468), a(1816402316, 1246189591)], u = []; !function () { for (var t = 0; t < 80; t++)\r\n            u[t] = a(); }(); var l = s.SHA512 = e.extend({ _doReset: function () { this._hash = new i.init([new o.init(1779033703, 4089235720), new o.init(3144134277, 2227873595), new o.init(1013904242, 4271175723), new o.init(2773480762, 1595750129), new o.init(1359893119, 2917565137), new o.init(2600822924, 725511199), new o.init(528734635, 4215389547), new o.init(1541459225, 327033209)]); }, _doProcessBlock: function (t, e) { for (var r = this._hash.words, n = r[0], o = r[1], i = r[2], s = r[3], a = r[4], l = r[5], h = r[6], f = r[7], p = n.high, d = n.low, m = o.high, y = o.low, g = i.high, _ = i.low, v = s.high, w = s.low, b = a.high, B = a.low, F = l.high, N = l.low, k = h.high, x = h.low, S = f.high, A = f.low, O = p, T = d, P = m, M = y, C = g, E = _, D = v, R = w, I = b, H = B, j = F, U = N, L = k, z = x, W = S, q = A, $ = 0; $ < 80; $++) {\r\n                var G = u[$];\r\n                if ($ < 16)\r\n                    var V = G.high = 0 | t[e + 2 * $], J = G.low = 0 | t[e + 2 * $ + 1];\r\n                else {\r\n                    var K = u[$ - 15], X = K.high, Z = K.low, Y = (X >>> 1 | Z << 31) ^ (X >>> 8 | Z << 24) ^ X >>> 7, Q = (Z >>> 1 | X << 31) ^ (Z >>> 8 | X << 24) ^ (Z >>> 7 | X << 25), tt = u[$ - 2], et = tt.high, rt = tt.low, nt = (et >>> 19 | rt << 13) ^ (et << 3 | rt >>> 29) ^ et >>> 6, ot = (rt >>> 19 | et << 13) ^ (rt << 3 | et >>> 29) ^ (rt >>> 6 | et << 26), it = u[$ - 7], st = it.high, at = it.low, ct = u[$ - 16], ut = ct.high, lt = ct.low;\r\n                    V = (V = (V = Y + st + ((J = Q + at) >>> 0 < Q >>> 0 ? 1 : 0)) + nt + ((J += ot) >>> 0 < ot >>> 0 ? 1 : 0)) + ut + ((J += lt) >>> 0 < lt >>> 0 ? 1 : 0), G.high = V, G.low = J;\r\n                }\r\n                var ht, ft = I & j ^ ~I & L, pt = H & U ^ ~H & z, dt = O & P ^ O & C ^ P & C, mt = T & M ^ T & E ^ M & E, yt = (O >>> 28 | T << 4) ^ (O << 30 | T >>> 2) ^ (O << 25 | T >>> 7), gt = (T >>> 28 | O << 4) ^ (T << 30 | O >>> 2) ^ (T << 25 | O >>> 7), _t = (I >>> 14 | H << 18) ^ (I >>> 18 | H << 14) ^ (I << 23 | H >>> 9), vt = (H >>> 14 | I << 18) ^ (H >>> 18 | I << 14) ^ (H << 23 | I >>> 9), wt = c[$], bt = wt.high, Bt = wt.low, Ft = W + _t + ((ht = q + vt) >>> 0 < q >>> 0 ? 1 : 0), Nt = gt + mt;\r\n                W = L, q = z, L = j, z = U, j = I, U = H, I = D + (Ft = (Ft = (Ft = Ft + ft + ((ht += pt) >>> 0 < pt >>> 0 ? 1 : 0)) + bt + ((ht += Bt) >>> 0 < Bt >>> 0 ? 1 : 0)) + V + ((ht += J) >>> 0 < J >>> 0 ? 1 : 0)) + ((H = R + ht | 0) >>> 0 < R >>> 0 ? 1 : 0) | 0, D = C, R = E, C = P, E = M, P = O, M = T, O = Ft + (yt + dt + (Nt >>> 0 < gt >>> 0 ? 1 : 0)) + ((T = ht + Nt | 0) >>> 0 < ht >>> 0 ? 1 : 0) | 0;\r\n            } d = n.low = d + T, n.high = p + O + (d >>> 0 < T >>> 0 ? 1 : 0), y = o.low = y + M, o.high = m + P + (y >>> 0 < M >>> 0 ? 1 : 0), _ = i.low = _ + E, i.high = g + C + (_ >>> 0 < E >>> 0 ? 1 : 0), w = s.low = w + R, s.high = v + D + (w >>> 0 < R >>> 0 ? 1 : 0), B = a.low = B + H, a.high = b + I + (B >>> 0 < H >>> 0 ? 1 : 0), N = l.low = N + U, l.high = F + j + (N >>> 0 < U >>> 0 ? 1 : 0), x = h.low = x + z, h.high = k + L + (x >>> 0 < z >>> 0 ? 1 : 0), A = f.low = A + q, f.high = S + W + (A >>> 0 < q >>> 0 ? 1 : 0); }, _doFinalize: function () { var t = this._data, e = t.words, r = 8 * this._nDataBytes, n = 8 * t.sigBytes; return e[n >>> 5] |= 128 << 24 - n % 32, e[30 + (n + 128 >>> 10 << 5)] = Math.floor(r / 4294967296), e[31 + (n + 128 >>> 10 << 5)] = r, t.sigBytes = 4 * e.length, this._process(), this._hash.toX32(); }, clone: function () { var t = e.clone.call(this); return t._hash = this._hash.clone(), t; }, blockSize: 32 }); t.SHA512 = e._createHelper(l), t.HmacSHA512 = e._createHmacHelper(l); }(), n.SHA512); }, function (t, e, r) { var n; t.exports = (n = r(0), r(10), function (t) { var e = n, r = e.lib, o = r.WordArray, i = r.Hasher, s = e.x64.Word, a = e.algo, c = [], u = [], l = []; !function () { for (var t = 1, e = 0, r = 0; r < 24; r++) {\r\n            c[t + 5 * e] = (r + 1) * (r + 2) / 2 % 64;\r\n            var n = (2 * t + 3 * e) % 5;\r\n            t = e % 5, e = n;\r\n        } for (t = 0; t < 5; t++)\r\n            for (e = 0; e < 5; e++)\r\n                u[t + 5 * e] = e + (2 * t + 3 * e) % 5 * 5; for (var o = 1, i = 0; i < 24; i++) {\r\n            for (var a = 0, h = 0, f = 0; f < 7; f++) {\r\n                if (1 & o) {\r\n                    var p = (1 << f) - 1;\r\n                    p < 32 ? h ^= 1 << p : a ^= 1 << p - 32;\r\n                }\r\n                128 & o ? o = o << 1 ^ 113 : o <<= 1;\r\n            }\r\n            l[i] = s.create(a, h);\r\n        } }(); var h = []; !function () { for (var t = 0; t < 25; t++)\r\n            h[t] = s.create(); }(); var f = a.SHA3 = i.extend({ cfg: i.cfg.extend({ outputLength: 512 }), _doReset: function () { for (var t = this._state = [], e = 0; e < 25; e++)\r\n                t[e] = new s.init; this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32; }, _doProcessBlock: function (t, e) { for (var r = this._state, n = this.blockSize / 2, o = 0; o < n; o++) {\r\n                var i = t[e + 2 * o], s = t[e + 2 * o + 1];\r\n                i = 16711935 & (i << 8 | i >>> 24) | 4278255360 & (i << 24 | i >>> 8), s = 16711935 & (s << 8 | s >>> 24) | 4278255360 & (s << 24 | s >>> 8), (A = r[o]).high ^= s, A.low ^= i;\r\n            } for (var a = 0; a < 24; a++) {\r\n                for (var f = 0; f < 5; f++) {\r\n                    for (var p = 0, d = 0, m = 0; m < 5; m++)\r\n                        p ^= (A = r[f + 5 * m]).high, d ^= A.low;\r\n                    var y = h[f];\r\n                    y.high = p, y.low = d;\r\n                }\r\n                for (f = 0; f < 5; f++) {\r\n                    var g = h[(f + 4) % 5], _ = h[(f + 1) % 5], v = _.high, w = _.low;\r\n                    for (p = g.high ^ (v << 1 | w >>> 31), d = g.low ^ (w << 1 | v >>> 31), m = 0; m < 5; m++)\r\n                        (A = r[f + 5 * m]).high ^= p, A.low ^= d;\r\n                }\r\n                for (var b = 1; b < 25; b++) {\r\n                    var B = (A = r[b]).high, F = A.low, N = c[b];\r\n                    N < 32 ? (p = B << N | F >>> 32 - N, d = F << N | B >>> 32 - N) : (p = F << N - 32 | B >>> 64 - N, d = B << N - 32 | F >>> 64 - N);\r\n                    var k = h[u[b]];\r\n                    k.high = p, k.low = d;\r\n                }\r\n                var x = h[0], S = r[0];\r\n                for (x.high = S.high, x.low = S.low, f = 0; f < 5; f++)\r\n                    for (m = 0; m < 5; m++) {\r\n                        var A = r[b = f + 5 * m], O = h[b], T = h[(f + 1) % 5 + 5 * m], P = h[(f + 2) % 5 + 5 * m];\r\n                        A.high = O.high ^ ~T.high & P.high, A.low = O.low ^ ~T.low & P.low;\r\n                    }\r\n                A = r[0];\r\n                var M = l[a];\r\n                A.high ^= M.high, A.low ^= M.low;\r\n            } }, _doFinalize: function () { var e = this._data, r = e.words, n = (this._nDataBytes, 8 * e.sigBytes), i = 32 * this.blockSize; r[n >>> 5] |= 1 << 24 - n % 32, r[(t.ceil((n + 1) / i) * i >>> 5) - 1] |= 128, e.sigBytes = 4 * r.length, this._process(); for (var s = this._state, a = this.cfg.outputLength / 8, c = a / 8, u = [], l = 0; l < c; l++) {\r\n                var h = s[l], f = h.high, p = h.low;\r\n                f = 16711935 & (f << 8 | f >>> 24) | 4278255360 & (f << 24 | f >>> 8), p = 16711935 & (p << 8 | p >>> 24) | 4278255360 & (p << 24 | p >>> 8), u.push(p), u.push(f);\r\n            } return new o.init(u, a); }, clone: function () { for (var t = i.clone.call(this), e = t._state = this._state.slice(0), r = 0; r < 25; r++)\r\n                e[r] = e[r].clone(); return t; } }); e.SHA3 = i._createHelper(f), e.HmacSHA3 = i._createHmacHelper(f); }(Math), n.SHA3); }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(8), o = r(3), i = r(22), s = r(23);\r\n            !function (t) { t.eth_getBalance = new i.Method({ callName: "eth_getBalance", params: 2, inputFormatter: [n.inputAddressFormatter, n.inputDefaultBlockNumberFormatter], outputFormatter: n.outputBigNumberFormatter }), t.eth_getStorageAt = new i.Method({ callName: "eth_getStorageAt", params: 3, inputFormatter: [n.inputAddressFormatter, o.toHex, n.inputDefaultBlockNumberFormatter], outputFormatter: o.toData }), t.eth_getCode = new i.Method({ callName: "eth_getCode", params: 2, inputFormatter: [n.inputAddressFormatter, n.inputDefaultBlockNumberFormatter], outputFormatter: o.toData }), t.eth_getBlockByHash = new i.Method({ callName: "eth_getBlockByHash", params: 2, inputFormatter: [n.inputBlockNumberFormatter, function (t) { return !!t; }], outputFormatter: n.outputBlockFormatter }), t.eth_getBlockByNumber = new i.Method({ callName: "eth_getBlockByNumber", params: 2, inputFormatter: [n.inputBlockNumberFormatter, function (t) { return !!t; }], outputFormatter: n.outputBlockFormatter }), t.eth_getUncleByBlockHashAndIndex = new i.Method({ callName: "eth_getUncleByBlockHashAndIndex", params: 2, inputFormatter: [n.inputBlockNumberFormatter, o.toHex], outputFormatter: n.outputBlockFormatter }), t.eth_getUncleByBlockNumberAndIndex = new i.Method({ callName: "eth_getUncleByBlockNumberAndIndex", params: 2, inputFormatter: [n.inputBlockNumberFormatter, o.toHex], outputFormatter: n.outputBlockFormatter }), t.eth_getBlockTransactionCountByHash = new i.Method({ callName: "eth_getBlockTransactionCountByHash", params: 1, inputFormatter: [n.inputBlockNumberFormatter], outputFormatter: o.toDecimal }), t.eth_getBlockTransactionCountByNumber = new i.Method({ callName: "eth_getBlockTransactionCountByNumber", params: 1, inputFormatter: [n.inputBlockNumberFormatter], outputFormatter: o.toDecimal }), t.eth_getUncleCountByBlockHash = new i.Method({ callName: "eth_getUncleCountByBlockHash", params: 1, inputFormatter: [n.inputBlockNumberFormatter], outputFormatter: o.toDecimal }), t.eth_getUncleCountByBlockNumber = new i.Method({ callName: "eth_getUncleCountByBlockNumber", params: 1, inputFormatter: [n.inputBlockNumberFormatter], outputFormatter: o.toDecimal }), t.eth_getTransactionByHash = new i.Method({ callName: "eth_getTransactionByHash", params: 1, outputFormatter: n.outputTransactionFormatter }), t.eth_getTransactionByBlockHashAndIndex = new i.Method({ callName: "eth_getTransactionByBlockHashAndIndex", params: 2, inputFormatter: [n.inputBlockNumberFormatter, o.toHex], outputFormatter: n.outputTransactionFormatter }), t.eth_getTransactionByBlockNumberAndIndex = new i.Method({ callName: "eth_getTransactionByBlockNumberAndIndex", params: 2, inputFormatter: [n.inputBlockNumberFormatter, o.toHex], outputFormatter: n.outputTransactionFormatter }), t.eth_getTransactionReceipt = new i.Method({ callName: "eth_getTransactionReceipt", params: 1, outputFormatter: n.outputTransactionReceiptFormatter }), t.eth_getTransactionCount = new i.Method({ callName: "eth_getTransactionCount", params: 2, inputFormatter: [n.inputAddressFormatter, n.inputDefaultBlockNumberFormatter], outputFormatter: o.toDecimal }), t.eth_sendRawTransaction = new i.Method({ callName: "eth_sendRawTransaction", params: 1, inputFormatter: [null], outputFormatter: o.toData }), t.web3_sha3 = new i.Method({ callName: "web3_sha3", params: 1, inputFormatter: [null], outputFormatter: o.toData }), t.eth_sendTransaction = new i.Method({ callName: "eth_sendTransaction", params: 1, inputFormatter: [n.inputTransactionFormatter], outputFormatter: o.toData }), t.eth_sign = new i.Method({ callName: "eth_sign", params: 2, inputFormatter: [n.inputAddressFormatter, null], outputFormatter: o.toData }), t.eth_call = new i.Method({ callName: "eth_call", params: 2, inputFormatter: [n.inputCallFormatter, n.inputDefaultBlockNumberFormatter], outputFormatter: o.toData }), t.eth_estimateGas = new i.Method({ callName: "eth_estimateGas", params: 1, inputFormatter: [n.inputCallFormatter], outputFormatter: o.toDecimal }), t.eth_submitWork = new i.Method({ callName: "eth_submitWork", params: 3, outputFormatter: o.toBoolean }), t.eth_getWork = new i.Method({ callName: "eth_getWork", params: 1, outputFormatter: o.toArray }), t.eth_coinbase = new s.Property({ getter: "eth_coinbase", outputFormatter: o.toAddress }), t.eth_mining = new s.Property({ getter: "eth_mining", outputFormatter: o.toBoolean }), t.eth_hashrate = new s.Property({ getter: "eth_hashrate", outputFormatter: o.toDecimal }), t.eth_syncing = new s.Property({ getter: "eth_syncing", outputFormatter: n.outputSyncingFormatter }), t.eth_gasPrice = new s.Property({ getter: "eth_gasPrice", outputFormatter: n.outputBigNumberFormatter }), t.eth_accounts = new s.Property({ getter: "eth_accounts", outputFormatter: o.toArray }), t.eth_blockNumber = new s.Property({ getter: "eth_blockNumber", outputFormatter: o.toDecimal }), t.eth_protocolVersion = new s.Property({ getter: "eth_protocolVersion", outputFormatter: o.toDecimal }), t.web3_clientVersion = new s.Property({ getter: "web3_clientVersion", outputFormatter: o.toString }), t.net_version = new s.Property({ getter: "net_version", outputFormatter: o.toString }), t.shh_version = new i.Method({ callName: "shh_version", params: 0, outputFormatter: o.toDecimal }), t.shh_post = new i.Method({ callName: "shh_post", params: 1, inputFormatter: [null], outputFormatter: o.toBoolean }), t.personal_newAccount = new i.Method({ callName: "personal_newAccount", params: 1, inputFormatter: [null], outputFormatter: o.toAddress }), t.personal_importRawKey = new i.Method({ callName: "personal_importRawKey", params: 2, outputFormatter: o.toAddress }), t.personal_sign = new i.Method({ callName: "personal_sign", params: 3, inputFormatter: [null, n.inputAddressFormatter, null], outputFormatter: o.toData }), t.personal_ecRecover = new i.Method({ callName: "personal_ecRecover", params: 2, outputFormatter: o.toAddress }), t.personal_unlockAccount = new i.Method({ callName: "personal_unlockAccount", params: 3, inputFormatter: [n.inputAddressFormatter, null, o.toNullDecimal], outputFormatter: o.toBoolean }), t.personal_sendTransaction = new i.Method({ callName: "personal_sendTransaction", params: 2, inputFormatter: [n.inputTransactionFormatter, null], outputFormatter: o.toData }), t.personal_lockAccount = new i.Method({ callName: "personal_lockAccount", params: 1, inputFormatter: [n.inputAddressFormatter], outputFormatter: o.toBoolean }), t.personal_listAccounts = new s.Property({ getter: "personal_listAccounts", outputFormatter: o.toArray }), t.net_listening = new s.Property({ getter: "net_listening", outputFormatter: o.toBoolean }), t.net_peerCount = new s.Property({ getter: "net_peerCount", outputFormatter: o.toDecimal }), t.eth_newFilter = new i.Method({ callName: "eth_newFilter", params: 1, outputFormatter: o.toHex }), t.eth_getLogs = new i.Method({ callName: "eth_getLogs", params: 1, inputFormatter: [o.toHex], outputFormatter: o.toArray }), t.eth_newBlockFilter = new i.Method({ callName: "eth_newBlockFilter", params: 0, outputFormatter: o.toHex }), t.eth_newPendingTransactionFilter = new i.Method({ callName: "eth_newPendingTransactionFilter", params: 0, outputFormatter: o.toHex }), t.eth_uninstallFilter = new i.Method({ callName: "eth_uninstallFilter", params: 1, inputFormatter: [o.toHex], outputFormatter: o.toBoolean }), t.eth_getFilterLogs = new i.Method({ callName: "eth_getFilterLogs", params: 1, inputFormatter: [o.toHex], outputFormatter: o.toArray }), t.eth_getFilterChanges = new i.Method({ callName: "eth_getFilterChanges", params: 1, inputFormatter: [o.toHex], outputFormatter: o.toArray }), t.eth_submitHashrate = new i.Method({ callName: "eth_submitHashrate", params: 2, outputFormatter: o.toBoolean }), t.shh_newIdentity = new i.Method({ callName: "shh_newIdentity", params: 0, outputFormatter: o.toData }), t.shh_hasIdentity = new i.Method({ callName: "shh_hasIdentity", params: 1, outputFormatter: o.toBoolean }), t.shh_newGroup = new i.Method({ callName: "shh_newGroup", params: 0, outputFormatter: o.toData }), t.shh_addToGroup = new i.Method({ callName: "shh_addToGroup", params: 1, outputFormatter: o.toBoolean }), t.shh_newFilter = new i.Method({ callName: "shh_newFilter", params: 1, outputFormatter: o.toHex }), t.shh_uninstallFilter = new i.Method({ callName: "shh_uninstallFilter", params: 1, outputFormatter: o.toBoolean }), t.shh_getLogs = new i.Method({ callName: "shh_getLogs", params: 1, outputFormatter: o.toArray }), t.shh_getFilterMessages = new i.Method({ callName: "shh_getFilterMessages", params: 1, outputFormatter: o.toArray }), t.shh_getFilterChanges = new i.Method({ callName: "shh_getFilterChanges", params: 1, outputFormatter: o.toArray }), t.shh_getMessages = new i.Method({ callName: "shh_getMessages", params: 1, outputFormatter: o.toArray }); }(e.eth || (e.eth = {}));\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(13);\r\n            e.Method = /** @class */ (function () {\r\n                function class_1(t) {\r\n                    this.callName = t.callName, this.params = t.params || 0, this.inputFormatter = t.inputFormatter || null, this.outputFormatter = t.outputFormatter, this.requestManager = null;\r\n                }\r\n                class_1.prototype.validateArgs = function (t) { if (t.length !== this.params)\r\n                    throw n.InvalidNumberOfRPCParams(this.callName, t.length, this.params); };\r\n                class_1.prototype.formatInput = function (t) { return this.inputFormatter ? this.inputFormatter.map(function (e, r) { return e ? e(t[r]) : t[r]; }) : t; };\r\n                class_1.prototype.formatOutput = function (t) { return null !== t ? this.outputFormatter(t) : null; };\r\n                class_1.prototype.toPayload = function (t) { var e = this.formatInput(t); return this.validateArgs(e), { method: this.callName, params: e }; };\r\n                class_1.prototype.execute = function (t) {\r\n                    var e = [];\r\n                    for (var _a = 1; _a < arguments.length; _a++) {\r\n                        e[_a - 1] = arguments[_a];\r\n                    }\r\n                    return __awaiter(this, void 0, void 0, function () { var r, n; return __generator(this, function (_c) {\r\n                        switch (_c.label) {\r\n                            case 0:\r\n                                r = this.toPayload(e);\r\n                                if (!t)\r\n                                    throw new Error("Missing RequestManager in method#exec");\r\n                                return [4 /*yield*/, t.sendAsync(r)];\r\n                            case 1:\r\n                                n = _c.sent();\r\n                                return [2 /*return*/, this.formatOutput(n)];\r\n                        }\r\n                    }); });\r\n                };\r\n                return class_1;\r\n            }());\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            e.Property = /** @class */ (function () {\r\n                function class_2(t) {\r\n                    this.getter = t.getter, this.outputFormatter = t.outputFormatter;\r\n                }\r\n                class_2.prototype.formatOutput = function (t) { return this.outputFormatter(t); };\r\n                class_2.prototype.execute = function (t) {\r\n                    return __awaiter(this, void 0, void 0, function () { var e; return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, t.sendAsync({ method: this.getter, params: [] })];\r\n                            case 1:\r\n                                e = _a.sent();\r\n                                return [2 /*return*/, this.formatOutput(e)];\r\n                        }\r\n                    }); });\r\n                };\r\n                return class_2;\r\n            }());\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(60), o = r(26), i = r(70);\r\n            e.Contract = /** @class */ (function () {\r\n                function Contract(t, e, r) {\r\n                    var s;\r\n                    this.requestManager = t, this.abi = e, this.address = r, this.events = {}, this.transactionHash = null, this.transactionHash = null, this.address = r, this.abi = e, (s = this).abi.filter(function (t) { return "function" === t.type; }).map(function (t) { return new n.SolidityFunction(s.requestManager, t, s.address); }).forEach(function (t) { t.attachToContract(s); }), function (t) { var e = t.abi.filter(function (t) { return "event" === t.type; }); new i.AllSolidityEvents(t.requestManager, e, t.address).attachToContract(t), e.map(function (e) { return new o.SolidityEvent(t.requestManager, e, t.address); }).forEach(function (e) { e.attachToContract(t); }); }(this);\r\n                }\r\n                return Contract;\r\n            }());\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(3);\r\n            e.SolidityParam = /** @class */ (function () {\r\n                function SolidityParam(t, e) {\r\n                    this.offset = void 0, this.value = t || "", this.offset = e;\r\n                }\r\n                SolidityParam.prototype.isDynamic = function () { return void 0 !== this.offset; };\r\n                SolidityParam.prototype.offsetAsBytes = function () { return this.isDynamic() ? n.padLeft(n.toTwosComplement(this.offset).toString(16), 64) : ""; };\r\n                SolidityParam.prototype.staticPart = function () { return this.isDynamic() ? this.offsetAsBytes() : this.value; };\r\n                SolidityParam.prototype.dynamicPart = function () { return this.isDynamic() ? this.value : ""; };\r\n                SolidityParam.prototype.encode = function () { return this.staticPart() + this.dynamicPart(); };\r\n                return SolidityParam;\r\n            }());\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(3), o = r(8), i = r(15), s = r(27);\r\n            e.SolidityEvent = /** @class */ (function () {\r\n                function class_3(t, e, r) {\r\n                    this.requestManager = t, this.address = r, this._anonymous = !1, this._params = e.inputs, this._name = n.transformToFullName(e), this._anonymous = e.anonymous;\r\n                }\r\n                class_3.prototype.types = function (t) { return this._params.filter(function (e) { return e.indexed === t; }).map(function (t) { return t.type; }); };\r\n                class_3.prototype.displayName = function () { return n.extractDisplayName(this._name); };\r\n                class_3.prototype.typeName = function () { return n.extractTypeName(this._name) || "void"; };\r\n                class_3.prototype.signature = function () { return n.sha3(this._name); };\r\n                class_3.prototype.encode = function (t, e) {\r\n                    if (t === void 0) { t = {}; }\r\n                    if (e === void 0) { e = {}; }\r\n                    var r = { topics: [], address: this.address };\r\n                    ["fromBlock", "toBlock"].filter(function (t) { return void 0 !== e[t]; }).forEach(function (t) { r[t] = o.inputBlockNumberFormatter(e[t]); }), this._anonymous || r.topics.push("0x" + this.signature());\r\n                    var s = this._params.filter(function (t) { return !0 === t.indexed; }).map(function (e) { var r = t[e.name]; return null == r ? null : n.isArray(r) ? r.map(function (t) { return "0x" + i.coder.encodeParam(e.type, t); }) : "0x" + i.coder.encodeParam(e.type, r); });\r\n                    return r.topics = r.topics.concat(s), r;\r\n                };\r\n                class_3.prototype.decode = function (t) { t.data = t.data || "", t.topics = t.topics || []; var e = (this._anonymous ? t.topics : t.topics.slice(1)).map(function (t) { return t.slice(2); }).join(""), r = i.coder.decodeParams(this.types(!0), e), n = t.data.slice(2), s = i.coder.decodeParams(this.types(!1), n), a = o.outputLogFormatter(t); return a.event = this.displayName(), a.address = t.address, a.args = this._params.reduce(function (t, e) { return t[e.name] = e.indexed ? r.shift() : s.shift(), t; }, {}), delete a.data, delete a.topics, a; };\r\n                class_3.prototype.execute = function (t, e) {\r\n                    return __awaiter(this, void 0, void 0, function () { var r, n; return __generator(this, function (_a) {\r\n                        r = this.encode(t, e), n = this.decode.bind(this);\r\n                        return [2 /*return*/, new s.EthFilter(this.requestManager, r, n)];\r\n                    }); });\r\n                };\r\n                class_3.prototype.attachToContract = function (t) { var e = this.execute.bind(this), r = this.displayName(); t.events[r] || (t.events[r] = e), t.events[r][this.typeName()] = this.execute.bind(this, t); };\r\n                return class_3;\r\n            }());\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(3), o = r(8), i = r(14), s = r(9);\r\n            function a(t) { if (null == t)\r\n                return null; var e = String(t).toString(); return 0 === e.indexOf("0x") ? e : n.fromUtf8(e); }\r\n            var c = /** @class */ (function () {\r\n                function c(t) {\r\n                    this.requestManager = t, this.isStarted = !1, this.isDisposed = !1, this.filterId = s.future(), this.callbacks = [], this.stopSemaphore = s.future();\r\n                }\r\n                c.prototype.watch = function (t) {\r\n                    return __awaiter(this, void 0, void 0, function () { var _a, _c; return __generator(this, function (_d) {\r\n                        switch (_d.label) {\r\n                            case 0:\r\n                                if (this.isDisposed)\r\n                                    throw new Error("The filter was disposed");\r\n                                _a = t;\r\n                                if (!_a) return [3 /*break*/, 3];\r\n                                this.callbacks.push(t);\r\n                                _c = this.isStarted;\r\n                                if (_c) return [3 /*break*/, 2];\r\n                                return [4 /*yield*/, this.start()];\r\n                            case 1:\r\n                                _c = (_d.sent());\r\n                                _d.label = 2;\r\n                            case 2:\r\n                                _a = (_c);\r\n                                _d.label = 3;\r\n                            case 3:\r\n                                _a;\r\n                                return [2 /*return*/];\r\n                        }\r\n                    }); });\r\n                };\r\n                c.prototype.start = function () {\r\n                    return __awaiter(this, void 0, void 0, function () { var t_10, t_9; return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0:\r\n                                if (this.isDisposed)\r\n                                    throw new Error("The filter was disposed");\r\n                                if (!!this.isStarted) return [3 /*break*/, 6];\r\n                                this.isStarted = !0;\r\n                                _a.label = 1;\r\n                            case 1:\r\n                                _a.trys.push([1, 3, , 4]);\r\n                                return [4 /*yield*/, this.getNewFilter()];\r\n                            case 2:\r\n                                t_10 = _a.sent();\r\n                                if (!t_10)\r\n                                    throw new Error("Could not create a filter, response: " + JSON.stringify(t_10));\r\n                                this.filterId.resolve(t_10);\r\n                                return [3 /*break*/, 4];\r\n                            case 3:\r\n                                t_9 = _a.sent();\r\n                                throw t_9;\r\n                            case 4:\r\n                                this.stopSemaphore = s.future();\r\n                                return [4 /*yield*/, this.poll()];\r\n                            case 5:\r\n                                _a.sent();\r\n                                _a.label = 6;\r\n                            case 6: return [2 /*return*/];\r\n                        }\r\n                    }); });\r\n                };\r\n                c.prototype.stop = function () {\r\n                    return __awaiter(this, void 0, void 0, function () { var t, _a, _c; return __generator(this, function (_d) {\r\n                        switch (_d.label) {\r\n                            case 0:\r\n                                if (!this.isStarted)\r\n                                    return [2 /*return*/];\r\n                                if (this.isDisposed)\r\n                                    return [2 /*return*/];\r\n                                this.isDisposed = !0;\r\n                                return [4 /*yield*/, this.filterId];\r\n                            case 1:\r\n                                t = _d.sent();\r\n                                this.isStarted = !1;\r\n                                _a = this.stopSemaphore;\r\n                                if (!_a) return [3 /*break*/, 3];\r\n                                return [4 /*yield*/, this.stopSemaphore];\r\n                            case 2:\r\n                                _a = (_d.sent());\r\n                                _d.label = 3;\r\n                            case 3:\r\n                                _a;\r\n                                _c = !0;\r\n                                return [4 /*yield*/, this.uninstall()];\r\n                            case 4:\r\n                                if (_c !== (_d.sent()))\r\n                                    throw new Error("Couldn\'t stop the eth filter: " + t);\r\n                                return [2 /*return*/];\r\n                        }\r\n                    }); });\r\n                };\r\n                c.prototype.poll = function () {\r\n                    return __awaiter(this, void 0, void 0, function () {\r\n                        var t_11, t;\r\n                        var _this = this;\r\n                        return __generator(this, function (_a) {\r\n                            switch (_a.label) {\r\n                                case 0:\r\n                                    if (!this.isStarted) return [3 /*break*/, 3];\r\n                                    if (!this.callbacks.length) return [3 /*break*/, 2];\r\n                                    return [4 /*yield*/, this.getChanges()];\r\n                                case 1:\r\n                                    t_11 = _a.sent();\r\n                                    this.callbacks.forEach(function (e) { _this.formatter ? t_11.forEach(function (t) { e(_this.formatter(t)); }) : t_11.forEach(function (t) { return e(t); }); });\r\n                                    _a.label = 2;\r\n                                case 2:\r\n                                    this.stopSemaphore.resolve(1), this.isStarted && (this.stopSemaphore = s.future(), setTimeout((t = (function () { return _this.poll(); }), function () { t().catch(function (t) { return console.error(t); }); }), i.ETH_POLLING_TIMEOUT));\r\n                                    return [3 /*break*/, 4];\r\n                                case 3:\r\n                                    this.stopSemaphore.resolve(1);\r\n                                    _a.label = 4;\r\n                                case 4: return [2 /*return*/];\r\n                            }\r\n                        });\r\n                    });\r\n                };\r\n                return c;\r\n            }());\r\n            e.AbstractFilter = c;\r\n            e.SHHFilter = /** @class */ (function (_super) {\r\n                __extends(class_4, _super);\r\n                function class_4(t, e) {\r\n                    var _this = this;\r\n                    _this = _super.call(this, t) || this, _this.requestManager = t, _this.options = e, _this.options = _this.options || { topics: [] }, _this.options.topics = _this.options.topics || [], _this.options.topics = _this.options.topics.map(function (t) { return a(t); }), _this.options = { topics: _this.options.topics, to: _this.options.to };\r\n                    return _this;\r\n                }\r\n                class_4.prototype.getMessages = function () {\r\n                    return __awaiter(this, void 0, void 0, function () { var t; return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, this.filterId];\r\n                            case 1:\r\n                                t = _a.sent();\r\n                                return [2 /*return*/, this.requestManager.shh_getMessages(t)];\r\n                        }\r\n                    }); });\r\n                };\r\n                class_4.prototype.getNewFilter = function () {\r\n                    return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n                        return [2 /*return*/, this.requestManager.shh_newFilter(this.options)];\r\n                    }); });\r\n                };\r\n                class_4.prototype.getChanges = function () {\r\n                    return __awaiter(this, void 0, void 0, function () { var t; return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, this.filterId];\r\n                            case 1:\r\n                                t = _a.sent();\r\n                                return [2 /*return*/, this.requestManager.shh_getFilterChanges(t)];\r\n                        }\r\n                    }); });\r\n                };\r\n                class_4.prototype.uninstall = function () {\r\n                    return __awaiter(this, void 0, void 0, function () { var t; return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, this.filterId];\r\n                            case 1:\r\n                                t = _a.sent();\r\n                                return [2 /*return*/, this.requestManager.shh_uninstallFilter(t)];\r\n                        }\r\n                    }); });\r\n                };\r\n                return class_4;\r\n            }(c));\r\n            var u = /** @class */ (function (_super) {\r\n                __extends(u, _super);\r\n                function u(t, e, r) {\r\n                    if (r === void 0) { r = (function (t) { return t; }); }\r\n                    var _this = this;\r\n                    _this = _super.call(this, t) || this, _this.requestManager = t, _this.options = e, _this.formatter = r, _this.options = _this.options || {}, _this.options.topics = _this.options.topics || [], _this.options.topics = _this.options.topics.map(function (t) { return a(t); }), _this.options = { topics: _this.options.topics, address: _this.options.address ? _this.options.address : void 0, fromBlock: "number" == typeof _this.options.fromBlock || "string" == typeof _this.options.fromBlock ? o.inputBlockNumberFormatter(_this.options.fromBlock) : "latest", toBlock: "number" == typeof _this.options.toBlock || "string" == typeof _this.options.toBlock ? o.inputBlockNumberFormatter(_this.options.toBlock) : "latest" };\r\n                    return _this;\r\n                }\r\n                u.prototype.getLogs = function () {\r\n                    return __awaiter(this, void 0, void 0, function () { var _a, t; return __generator(this, function (_c) {\r\n                        switch (_c.label) {\r\n                            case 0:\r\n                                _a = this.isStarted;\r\n                                if (_a) return [3 /*break*/, 2];\r\n                                return [4 /*yield*/, this.start()];\r\n                            case 1:\r\n                                _a = (_c.sent());\r\n                                _c.label = 2;\r\n                            case 2:\r\n                                _a;\r\n                                return [4 /*yield*/, this.filterId];\r\n                            case 3:\r\n                                t = _c.sent();\r\n                                return [2 /*return*/, this.requestManager.eth_getFilterLogs(t)];\r\n                        }\r\n                    }); });\r\n                };\r\n                u.prototype.getNewFilter = function () {\r\n                    return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n                        return [2 /*return*/, this.requestManager.eth_newFilter(this.options)];\r\n                    }); });\r\n                };\r\n                u.prototype.getChanges = function () {\r\n                    return __awaiter(this, void 0, void 0, function () { var t; return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, this.filterId];\r\n                            case 1:\r\n                                t = _a.sent();\r\n                                return [2 /*return*/, this.requestManager.eth_getFilterChanges(t)];\r\n                        }\r\n                    }); });\r\n                };\r\n                u.prototype.uninstall = function () {\r\n                    return __awaiter(this, void 0, void 0, function () { var t; return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, this.filterId];\r\n                            case 1:\r\n                                t = _a.sent();\r\n                                return [2 /*return*/, this.requestManager.eth_uninstallFilter(t)];\r\n                        }\r\n                    }); });\r\n                };\r\n                return u;\r\n            }(c));\r\n            e.EthFilter = u;\r\n            e.EthPendingTransactionFilter = /** @class */ (function (_super) {\r\n                __extends(class_5, _super);\r\n                function class_5(t) {\r\n                    return _super.call(this, t, null, function (t) { return t; }) || this;\r\n                }\r\n                class_5.prototype.getNewFilter = function () {\r\n                    return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n                        return [2 /*return*/, this.requestManager.eth_newPendingTransactionFilter()];\r\n                    }); });\r\n                };\r\n                return class_5;\r\n            }(u));\r\n            e.EthBlockFilter = /** @class */ (function (_super) {\r\n                __extends(class_6, _super);\r\n                function class_6(t) {\r\n                    return _super.call(this, t, null, function (t) { return t; }) || this;\r\n                }\r\n                class_6.prototype.getNewFilter = function () {\r\n                    return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n                        return [2 /*return*/, this.requestManager.eth_newBlockFilter()];\r\n                    }); });\r\n                };\r\n                return class_6;\r\n            }(u));\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(29);\r\n            e.HTTPProvider = n.HTTPProvider;\r\n            var o = r(30);\r\n            e.WebSocketProvider = o.WebSocketProvider, function (t) { for (var r in t)\r\n                e.hasOwnProperty(r) || (e[r] = t[r]); }(r(3));\r\n            var i = r(55);\r\n            e.RequestManager = i.RequestManager;\r\n            var s = r(24);\r\n            e.Contract = s.Contract;\r\n            var a = r(71);\r\n            e.ContractFactory = a.ContractFactory;\r\n            var c = r(22);\r\n            e.Method = c.Method;\r\n            var u = r(23);\r\n            e.Property = u.Property;\r\n            var l = r(21);\r\n            e.eth = l.eth;\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(16);\r\n            e.HTTPProvider = /** @class */ (function () {\r\n                function class_7(t, e) {\r\n                    if (e === void 0) { e = {}; }\r\n                    this.host = t, this.options = e, this.debug = !1, this.host = t || "http://localhost:8545";\r\n                }\r\n                class_7.prototype.send = function () { throw new Error("Sync requests are deprecated"); };\r\n                class_7.prototype.sendAsync = function (t, e) {\r\n                    var _this = this;\r\n                    try {\r\n                        var r_3 = null;\r\n                        if (r_3 = t instanceof Array ? t.map(function (t) { return n.toRPC(t); }) : n.toRPC(t), "undefined" == typeof fetch)\r\n                            throw new Error("There is no global fetch object. Please install and import isomorphic-fetch");\r\n                        var o = { body: JSON.stringify(r_3), method: "POST", headers: Object.assign({}, this.options.headers, { "Content-Type": "application/json" }) };\r\n                        this.debug && console.log("SEND >> " + o.body), fetch(this.host, o).then(function (t) { return __awaiter(_this, void 0, void 0, function () { var r_4; return __generator(this, function (_a) {\r\n                            switch (_a.label) {\r\n                                case 0:\r\n                                    if (!t.ok) return [3 /*break*/, 2];\r\n                                    return [4 /*yield*/, t.json()];\r\n                                case 1:\r\n                                    r_4 = _a.sent();\r\n                                    this.debug && console.log("RECV << " + JSON.stringify(r_4)), r_4.error ? e(Object.assign(new Error(r_4.error.json || r_4.error), r_4.error)) : e(null, r_4);\r\n                                    return [3 /*break*/, 3];\r\n                                case 2:\r\n                                    this.debug && console.log("ERR << " + JSON.stringify(t)), e(new Error("External error. response code: " + t.status));\r\n                                    _a.label = 3;\r\n                                case 3: return [2 /*return*/];\r\n                            }\r\n                        }); }); }, function (t) { _this.debug && console.log("ERR << " + JSON.stringify(t)), e(t); });\r\n                    }\r\n                    catch (t) {\r\n                        this.debug && console.log("ERR << " + JSON.stringify(t)), e(t);\r\n                    }\r\n                };\r\n                return class_7;\r\n            }());\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(16), o = r(9);\r\n            var i = /** @class */ (function () {\r\n                function i(t, e) {\r\n                    if (e === void 0) { e = {}; }\r\n                    this.url = t, this.options = e, this.isDisposed = !1, this.responseCallbacks = new Map, this.notificationCallbacks = new Set, this.debug = !1, this.lastChunk = "", this.connect();\r\n                }\r\n                i.prototype.dispose = function () { this.isDisposed = !0; var t = this.connection; this.timeout(new Error("Provider disposed.")), t.then(function (t) { return t.close(); }); };\r\n                i.prototype.send = function () { throw new Error("Sync requests are deprecated"); };\r\n                i.prototype.sendAsync = function (t, e) {\r\n                    var _this = this;\r\n                    var r = [];\r\n                    var i;\r\n                    if (t instanceof Array)\r\n                        i = Promise.all(t.map(function (t) { var e = o.future(); try {\r\n                            var o_7 = n.toRPC(t);\r\n                            r.push(o_7), _this.responseCallbacks.set(o_7.id, e);\r\n                        }\r\n                        catch (t) {\r\n                            e.reject(t);\r\n                        } return e; }));\r\n                    else {\r\n                        var e_7 = o.future();\r\n                        try {\r\n                            var o_8 = n.toRPC(t);\r\n                            r.push(o_8), this.responseCallbacks.set(o_8.id, e_7);\r\n                        }\r\n                        catch (t) {\r\n                            e_7.reject(t);\r\n                        }\r\n                        i = e_7;\r\n                    }\r\n                    i.then(function (t) { return e(null, t); }, function (t) { return e(t); }), this.connection.then(function (t) { r.forEach(function (e) { var r = JSON.stringify(e); _this.debug && console.log("SEND >> " + r), t.send(r); }); }, function (t) { e(t); });\r\n                };\r\n                i.prototype.parseResponse = function (t) {\r\n                    var _this = this;\r\n                    var e = [];\r\n                    return t.replace(/\\}[\\n\\r]?\\{/g, "}|--|{").replace(/\\}\\][\\n\\r]?\\[\\{/g, "}]|--|[{").replace(/\\}[\\n\\r]?\\[\\{/g, "}|--|[{").replace(/\\}\\][\\n\\r]?\\{/g, "}]|--|{").split("|--|").forEach(function (t) { var r = t; _this.lastChunk && (r = _this.lastChunk + r); var n = null; try {\r\n                        n = JSON.parse(r);\r\n                    }\r\n                    catch (t) {\r\n                        return _this.lastChunk = r, clearTimeout(_this.lastChunkTimeout), void (_this.lastChunkTimeout = setTimeout(function () { _this.timeout(); }, 15e3));\r\n                    } clearTimeout(_this.lastChunkTimeout), _this.lastChunk = null, n && e.push(n); }), e;\r\n                };\r\n                i.prototype.processMessage = function (t) { if ("id" in t) {\r\n                    var e_8 = t.id, r_5 = this.responseCallbacks.get(e_8);\r\n                    if (!r_5)\r\n                        return void console.error("Error: Received a response for an unknown request", t);\r\n                    this.responseCallbacks.delete(e_8), "error" in t ? r_5.reject(Object.assign(new Error(t.error.message || t.error), t.error)) : "result" in t && r_5.resolve(t);\r\n                }\r\n                else\r\n                    this.notificationCallbacks.forEach(function (e) { return e(null, t); }); };\r\n                i.prototype.timeout = function (t) { this.connection && this.connection.isPending || (this.connection = o.future()); var e = t || new Error("Connection timeout"); this.responseCallbacks.forEach(function (t) { return t.reject(e); }), this.responseCallbacks.clear(), this.isDisposed || this.connect(); };\r\n                i.prototype.connect = function () {\r\n                    var _this = this;\r\n                    this.connection && !this.connection.isPending && this.connection.then(function (t) { return t.close(); }), this.connection && this.connection.isPending || (this.connection = o.future()), this.lastChunk = "";\r\n                    var t = this.options.WebSocketConstructor || ("undefined" != typeof WebSocket ? WebSocket : void 0);\r\n                    if (!t)\r\n                        throw new Error("Please provide a WebSocketConstructor");\r\n                    var e = new t(this.url, this.options.protocol);\r\n                    e.onopen = (function () { _this.connection.resolve(e); }), e.onerror = (function (t) { _this.timeout(t); }), e.onclose = (function (t) { _this.timeout(new Error("Connection closed (" + (t && t.reason || "Unknown reason") + ")")); }), e.onmessage = (function (t) { var e = "string" == typeof t.data ? t.data : ""; _this.debug && console.log("RECV << " + t.data), _this.parseResponse(e).forEach(function (t) { t instanceof Array ? t.forEach(function (t) { return _this.processMessage(t); }) : _this.processMessage(t); }); });\r\n                };\r\n                return i;\r\n            }());\r\n            e.WebSocketProvider = i, e.default = i;\r\n        }, function (t, e, r) { !function (t) { var e, r, n, o = String.fromCharCode; function i(t) { for (var e, r, n = [], o = 0, i = t.length; o < i;)\r\n            (e = t.charCodeAt(o++)) >= 55296 && e <= 56319 && o < i ? 56320 == (64512 & (r = t.charCodeAt(o++))) ? n.push(((1023 & e) << 10) + (1023 & r) + 65536) : (n.push(e), o--) : n.push(e); return n; } function s(t) { if (t >= 55296 && t <= 57343)\r\n            throw Error("Lone surrogate U+" + t.toString(16).toUpperCase() + " is not a scalar value"); } function a(t, e) { return o(t >> e & 63 | 128); } function c(t) { if (0 == (4294967168 & t))\r\n            return o(t); var e = ""; return 0 == (4294965248 & t) ? e = o(t >> 6 & 31 | 192) : 0 == (4294901760 & t) ? (s(t), e = o(t >> 12 & 15 | 224), e += a(t, 6)) : 0 == (4292870144 & t) && (e = o(t >> 18 & 7 | 240), e += a(t, 12), e += a(t, 6)), e += o(63 & t | 128); } function u() { if (n >= r)\r\n            throw Error("Invalid byte index"); var t = 255 & e[n]; if (n++, 128 == (192 & t))\r\n            return 63 & t; throw Error("Invalid continuation byte"); } function l() { var t, o; if (n > r)\r\n            throw Error("Invalid byte index"); if (n == r)\r\n            return !1; if (t = 255 & e[n], n++, 0 == (128 & t))\r\n            return t; if (192 == (224 & t)) {\r\n            if ((o = (31 & t) << 6 | u()) >= 128)\r\n                return o;\r\n            throw Error("Invalid continuation byte");\r\n        } if (224 == (240 & t)) {\r\n            if ((o = (15 & t) << 12 | u() << 6 | u()) >= 2048)\r\n                return s(o), o;\r\n            throw Error("Invalid continuation byte");\r\n        } if (240 == (248 & t) && (o = (7 & t) << 18 | u() << 12 | u() << 6 | u()) >= 65536 && o <= 1114111)\r\n            return o; throw Error("Invalid UTF-8 detected"); } t.version = "3.0.0", t.encode = function (t) { for (var e = i(t), r = e.length, n = -1, o = ""; ++n < r;)\r\n            o += c(e[n]); return o; }, t.decode = function (t) { e = i(t), r = e.length, n = 0; for (var s, a = []; !1 !== (s = l());)\r\n            a.push(s); return function (t) { for (var e, r = t.length, n = -1, i = ""; ++n < r;)\r\n            (e = t[n]) > 65535 && (i += o((e -= 65536) >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), i += o(e); return i; }(a); }; }(e); }, function (t, e, r) { var n; t.exports = (n = r(0), r(10), r(33), r(34), r(6), r(7), r(11), r(18), r(35), r(19), r(36), r(20), r(37), r(12), r(38), r(5), r(1), r(39), r(40), r(41), r(42), r(43), r(44), r(45), r(46), r(47), r(48), r(49), r(50), r(51), r(52), r(53), r(54), n); }, function (t, e, r) { var n; t.exports = (n = r(0), function () { if ("function" == typeof ArrayBuffer) {\r\n            var t = n.lib.WordArray, e = t.init;\r\n            (t.init = function (t) { if (t instanceof ArrayBuffer && (t = new Uint8Array(t)), (t instanceof Int8Array || "undefined" != typeof Uint8ClampedArray && t instanceof Uint8ClampedArray || t instanceof Int16Array || t instanceof Uint16Array || t instanceof Int32Array || t instanceof Uint32Array || t instanceof Float32Array || t instanceof Float64Array) && (t = new Uint8Array(t.buffer, t.byteOffset, t.byteLength)), t instanceof Uint8Array) {\r\n                for (var r = t.byteLength, n = [], o = 0; o < r; o++)\r\n                    n[o >>> 2] |= t[o] << 24 - o % 4 * 8;\r\n                e.call(this, n, r);\r\n            }\r\n            else\r\n                e.apply(this, arguments); }).prototype = t;\r\n        } }(), n.lib.WordArray); }, function (t, e, r) { var n; t.exports = (n = r(0), function () { var t = n, e = t.lib.WordArray, r = t.enc; function o(t) { return t << 8 & 4278255360 | t >>> 8 & 16711935; } r.Utf16 = r.Utf16BE = { stringify: function (t) { for (var e = t.words, r = t.sigBytes, n = [], o = 0; o < r; o += 2) {\r\n                var i = e[o >>> 2] >>> 16 - o % 4 * 8 & 65535;\r\n                n.push(String.fromCharCode(i));\r\n            } return n.join(""); }, parse: function (t) { for (var r = t.length, n = [], o = 0; o < r; o++)\r\n                n[o >>> 1] |= t.charCodeAt(o) << 16 - o % 2 * 16; return e.create(n, 2 * r); } }, r.Utf16LE = { stringify: function (t) { for (var e = t.words, r = t.sigBytes, n = [], i = 0; i < r; i += 2) {\r\n                var s = o(e[i >>> 2] >>> 16 - i % 4 * 8 & 65535);\r\n                n.push(String.fromCharCode(s));\r\n            } return n.join(""); }, parse: function (t) { for (var r = t.length, n = [], i = 0; i < r; i++)\r\n                n[i >>> 1] |= o(t.charCodeAt(i) << 16 - i % 2 * 16); return e.create(n, 2 * r); } }; }(), n.enc.Utf16); }, function (t, e, r) { var n, o, i, s, a, c; t.exports = (n = r(0), r(18), i = (o = n).lib.WordArray, s = o.algo, a = s.SHA256, c = s.SHA224 = a.extend({ _doReset: function () { this._hash = new i.init([3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428]); }, _doFinalize: function () { var t = a._doFinalize.call(this); return t.sigBytes -= 4, t; } }), o.SHA224 = a._createHelper(c), o.HmacSHA224 = a._createHmacHelper(c), n.SHA224); }, function (t, e, r) { var n, o, i, s, a, c, u, l; t.exports = (n = r(0), r(10), r(19), i = (o = n).x64, s = i.Word, a = i.WordArray, c = o.algo, u = c.SHA512, l = c.SHA384 = u.extend({ _doReset: function () { this._hash = new a.init([new s.init(3418070365, 3238371032), new s.init(1654270250, 914150663), new s.init(2438529370, 812702999), new s.init(355462360, 4144912697), new s.init(1731405415, 4290775857), new s.init(2394180231, 1750603025), new s.init(3675008525, 1694076839), new s.init(1203062813, 3204075428)]); }, _doFinalize: function () { var t = u._doFinalize.call(this); return t.sigBytes -= 16, t; } }), o.SHA384 = u._createHelper(l), o.HmacSHA384 = u._createHmacHelper(l), n.SHA384); }, function (t, e, r) {\r\n            var n;\r\n            t.exports = (n = r(0),\r\n                /** @preserve\r\n                    (c) 2012 by Cédric Mesnil. All rights reserved.\r\n                \n                    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n                \n                        - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n                        - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\r\n                \n                    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n                    */\r\n                function (t) { var e = n, r = e.lib, o = r.WordArray, i = r.Hasher, s = e.algo, a = o.create([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]), c = o.create([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]), u = o.create([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]), l = o.create([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]), h = o.create([0, 1518500249, 1859775393, 2400959708, 2840853838]), f = o.create([1352829926, 1548603684, 1836072691, 2053994217, 0]), p = s.RIPEMD160 = i.extend({ _doReset: function () { this._hash = o.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]); }, _doProcessBlock: function (t, e) { for (var r = 0; r < 16; r++) {\r\n                        var n = e + r, o = t[n];\r\n                        t[n] = 16711935 & (o << 8 | o >>> 24) | 4278255360 & (o << 24 | o >>> 8);\r\n                    } var i, s, p, w, b, B, F, N, k, x, S, A = this._hash.words, O = h.words, T = f.words, P = a.words, M = c.words, C = u.words, E = l.words; for (B = i = A[0], F = s = A[1], N = p = A[2], k = w = A[3], x = b = A[4], r = 0; r < 80; r += 1)\r\n                        S = i + t[e + P[r]] | 0, S += r < 16 ? d(s, p, w) + O[0] : r < 32 ? m(s, p, w) + O[1] : r < 48 ? y(s, p, w) + O[2] : r < 64 ? g(s, p, w) + O[3] : _(s, p, w) + O[4], S = (S = v(S |= 0, C[r])) + b | 0, i = b, b = w, w = v(p, 10), p = s, s = S, S = B + t[e + M[r]] | 0, S += r < 16 ? _(F, N, k) + T[0] : r < 32 ? g(F, N, k) + T[1] : r < 48 ? y(F, N, k) + T[2] : r < 64 ? m(F, N, k) + T[3] : d(F, N, k) + T[4], S = (S = v(S |= 0, E[r])) + x | 0, B = x, x = k, k = v(N, 10), N = F, F = S; S = A[1] + p + k | 0, A[1] = A[2] + w + x | 0, A[2] = A[3] + b + B | 0, A[3] = A[4] + i + F | 0, A[4] = A[0] + s + N | 0, A[0] = S; }, _doFinalize: function () { var t = this._data, e = t.words, r = 8 * this._nDataBytes, n = 8 * t.sigBytes; e[n >>> 5] |= 128 << 24 - n % 32, e[14 + (n + 64 >>> 9 << 4)] = 16711935 & (r << 8 | r >>> 24) | 4278255360 & (r << 24 | r >>> 8), t.sigBytes = 4 * (e.length + 1), this._process(); for (var o = this._hash, i = o.words, s = 0; s < 5; s++) {\r\n                        var a = i[s];\r\n                        i[s] = 16711935 & (a << 8 | a >>> 24) | 4278255360 & (a << 24 | a >>> 8);\r\n                    } return o; }, clone: function () { var t = i.clone.call(this); return t._hash = this._hash.clone(), t; } }); function d(t, e, r) { return t ^ e ^ r; } function m(t, e, r) { return t & e | ~t & r; } function y(t, e, r) { return (t | ~e) ^ r; } function g(t, e, r) { return t & r | e & ~r; } function _(t, e, r) { return t ^ (e | ~r); } function v(t, e) { return t << e | t >>> 32 - e; } e.RIPEMD160 = i._createHelper(p), e.HmacRIPEMD160 = i._createHmacHelper(p); }(Math), n.RIPEMD160);\r\n        }, function (t, e, r) { var n, o, i, s, a, c, u, l, h; t.exports = (n = r(0), r(11), r(12), i = (o = n).lib, s = i.Base, a = i.WordArray, c = o.algo, u = c.SHA1, l = c.HMAC, h = c.PBKDF2 = s.extend({ cfg: s.extend({ keySize: 4, hasher: u, iterations: 1 }), init: function (t) { this.cfg = this.cfg.extend(t); }, compute: function (t, e) { for (var r = this.cfg, n = l.create(r.hasher, t), o = a.create(), i = a.create([1]), s = o.words, c = i.words, u = r.keySize, h = r.iterations; s.length < u;) {\r\n                var f = n.update(e).finalize(i);\r\n                n.reset();\r\n                for (var p = f.words, d = p.length, m = f, y = 1; y < h; y++) {\r\n                    m = n.finalize(m), n.reset();\r\n                    for (var g = m.words, _ = 0; _ < d; _++)\r\n                        p[_] ^= g[_];\r\n                }\r\n                o.concat(f), c[0]++;\r\n            } return o.sigBytes = 4 * u, o; } }), o.PBKDF2 = function (t, e, r) { return h.create(r).compute(t, e); }, n.PBKDF2); }, function (t, e, r) { var n; t.exports = (n = r(0), r(1), n.mode.CFB = function () { var t = n.lib.BlockCipherMode.extend(); function e(t, e, r, n) { var o = this._iv; if (o) {\r\n            var i = o.slice(0);\r\n            this._iv = void 0;\r\n        }\r\n        else\r\n            i = this._prevBlock; n.encryptBlock(i, 0); for (var s = 0; s < r; s++)\r\n            t[e + s] ^= i[s]; } return t.Encryptor = t.extend({ processBlock: function (t, r) { var n = this._cipher, o = n.blockSize; e.call(this, t, r, o, n), this._prevBlock = t.slice(r, r + o); } }), t.Decryptor = t.extend({ processBlock: function (t, r) { var n = this._cipher, o = n.blockSize, i = t.slice(r, r + o); e.call(this, t, r, o, n), this._prevBlock = i; } }), t; }(), n.mode.CFB); }, function (t, e, r) { var n, o, i; t.exports = (n = r(0), r(1), n.mode.CTR = (o = n.lib.BlockCipherMode.extend(), i = o.Encryptor = o.extend({ processBlock: function (t, e) { var r = this._cipher, n = r.blockSize, o = this._iv, i = this._counter; o && (i = this._counter = o.slice(0), this._iv = void 0); var s = i.slice(0); r.encryptBlock(s, 0), i[n - 1] = i[n - 1] + 1 | 0; for (var a = 0; a < n; a++)\r\n                t[e + a] ^= s[a]; } }), o.Decryptor = i, o), n.mode.CTR); }, function (t, e, r) {\r\n            var n;\r\n            t.exports = (n = r(0), r(1),\r\n                /** @preserve\r\n                     * Counter block mode compatible with  Dr Brian Gladman fileenc.c\r\n                     * derived from CryptoJS.mode.CTR\r\n                     * Jan Hruby jhruby.web@gmail.com\r\n                     */\r\n                n.mode.CTRGladman = function () { var t = n.lib.BlockCipherMode.extend(); function e(t) { if (255 == (t >> 24 & 255)) {\r\n                    var e = t >> 16 & 255, r = t >> 8 & 255, n = 255 & t;\r\n                    255 === e ? (e = 0, 255 === r ? (r = 0, 255 === n ? n = 0 : ++n) : ++r) : ++e, t = 0, t += e << 16, t += r << 8, t += n;\r\n                }\r\n                else\r\n                    t += 1 << 24; return t; } var r = t.Encryptor = t.extend({ processBlock: function (t, r) { var n = this._cipher, o = n.blockSize, i = this._iv, s = this._counter; i && (s = this._counter = i.slice(0), this._iv = void 0), function (t) { 0 === (t[0] = e(t[0])) && (t[1] = e(t[1])); }(s); var a = s.slice(0); n.encryptBlock(a, 0); for (var c = 0; c < o; c++)\r\n                        t[r + c] ^= a[c]; } }); return t.Decryptor = r, t; }(), n.mode.CTRGladman);\r\n        }, function (t, e, r) { var n, o, i; t.exports = (n = r(0), r(1), n.mode.OFB = (o = n.lib.BlockCipherMode.extend(), i = o.Encryptor = o.extend({ processBlock: function (t, e) { var r = this._cipher, n = r.blockSize, o = this._iv, i = this._keystream; o && (i = this._keystream = o.slice(0), this._iv = void 0), r.encryptBlock(i, 0); for (var s = 0; s < n; s++)\r\n                t[e + s] ^= i[s]; } }), o.Decryptor = i, o), n.mode.OFB); }, function (t, e, r) { var n, o; t.exports = (n = r(0), r(1), n.mode.ECB = ((o = n.lib.BlockCipherMode.extend()).Encryptor = o.extend({ processBlock: function (t, e) { this._cipher.encryptBlock(t, e); } }), o.Decryptor = o.extend({ processBlock: function (t, e) { this._cipher.decryptBlock(t, e); } }), o), n.mode.ECB); }, function (t, e, r) { var n; t.exports = (n = r(0), r(1), n.pad.AnsiX923 = { pad: function (t, e) { var r = t.sigBytes, n = 4 * e, o = n - r % n, i = r + o - 1; t.clamp(), t.words[i >>> 2] |= o << 24 - i % 4 * 8, t.sigBytes += o; }, unpad: function (t) { var e = 255 & t.words[t.sigBytes - 1 >>> 2]; t.sigBytes -= e; } }, n.pad.Ansix923); }, function (t, e, r) { var n; t.exports = (n = r(0), r(1), n.pad.Iso10126 = { pad: function (t, e) { var r = 4 * e, o = r - t.sigBytes % r; t.concat(n.lib.WordArray.random(o - 1)).concat(n.lib.WordArray.create([o << 24], 1)); }, unpad: function (t) { var e = 255 & t.words[t.sigBytes - 1 >>> 2]; t.sigBytes -= e; } }, n.pad.Iso10126); }, function (t, e, r) { var n; t.exports = (n = r(0), r(1), n.pad.Iso97971 = { pad: function (t, e) { t.concat(n.lib.WordArray.create([2147483648], 1)), n.pad.ZeroPadding.pad(t, e); }, unpad: function (t) { n.pad.ZeroPadding.unpad(t), t.sigBytes--; } }, n.pad.Iso97971); }, function (t, e, r) { var n; t.exports = (n = r(0), r(1), n.pad.ZeroPadding = { pad: function (t, e) { var r = 4 * e; t.clamp(), t.sigBytes += r - (t.sigBytes % r || r); }, unpad: function (t) { for (var e = t.words, r = t.sigBytes - 1; !(e[r >>> 2] >>> 24 - r % 4 * 8 & 255);)\r\n                r--; t.sigBytes = r + 1; } }, n.pad.ZeroPadding); }, function (t, e, r) { var n; t.exports = (n = r(0), r(1), n.pad.NoPadding = { pad: function () { }, unpad: function () { } }, n.pad.NoPadding); }, function (t, e, r) { var n, o, i, s; t.exports = (n = r(0), r(1), i = (o = n).lib.CipherParams, s = o.enc.Hex, o.format.Hex = { stringify: function (t) { return t.ciphertext.toString(s); }, parse: function (t) { var e = s.parse(t); return i.create({ ciphertext: e }); } }, n.format.Hex); }, function (t, e, r) { var n; t.exports = (n = r(0), r(6), r(7), r(5), r(1), function () { var t = n, e = t.lib.BlockCipher, r = t.algo, o = [], i = [], s = [], a = [], c = [], u = [], l = [], h = [], f = [], p = []; !function () { for (var t = [], e = 0; e < 256; e++)\r\n            t[e] = e < 128 ? e << 1 : e << 1 ^ 283; var r = 0, n = 0; for (e = 0; e < 256; e++) {\r\n            var d = n ^ n << 1 ^ n << 2 ^ n << 3 ^ n << 4;\r\n            d = d >>> 8 ^ 255 & d ^ 99, o[r] = d, i[d] = r;\r\n            var m = t[r], y = t[m], g = t[y], _ = 257 * t[d] ^ 16843008 * d;\r\n            s[r] = _ << 24 | _ >>> 8, a[r] = _ << 16 | _ >>> 16, c[r] = _ << 8 | _ >>> 24, u[r] = _, _ = 16843009 * g ^ 65537 * y ^ 257 * m ^ 16843008 * r, l[d] = _ << 24 | _ >>> 8, h[d] = _ << 16 | _ >>> 16, f[d] = _ << 8 | _ >>> 24, p[d] = _, r ? (r = m ^ t[t[t[g ^ m]]], n ^= t[t[n]]) : r = n = 1;\r\n        } }(); var d = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], m = r.AES = e.extend({ _doReset: function () { if (!this._nRounds || this._keyPriorReset !== this._key) {\r\n                for (var t = this._keyPriorReset = this._key, e = t.words, r = t.sigBytes / 4, n = 4 * ((this._nRounds = r + 6) + 1), i = this._keySchedule = [], s = 0; s < n; s++)\r\n                    if (s < r)\r\n                        i[s] = e[s];\r\n                    else {\r\n                        var a = i[s - 1];\r\n                        s % r ? r > 6 && s % r == 4 && (a = o[a >>> 24] << 24 | o[a >>> 16 & 255] << 16 | o[a >>> 8 & 255] << 8 | o[255 & a]) : (a = o[(a = a << 8 | a >>> 24) >>> 24] << 24 | o[a >>> 16 & 255] << 16 | o[a >>> 8 & 255] << 8 | o[255 & a], a ^= d[s / r | 0] << 24), i[s] = i[s - r] ^ a;\r\n                    }\r\n                for (var c = this._invKeySchedule = [], u = 0; u < n; u++)\r\n                    s = n - u, a = u % 4 ? i[s] : i[s - 4], c[u] = u < 4 || s <= 4 ? a : l[o[a >>> 24]] ^ h[o[a >>> 16 & 255]] ^ f[o[a >>> 8 & 255]] ^ p[o[255 & a]];\r\n            } }, encryptBlock: function (t, e) { this._doCryptBlock(t, e, this._keySchedule, s, a, c, u, o); }, decryptBlock: function (t, e) { var r = t[e + 1]; t[e + 1] = t[e + 3], t[e + 3] = r, this._doCryptBlock(t, e, this._invKeySchedule, l, h, f, p, i), r = t[e + 1], t[e + 1] = t[e + 3], t[e + 3] = r; }, _doCryptBlock: function (t, e, r, n, o, i, s, a) { for (var c = this._nRounds, u = t[e] ^ r[0], l = t[e + 1] ^ r[1], h = t[e + 2] ^ r[2], f = t[e + 3] ^ r[3], p = 4, d = 1; d < c; d++) {\r\n                var m = n[u >>> 24] ^ o[l >>> 16 & 255] ^ i[h >>> 8 & 255] ^ s[255 & f] ^ r[p++], y = n[l >>> 24] ^ o[h >>> 16 & 255] ^ i[f >>> 8 & 255] ^ s[255 & u] ^ r[p++], g = n[h >>> 24] ^ o[f >>> 16 & 255] ^ i[u >>> 8 & 255] ^ s[255 & l] ^ r[p++], _ = n[f >>> 24] ^ o[u >>> 16 & 255] ^ i[l >>> 8 & 255] ^ s[255 & h] ^ r[p++];\r\n                u = m, l = y, h = g, f = _;\r\n            } m = (a[u >>> 24] << 24 | a[l >>> 16 & 255] << 16 | a[h >>> 8 & 255] << 8 | a[255 & f]) ^ r[p++], y = (a[l >>> 24] << 24 | a[h >>> 16 & 255] << 16 | a[f >>> 8 & 255] << 8 | a[255 & u]) ^ r[p++], g = (a[h >>> 24] << 24 | a[f >>> 16 & 255] << 16 | a[u >>> 8 & 255] << 8 | a[255 & l]) ^ r[p++], _ = (a[f >>> 24] << 24 | a[u >>> 16 & 255] << 16 | a[l >>> 8 & 255] << 8 | a[255 & h]) ^ r[p++], t[e] = m, t[e + 1] = y, t[e + 2] = g, t[e + 3] = _; }, keySize: 8 }); t.AES = e._createHelper(m); }(), n.AES); }, function (t, e, r) { var n; t.exports = (n = r(0), r(6), r(7), r(5), r(1), function () { var t = n, e = t.lib, r = e.WordArray, o = e.BlockCipher, i = t.algo, s = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4], a = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32], c = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28], u = [{ 0: 8421888, 268435456: 32768, 536870912: 8421378, 805306368: 2, 1073741824: 512, 1342177280: 8421890, 1610612736: 8389122, 1879048192: 8388608, 2147483648: 514, 2415919104: 8389120, 2684354560: 33280, 2952790016: 8421376, 3221225472: 32770, 3489660928: 8388610, 3758096384: 0, 4026531840: 33282, 134217728: 0, 402653184: 8421890, 671088640: 33282, 939524096: 32768, 1207959552: 8421888, 1476395008: 512, 1744830464: 8421378, 2013265920: 2, 2281701376: 8389120, 2550136832: 33280, 2818572288: 8421376, 3087007744: 8389122, 3355443200: 8388610, 3623878656: 32770, 3892314112: 514, 4160749568: 8388608, 1: 32768, 268435457: 2, 536870913: 8421888, 805306369: 8388608, 1073741825: 8421378, 1342177281: 33280, 1610612737: 512, 1879048193: 8389122, 2147483649: 8421890, 2415919105: 8421376, 2684354561: 8388610, 2952790017: 33282, 3221225473: 514, 3489660929: 8389120, 3758096385: 32770, 4026531841: 0, 134217729: 8421890, 402653185: 8421376, 671088641: 8388608, 939524097: 512, 1207959553: 32768, 1476395009: 8388610, 1744830465: 2, 2013265921: 33282, 2281701377: 32770, 2550136833: 8389122, 2818572289: 514, 3087007745: 8421888, 3355443201: 8389120, 3623878657: 0, 3892314113: 33280, 4160749569: 8421378 }, { 0: 1074282512, 16777216: 16384, 33554432: 524288, 50331648: 1074266128, 67108864: 1073741840, 83886080: 1074282496, 100663296: 1073758208, 117440512: 16, 134217728: 540672, 150994944: 1073758224, 167772160: 1073741824, 184549376: 540688, 201326592: 524304, 218103808: 0, 234881024: 16400, 251658240: 1074266112, 8388608: 1073758208, 25165824: 540688, 41943040: 16, 58720256: 1073758224, 75497472: 1074282512, 92274688: 1073741824, 109051904: 524288, 125829120: 1074266128, 142606336: 524304, 159383552: 0, 176160768: 16384, 192937984: 1074266112, 209715200: 1073741840, 226492416: 540672, 243269632: 1074282496, 260046848: 16400, 268435456: 0, 285212672: 1074266128, 301989888: 1073758224, 318767104: 1074282496, 335544320: 1074266112, 352321536: 16, 369098752: 540688, 385875968: 16384, 402653184: 16400, 419430400: 524288, 436207616: 524304, 452984832: 1073741840, 469762048: 540672, 486539264: 1073758208, 503316480: 1073741824, 520093696: 1074282512, 276824064: 540688, 293601280: 524288, 310378496: 1074266112, 327155712: 16384, 343932928: 1073758208, 360710144: 1074282512, 377487360: 16, 394264576: 1073741824, 411041792: 1074282496, 427819008: 1073741840, 444596224: 1073758224, 461373440: 524304, 478150656: 0, 494927872: 16400, 511705088: 1074266128, 528482304: 540672 }, { 0: 260, 1048576: 0, 2097152: 67109120, 3145728: 65796, 4194304: 65540, 5242880: 67108868, 6291456: 67174660, 7340032: 67174400, 8388608: 67108864, 9437184: 67174656, 10485760: 65792, 11534336: 67174404, 12582912: 67109124, 13631488: 65536, 14680064: 4, 15728640: 256, 524288: 67174656, 1572864: 67174404, 2621440: 0, 3670016: 67109120, 4718592: 67108868, 5767168: 65536, 6815744: 65540, 7864320: 260, 8912896: 4, 9961472: 256, 11010048: 67174400, 12058624: 65796, 13107200: 65792, 14155776: 67109124, 15204352: 67174660, 16252928: 67108864, 16777216: 67174656, 17825792: 65540, 18874368: 65536, 19922944: 67109120, 20971520: 256, 22020096: 67174660, 23068672: 67108868, 24117248: 0, 25165824: 67109124, 26214400: 67108864, 27262976: 4, 28311552: 65792, 29360128: 67174400, 30408704: 260, 31457280: 65796, 32505856: 67174404, 17301504: 67108864, 18350080: 260, 19398656: 67174656, 20447232: 0, 21495808: 65540, 22544384: 67109120, 23592960: 256, 24641536: 67174404, 25690112: 65536, 26738688: 67174660, 27787264: 65796, 28835840: 67108868, 29884416: 67109124, 30932992: 67174400, 31981568: 4, 33030144: 65792 }, { 0: 2151682048, 65536: 2147487808, 131072: 4198464, 196608: 2151677952, 262144: 0, 327680: 4198400, 393216: 2147483712, 458752: 4194368, 524288: 2147483648, 589824: 4194304, 655360: 64, 720896: 2147487744, 786432: 2151678016, 851968: 4160, 917504: 4096, 983040: 2151682112, 32768: 2147487808, 98304: 64, 163840: 2151678016, 229376: 2147487744, 294912: 4198400, 360448: 2151682112, 425984: 0, 491520: 2151677952, 557056: 4096, 622592: 2151682048, 688128: 4194304, 753664: 4160, 819200: 2147483648, 884736: 4194368, 950272: 4198464, 1015808: 2147483712, 1048576: 4194368, 1114112: 4198400, 1179648: 2147483712, 1245184: 0, 1310720: 4160, 1376256: 2151678016, 1441792: 2151682048, 1507328: 2147487808, 1572864: 2151682112, 1638400: 2147483648, 1703936: 2151677952, 1769472: 4198464, 1835008: 2147487744, 1900544: 4194304, 1966080: 64, 2031616: 4096, 1081344: 2151677952, 1146880: 2151682112, 1212416: 0, 1277952: 4198400, 1343488: 4194368, 1409024: 2147483648, 1474560: 2147487808, 1540096: 64, 1605632: 2147483712, 1671168: 4096, 1736704: 2147487744, 1802240: 2151678016, 1867776: 4160, 1933312: 2151682048, 1998848: 4194304, 2064384: 4198464 }, { 0: 128, 4096: 17039360, 8192: 262144, 12288: 536870912, 16384: 537133184, 20480: 16777344, 24576: 553648256, 28672: 262272, 32768: 16777216, 36864: 537133056, 40960: 536871040, 45056: 553910400, 49152: 553910272, 53248: 0, 57344: 17039488, 61440: 553648128, 2048: 17039488, 6144: 553648256, 10240: 128, 14336: 17039360, 18432: 262144, 22528: 537133184, 26624: 553910272, 30720: 536870912, 34816: 537133056, 38912: 0, 43008: 553910400, 47104: 16777344, 51200: 536871040, 55296: 553648128, 59392: 16777216, 63488: 262272, 65536: 262144, 69632: 128, 73728: 536870912, 77824: 553648256, 81920: 16777344, 86016: 553910272, 90112: 537133184, 94208: 16777216, 98304: 553910400, 102400: 553648128, 106496: 17039360, 110592: 537133056, 114688: 262272, 118784: 536871040, 122880: 0, 126976: 17039488, 67584: 553648256, 71680: 16777216, 75776: 17039360, 79872: 537133184, 83968: 536870912, 88064: 17039488, 92160: 128, 96256: 553910272, 100352: 262272, 104448: 553910400, 108544: 0, 112640: 553648128, 116736: 16777344, 120832: 262144, 124928: 537133056, 129024: 536871040 }, { 0: 268435464, 256: 8192, 512: 270532608, 768: 270540808, 1024: 268443648, 1280: 2097152, 1536: 2097160, 1792: 268435456, 2048: 0, 2304: 268443656, 2560: 2105344, 2816: 8, 3072: 270532616, 3328: 2105352, 3584: 8200, 3840: 270540800, 128: 270532608, 384: 270540808, 640: 8, 896: 2097152, 1152: 2105352, 1408: 268435464, 1664: 268443648, 1920: 8200, 2176: 2097160, 2432: 8192, 2688: 268443656, 2944: 270532616, 3200: 0, 3456: 270540800, 3712: 2105344, 3968: 268435456, 4096: 268443648, 4352: 270532616, 4608: 270540808, 4864: 8200, 5120: 2097152, 5376: 268435456, 5632: 268435464, 5888: 2105344, 6144: 2105352, 6400: 0, 6656: 8, 6912: 270532608, 7168: 8192, 7424: 268443656, 7680: 270540800, 7936: 2097160, 4224: 8, 4480: 2105344, 4736: 2097152, 4992: 268435464, 5248: 268443648, 5504: 8200, 5760: 270540808, 6016: 270532608, 6272: 270540800, 6528: 270532616, 6784: 8192, 7040: 2105352, 7296: 2097160, 7552: 0, 7808: 268435456, 8064: 268443656 }, { 0: 1048576, 16: 33555457, 32: 1024, 48: 1049601, 64: 34604033, 80: 0, 96: 1, 112: 34603009, 128: 33555456, 144: 1048577, 160: 33554433, 176: 34604032, 192: 34603008, 208: 1025, 224: 1049600, 240: 33554432, 8: 34603009, 24: 0, 40: 33555457, 56: 34604032, 72: 1048576, 88: 33554433, 104: 33554432, 120: 1025, 136: 1049601, 152: 33555456, 168: 34603008, 184: 1048577, 200: 1024, 216: 34604033, 232: 1, 248: 1049600, 256: 33554432, 272: 1048576, 288: 33555457, 304: 34603009, 320: 1048577, 336: 33555456, 352: 34604032, 368: 1049601, 384: 1025, 400: 34604033, 416: 1049600, 432: 1, 448: 0, 464: 34603008, 480: 33554433, 496: 1024, 264: 1049600, 280: 33555457, 296: 34603009, 312: 1, 328: 33554432, 344: 1048576, 360: 1025, 376: 34604032, 392: 33554433, 408: 34603008, 424: 0, 440: 34604033, 456: 1049601, 472: 1024, 488: 33555456, 504: 1048577 }, { 0: 134219808, 1: 131072, 2: 134217728, 3: 32, 4: 131104, 5: 134350880, 6: 134350848, 7: 2048, 8: 134348800, 9: 134219776, 10: 133120, 11: 134348832, 12: 2080, 13: 0, 14: 134217760, 15: 133152, 2147483648: 2048, 2147483649: 134350880, 2147483650: 134219808, 2147483651: 134217728, 2147483652: 134348800, 2147483653: 133120, 2147483654: 133152, 2147483655: 32, 2147483656: 134217760, 2147483657: 2080, 2147483658: 131104, 2147483659: 134350848, 2147483660: 0, 2147483661: 134348832, 2147483662: 134219776, 2147483663: 131072, 16: 133152, 17: 134350848, 18: 32, 19: 2048, 20: 134219776, 21: 134217760, 22: 134348832, 23: 131072, 24: 0, 25: 131104, 26: 134348800, 27: 134219808, 28: 134350880, 29: 133120, 30: 2080, 31: 134217728, 2147483664: 131072, 2147483665: 2048, 2147483666: 134348832, 2147483667: 133152, 2147483668: 32, 2147483669: 134348800, 2147483670: 134217728, 2147483671: 134219808, 2147483672: 134350880, 2147483673: 134217760, 2147483674: 134219776, 2147483675: 0, 2147483676: 133120, 2147483677: 2080, 2147483678: 131104, 2147483679: 134350848 }], l = [4160749569, 528482304, 33030144, 2064384, 129024, 8064, 504, 2147483679], h = i.DES = o.extend({ _doReset: function () { for (var t = this._key.words, e = [], r = 0; r < 56; r++) {\r\n                var n = s[r] - 1;\r\n                e[r] = t[n >>> 5] >>> 31 - n % 32 & 1;\r\n            } for (var o = this._subKeys = [], i = 0; i < 16; i++) {\r\n                var u = o[i] = [], l = c[i];\r\n                for (r = 0; r < 24; r++)\r\n                    u[r / 6 | 0] |= e[(a[r] - 1 + l) % 28] << 31 - r % 6, u[4 + (r / 6 | 0)] |= e[28 + (a[r + 24] - 1 + l) % 28] << 31 - r % 6;\r\n                for (u[0] = u[0] << 1 | u[0] >>> 31, r = 1; r < 7; r++)\r\n                    u[r] = u[r] >>> 4 * (r - 1) + 3;\r\n                u[7] = u[7] << 5 | u[7] >>> 27;\r\n            } var h = this._invSubKeys = []; for (r = 0; r < 16; r++)\r\n                h[r] = o[15 - r]; }, encryptBlock: function (t, e) { this._doCryptBlock(t, e, this._subKeys); }, decryptBlock: function (t, e) { this._doCryptBlock(t, e, this._invSubKeys); }, _doCryptBlock: function (t, e, r) { this._lBlock = t[e], this._rBlock = t[e + 1], f.call(this, 4, 252645135), f.call(this, 16, 65535), p.call(this, 2, 858993459), p.call(this, 8, 16711935), f.call(this, 1, 1431655765); for (var n = 0; n < 16; n++) {\r\n                for (var o = r[n], i = this._lBlock, s = this._rBlock, a = 0, c = 0; c < 8; c++)\r\n                    a |= u[c][((s ^ o[c]) & l[c]) >>> 0];\r\n                this._lBlock = s, this._rBlock = i ^ a;\r\n            } var h = this._lBlock; this._lBlock = this._rBlock, this._rBlock = h, f.call(this, 1, 1431655765), p.call(this, 8, 16711935), p.call(this, 2, 858993459), f.call(this, 16, 65535), f.call(this, 4, 252645135), t[e] = this._lBlock, t[e + 1] = this._rBlock; }, keySize: 2, ivSize: 2, blockSize: 2 }); function f(t, e) { var r = (this._lBlock >>> t ^ this._rBlock) & e; this._rBlock ^= r, this._lBlock ^= r << t; } function p(t, e) { var r = (this._rBlock >>> t ^ this._lBlock) & e; this._lBlock ^= r, this._rBlock ^= r << t; } t.DES = o._createHelper(h); var d = i.TripleDES = o.extend({ _doReset: function () { var t = this._key.words; this._des1 = h.createEncryptor(r.create(t.slice(0, 2))), this._des2 = h.createEncryptor(r.create(t.slice(2, 4))), this._des3 = h.createEncryptor(r.create(t.slice(4, 6))); }, encryptBlock: function (t, e) { this._des1.encryptBlock(t, e), this._des2.decryptBlock(t, e), this._des3.encryptBlock(t, e); }, decryptBlock: function (t, e) { this._des3.decryptBlock(t, e), this._des2.encryptBlock(t, e), this._des1.decryptBlock(t, e); }, keySize: 6, ivSize: 2, blockSize: 2 }); t.TripleDES = o._createHelper(d); }(), n.TripleDES); }, function (t, e, r) { var n; t.exports = (n = r(0), r(6), r(7), r(5), r(1), function () { var t = n, e = t.lib.StreamCipher, r = t.algo, o = r.RC4 = e.extend({ _doReset: function () { for (var t = this._key, e = t.words, r = t.sigBytes, n = this._S = [], o = 0; o < 256; o++)\r\n                n[o] = o; o = 0; for (var i = 0; o < 256; o++) {\r\n                var s = o % r, a = e[s >>> 2] >>> 24 - s % 4 * 8 & 255;\r\n                i = (i + n[o] + a) % 256;\r\n                var c = n[o];\r\n                n[o] = n[i], n[i] = c;\r\n            } this._i = this._j = 0; }, _doProcessBlock: function (t, e) { t[e] ^= i.call(this); }, keySize: 8, ivSize: 0 }); function i() { for (var t = this._S, e = this._i, r = this._j, n = 0, o = 0; o < 4; o++) {\r\n            r = (r + t[e = (e + 1) % 256]) % 256;\r\n            var i = t[e];\r\n            t[e] = t[r], t[r] = i, n |= t[(t[e] + t[r]) % 256] << 24 - 8 * o;\r\n        } return this._i = e, this._j = r, n; } t.RC4 = e._createHelper(o); var s = r.RC4Drop = o.extend({ cfg: o.cfg.extend({ drop: 192 }), _doReset: function () { o._doReset.call(this); for (var t = this.cfg.drop; t > 0; t--)\r\n                i.call(this); } }); t.RC4Drop = e._createHelper(s); }(), n.RC4); }, function (t, e, r) { var n; t.exports = (n = r(0), r(6), r(7), r(5), r(1), function () { var t = n, e = t.lib.StreamCipher, r = t.algo, o = [], i = [], s = [], a = r.Rabbit = e.extend({ _doReset: function () { for (var t = this._key.words, e = this.cfg.iv, r = 0; r < 4; r++)\r\n                t[r] = 16711935 & (t[r] << 8 | t[r] >>> 24) | 4278255360 & (t[r] << 24 | t[r] >>> 8); var n = this._X = [t[0], t[3] << 16 | t[2] >>> 16, t[1], t[0] << 16 | t[3] >>> 16, t[2], t[1] << 16 | t[0] >>> 16, t[3], t[2] << 16 | t[1] >>> 16], o = this._C = [t[2] << 16 | t[2] >>> 16, 4294901760 & t[0] | 65535 & t[1], t[3] << 16 | t[3] >>> 16, 4294901760 & t[1] | 65535 & t[2], t[0] << 16 | t[0] >>> 16, 4294901760 & t[2] | 65535 & t[3], t[1] << 16 | t[1] >>> 16, 4294901760 & t[3] | 65535 & t[0]]; for (this._b = 0, r = 0; r < 4; r++)\r\n                c.call(this); for (r = 0; r < 8; r++)\r\n                o[r] ^= n[r + 4 & 7]; if (e) {\r\n                var i = e.words, s = i[0], a = i[1], u = 16711935 & (s << 8 | s >>> 24) | 4278255360 & (s << 24 | s >>> 8), l = 16711935 & (a << 8 | a >>> 24) | 4278255360 & (a << 24 | a >>> 8), h = u >>> 16 | 4294901760 & l, f = l << 16 | 65535 & u;\r\n                for (o[0] ^= u, o[1] ^= h, o[2] ^= l, o[3] ^= f, o[4] ^= u, o[5] ^= h, o[6] ^= l, o[7] ^= f, r = 0; r < 4; r++)\r\n                    c.call(this);\r\n            } }, _doProcessBlock: function (t, e) { var r = this._X; c.call(this), o[0] = r[0] ^ r[5] >>> 16 ^ r[3] << 16, o[1] = r[2] ^ r[7] >>> 16 ^ r[5] << 16, o[2] = r[4] ^ r[1] >>> 16 ^ r[7] << 16, o[3] = r[6] ^ r[3] >>> 16 ^ r[1] << 16; for (var n = 0; n < 4; n++)\r\n                o[n] = 16711935 & (o[n] << 8 | o[n] >>> 24) | 4278255360 & (o[n] << 24 | o[n] >>> 8), t[e + n] ^= o[n]; }, blockSize: 4, ivSize: 2 }); function c() { for (var t = this._X, e = this._C, r = 0; r < 8; r++)\r\n            i[r] = e[r]; for (e[0] = e[0] + 1295307597 + this._b | 0, e[1] = e[1] + 3545052371 + (e[0] >>> 0 < i[0] >>> 0 ? 1 : 0) | 0, e[2] = e[2] + 886263092 + (e[1] >>> 0 < i[1] >>> 0 ? 1 : 0) | 0, e[3] = e[3] + 1295307597 + (e[2] >>> 0 < i[2] >>> 0 ? 1 : 0) | 0, e[4] = e[4] + 3545052371 + (e[3] >>> 0 < i[3] >>> 0 ? 1 : 0) | 0, e[5] = e[5] + 886263092 + (e[4] >>> 0 < i[4] >>> 0 ? 1 : 0) | 0, e[6] = e[6] + 1295307597 + (e[5] >>> 0 < i[5] >>> 0 ? 1 : 0) | 0, e[7] = e[7] + 3545052371 + (e[6] >>> 0 < i[6] >>> 0 ? 1 : 0) | 0, this._b = e[7] >>> 0 < i[7] >>> 0 ? 1 : 0, r = 0; r < 8; r++) {\r\n            var n = t[r] + e[r], o = 65535 & n, a = n >>> 16, c = ((o * o >>> 17) + o * a >>> 15) + a * a, u = ((4294901760 & n) * n | 0) + ((65535 & n) * n | 0);\r\n            s[r] = c ^ u;\r\n        } t[0] = s[0] + (s[7] << 16 | s[7] >>> 16) + (s[6] << 16 | s[6] >>> 16) | 0, t[1] = s[1] + (s[0] << 8 | s[0] >>> 24) + s[7] | 0, t[2] = s[2] + (s[1] << 16 | s[1] >>> 16) + (s[0] << 16 | s[0] >>> 16) | 0, t[3] = s[3] + (s[2] << 8 | s[2] >>> 24) + s[1] | 0, t[4] = s[4] + (s[3] << 16 | s[3] >>> 16) + (s[2] << 16 | s[2] >>> 16) | 0, t[5] = s[5] + (s[4] << 8 | s[4] >>> 24) + s[3] | 0, t[6] = s[6] + (s[5] << 16 | s[5] >>> 16) + (s[4] << 16 | s[4] >>> 16) | 0, t[7] = s[7] + (s[6] << 8 | s[6] >>> 24) + s[5] | 0; } t.Rabbit = e._createHelper(a); }(), n.Rabbit); }, function (t, e, r) { var n; t.exports = (n = r(0), r(6), r(7), r(5), r(1), function () { var t = n, e = t.lib.StreamCipher, r = t.algo, o = [], i = [], s = [], a = r.RabbitLegacy = e.extend({ _doReset: function () { var t = this._key.words, e = this.cfg.iv, r = this._X = [t[0], t[3] << 16 | t[2] >>> 16, t[1], t[0] << 16 | t[3] >>> 16, t[2], t[1] << 16 | t[0] >>> 16, t[3], t[2] << 16 | t[1] >>> 16], n = this._C = [t[2] << 16 | t[2] >>> 16, 4294901760 & t[0] | 65535 & t[1], t[3] << 16 | t[3] >>> 16, 4294901760 & t[1] | 65535 & t[2], t[0] << 16 | t[0] >>> 16, 4294901760 & t[2] | 65535 & t[3], t[1] << 16 | t[1] >>> 16, 4294901760 & t[3] | 65535 & t[0]]; this._b = 0; for (var o = 0; o < 4; o++)\r\n                c.call(this); for (o = 0; o < 8; o++)\r\n                n[o] ^= r[o + 4 & 7]; if (e) {\r\n                var i = e.words, s = i[0], a = i[1], u = 16711935 & (s << 8 | s >>> 24) | 4278255360 & (s << 24 | s >>> 8), l = 16711935 & (a << 8 | a >>> 24) | 4278255360 & (a << 24 | a >>> 8), h = u >>> 16 | 4294901760 & l, f = l << 16 | 65535 & u;\r\n                for (n[0] ^= u, n[1] ^= h, n[2] ^= l, n[3] ^= f, n[4] ^= u, n[5] ^= h, n[6] ^= l, n[7] ^= f, o = 0; o < 4; o++)\r\n                    c.call(this);\r\n            } }, _doProcessBlock: function (t, e) { var r = this._X; c.call(this), o[0] = r[0] ^ r[5] >>> 16 ^ r[3] << 16, o[1] = r[2] ^ r[7] >>> 16 ^ r[5] << 16, o[2] = r[4] ^ r[1] >>> 16 ^ r[7] << 16, o[3] = r[6] ^ r[3] >>> 16 ^ r[1] << 16; for (var n = 0; n < 4; n++)\r\n                o[n] = 16711935 & (o[n] << 8 | o[n] >>> 24) | 4278255360 & (o[n] << 24 | o[n] >>> 8), t[e + n] ^= o[n]; }, blockSize: 4, ivSize: 2 }); function c() { for (var t = this._X, e = this._C, r = 0; r < 8; r++)\r\n            i[r] = e[r]; for (e[0] = e[0] + 1295307597 + this._b | 0, e[1] = e[1] + 3545052371 + (e[0] >>> 0 < i[0] >>> 0 ? 1 : 0) | 0, e[2] = e[2] + 886263092 + (e[1] >>> 0 < i[1] >>> 0 ? 1 : 0) | 0, e[3] = e[3] + 1295307597 + (e[2] >>> 0 < i[2] >>> 0 ? 1 : 0) | 0, e[4] = e[4] + 3545052371 + (e[3] >>> 0 < i[3] >>> 0 ? 1 : 0) | 0, e[5] = e[5] + 886263092 + (e[4] >>> 0 < i[4] >>> 0 ? 1 : 0) | 0, e[6] = e[6] + 1295307597 + (e[5] >>> 0 < i[5] >>> 0 ? 1 : 0) | 0, e[7] = e[7] + 3545052371 + (e[6] >>> 0 < i[6] >>> 0 ? 1 : 0) | 0, this._b = e[7] >>> 0 < i[7] >>> 0 ? 1 : 0, r = 0; r < 8; r++) {\r\n            var n = t[r] + e[r], o = 65535 & n, a = n >>> 16, c = ((o * o >>> 17) + o * a >>> 15) + a * a, u = ((4294901760 & n) * n | 0) + ((65535 & n) * n | 0);\r\n            s[r] = c ^ u;\r\n        } t[0] = s[0] + (s[7] << 16 | s[7] >>> 16) + (s[6] << 16 | s[6] >>> 16) | 0, t[1] = s[1] + (s[0] << 8 | s[0] >>> 24) + s[7] | 0, t[2] = s[2] + (s[1] << 16 | s[1] >>> 16) + (s[0] << 16 | s[0] >>> 16) | 0, t[3] = s[3] + (s[2] << 8 | s[2] >>> 24) + s[1] | 0, t[4] = s[4] + (s[3] << 16 | s[3] >>> 16) + (s[2] << 16 | s[2] >>> 16) | 0, t[5] = s[5] + (s[4] << 8 | s[4] >>> 24) + s[3] | 0, t[6] = s[6] + (s[5] << 16 | s[5] >>> 16) + (s[4] << 16 | s[4] >>> 16) | 0, t[7] = s[7] + (s[6] << 8 | s[6] >>> 24) + s[5] | 0; } t.RabbitLegacy = e._createHelper(a); }(), n.RabbitLegacy); }, function (t, e, r) {\r\n            "use strict";\r\n            var n = this && this.__decorate || function (t, e, r, n) { var o, i = arguments.length, s = i < 3 ? e : null === n ? n = Object.getOwnPropertyDescriptor(e, r) : n; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)\r\n                s = Reflect.decorate(t, e, r, n);\r\n            else\r\n                for (var a = t.length - 1; a >= 0; a--)\r\n                    (o = t[a]) && (s = (i < 3 ? o(s) : i > 3 ? o(e, r, s) : o(e, r)) || s); return i > 3 && s && Object.defineProperty(e, r, s), s; }, o = this && this.__metadata || function (t, e) { if ("object" == typeof Reflect && "function" == typeof Reflect.metadata)\r\n                return Reflect.metadata(t, e); };\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var i = r(56), s = r(13), a = r(9), c = r(21), u = r(58), l = r(59);\r\n            function h(t, e) { var r = c.eth[e]; if (!r)\r\n                throw new Error("Could not find the method/property named " + e.toString()); Object.defineProperty(t, e, { value: function () {\r\n                    var _a;\r\n                    return (_a = r.execute).call.apply(_a, __spread([r, this], arguments));\r\n                } }); }\r\n            e.TRANSACTION_FETCH_DELAY = 2e3, e.inject = h;\r\n            var f = /** @class */ (function () {\r\n                function f(t) {\r\n                    this.provider = t, this.requests = new Map;\r\n                }\r\n                f.prototype.sendAsync = function (t) {\r\n                    return __awaiter(this, void 0, void 0, function () {\r\n                        var e, r;\r\n                        var _this = this;\r\n                        return __generator(this, function (_a) {\r\n                            if (!this.provider)\r\n                                throw s.InvalidProvider();\r\n                            e = i.toPayload(t.method, t.params);\r\n                            r = a.future();\r\n                            return [2 /*return*/, (this.requests.set(e.id, r), this.provider.sendAsync(e, function (t, n) { _this.requests.delete(e.id), t ? r.reject(t) : i.isValidResponse(n) ? r.resolve(n.result) : r.reject(s.InvalidResponse(n)); }), r)];\r\n                        });\r\n                    });\r\n                };\r\n                f.prototype.setProvider = function (t) { this.provider = t; };\r\n                f.prototype.getConfirmedTransaction = function (t) {\r\n                    return __awaiter(this, void 0, void 0, function () { var e; return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, this.waitForCompletion(t)];\r\n                            case 1:\r\n                                e = _a.sent();\r\n                                if (this.isFailure(e))\r\n                                    throw new Error("Transaction \\"" + t + "\\" failed");\r\n                                return [2 /*return*/, e];\r\n                        }\r\n                    }); });\r\n                };\r\n                f.prototype.waitForCompletion = function (t, r) {\r\n                    return __awaiter(this, void 0, void 0, function () { var e_9, r_6; return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, this.isTxDropped(t, r)];\r\n                            case 1:\r\n                                if (!_a.sent()) return [3 /*break*/, 3];\r\n                                return [4 /*yield*/, this.getTransactionAndReceipt(t)];\r\n                            case 2:\r\n                                e_9 = _a.sent();\r\n                                return [2 /*return*/, Object.assign({}, e_9, { status: u.TransactionStatus.failed })];\r\n                            case 3: return [4 /*yield*/, this.getTransactionAndReceipt(t)];\r\n                            case 4:\r\n                                r_6 = _a.sent();\r\n                                if (!this.isPending(r_6) && r_6.receipt)\r\n                                    return [2 /*return*/, Object.assign({}, r_6, { status: this.isFailure(r_6) ? u.TransactionStatus.failed : u.TransactionStatus.confirmed })];\r\n                                return [4 /*yield*/, l.sleep(e.TRANSACTION_FETCH_DELAY)];\r\n                            case 5:\r\n                                _a.sent();\r\n                                _a.label = 6;\r\n                            case 6: return [3 /*break*/, 3];\r\n                            case 7: return [2 /*return*/];\r\n                        }\r\n                    }); });\r\n                };\r\n                f.prototype.getTransaction = function (t) {\r\n                    return __awaiter(this, void 0, void 0, function () { var e, r, n, t_15, _a, t_12, _c, t_13, _d, t_14; return __generator(this, function (_e) {\r\n                        switch (_e.label) {\r\n                            case 0:\r\n                                _e.trys.push([0, 4, , 5]);\r\n                                return [4 /*yield*/, this.eth_accounts()];\r\n                            case 1:\r\n                                t_15 = (_e.sent())[0];\r\n                                _a = t_15;\r\n                                if (!_a) return [3 /*break*/, 3];\r\n                                return [4 /*yield*/, this.eth_getTransactionCount(t_15, "latest")];\r\n                            case 2:\r\n                                _a = (e = _e.sent());\r\n                                _e.label = 3;\r\n                            case 3:\r\n                                _a;\r\n                                return [3 /*break*/, 5];\r\n                            case 4:\r\n                                t_12 = _e.sent();\r\n                                e = null;\r\n                                return [3 /*break*/, 5];\r\n                            case 5:\r\n                                _e.trys.push([5, 7, , 8]);\r\n                                _c = null;\r\n                                return [4 /*yield*/, this.eth_getTransactionByHash(t)];\r\n                            case 6:\r\n                                if (_c == (r = _e.sent()))\r\n                                    return [2 /*return*/, null];\r\n                                return [3 /*break*/, 8];\r\n                            case 7:\r\n                                t_13 = _e.sent();\r\n                                return [2 /*return*/, null];\r\n                            case 8:\r\n                                if (null == r.blockNumber) {\r\n                                    if (null != e) {\r\n                                        if (r.nonce < e) {\r\n                                            return [2 /*return*/, { hash: t, type: u.TransactionType.replaced, nonce: r.nonce }];\r\n                                        }\r\n                                        if (r.nonce > e) {\r\n                                            return [2 /*return*/, { hash: t, type: u.TransactionType.queued, nonce: r.nonce }];\r\n                                        }\r\n                                    }\r\n                                    return [2 /*return*/, Object.assign({ type: u.TransactionType.pending }, r)];\r\n                                }\r\n                                _e.label = 9;\r\n                            case 9:\r\n                                _e.trys.push([9, 11, , 12]);\r\n                                _d = null;\r\n                                return [4 /*yield*/, this.eth_getTransactionReceipt(t)];\r\n                            case 10:\r\n                                if (_d == (n = _e.sent()) || 0 === n.status) {\r\n                                    return [2 /*return*/, Object.assign({ type: u.TransactionType.reverted }, r)];\r\n                                }\r\n                                return [3 /*break*/, 12];\r\n                            case 11:\r\n                                t_14 = _e.sent();\r\n                                return [2 /*return*/, null];\r\n                            case 12: return [2 /*return*/, Object.assign({ type: u.TransactionType.confirmed }, r, { receipt: n })];\r\n                        }\r\n                    }); });\r\n                };\r\n                f.prototype.isTxDropped = function (t, r) {\r\n                    if (r === void 0) { r = 15; }\r\n                    return __awaiter(this, void 0, void 0, function () { var n, _a; return __generator(this, function (_c) {\r\n                        switch (_c.label) {\r\n                            case 0:\r\n                                n = r;\r\n                                _c.label = 1;\r\n                            case 1:\r\n                                if (!(n > 0)) return [3 /*break*/, 5];\r\n                                _a = null;\r\n                                return [4 /*yield*/, this.getTransactionAndReceipt(t)];\r\n                            case 2:\r\n                                if (_a !== (_c.sent()))\r\n                                    return [2 /*return*/, !1];\r\n                                n -= 1;\r\n                                return [4 /*yield*/, l.sleep(e.TRANSACTION_FETCH_DELAY)];\r\n                            case 3:\r\n                                _c.sent();\r\n                                _c.label = 4;\r\n                            case 4: return [3 /*break*/, 1];\r\n                            case 5: return [2 /*return*/, !0];\r\n                        }\r\n                    }); });\r\n                };\r\n                f.prototype.getTransactionAndReceipt = function (t) {\r\n                    return __awaiter(this, void 0, void 0, function () { var _a, e, r; return __generator(this, function (_c) {\r\n                        switch (_c.label) {\r\n                            case 0: return [4 /*yield*/, Promise.all([this.eth_getTransactionByHash(t), this.eth_getTransactionReceipt(t)])];\r\n                            case 1:\r\n                                _a = __read.apply(void 0, [_c.sent(), 2]), e = _a[0], r = _a[1];\r\n                                return [2 /*return*/, e ? Object.assign({}, e, { receipt: r }) : null];\r\n                        }\r\n                    }); });\r\n                };\r\n                f.prototype.isPending = function (t) { return t && null === t.blockNumber; };\r\n                f.prototype.isFailure = function (t) { return t && (!t.receipt || 0 === t.receipt.status); };\r\n                return f;\r\n            }());\r\n            n([h, o("design:type", Function)], f.prototype, "web3_clientVersion", void 0), n([h, o("design:type", Function)], f.prototype, "web3_sha3", void 0), n([h, o("design:type", Function)], f.prototype, "net_version", void 0), n([h, o("design:type", Function)], f.prototype, "net_peerCount", void 0), n([h, o("design:type", Function)], f.prototype, "net_listening", void 0), n([h, o("design:type", Function)], f.prototype, "eth_protocolVersion", void 0), n([h, o("design:type", Function)], f.prototype, "eth_syncing", void 0), n([h, o("design:type", Function)], f.prototype, "eth_coinbase", void 0), n([h, o("design:type", Function)], f.prototype, "eth_mining", void 0), n([h, o("design:type", Function)], f.prototype, "eth_hashrate", void 0), n([h, o("design:type", Function)], f.prototype, "eth_gasPrice", void 0), n([h, o("design:type", Function)], f.prototype, "eth_accounts", void 0), n([h, o("design:type", Function)], f.prototype, "eth_blockNumber", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getBalance", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getStorageAt", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getTransactionCount", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getBlockTransactionCountByHash", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getBlockTransactionCountByNumber", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getUncleCountByBlockHash", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getUncleCountByBlockNumber", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getCode", void 0), n([h, o("design:type", Function)], f.prototype, "eth_sign", void 0), n([h, o("design:type", Function)], f.prototype, "eth_sendTransaction", void 0), n([h, o("design:type", Function)], f.prototype, "eth_sendRawTransaction", void 0), n([h, o("design:type", Function)], f.prototype, "eth_call", void 0), n([h, o("design:type", Function)], f.prototype, "eth_estimateGas", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getBlockByHash", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getBlockByNumber", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getTransactionByHash", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getTransactionByBlockHashAndIndex", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getTransactionByBlockNumberAndIndex", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getTransactionReceipt", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getUncleByBlockHashAndIndex", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getUncleByBlockNumberAndIndex", void 0), n([h, o("design:type", Function)], f.prototype, "eth_newFilter", void 0), n([h, o("design:type", Function)], f.prototype, "eth_newBlockFilter", void 0), n([h, o("design:type", Function)], f.prototype, "eth_newPendingTransactionFilter", void 0), n([h, o("design:type", Function)], f.prototype, "eth_uninstallFilter", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getFilterChanges", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getFilterLogs", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getLogs", void 0), n([h, o("design:type", Function)], f.prototype, "eth_getWork", void 0), n([h, o("design:type", Function)], f.prototype, "eth_submitWork", void 0), n([h, o("design:type", Function)], f.prototype, "eth_submitHashrate", void 0), n([h, o("design:type", Function)], f.prototype, "shh_post", void 0), n([h, o("design:type", Function)], f.prototype, "shh_version", void 0), n([h, o("design:type", Function)], f.prototype, "shh_newIdentity", void 0), n([h, o("design:type", Function)], f.prototype, "shh_hasIdentity", void 0), n([h, o("design:type", Function)], f.prototype, "shh_newGroup", void 0), n([h, o("design:type", Function)], f.prototype, "shh_addToGroup", void 0), n([h, o("design:type", Function)], f.prototype, "shh_newFilter", void 0), n([h, o("design:type", Function)], f.prototype, "shh_uninstallFilter", void 0), n([h, o("design:type", Function)], f.prototype, "shh_getFilterChanges", void 0), n([h, o("design:type", Function)], f.prototype, "shh_getMessages", void 0), n([h, o("design:type", Function)], f.prototype, "personal_unlockAccount", void 0), n([h, o("design:type", Function)], f.prototype, "personal_newAccount", void 0), n([h, o("design:type", Function)], f.prototype, "personal_listAccounts", void 0), n([h, o("design:type", Function)], f.prototype, "personal_lockAccount", void 0), n([h, o("design:type", Function)], f.prototype, "personal_importRawKey", void 0), n([h, o("design:type", Function)], f.prototype, "personal_sendTransaction", void 0), n([h, o("design:type", Function)], f.prototype, "personal_sign", void 0), n([h, o("design:type", Function)], f.prototype, "personal_ecRecover", void 0), e.RequestManager = f;\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            function n(t, r) { if (!t)\r\n                throw new Error("jsonrpc method should be specified!"); if ("string" != typeof t)\r\n                throw new Error("jsonrpc must be a string, got " + typeof t + "!"); return e.messageId++, { jsonrpc: "2.0", id: e.messageId, method: t, params: r || [] }; }\r\n            Object.defineProperty(e, "__esModule", { value: !0 }), e.messageId = 0, e.toPayload = n, e.isValidResponse = function (t) { return Array.isArray(t) ? t.every(e) : e(t); function e(t) { return !(!t || t.error || "2.0" !== t.jsonrpc || "number" != typeof t.id || null == t.result && void 0 === t.result); } }, e.toBatchPayload = function (t) { return t.map(function (t) { return n(t.method, t.params); }); };\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 }), function (t) { t[t.ROUND_UP = 0] = "ROUND_UP", t[t.ROUND_DOWN = 1] = "ROUND_DOWN", t[t.ROUND_CE = 2] = "ROUND_CE", t[t.ROUND_FLOOR = 3] = "ROUND_FLOOR", t[t.ROUND_HALF_UP = 4] = "ROUND_HALF_UP", t[t.ROUND_HALF_DOWN = 5] = "ROUND_HALF_DOWN", t[t.ROUND_HALF_EVEN = 6] = "ROUND_HALF_EVEN", t[t.ROUND_HALF_CEIL = 7] = "ROUND_HALF_CEIL", t[t.ROUND_HALF_FLOOR = 8] = "ROUND_HALF_FLOOR"; }(e.BigNumberRoundingMode || (e.BigNumberRoundingMode = {}));\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 }), function (t) { t.pending = "pending", t.confirmed = "confirmed", t.failed = "failed"; }(e.TransactionStatus || (e.TransactionStatus = {})), function (t) { t.queued = "queued", t.dropped = "dropped", t.replaced = "replaced", t.pending = "pending", t.reverted = "reverted", t.confirmed = "confirmed"; }(e.TransactionType || (e.TransactionType = {}));\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 }), e.sleep = function (t) { return new Promise(function (e) { return setTimeout(e, t); }); };\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(3), o = r(8), i = r(13), s = r(15);\r\n            e.SolidityFunction = /** @class */ (function () {\r\n                function class_8(t, e, r) {\r\n                    this.requestManager = t, this.json = e, this._inputTypes = e.inputs.map(function (t) { return t.type; }), this._outputTypes = e.outputs.map(function (t) { return t.type; }), this._constant = e.constant, this._payable = e.payable, this.needsToBeTransaction = "payable" in e && e.payable || "constant" in e && !e.constant || "stateMutability" in e && "nonpayable" === e.stateMutability, this._name = n.transformToFullName(e), this._address = r;\r\n                }\r\n                class_8.prototype.extractDefaultBlock = function (t) { if (t.length > this._inputTypes.length && !n.isObject(t[t.length - 1]))\r\n                    return o.inputDefaultBlockNumberFormatter(t.pop()); };\r\n                class_8.prototype.validateArgs = function (t) { if (t.some(function (t) { return void 0 === t; }))\r\n                    throw new Error("Invalid call, some arguments are undefined"); var e = t.filter(function (t) { return !(!0 === n.isObject(t) && !1 === n.isArray(t) && !1 === n.isBigNumber(t)); }); if (e.length !== this._inputTypes.length)\r\n                    throw i.InvalidNumberOfSolidityArgs(e.length, this._inputTypes.length); };\r\n                class_8.prototype.toPayload = function (t) { var e = { to: void 0, data: void 0, value: void 0, from: void 0 }; return t.length > this._inputTypes.length && n.isObject(t[t.length - 1]) && (e = t[t.length - 1]), this.validateArgs(t), e.to = this._address, e.data = "0x" + this.signature() + s.coder.encodeParams(this._inputTypes, t), e; };\r\n                class_8.prototype.signature = function () { return n.sha3(this._name).slice(0, 8); };\r\n                class_8.prototype.unpackOutput = function (t) { if (!t)\r\n                    return; var e = t.length >= 2 ? t.slice(2) : t; var r = s.coder.decodeParams(this._outputTypes, e); return 1 === r.length ? r[0] : r; };\r\n                class_8.prototype.execute = function (t) {\r\n                    var e = [];\r\n                    for (var _a = 1; _a < arguments.length; _a++) {\r\n                        e[_a - 1] = arguments[_a];\r\n                    }\r\n                    return __awaiter(this, void 0, void 0, function () { var r_7, r_8, n_10, o_9; return __generator(this, function (_c) {\r\n                        switch (_c.label) {\r\n                            case 0:\r\n                                if (!t)\r\n                                    throw new Error("Cannot call function " + this.displayName() + " because there is no requestManager");\r\n                                if (!this.needsToBeTransaction) return [3 /*break*/, 2];\r\n                                r_7 = this.toPayload(e);\r\n                                if (r_7.value > 0 && !this._payable)\r\n                                    throw new Error("Cannot send value to non-payable function");\r\n                                if (!r_7.from)\r\n                                    throw new Error(\'Missing "from" in transaction options\');\r\n                                return [4 /*yield*/, t.eth_sendTransaction(r_7)];\r\n                            case 1: return [2 /*return*/, _c.sent()];\r\n                            case 2:\r\n                                r_8 = this.extractDefaultBlock(e), n_10 = this.toPayload(e);\r\n                                return [4 /*yield*/, t.eth_call(n_10, r_8)];\r\n                            case 3:\r\n                                o_9 = _c.sent();\r\n                                return [2 /*return*/, this.unpackOutput(o_9)];\r\n                        }\r\n                    }); });\r\n                };\r\n                class_8.prototype.estimateGas = function () {\r\n                    var t = [];\r\n                    for (var _a = 0; _a < arguments.length; _a++) {\r\n                        t[_a] = arguments[_a];\r\n                    }\r\n                    var e = this.toPayload(t);\r\n                    return this.requestManager.eth_estimateGas(e);\r\n                };\r\n                class_8.prototype.getData = function () {\r\n                    var t = [];\r\n                    for (var _a = 0; _a < arguments.length; _a++) {\r\n                        t[_a] = arguments[_a];\r\n                    }\r\n                    return this.toPayload(t).data;\r\n                };\r\n                class_8.prototype.displayName = function () { return n.extractDisplayName(this._name); };\r\n                class_8.prototype.typeName = function () { return n.extractTypeName(this._name) || "void"; };\r\n                class_8.prototype.attachToContract = function (t) { var e = this.displayName(); var r = this, n = Object.assign(function () {\r\n                    var t = [];\r\n                    for (var _a = 0; _a < arguments.length; _a++) {\r\n                        t[_a] = arguments[_a];\r\n                    }\r\n                    var e = this.requestManager || r.requestManager;\r\n                    return r.execute.apply(r, __spread([e], t));\r\n                }, { estimateGas: this.estimateGas.bind(this) }); t[e] || (t[e] = n), t[e][this.typeName()] = n; };\r\n                return class_8;\r\n            }());\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(2), o = r(4);\r\n            e.SolidityTypeAddress = /** @class */ (function (_super) {\r\n                __extends(SolidityTypeAddress, _super);\r\n                function SolidityTypeAddress() {\r\n                    return _super.call(this, { inputFormatter: n.formatInputInt, outputFormatter: n.formatOutputAddress }) || this;\r\n                }\r\n                SolidityTypeAddress.prototype.isType = function (t) { return !!t.match(/address(\\[([0-9]*)\\])?/); };\r\n                return SolidityTypeAddress;\r\n            }(o.SolidityType));\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(2), o = r(4);\r\n            e.SolidityTypeBool = /** @class */ (function (_super) {\r\n                __extends(SolidityTypeBool, _super);\r\n                function SolidityTypeBool() {\r\n                    return _super.call(this, { inputFormatter: n.formatInputBool, outputFormatter: n.formatOutputBool }) || this;\r\n                }\r\n                SolidityTypeBool.prototype.isType = function (t) { return !!t.match(/^bool(\\[([0-9]*)\\])*$/); };\r\n                return SolidityTypeBool;\r\n            }(o.SolidityType));\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(2), o = r(4);\r\n            e.SolidityTypeInt = /** @class */ (function (_super) {\r\n                __extends(SolidityTypeInt, _super);\r\n                function SolidityTypeInt() {\r\n                    return _super.call(this, { inputFormatter: n.formatInputInt, outputFormatter: n.formatOutputInt }) || this;\r\n                }\r\n                SolidityTypeInt.prototype.isType = function (t) { return !!t.match(/^int([0-9]*)?(\\[([0-9]*)\\])*$/); };\r\n                return SolidityTypeInt;\r\n            }(o.SolidityType));\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(2), o = r(4);\r\n            e.SolidityTypeUInt = /** @class */ (function (_super) {\r\n                __extends(SolidityTypeUInt, _super);\r\n                function SolidityTypeUInt() {\r\n                    return _super.call(this, { inputFormatter: n.formatInputInt, outputFormatter: n.formatOutputUInt }) || this;\r\n                }\r\n                SolidityTypeUInt.prototype.isType = function (t) { return !!t.match(/^uint([0-9]*)?(\\[([0-9]*)\\])*$/); };\r\n                return SolidityTypeUInt;\r\n            }(o.SolidityType));\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(2), o = r(4);\r\n            e.SolidityTypeDynamicBytes = /** @class */ (function (_super) {\r\n                __extends(SolidityTypeDynamicBytes, _super);\r\n                function SolidityTypeDynamicBytes() {\r\n                    return _super.call(this, { inputFormatter: n.formatInputDynamicBytes, outputFormatter: n.formatOutputDynamicBytes }) || this;\r\n                }\r\n                SolidityTypeDynamicBytes.prototype.isType = function (t) { return !!t.match(/^bytes(\\[([0-9]*)\\])*$/); };\r\n                SolidityTypeDynamicBytes.prototype.isDynamicType = function () { return !0; };\r\n                return SolidityTypeDynamicBytes;\r\n            }(o.SolidityType));\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(2), o = r(4);\r\n            e.SolidityTypeString = /** @class */ (function (_super) {\r\n                __extends(SolidityTypeString, _super);\r\n                function SolidityTypeString() {\r\n                    return _super.call(this, { inputFormatter: n.formatInputString, outputFormatter: n.formatOutputString }) || this;\r\n                }\r\n                SolidityTypeString.prototype.isType = function (t) { return !!t.match(/^string(\\[([0-9]*)\\])*$/); };\r\n                SolidityTypeString.prototype.isDynamicType = function () { return !0; };\r\n                return SolidityTypeString;\r\n            }(o.SolidityType));\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(2), o = r(4);\r\n            e.SolidityTypeReal = /** @class */ (function (_super) {\r\n                __extends(SolidityTypeReal, _super);\r\n                function SolidityTypeReal() {\r\n                    return _super.call(this, { inputFormatter: n.formatInputReal, outputFormatter: n.formatOutputReal }) || this;\r\n                }\r\n                SolidityTypeReal.prototype.isType = function (t) { return !!t.match(/real([0-9]*)?(\\[([0-9]*)\\])?/); };\r\n                return SolidityTypeReal;\r\n            }(o.SolidityType));\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(2), o = r(4);\r\n            e.SolidityTypeUReal = /** @class */ (function (_super) {\r\n                __extends(SolidityTypeUReal, _super);\r\n                function SolidityTypeUReal() {\r\n                    return _super.call(this, { inputFormatter: n.formatInputReal, outputFormatter: n.formatOutputUReal }) || this;\r\n                }\r\n                SolidityTypeUReal.prototype.isType = function (t) { return !!t.match(/^ureal([0-9]*)?(\\[([0-9]*)\\])*$/); };\r\n                return SolidityTypeUReal;\r\n            }(o.SolidityType));\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(2), o = r(4);\r\n            e.SolidityTypeBytes = /** @class */ (function (_super) {\r\n                __extends(SolidityTypeBytes, _super);\r\n                function SolidityTypeBytes() {\r\n                    return _super.call(this, { inputFormatter: n.formatInputBytes, outputFormatter: n.formatOutputBytes }) || this;\r\n                }\r\n                SolidityTypeBytes.prototype.isType = function (t) { return !!t.match(/^bytes([0-9]{1,})(\\[([0-9]*)\\])*$/); };\r\n                return SolidityTypeBytes;\r\n            }(o.SolidityType));\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(3), o = r(8), i = r(26), s = r(27);\r\n            e.AllSolidityEvents = /** @class */ (function () {\r\n                function class_9(t, e, r) {\r\n                    this._requestManager = t, this._json = e, this._address = r;\r\n                }\r\n                class_9.prototype.encode = function (t) {\r\n                    if (t === void 0) { t = {}; }\r\n                    var e = { address: this._address };\r\n                    return ["fromBlock", "toBlock"].filter(function (e) { return void 0 !== t[e]; }).forEach(function (r) { e[r] = o.inputBlockNumberFormatter(t[r]); }), e;\r\n                };\r\n                class_9.prototype.decode = function (t) { t.data = t.data || ""; var e = n.isArray(t.topics) && n.isString(t.topics[0]) ? t.topics[0].slice(2) : "", r = this._json.filter(function (t) { return e === n.sha3(n.transformToFullName(t)); })[0]; return r ? new i.SolidityEvent(this._requestManager, r, this._address).decode(t) : o.outputLogFormatter(t); };\r\n                class_9.prototype.execute = function (t) {\r\n                    return __awaiter(this, void 0, void 0, function () { var e, r; return __generator(this, function (_a) {\r\n                        e = this.encode(t), r = this.decode.bind(this);\r\n                        return [2 /*return*/, new s.EthFilter(this._requestManager, e, r)];\r\n                    }); });\r\n                };\r\n                class_9.prototype.attachToContract = function (t) { var e = this.execute.bind(this); t.allEvents = e; };\r\n                return class_9;\r\n            }());\r\n        }, function (t, e, r) {\r\n            "use strict";\r\n            Object.defineProperty(e, "__esModule", { value: !0 });\r\n            var n = r(3), o = r(15), i = r(24), s = r(9);\r\n            function a(t, e) { return t.filter(function (t) { return "constructor" === t.type && t.inputs.length === e.length; }).map(function (t) { return t.inputs.map(function (t) { return t.type; }); }).map(function (t) { return o.coder.encodeParams(t, e); })[0] || ""; }\r\n            e.ContractFactory = /** @class */ (function () {\r\n                function class_10(t, e) {\r\n                    this.requestManager = t, this.abi = e;\r\n                }\r\n                class_10.prototype.deploy = function () {\r\n                    var t = [];\r\n                    for (var _a = 0; _a < arguments.length; _a++) {\r\n                        t[_a] = arguments[_a];\r\n                    }\r\n                    return __awaiter(this, void 0, void 0, function () { var e, r, o, _c, _d, i, c, u; return __generator(this, function (_e) {\r\n                        switch (_e.label) {\r\n                            case 0:\r\n                                r = t[t.length - 1];\r\n                                if (n.isObject(r) && !n.isArray(r) && (e = t.pop()), !e)\r\n                                    throw new Error("Missing options object");\r\n                                if (!e.data || "string" != typeof e.data)\r\n                                    throw new Error("Invalid options.data");\r\n                                if (e.value > 0 && !(this.abi.filter(function (e) { return "constructor" === e.type && e.inputs.length === t.length; })[0] || {}).payable)\r\n                                    throw new Error("Cannot send value to non-payable constructor");\r\n                                o = a(this.abi, t);\r\n                                e.data += o;\r\n                                _c = e.gas;\r\n                                if (_c) return [3 /*break*/, 2];\r\n                                _d = e;\r\n                                return [4 /*yield*/, this.requestManager.eth_estimateGas(e)];\r\n                            case 1:\r\n                                _c = (_d.gas = _e.sent());\r\n                                _e.label = 2;\r\n                            case 2:\r\n                                _c;\r\n                                return [4 /*yield*/, this.requestManager.eth_sendTransaction(e)];\r\n                            case 3:\r\n                                i = _e.sent();\r\n                                return [4 /*yield*/, function (t, e) {\r\n                                        return __awaiter(this, void 0, void 0, function () { var r, n, o, i, a; return __generator(this, function (_a) {\r\n                                            switch (_a.label) {\r\n                                                case 0:\r\n                                                    r = s.future();\r\n                                                    n = 0;\r\n                                                    o = function () { ++n > 50 ? r.reject(new Error("Contract transaction couldn\'t be found after 50 blocks")) : t.eth_getTransactionReceipt(e).then(function (t) { t && t.blockHash ? r.resolve(t) : setTimeout(o, 1e3); }, function (t) { return r.reject(t); }); };\r\n                                                    o();\r\n                                                    return [4 /*yield*/, r];\r\n                                                case 1:\r\n                                                    i = _a.sent();\r\n                                                    return [4 /*yield*/, t.eth_getCode(i.contractAddress, "latest")];\r\n                                                case 2:\r\n                                                    a = _a.sent();\r\n                                                    if (a.length > 3)\r\n                                                        return [2 /*return*/, i.contractAddress];\r\n                                                    throw Object.assign(new Error("The contract code couldn\'t be stored, please check your gas amount."), { response: a, receipt: i });\r\n                                            }\r\n                                        }); });\r\n                                    }(this.requestManager, i)];\r\n                            case 4:\r\n                                c = _e.sent();\r\n                                return [4 /*yield*/, this.at(c)];\r\n                            case 5:\r\n                                u = _e.sent();\r\n                                return [2 /*return*/, (u.transactionHash = i, u)];\r\n                        }\r\n                    }); });\r\n                };\r\n                class_10.prototype.at = function (t) {\r\n                    return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n                        if (!n.isAddress(t))\r\n                            throw new TypeError("Invalid address " + JSON.stringify(t));\r\n                        return [2 /*return*/, new i.Contract(this.requestManager, this.abi, t)];\r\n                    }); });\r\n                };\r\n                class_10.prototype.getData = function () {\r\n                    var t = [];\r\n                    for (var _a = 0; _a < arguments.length; _a++) {\r\n                        t[_a] = arguments[_a];\r\n                    }\r\n                    return __awaiter(this, void 0, void 0, function () { var e, r, o; return __generator(this, function (_c) {\r\n                        e = { data: void 0 };\r\n                        r = t[t.length - 1];\r\n                        if (n.isObject(r) && !n.isArray(r) && (e = t.pop()), !e)\r\n                            throw new Error("Missing options object");\r\n                        if (!e.data || "string" != typeof e.data)\r\n                            throw new Error("Invalid options.data");\r\n                        o = a(this.abi, t);\r\n                        return [2 /*return*/, (e.data += o, e.data)];\r\n                    }); });\r\n                };\r\n                return class_10;\r\n            }());\r\n        }]);\r\n    exports.default = ethconnect;\r\n});\r\n// tslint:disable\r\ndefine("node_modules/eth-connect/esm", ["require", "exports", "node_modules/eth-connect/eth-connect.esm"], function (require, exports, eth_connect_esm_1) {\r\n    "use strict";\r\n    var EthConnect = eth_connect_esm_1.default;\r\n    return EthConnect;\r\n});\r\ndefine("public/ecs-scenes/-200.4-ethereum-controller/game", ["require", "exports", "@decentraland/web3-provider", "@decentraland/Identity", "node_modules/eth-connect/esm"], function (require, exports, web3_provider_1, Identity_1, EthConnect) {\r\n    "use strict";\r\n    Object.defineProperty(exports, "__esModule", { value: true });\r\n    var abi = [\r\n        {\r\n            constant: true,\r\n            inputs: [],\r\n            name: \'mintingFinished\',\r\n            outputs: [\r\n                {\r\n                    name: \'\',\r\n                    type: \'bool\'\r\n                }\r\n            ],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: true,\r\n            inputs: [],\r\n            name: \'name\',\r\n            outputs: [\r\n                {\r\n                    name: \'\',\r\n                    type: \'string\'\r\n                }\r\n            ],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: false,\r\n            inputs: [\r\n                {\r\n                    name: \'_spender\',\r\n                    type: \'address\'\r\n                },\r\n                {\r\n                    name: \'_value\',\r\n                    type: \'uint256\'\r\n                }\r\n            ],\r\n            name: \'approve\',\r\n            outputs: [\r\n                {\r\n                    name: \'\',\r\n                    type: \'bool\'\r\n                }\r\n            ],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: true,\r\n            inputs: [],\r\n            name: \'totalSupply\',\r\n            outputs: [\r\n                {\r\n                    name: \'\',\r\n                    type: \'uint256\'\r\n                }\r\n            ],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: false,\r\n            inputs: [\r\n                {\r\n                    name: \'_from\',\r\n                    type: \'address\'\r\n                },\r\n                {\r\n                    name: \'_to\',\r\n                    type: \'address\'\r\n                },\r\n                {\r\n                    name: \'_value\',\r\n                    type: \'uint256\'\r\n                }\r\n            ],\r\n            name: \'transferFrom\',\r\n            outputs: [\r\n                {\r\n                    name: \'\',\r\n                    type: \'bool\'\r\n                }\r\n            ],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: true,\r\n            inputs: [],\r\n            name: \'decimals\',\r\n            outputs: [\r\n                {\r\n                    name: \'\',\r\n                    type: \'uint8\'\r\n                }\r\n            ],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: false,\r\n            inputs: [],\r\n            name: \'unpause\',\r\n            outputs: [\r\n                {\r\n                    name: \'\',\r\n                    type: \'bool\'\r\n                }\r\n            ],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: false,\r\n            inputs: [\r\n                {\r\n                    name: \'_to\',\r\n                    type: \'address\'\r\n                },\r\n                {\r\n                    name: \'_amount\',\r\n                    type: \'uint256\'\r\n                }\r\n            ],\r\n            name: \'mint\',\r\n            outputs: [\r\n                {\r\n                    name: \'\',\r\n                    type: \'bool\'\r\n                }\r\n            ],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: false,\r\n            inputs: [\r\n                {\r\n                    name: \'_value\',\r\n                    type: \'uint256\'\r\n                }\r\n            ],\r\n            name: \'burn\',\r\n            outputs: [],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: true,\r\n            inputs: [],\r\n            name: \'paused\',\r\n            outputs: [\r\n                {\r\n                    name: \'\',\r\n                    type: \'bool\'\r\n                }\r\n            ],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: true,\r\n            inputs: [\r\n                {\r\n                    name: \'_owner\',\r\n                    type: \'address\'\r\n                }\r\n            ],\r\n            name: \'balanceOf\',\r\n            outputs: [\r\n                {\r\n                    name: \'balance\',\r\n                    type: \'uint256\'\r\n                }\r\n            ],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: false,\r\n            inputs: [],\r\n            name: \'finishMinting\',\r\n            outputs: [\r\n                {\r\n                    name: \'\',\r\n                    type: \'bool\'\r\n                }\r\n            ],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: false,\r\n            inputs: [],\r\n            name: \'pause\',\r\n            outputs: [\r\n                {\r\n                    name: \'\',\r\n                    type: \'bool\'\r\n                }\r\n            ],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: true,\r\n            inputs: [],\r\n            name: \'owner\',\r\n            outputs: [\r\n                {\r\n                    name: \'\',\r\n                    type: \'address\'\r\n                }\r\n            ],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: true,\r\n            inputs: [],\r\n            name: \'symbol\',\r\n            outputs: [\r\n                {\r\n                    name: \'\',\r\n                    type: \'string\'\r\n                }\r\n            ],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: false,\r\n            inputs: [\r\n                {\r\n                    name: \'_to\',\r\n                    type: \'address\'\r\n                },\r\n                {\r\n                    name: \'_value\',\r\n                    type: \'uint256\'\r\n                }\r\n            ],\r\n            name: \'transfer\',\r\n            outputs: [\r\n                {\r\n                    name: \'\',\r\n                    type: \'bool\'\r\n                }\r\n            ],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: true,\r\n            inputs: [\r\n                {\r\n                    name: \'_owner\',\r\n                    type: \'address\'\r\n                },\r\n                {\r\n                    name: \'_spender\',\r\n                    type: \'address\'\r\n                }\r\n            ],\r\n            name: \'allowance\',\r\n            outputs: [\r\n                {\r\n                    name: \'remaining\',\r\n                    type: \'uint256\'\r\n                }\r\n            ],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: false,\r\n            inputs: [\r\n                {\r\n                    name: \'to\',\r\n                    type: \'address\'\r\n                },\r\n                {\r\n                    name: \'amount\',\r\n                    type: \'uint256\'\r\n                }\r\n            ],\r\n            name: \'setBalance\',\r\n            outputs: [],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            constant: false,\r\n            inputs: [\r\n                {\r\n                    name: \'newOwner\',\r\n                    type: \'address\'\r\n                }\r\n            ],\r\n            name: \'transferOwnership\',\r\n            outputs: [],\r\n            payable: false,\r\n            type: \'function\'\r\n        },\r\n        {\r\n            anonymous: false,\r\n            inputs: [\r\n                {\r\n                    indexed: true,\r\n                    name: \'to\',\r\n                    type: \'address\'\r\n                },\r\n                {\r\n                    indexed: false,\r\n                    name: \'amount\',\r\n                    type: \'uint256\'\r\n                }\r\n            ],\r\n            name: \'Mint\',\r\n            type: \'event\'\r\n        },\r\n        {\r\n            anonymous: false,\r\n            inputs: [],\r\n            name: \'MintFinished\',\r\n            type: \'event\'\r\n        },\r\n        {\r\n            anonymous: false,\r\n            inputs: [],\r\n            name: \'Pause\',\r\n            type: \'event\'\r\n        },\r\n        {\r\n            anonymous: false,\r\n            inputs: [],\r\n            name: \'Unpause\',\r\n            type: \'event\'\r\n        },\r\n        {\r\n            anonymous: false,\r\n            inputs: [\r\n                {\r\n                    indexed: true,\r\n                    name: \'burner\',\r\n                    type: \'address\'\r\n                },\r\n                {\r\n                    indexed: false,\r\n                    name: \'value\',\r\n                    type: \'uint256\'\r\n                }\r\n            ],\r\n            name: \'Burn\',\r\n            type: \'event\'\r\n        },\r\n        {\r\n            anonymous: false,\r\n            inputs: [\r\n                {\r\n                    indexed: true,\r\n                    name: \'owner\',\r\n                    type: \'address\'\r\n                },\r\n                {\r\n                    indexed: true,\r\n                    name: \'spender\',\r\n                    type: \'address\'\r\n                },\r\n                {\r\n                    indexed: false,\r\n                    name: \'value\',\r\n                    type: \'uint256\'\r\n                }\r\n            ],\r\n            name: \'Approval\',\r\n            type: \'event\'\r\n        },\r\n        {\r\n            anonymous: false,\r\n            inputs: [\r\n                {\r\n                    indexed: true,\r\n                    name: \'from\',\r\n                    type: \'address\'\r\n                },\r\n                {\r\n                    indexed: true,\r\n                    name: \'to\',\r\n                    type: \'address\'\r\n                },\r\n                {\r\n                    indexed: false,\r\n                    name: \'value\',\r\n                    type: \'uint256\'\r\n                }\r\n            ],\r\n            name: \'Transfer\',\r\n            type: \'event\'\r\n        }\r\n    ];\r\n    var cube = new Entity();\r\n    cube.addComponentOrReplace(new Transform({\r\n        position: new Vector3(5, 1, 5)\r\n    }));\r\n    var text = new TextShape(\'Click to create transaction\');\r\n    text.billboard = true;\r\n    text.isPickable = true;\r\n    cube.addComponentOrReplace(text);\r\n    cube.addComponentOrReplace(new OnPointerDown(function () {\r\n        executeTask(function () { return __awaiter(void 0, void 0, void 0, function () {\r\n            var provider, requestManager, factory, contract, res, _a, _b, _c, _d;\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0: return [4 /*yield*/, web3_provider_1.getProvider()];\r\n                    case 1:\r\n                        provider = _e.sent();\r\n                        requestManager = new EthConnect.RequestManager(provider);\r\n                        factory = new EthConnect.ContractFactory(requestManager, abi);\r\n                        return [4 /*yield*/, factory.at(\'0x2a8fd99c19271f4f04b1b7b9c4f7cf264b626edb\')];\r\n                    case 2:\r\n                        contract = (_e.sent());\r\n                        _b = (_a = contract).setBalance;\r\n                        _c = [\'0xaFA48Fad27C7cAB28dC6E970E4BFda7F7c8D60Fb\', 100];\r\n                        _d = {};\r\n                        return [4 /*yield*/, Identity_1.getUserPublicKey()];\r\n                    case 3: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.from = _e.sent(),\r\n                                _d)]))];\r\n                    case 4:\r\n                        res = _e.sent();\r\n                        log(res);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    }));\r\n    engine.addEntity(cube);\r\n});\r\n//# sourceMappingURL=data:application/json;base64,');