/*! decentraland-ecs@1.0.0 */(function(e,a){for(var i in a)e[i]=a[i]})(this,function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{enumerable:true,get:getter})}};__webpack_require__.r=function(exports){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(exports,"__esModule",{value:true})};__webpack_require__.t=function(value,mode){if(mode&1)value=__webpack_require__(value);if(mode&8)return value;if(mode&4&&typeof value==="object"&&value&&value.__esModule)return value;var ns=Object.create(null);__webpack_require__.r(ns);Object.defineProperty(ns,"default",{enumerable:true,value:value});if(mode&2&&typeof value!="string")for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s="./packages/decentraland-ecs/src/index.ts")}({"./packages/decentraland-ecs/src/decentraland/AnimationState.ts":
/*!**********************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/AnimationState.ts ***!
  \**********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nvar helpers_1 = __webpack_require__(/*! ../ecs/helpers */ "./packages/decentraland-ecs/src/ecs/helpers.ts");\nvar defaultParams = {\n    looping: true,\n    speed: 1.0,\n    weight: 1.0\n};\n/**\n * @public\n */\nvar AnimationState = /** @class */ (function (_super) {\n    __extends(AnimationState, _super);\n    function AnimationState(clip, params) {\n        if (params === void 0) { params = defaultParams; }\n        var _this = _super.call(this) || this;\n        // @internal\n        _this.isAnimationClip = true;\n        /**\n         * Does the animation loop?, default: true\n         */\n        _this.looping = defaultParams.looping;\n        /**\n         * Weight of the animation, values from 0 to 1, used to blend several animations. default: 1\n         */\n        _this.weight = defaultParams.weight;\n        /**\n         * Is the animation playing? default: true\n         */\n        _this.playing = false;\n        /**\n         * Does any anyone asked to reset the animation? default: false\n         */\n        _this.shouldReset = false;\n        /**\n         * The animation speed\n         */\n        _this.speed = defaultParams.speed;\n        // @internal\n        _this.name = helpers_1.newId(\'AnimClip\');\n        _this.clip = clip;\n        _this.setParams(__assign({}, params));\n        return _this;\n    }\n    /**\n     * Sets the clip parameters\n     */\n    AnimationState.prototype.setParams = function (params) {\n        this.looping = params.looping !== undefined ? params.looping : this.looping;\n        this.speed = params.speed || this.speed;\n        return this;\n    };\n    AnimationState.prototype.toJSON = function () {\n        var ret = JSON.parse(JSON.stringify(_super.prototype.toJSON.call(this)));\n        if (this.shouldReset) {\n            this.shouldReset = false;\n        }\n        return ret;\n    };\n    /**\n     * Starts the animation\n     */\n    AnimationState.prototype.play = function () {\n        this.playing = true;\n    };\n    /**\n     * Pauses the animation\n     */\n    AnimationState.prototype.pause = function () {\n        this.playing = false;\n    };\n    /**\n     * Resets the animation state to the frame 0\n     */\n    AnimationState.prototype.reset = function () {\n        this.shouldReset = true;\n    };\n    /**\n     * Resets and pauses the animation\n     */\n    AnimationState.prototype.stop = function () {\n        this.reset();\n        this.pause();\n    };\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], AnimationState.prototype, "clip", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AnimationState.prototype, "looping", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AnimationState.prototype, "weight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AnimationState.prototype, "playing", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AnimationState.prototype, "shouldReset", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AnimationState.prototype, "speed", void 0);\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], AnimationState.prototype, "name", void 0);\n    return AnimationState;\n}(Component_1.ObservableComponent));\nexports.AnimationState = AnimationState;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQW5pbWF0aW9uU3RhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVjZW50cmFsYW5kL0FuaW1hdGlvblN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOENBQXNEO0FBQ3RELDBDQUFzQztBQVN0QyxJQUFNLGFBQWEsR0FBb0U7SUFDckYsT0FBTyxFQUFFLElBQUk7SUFDYixLQUFLLEVBQUUsR0FBRztJQUNWLE1BQU0sRUFBRSxHQUFHO0NBQ1osQ0FBQTtBQUVEOztHQUVHO0FBQ0g7SUFBb0Msa0NBQW1CO0lBNENyRCx3QkFBWSxJQUFZLEVBQUUsTUFBdUM7UUFBdkMsdUJBQUEsRUFBQSxzQkFBdUM7UUFBakUsWUFDRSxpQkFBTyxTQUdSO1FBL0NELFlBQVk7UUFDTCxxQkFBZSxHQUFZLElBQUksQ0FBQTtRQVF0Qzs7V0FFRztRQUVJLGFBQU8sR0FBWSxhQUFhLENBQUMsT0FBTyxDQUFBO1FBRS9DOztXQUVHO1FBRUksWUFBTSxHQUFXLGFBQWEsQ0FBQyxNQUFNLENBQUE7UUFFNUM7O1dBRUc7UUFFSSxhQUFPLEdBQVksS0FBSyxDQUFBO1FBRS9COztXQUVHO1FBRUksaUJBQVcsR0FBWSxLQUFLLENBQUE7UUFFbkM7O1dBRUc7UUFFSSxXQUFLLEdBQVcsYUFBYSxDQUFDLEtBQUssQ0FBQTtRQUUxQyxZQUFZO1FBRUgsVUFBSSxHQUFXLGVBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUl2QyxLQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNoQixLQUFJLENBQUMsU0FBUyxjQUFNLE1BQU0sRUFBRyxDQUFBOztJQUMvQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxrQ0FBUyxHQUFULFVBQVUsTUFBdUI7UUFDL0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQTtRQUMzRSxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQTtRQUN2QyxPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFFRCwrQkFBTSxHQUFOO1FBQ0UsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFNLE1BQU0sV0FBRSxDQUFDLENBQUMsQ0FBQTtRQUN0RCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUE7U0FDekI7UUFDRCxPQUFPLEdBQUcsQ0FBQTtJQUNaLENBQUM7SUFFRDs7T0FFRztJQUNILDZCQUFJLEdBQUo7UUFDRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQTtJQUNyQixDQUFDO0lBRUQ7O09BRUc7SUFDSCw4QkFBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUE7SUFDdEIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsOEJBQUssR0FBTDtRQUNFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFBO0lBQ3pCLENBQUM7SUFFRDs7T0FFRztJQUNILDZCQUFJLEdBQUo7UUFDRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDWixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDZCxDQUFDO0lBdEZEO1FBREMsK0JBQW1CLENBQUMsUUFBUTtnREFDRDtJQU01QjtRQURDLCtCQUFtQixDQUFDLEtBQUs7bURBQ3FCO0lBTS9DO1FBREMsK0JBQW1CLENBQUMsS0FBSztrREFDa0I7SUFNNUM7UUFEQywrQkFBbUIsQ0FBQyxLQUFLO21EQUNLO0lBTS9CO1FBREMsK0JBQW1CLENBQUMsS0FBSzt1REFDUztJQU1uQztRQURDLCtCQUFtQixDQUFDLEtBQUs7aURBQ2dCO0lBSTFDO1FBREMsK0JBQW1CLENBQUMsUUFBUTtnREFDWTtJQXFEM0MscUJBQUM7Q0FBQSxBQS9GRCxDQUFvQywrQkFBbUIsR0ErRnREO0FBL0ZZLHdDQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZUNvbXBvbmVudCB9IGZyb20gJy4uL2Vjcy9Db21wb25lbnQnXG5pbXBvcnQgeyBuZXdJZCB9IGZyb20gJy4uL2Vjcy9oZWxwZXJzJ1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgQW5pbWF0aW9uUGFyYW1zID0ge1xuICBsb29waW5nPzogYm9vbGVhblxuICBzcGVlZD86IG51bWJlclxuICB3ZWlnaHQ/OiBudW1iZXJcbn1cblxuY29uc3QgZGVmYXVsdFBhcmFtczogUmVxdWlyZWQ8UGljazxBbmltYXRpb25QYXJhbXMsICdsb29waW5nJyB8ICdzcGVlZCcgfCAnd2VpZ2h0Jz4+ID0ge1xuICBsb29waW5nOiB0cnVlLFxuICBzcGVlZDogMS4wLFxuICB3ZWlnaHQ6IDEuMFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEFuaW1hdGlvblN0YXRlIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIC8vIEBpbnRlcm5hbFxuICBwdWJsaWMgaXNBbmltYXRpb25DbGlwOiBib29sZWFuID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBhbmltYXRpb24gaW4gdGhlIG1vZGVsXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICBwdWJsaWMgcmVhZG9ubHkgY2xpcDogc3RyaW5nXG5cbiAgLyoqXG4gICAqIERvZXMgdGhlIGFuaW1hdGlvbiBsb29wPywgZGVmYXVsdDogdHJ1ZVxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcHVibGljIGxvb3Bpbmc6IGJvb2xlYW4gPSBkZWZhdWx0UGFyYW1zLmxvb3BpbmdcblxuICAvKipcbiAgICogV2VpZ2h0IG9mIHRoZSBhbmltYXRpb24sIHZhbHVlcyBmcm9tIDAgdG8gMSwgdXNlZCB0byBibGVuZCBzZXZlcmFsIGFuaW1hdGlvbnMuIGRlZmF1bHQ6IDFcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHB1YmxpYyB3ZWlnaHQ6IG51bWJlciA9IGRlZmF1bHRQYXJhbXMud2VpZ2h0XG5cbiAgLyoqXG4gICAqIElzIHRoZSBhbmltYXRpb24gcGxheWluZz8gZGVmYXVsdDogdHJ1ZVxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcHVibGljIHBsYXlpbmc6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIC8qKlxuICAgKiBEb2VzIGFueSBhbnlvbmUgYXNrZWQgdG8gcmVzZXQgdGhlIGFuaW1hdGlvbj8gZGVmYXVsdDogZmFsc2VcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHB1YmxpYyBzaG91bGRSZXNldDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgLyoqXG4gICAqIFRoZSBhbmltYXRpb24gc3BlZWRcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHB1YmxpYyBzcGVlZDogbnVtYmVyID0gZGVmYXVsdFBhcmFtcy5zcGVlZFxuXG4gIC8vIEBpbnRlcm5hbFxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSBuYW1lOiBzdHJpbmcgPSBuZXdJZCgnQW5pbUNsaXAnKVxuXG4gIGNvbnN0cnVjdG9yKGNsaXA6IHN0cmluZywgcGFyYW1zOiBBbmltYXRpb25QYXJhbXMgPSBkZWZhdWx0UGFyYW1zKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuY2xpcCA9IGNsaXBcbiAgICB0aGlzLnNldFBhcmFtcyh7IC4uLnBhcmFtcyB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGNsaXAgcGFyYW1ldGVyc1xuICAgKi9cbiAgc2V0UGFyYW1zKHBhcmFtczogQW5pbWF0aW9uUGFyYW1zKSB7XG4gICAgdGhpcy5sb29waW5nID0gcGFyYW1zLmxvb3BpbmcgIT09IHVuZGVmaW5lZCA/IHBhcmFtcy5sb29waW5nIDogdGhpcy5sb29waW5nXG4gICAgdGhpcy5zcGVlZCA9IHBhcmFtcy5zcGVlZCB8fCB0aGlzLnNwZWVkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICBjb25zdCByZXQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN1cGVyLnRvSlNPTigpKSlcbiAgICBpZiAodGhpcy5zaG91bGRSZXNldCkge1xuICAgICAgdGhpcy5zaG91bGRSZXNldCA9IGZhbHNlXG4gICAgfVxuICAgIHJldHVybiByZXRcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIGFuaW1hdGlvblxuICAgKi9cbiAgcGxheSgpIHtcbiAgICB0aGlzLnBsYXlpbmcgPSB0cnVlXG4gIH1cblxuICAvKipcbiAgICogUGF1c2VzIHRoZSBhbmltYXRpb25cbiAgICovXG4gIHBhdXNlKCkge1xuICAgIHRoaXMucGxheWluZyA9IGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBhbmltYXRpb24gc3RhdGUgdG8gdGhlIGZyYW1lIDBcbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuc2hvdWxkUmVzZXQgPSB0cnVlXG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIGFuZCBwYXVzZXMgdGhlIGFuaW1hdGlvblxuICAgKi9cbiAgc3RvcCgpIHtcbiAgICB0aGlzLnJlc2V0KClcbiAgICB0aGlzLnBhdXNlKClcbiAgfVxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/AnimationState.ts?')},"./packages/decentraland-ecs/src/decentraland/Audio.ts":
/*!*************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Audio.ts ***!
  \*************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nvar Components_1 = __webpack_require__(/*! ./Components */ "./packages/decentraland-ecs/src/decentraland/Components.ts");\n/**\n * @public\n */\nvar AudioClip = /** @class */ (function (_super) {\n    __extends(AudioClip, _super);\n    function AudioClip(url) {\n        var _this = _super.call(this) || this;\n        /**\n         * Is this clip looping by default?\n         */\n        _this.loop = false;\n        /**\n         * Clip\'s master volume. This volume affects all the AudioSources.\n         * Valid ranges from 0 to 1\n         */\n        _this.volume = 1;\n        _this.url = url;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], AudioClip.prototype, "url", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AudioClip.prototype, "loop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AudioClip.prototype, "loadingCompleteEventId", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AudioClip.prototype, "volume", void 0);\n    AudioClip = __decorate([\n        Component_1.DisposableComponent(\'engine.AudioClip\', Components_1.CLASS_ID.AUDIO_CLIP)\n    ], AudioClip);\n    return AudioClip;\n}(Component_1.ObservableComponent));\nexports.AudioClip = AudioClip;\n/**\n * @public\n */\nvar AudioSource = /** @class */ (function (_super) {\n    __extends(AudioSource, _super);\n    function AudioSource(audioClip) {\n        var _this = _super.call(this) || this;\n        _this.audioClip = audioClip;\n        /**\n         * Is this clip looping by default?\n         */\n        _this.loop = false;\n        /**\n         * Clip\'s master volume. This volume affects all the AudioSources.\n         * Valid ranges from 0 to 1\n         */\n        _this.volume = 1;\n        /**\n         * Is this AudioSource playing?\n         */\n        _this.playing = false;\n        /**\n         * Pitch, default: 1.0, range from 0.0 to MaxFloat\n         */\n        _this.pitch = 1.0;\n        if (!(audioClip instanceof AudioClip)) {\n            throw new Error("Trying to create AudioSource(AudioClip) with an invalid AudioClip");\n        }\n        _this.audioClipId = Component_1.getComponentId(audioClip);\n        return _this;\n    }\n    /**\n     * Disables the looping and plays the current source once.\n     * If the sound was playing, it stops and starts over.\n     */\n    AudioSource.prototype.playOnce = function () {\n        this.playing = true;\n        this.dirty = true;\n        this.data.nonce = Math.random();\n        return this;\n    };\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], AudioSource.prototype, "audioClipId", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AudioSource.prototype, "loop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AudioSource.prototype, "volume", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AudioSource.prototype, "playing", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AudioSource.prototype, "pitch", void 0);\n    AudioSource = __decorate([\n        Component_1.Component(\'engine.AudioSource\', Components_1.CLASS_ID.AUDIO_SOURCE)\n    ], AudioSource);\n    return AudioSource;\n}(Component_1.ObservableComponent));\nexports.AudioSource = AudioSource;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXVkaW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVjZW50cmFsYW5kL0F1ZGlvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDhDQUFzRztBQUN0RywyQ0FBdUM7QUFFdkM7O0dBRUc7QUFFSDtJQUErQiw2QkFBbUI7SUFxQmhELG1CQUFZLEdBQVc7UUFBdkIsWUFDRSxpQkFBTyxTQUVSO1FBcEJEOztXQUVHO1FBRUgsVUFBSSxHQUFZLEtBQUssQ0FBQTtRQU1yQjs7O1dBR0c7UUFFSCxZQUFNLEdBQVcsQ0FBQyxDQUFBO1FBSWhCLEtBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBOztJQUNoQixDQUFDO0lBdEJEO1FBREMsK0JBQW1CLENBQUMsUUFBUTswQ0FDVDtJQU1wQjtRQURDLCtCQUFtQixDQUFDLEtBQUs7MkNBQ0w7SUFJckI7UUFEQywrQkFBbUIsQ0FBQyxLQUFLOzZEQUNLO0lBTy9CO1FBREMsK0JBQW1CLENBQUMsS0FBSzs2Q0FDUjtJQW5CUCxTQUFTO1FBRHJCLCtCQUFtQixDQUFDLGtCQUFrQixFQUFFLHFCQUFRLENBQUMsVUFBVSxDQUFDO09BQ2hELFNBQVMsQ0F5QnJCO0lBQUQsZ0JBQUM7Q0FBQSxBQXpCRCxDQUErQiwrQkFBbUIsR0F5QmpEO0FBekJZLDhCQUFTO0FBMkJ0Qjs7R0FFRztBQUVIO0lBQWlDLCtCQUFtQjtJQTZCbEQscUJBQTRCLFNBQW9CO1FBQWhELFlBQ0UsaUJBQU8sU0FLUjtRQU4yQixlQUFTLEdBQVQsU0FBUyxDQUFXO1FBekJoRDs7V0FFRztRQUVILFVBQUksR0FBWSxLQUFLLENBQUE7UUFFckI7OztXQUdHO1FBRUgsWUFBTSxHQUFXLENBQUMsQ0FBQTtRQUVsQjs7V0FFRztRQUVILGFBQU8sR0FBWSxLQUFLLENBQUE7UUFFeEI7O1dBRUc7UUFFSCxXQUFLLEdBQVcsR0FBRyxDQUFBO1FBSWpCLElBQUksQ0FBQyxDQUFDLFNBQVMsWUFBWSxTQUFTLENBQUMsRUFBRTtZQUNyQyxNQUFNLElBQUksS0FBSyxDQUFDLG1FQUFtRSxDQUFDLENBQUE7U0FDckY7UUFDRCxLQUFJLENBQUMsV0FBVyxHQUFHLDBCQUFjLENBQUMsU0FBZ0IsQ0FBQyxDQUFBOztJQUNyRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsOEJBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFBO1FBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUMvQixPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUE1Q0Q7UUFEQywrQkFBbUIsQ0FBQyxRQUFRO29EQUNEO0lBTTVCO1FBREMsK0JBQW1CLENBQUMsS0FBSzs2Q0FDTDtJQU9yQjtRQURDLCtCQUFtQixDQUFDLEtBQUs7K0NBQ1I7SUFNbEI7UUFEQywrQkFBbUIsQ0FBQyxLQUFLO2dEQUNGO0lBTXhCO1FBREMsK0JBQW1CLENBQUMsS0FBSzs4Q0FDUDtJQTNCUixXQUFXO1FBRHZCLHFCQUFTLENBQUMsb0JBQW9CLEVBQUUscUJBQVEsQ0FBQyxZQUFZLENBQUM7T0FDMUMsV0FBVyxDQStDdkI7SUFBRCxrQkFBQztDQUFBLEFBL0NELENBQWlDLCtCQUFtQixHQStDbkQ7QUEvQ1ksa0NBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXNwb3NhYmxlQ29tcG9uZW50LCBPYnNlcnZhYmxlQ29tcG9uZW50LCBDb21wb25lbnQsIGdldENvbXBvbmVudElkIH0gZnJvbSAnLi4vZWNzL0NvbXBvbmVudCdcbmltcG9ydCB7IENMQVNTX0lEIH0gZnJvbSAnLi9Db21wb25lbnRzJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5BdWRpb0NsaXAnLCBDTEFTU19JRC5BVURJT19DTElQKVxuZXhwb3J0IGNsYXNzIEF1ZGlvQ2xpcCBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB1cmw6IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBJcyB0aGlzIGNsaXAgbG9vcGluZyBieSBkZWZhdWx0P1xuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbG9vcDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgLy8gQGludGVybmFsXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGxvYWRpbmdDb21wbGV0ZUV2ZW50SWQ/OiBzdHJpbmdcblxuICAvKipcbiAgICogQ2xpcCdzIG1hc3RlciB2b2x1bWUuIFRoaXMgdm9sdW1lIGFmZmVjdHMgYWxsIHRoZSBBdWRpb1NvdXJjZXMuXG4gICAqIFZhbGlkIHJhbmdlcyBmcm9tIDAgdG8gMVxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdm9sdW1lOiBudW1iZXIgPSAxXG5cbiAgY29uc3RydWN0b3IodXJsOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy51cmwgPSB1cmxcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLkF1ZGlvU291cmNlJywgQ0xBU1NfSUQuQVVESU9fU09VUkNFKVxuZXhwb3J0IGNsYXNzIEF1ZGlvU291cmNlIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IGF1ZGlvQ2xpcElkOiBzdHJpbmdcblxuICAvKipcbiAgICogSXMgdGhpcyBjbGlwIGxvb3BpbmcgYnkgZGVmYXVsdD9cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGxvb3A6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIC8qKlxuICAgKiBDbGlwJ3MgbWFzdGVyIHZvbHVtZS4gVGhpcyB2b2x1bWUgYWZmZWN0cyBhbGwgdGhlIEF1ZGlvU291cmNlcy5cbiAgICogVmFsaWQgcmFuZ2VzIGZyb20gMCB0byAxXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2b2x1bWU6IG51bWJlciA9IDFcblxuICAvKipcbiAgICogSXMgdGhpcyBBdWRpb1NvdXJjZSBwbGF5aW5nP1xuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGxheWluZzogYm9vbGVhbiA9IGZhbHNlXG5cbiAgLyoqXG4gICAqIFBpdGNoLCBkZWZhdWx0OiAxLjAsIHJhbmdlIGZyb20gMC4wIHRvIE1heEZsb2F0XG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwaXRjaDogbnVtYmVyID0gMS4wXG5cbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGF1ZGlvQ2xpcDogQXVkaW9DbGlwKSB7XG4gICAgc3VwZXIoKVxuICAgIGlmICghKGF1ZGlvQ2xpcCBpbnN0YW5jZW9mIEF1ZGlvQ2xpcCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVHJ5aW5nIHRvIGNyZWF0ZSBBdWRpb1NvdXJjZShBdWRpb0NsaXApIHdpdGggYW4gaW52YWxpZCBBdWRpb0NsaXBgKVxuICAgIH1cbiAgICB0aGlzLmF1ZGlvQ2xpcElkID0gZ2V0Q29tcG9uZW50SWQoYXVkaW9DbGlwIGFzIGFueSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNhYmxlcyB0aGUgbG9vcGluZyBhbmQgcGxheXMgdGhlIGN1cnJlbnQgc291cmNlIG9uY2UuXG4gICAqIElmIHRoZSBzb3VuZCB3YXMgcGxheWluZywgaXQgc3RvcHMgYW5kIHN0YXJ0cyBvdmVyLlxuICAgKi9cbiAgcGxheU9uY2UoKSB7XG4gICAgdGhpcy5wbGF5aW5nID0gdHJ1ZVxuICAgIHRoaXMuZGlydHkgPSB0cnVlXG4gICAgdGhpcy5kYXRhLm5vbmNlID0gTWF0aC5yYW5kb20oKVxuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cbiJdfQ==\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Audio.ts?')},"./packages/decentraland-ecs/src/decentraland/AvatarShape.ts":
/*!*******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/AvatarShape.ts ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nvar Components_1 = __webpack_require__(/*! ./Components */ "./packages/decentraland-ecs/src/decentraland/Components.ts");\n/**\n * @public\n */\nvar AvatarShape = /** @class */ (function (_super) {\n    __extends(AvatarShape, _super);\n    function AvatarShape() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.useDummyModel = false;\n        return _this;\n    }\n    AvatarShape_1 = AvatarShape;\n    AvatarShape.Dummy = function () {\n        var avatarShape = new AvatarShape_1();\n        avatarShape.useDummyModel = true;\n        return avatarShape;\n    };\n    var AvatarShape_1;\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AvatarShape.prototype, "id", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AvatarShape.prototype, "name", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AvatarShape.prototype, "bodyShape", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AvatarShape.prototype, "wearables", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AvatarShape.prototype, "skinColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AvatarShape.prototype, "hairColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AvatarShape.prototype, "eyeColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], AvatarShape.prototype, "useDummyModel", void 0);\n    AvatarShape = AvatarShape_1 = __decorate([\n        Component_1.Component(\'engine.avatarShape\', Components_1.CLASS_ID.AVATAR_SHAPE)\n    ], AvatarShape);\n    return AvatarShape;\n}(Component_1.ObservableComponent));\nexports.AvatarShape = AvatarShape;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXZhdGFyU2hhcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVjZW50cmFsYW5kL0F2YXRhclNoYXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLDhDQUFpRTtBQUNqRSwyQ0FBdUM7QUFHdkM7O0dBRUc7QUFFSDtJQUFpQywrQkFBbUI7SUFBcEQ7UUFBQSxxRUE4QkM7UUFQQyxtQkFBYSxHQUFZLEtBQUssQ0FBQTs7SUFPaEMsQ0FBQztvQkE5QlksV0FBVztJQXlCUixpQkFBSyxHQUFuQjtRQUNFLElBQU0sV0FBVyxHQUFHLElBQUksYUFBVyxFQUFFLENBQUE7UUFDckMsV0FBVyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUE7UUFDaEMsT0FBTyxXQUFXLENBQUE7SUFDcEIsQ0FBQzs7SUEzQkQ7UUFEQywrQkFBbUIsQ0FBQyxLQUFLOzJDQUNmO0lBR1g7UUFEQywrQkFBbUIsQ0FBQyxLQUFLOzZDQUNiO0lBR2I7UUFEQywrQkFBbUIsQ0FBQyxLQUFLO2tEQUNKO0lBR3RCO1FBREMsK0JBQW1CLENBQUMsS0FBSztrREFDRjtJQUd4QjtRQURDLCtCQUFtQixDQUFDLEtBQUs7a0RBQ0E7SUFHMUI7UUFEQywrQkFBbUIsQ0FBQyxLQUFLO2tEQUNBO0lBRzFCO1FBREMsK0JBQW1CLENBQUMsS0FBSztpREFDRDtJQUd6QjtRQURDLCtCQUFtQixDQUFDLEtBQUs7c0RBQ0k7SUF2Qm5CLFdBQVc7UUFEdkIscUJBQVMsQ0FBQyxvQkFBb0IsRUFBRSxxQkFBUSxDQUFDLFlBQVksQ0FBQztPQUMxQyxXQUFXLENBOEJ2QjtJQUFELGtCQUFDO0NBQUEsQUE5QkQsQ0FBaUMsK0JBQW1CLEdBOEJuRDtBQTlCWSxrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdlYXJhYmxlSWQgfSBmcm9tICcuLi9kZWNlbnRyYWxhbmQvVHlwZXMnXG5pbXBvcnQgeyBDb21wb25lbnQsIE9ic2VydmFibGVDb21wb25lbnQgfSBmcm9tICcuLi9lY3MvQ29tcG9uZW50J1xuaW1wb3J0IHsgQ0xBU1NfSUQgfSBmcm9tICcuL0NvbXBvbmVudHMnXG5pbXBvcnQgeyBSZWFkT25seUNvbG9yNCB9IGZyb20gJy4vbWF0aCdcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5hdmF0YXJTaGFwZScsIENMQVNTX0lELkFWQVRBUl9TSEFQRSlcbmV4cG9ydCBjbGFzcyBBdmF0YXJTaGFwZSBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBpZCE6IHN0cmluZ1xuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIG5hbWUhOiBzdHJpbmdcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBib2R5U2hhcGUhOiBXZWFyYWJsZUlkXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgd2VhcmFibGVzITogV2VhcmFibGVJZFtdXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2tpbkNvbG9yITogUmVhZE9ubHlDb2xvcjRcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBoYWlyQ29sb3IhOiBSZWFkT25seUNvbG9yNFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGV5ZUNvbG9yITogUmVhZE9ubHlDb2xvcjRcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB1c2VEdW1teU1vZGVsOiBib29sZWFuID0gZmFsc2VcblxuICBwdWJsaWMgc3RhdGljIER1bW15KCk6IEF2YXRhclNoYXBlIHtcbiAgICBjb25zdCBhdmF0YXJTaGFwZSA9IG5ldyBBdmF0YXJTaGFwZSgpXG4gICAgYXZhdGFyU2hhcGUudXNlRHVtbXlNb2RlbCA9IHRydWVcbiAgICByZXR1cm4gYXZhdGFyU2hhcGVcbiAgfVxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/AvatarShape.ts?')},"./packages/decentraland-ecs/src/decentraland/Camera.ts":
/*!**************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Camera.ts ***!
  \**************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar math_1 = __webpack_require__(/*! ./math */ \"./packages/decentraland-ecs/src/decentraland/math/index.ts\");\n/**\n * @public\n */\nvar Camera = /** @class */ (function () {\n    function Camera() {\n        var _this = this;\n        /** Camera position, relative to the parcel. */\n        this.position = new math_1.Vector3();\n        /** Camera rotation */\n        this.rotation = new math_1.Quaternion();\n        /** Feet position, relative to the parcel.  */\n        this.feetPosition = new math_1.Vector3();\n        /** Camera position, absolute. */\n        this.worldPosition = new math_1.Vector3();\n        // @internal\n        this.lastEventPosition = { x: 0, y: 0, z: 0 };\n        // @internal\n        this.lastEventWorldPosition = { x: 0, y: 0, z: 0 };\n        // @internal\n        this.lastEventRotation = { x: 0, y: 0, z: 0, w: 1.0 };\n        // @internal\n        this._playerHeight = 1.6;\n        if (typeof dcl !== 'undefined') {\n            dcl.subscribe('positionChanged');\n            dcl.subscribe('rotationChanged');\n            dcl.onEvent(function (event) {\n                switch (event.type) {\n                    case 'positionChanged':\n                        _this.positionChanged(event.data);\n                        break;\n                    case 'rotationChanged':\n                        _this.rotationChanged(event.data);\n                        break;\n                }\n            });\n        }\n        Object.defineProperty(this.position, 'x', {\n            get: function () { return _this.lastEventPosition.x; }\n        });\n        Object.defineProperty(this.position, 'y', {\n            get: function () { return _this.lastEventPosition.y; }\n        });\n        Object.defineProperty(this.position, 'z', {\n            get: function () { return _this.lastEventPosition.z; }\n        });\n        Object.defineProperty(this.worldPosition, 'x', {\n            get: function () { return _this.lastEventWorldPosition.x; }\n        });\n        Object.defineProperty(this.worldPosition, 'y', {\n            get: function () { return _this.lastEventWorldPosition.y; }\n        });\n        Object.defineProperty(this.worldPosition, 'z', {\n            get: function () { return _this.lastEventWorldPosition.z; }\n        });\n        Object.defineProperty(this.feetPosition, 'x', {\n            get: function () { return _this.lastEventPosition.x; }\n        });\n        Object.defineProperty(this.feetPosition, 'y', {\n            get: function () { return _this.lastEventPosition.y - _this.playerHeight; }\n        });\n        Object.defineProperty(this.feetPosition, 'z', {\n            get: function () { return _this.lastEventPosition.z; }\n        });\n        Object.defineProperty(this.rotation, 'x', {\n            get: function () { return _this.lastEventRotation.x; }\n        });\n        Object.defineProperty(this.rotation, 'y', {\n            get: function () { return _this.lastEventRotation.y; }\n        });\n        Object.defineProperty(this.rotation, 'z', {\n            get: function () { return _this.lastEventRotation.z; }\n        });\n        Object.defineProperty(this.rotation, 'w', {\n            get: function () { return _this.lastEventRotation.w; }\n        });\n    }\n    Object.defineProperty(Camera, \"instance\", {\n        get: function () {\n            if (!Camera._instance) {\n                Camera._instance = new Camera();\n            }\n            return Camera._instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Camera.prototype, \"playerHeight\", {\n        /** Player height. */\n        get: function () {\n            return this._playerHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // @internal\n    Camera.prototype.positionChanged = function (e) {\n        this.lastEventPosition = e.position;\n        this.lastEventWorldPosition = e.cameraPosition;\n        this._playerHeight = e.playerHeight;\n    };\n    // @internal\n    Camera.prototype.rotationChanged = function (e) {\n        this.lastEventRotation = e.quaternion;\n    };\n    return Camera;\n}());\nexports.Camera = Camera;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Camera.ts?")},"./packages/decentraland-ecs/src/decentraland/Components.ts":
/*!******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Components.ts ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nvar math_1 = __webpack_require__(/*! ./math */ "./packages/decentraland-ecs/src/decentraland/math/index.ts");\nvar AnimationState_1 = __webpack_require__(/*! ./AnimationState */ "./packages/decentraland-ecs/src/decentraland/AnimationState.ts");\nvar helpers_1 = __webpack_require__(/*! ../ecs/helpers */ "./packages/decentraland-ecs/src/ecs/helpers.ts");\n/**\n * @internal\n */\nvar CLASS_ID;\n(function (CLASS_ID) {\n    CLASS_ID[CLASS_ID["TRANSFORM"] = 1] = "TRANSFORM";\n    CLASS_ID[CLASS_ID["UUID_CALLBACK"] = 8] = "UUID_CALLBACK";\n    CLASS_ID[CLASS_ID["BOX_SHAPE"] = 16] = "BOX_SHAPE";\n    CLASS_ID[CLASS_ID["SPHERE_SHAPE"] = 17] = "SPHERE_SHAPE";\n    CLASS_ID[CLASS_ID["PLANE_SHAPE"] = 18] = "PLANE_SHAPE";\n    CLASS_ID[CLASS_ID["CONE_SHAPE"] = 19] = "CONE_SHAPE";\n    CLASS_ID[CLASS_ID["CYLINDER_SHAPE"] = 20] = "CYLINDER_SHAPE";\n    CLASS_ID[CLASS_ID["TEXT_SHAPE"] = 21] = "TEXT_SHAPE";\n    CLASS_ID[CLASS_ID["NFT_SHAPE"] = 22] = "NFT_SHAPE";\n    CLASS_ID[CLASS_ID["UI_WORLD_SPACE_SHAPE"] = 23] = "UI_WORLD_SPACE_SHAPE";\n    CLASS_ID[CLASS_ID["UI_SCREEN_SPACE_SHAPE"] = 24] = "UI_SCREEN_SPACE_SHAPE";\n    CLASS_ID[CLASS_ID["UI_CONTAINER_RECT"] = 25] = "UI_CONTAINER_RECT";\n    CLASS_ID[CLASS_ID["UI_CONTAINER_STACK"] = 26] = "UI_CONTAINER_STACK";\n    CLASS_ID[CLASS_ID["UI_TEXT_SHAPE"] = 27] = "UI_TEXT_SHAPE";\n    CLASS_ID[CLASS_ID["UI_INPUT_TEXT_SHAPE"] = 28] = "UI_INPUT_TEXT_SHAPE";\n    CLASS_ID[CLASS_ID["UI_IMAGE_SHAPE"] = 29] = "UI_IMAGE_SHAPE";\n    CLASS_ID[CLASS_ID["UI_SLIDER_SHAPE"] = 30] = "UI_SLIDER_SHAPE";\n    CLASS_ID[CLASS_ID["CIRCLE_SHAPE"] = 31] = "CIRCLE_SHAPE";\n    CLASS_ID[CLASS_ID["BILLBOARD"] = 32] = "BILLBOARD";\n    CLASS_ID[CLASS_ID["ANIMATION"] = 33] = "ANIMATION";\n    CLASS_ID[CLASS_ID["UI_FULLSCREEN_SHAPE"] = 40] = "UI_FULLSCREEN_SHAPE";\n    CLASS_ID[CLASS_ID["UI_BUTTON_SHAPE"] = 41] = "UI_BUTTON_SHAPE";\n    CLASS_ID[CLASS_ID["GLTF_SHAPE"] = 54] = "GLTF_SHAPE";\n    CLASS_ID[CLASS_ID["OBJ_SHAPE"] = 55] = "OBJ_SHAPE";\n    CLASS_ID[CLASS_ID["AVATAR_SHAPE"] = 56] = "AVATAR_SHAPE";\n    CLASS_ID[CLASS_ID["BASIC_MATERIAL"] = 64] = "BASIC_MATERIAL";\n    CLASS_ID[CLASS_ID["PBR_MATERIAL"] = 65] = "PBR_MATERIAL";\n    CLASS_ID[CLASS_ID["HIGHLIGHT_ENTITY"] = 66] = "HIGHLIGHT_ENTITY";\n    /** @deprecated */\n    CLASS_ID[CLASS_ID["SOUND"] = 67] = "SOUND";\n    CLASS_ID[CLASS_ID["TEXTURE"] = 68] = "TEXTURE";\n    CLASS_ID[CLASS_ID["AUDIO_CLIP"] = 200] = "AUDIO_CLIP";\n    CLASS_ID[CLASS_ID["AUDIO_SOURCE"] = 201] = "AUDIO_SOURCE";\n    CLASS_ID[CLASS_ID["GIZMOS"] = 203] = "GIZMOS";\n})(CLASS_ID = exports.CLASS_ID || (exports.CLASS_ID = {}));\n/**\n * @public\n */\nvar Transform = /** @class */ (function (_super) {\n    __extends(Transform, _super);\n    function Transform(args) {\n        if (args === void 0) { args = {}; }\n        var _this = _super.call(this) || this;\n        _this.position = args.position || math_1.Vector3.Zero();\n        _this.rotation = args.rotation || math_1.Quaternion.Identity;\n        _this.scale = args.scale || new math_1.Vector3(1, 1, 1);\n        return _this;\n    }\n    Object.defineProperty(Transform.prototype, "eulerAngles", {\n        /**\n         * @public\n         * The rotation as Euler angles in degrees.\n         */\n        get: function () {\n            return this.rotation.eulerAngles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @public\n     * Rotates the transform so the forward vector points at target\'s current position.\n     */\n    Transform.prototype.lookAt = function (target, worldUp) {\n        if (worldUp === void 0) { worldUp = math_1.MathTmp.staticUp; }\n        var result = new math_1.Matrix();\n        math_1.Matrix.LookAtLHToRef(this.position, target, worldUp, result);\n        result.invert();\n        math_1.Quaternion.FromRotationMatrixToRef(result, this.rotation);\n        return this;\n    };\n    /**\n     * @public\n     * Applies a rotation of euler angles around the x, y and z axis.\n     */\n    Transform.prototype.rotate = function (axis, angle) {\n        this.rotation.multiplyInPlace(this.rotation.angleAxis(angle, axis));\n        return this;\n    };\n    /**\n     * @public\n     * Moves the transform in the direction and distance of translation.\n     */\n    Transform.prototype.translate = function (vec) {\n        this.position.addInPlace(vec);\n        return this;\n    };\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Transform.prototype, "position", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Transform.prototype, "rotation", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Transform.prototype, "scale", void 0);\n    Transform = __decorate([\n        Component_1.Component(\'engine.transform\', CLASS_ID.TRANSFORM)\n    ], Transform);\n    return Transform;\n}(Component_1.ObservableComponent));\nexports.Transform = Transform;\n/**\n * Billboard defines a behavior that makes the entity face the camera in any moment.\n * @public\n */\nvar Billboard = /** @class */ (function (_super) {\n    __extends(Billboard, _super);\n    function Billboard(x, y, z) {\n        if (x === void 0) { x = true; }\n        if (y === void 0) { y = true; }\n        if (z === void 0) { z = true; }\n        var _this = _super.call(this) || this;\n        _this.x = true;\n        _this.y = true;\n        _this.z = true;\n        _this.x = x;\n        _this.y = y;\n        _this.z = z;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Billboard.prototype, "x", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Billboard.prototype, "y", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Billboard.prototype, "z", void 0);\n    Billboard = __decorate([\n        Component_1.Component(\'engine.billboard\', CLASS_ID.BILLBOARD)\n    ], Billboard);\n    return Billboard;\n}(Component_1.ObservableComponent));\nexports.Billboard = Billboard;\n/**\n * @public\n */\nvar Shape = /** @class */ (function (_super) {\n    __extends(Shape, _super);\n    function Shape() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Set to true to turn on the collider for the entity.\n         */\n        _this.withCollisions = true;\n        /**\n         * Defines if the entity and its children should be rendered\n         */\n        _this.visible = true;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Shape.prototype, "withCollisions", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Shape.prototype, "visible", void 0);\n    return Shape;\n}(Component_1.ObservableComponent));\nexports.Shape = Shape;\n/**\n * @public\n */\nvar BoxShape = /** @class */ (function (_super) {\n    __extends(BoxShape, _super);\n    function BoxShape() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BoxShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.BOX_SHAPE)\n    ], BoxShape);\n    return BoxShape;\n}(Shape));\nexports.BoxShape = BoxShape;\n/**\n * @public\n */\nvar SphereShape = /** @class */ (function (_super) {\n    __extends(SphereShape, _super);\n    function SphereShape() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SphereShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.SPHERE_SHAPE)\n    ], SphereShape);\n    return SphereShape;\n}(Shape));\nexports.SphereShape = SphereShape;\n/**\n * @public\n */\nvar CircleShape = /** @class */ (function (_super) {\n    __extends(CircleShape, _super);\n    function CircleShape() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CircleShape.prototype, "segments", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CircleShape.prototype, "arc", void 0);\n    CircleShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.CIRCLE_SHAPE)\n    ], CircleShape);\n    return CircleShape;\n}(Shape));\nexports.CircleShape = CircleShape;\n/**\n * @public\n */\nvar PlaneShape = /** @class */ (function (_super) {\n    __extends(PlaneShape, _super);\n    function PlaneShape() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Sets the horizontal length of the plane. Defaults to 1.\n         */\n        _this.width = 1;\n        /**\n         * Sets the vertical length of the plane. Defaults to 1.\n         */\n        _this.height = 1;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], PlaneShape.prototype, "width", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], PlaneShape.prototype, "height", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], PlaneShape.prototype, "uvs", void 0);\n    PlaneShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.PLANE_SHAPE)\n    ], PlaneShape);\n    return PlaneShape;\n}(Shape));\nexports.PlaneShape = PlaneShape;\n/**\n * @public\n */\nvar ConeShape = /** @class */ (function (_super) {\n    __extends(ConeShape, _super);\n    function ConeShape() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * The radius of the top of a truncated cone. Defaults to 0.\n         */\n        _this.radiusTop = 0;\n        /**\n         * The radius of the base of the cone. Defaults to 1.\n         */\n        _this.radiusBottom = 1;\n        /**\n         * Sets the number of rings along the cone height (positive integer). Defaults to 1.\n         */\n        _this.segmentsHeight = 1;\n        /**\n         * Sets the number of cone sides (positive integer). Defaults to 36.\n         */\n        _this.segmentsRadial = 36;\n        /**\n         * Adds two extra faces per subdivision to enclose the cone around its height axis.\n         * Defaults to false.\n         */\n        _this.openEnded = false;\n        /**\n         * Sets the radius of the top and bottom caps at once.\n         *\n         * Properties `radiusTop` and `radiusBottom` are prioritized over this one.\n         */\n        _this.radius = null;\n        /**\n         * Sets the ratio (max 1) to apply to the circumference to slice the cone. Defaults to 360.\n         */\n        _this.arc = 360;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], ConeShape.prototype, "radiusTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], ConeShape.prototype, "radiusBottom", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], ConeShape.prototype, "segmentsHeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], ConeShape.prototype, "segmentsRadial", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], ConeShape.prototype, "openEnded", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], ConeShape.prototype, "radius", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], ConeShape.prototype, "arc", void 0);\n    ConeShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.CONE_SHAPE)\n    ], ConeShape);\n    return ConeShape;\n}(Shape));\nexports.ConeShape = ConeShape;\n/**\n * @public\n */\nvar CylinderShape = /** @class */ (function (_super) {\n    __extends(CylinderShape, _super);\n    function CylinderShape() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * The radius of the top of the cylinder. Defaults to 0.\n         */\n        _this.radiusTop = 0;\n        /**\n         * The radius of the base of the cylinder. Defaults to 1.\n         */\n        _this.radiusBottom = 1;\n        /**\n         * Sets the number of rings along the cylinder height (positive integer). Defaults to 1.\n         */\n        _this.segmentsHeight = 1;\n        /**\n         * Sets the number of cylinder sides (positive integer). Defaults to 36.\n         */\n        _this.segmentsRadial = 36;\n        /**\n         * Adds two extra faces per subdivision to enclose the cylinder around its height axis.\n         * Defaults to false.\n         */\n        _this.openEnded = false;\n        /**\n         * Sets the radius of the top and bottom caps at once.\n         *\n         * Properties `radiusTop` and `radiusBottom` are prioritized over this one.\n         */\n        _this.radius = null;\n        /**\n         * Sets the ratio (max 1) to apply to the circumference to slice the cylinder. Defaults to 360.\n         */\n        _this.arc = 360;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CylinderShape.prototype, "radiusTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CylinderShape.prototype, "radiusBottom", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CylinderShape.prototype, "segmentsHeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CylinderShape.prototype, "segmentsRadial", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CylinderShape.prototype, "openEnded", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CylinderShape.prototype, "radius", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], CylinderShape.prototype, "arc", void 0);\n    CylinderShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.CYLINDER_SHAPE)\n    ], CylinderShape);\n    return CylinderShape;\n}(Shape));\nexports.CylinderShape = CylinderShape;\n/**\n * @public\n */\nvar GLTFShape = /** @class */ (function (_super) {\n    __extends(GLTFShape, _super);\n    function GLTFShape(src) {\n        var _this = _super.call(this) || this;\n        _this.src = src;\n        return _this;\n    }\n    __decorate([\n        Shape.readonly\n    ], GLTFShape.prototype, "src", void 0);\n    GLTFShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.GLTF_SHAPE)\n    ], GLTFShape);\n    return GLTFShape;\n}(Shape));\nexports.GLTFShape = GLTFShape;\n/**\n * @public\n */\nvar NFTShape = /** @class */ (function (_super) {\n    __extends(NFTShape, _super);\n    // Light purple as the default background color\n    function NFTShape(src, color) {\n        if (color === void 0) { color = new math_1.Color3(0.6404918, 0.611472, 0.8584906); }\n        var _this = _super.call(this) || this;\n        _this.src = src;\n        _this.color = color;\n        return _this;\n    }\n    __decorate([\n        Shape.readonly\n    ], NFTShape.prototype, "src", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], NFTShape.prototype, "color", void 0);\n    NFTShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.NFT_SHAPE)\n    ], NFTShape);\n    return NFTShape;\n}(Shape));\nexports.NFTShape = NFTShape;\n/**\n * @public\n */\nvar Texture = /** @class */ (function (_super) {\n    __extends(Texture, _super);\n    function Texture(src, opts) {\n        var _this = _super.call(this) || this;\n        _this.src = src;\n        if (opts) {\n            for (var i in opts) {\n                var that = _this;\n                that[i] = opts[i];\n            }\n        }\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], Texture.prototype, "src", void 0);\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], Texture.prototype, "samplingMode", void 0);\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], Texture.prototype, "wrap", void 0);\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], Texture.prototype, "hasAlpha", void 0);\n    Texture = __decorate([\n        Component_1.DisposableComponent(\'engine.texture\', CLASS_ID.TEXTURE)\n    ], Texture);\n    return Texture;\n}(Component_1.ObservableComponent));\nexports.Texture = Texture;\n/**\n * @public\n */\nvar Animator = /** @class */ (function (_super) {\n    __extends(Animator, _super);\n    function Animator() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.states = [];\n        return _this;\n    }\n    /**\n     * Adds an AnimationState to the animation lists.\n     */\n    Animator.prototype.addClip = function (clip) {\n        var _this = this;\n        this.states.push(clip);\n        clip.onChange(function () {\n            _this.dirty = true;\n        });\n        return this;\n    };\n    /**\n     * Gets the animation clip instance for the specified clip name.\n     * If the clip doesn\'t exist a new one will be created.\n     */\n    Animator.prototype.getClip = function (clipName) {\n        for (var i = 0; i < this.states.length; i++) {\n            var clip = this.states[i];\n            if (clip.clip === clipName) {\n                return clip;\n            }\n        }\n        var newClip = new AnimationState_1.AnimationState(clipName);\n        this.addClip(newClip);\n        return newClip;\n    };\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], Animator.prototype, "states", void 0);\n    Animator = __decorate([\n        Component_1.Component(\'engine.animator\', CLASS_ID.ANIMATION)\n    ], Animator);\n    return Animator;\n}(Shape));\nexports.Animator = Animator;\n/**\n * @public\n */\nvar OBJShape = /** @class */ (function (_super) {\n    __extends(OBJShape, _super);\n    function OBJShape(src) {\n        var _this = _super.call(this) || this;\n        _this.src = src;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OBJShape.prototype, "src", void 0);\n    OBJShape = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', CLASS_ID.OBJ_SHAPE)\n    ], OBJShape);\n    return OBJShape;\n}(Shape));\nexports.OBJShape = OBJShape;\n/**\n * @public\n */\nvar TextShape = /** @class */ (function (_super) {\n    __extends(TextShape, _super);\n    function TextShape(value) {\n        var _this = _super.call(this) || this;\n        _this.outlineWidth = 0;\n        _this.outlineColor = new math_1.Color3(1, 1, 1);\n        _this.color = new math_1.Color3(1, 1, 1);\n        _this.fontSize = 10;\n        _this.fontWeight = \'normal\';\n        _this.opacity = 1.0;\n        _this.value = \'\';\n        _this.lineSpacing = \'0px\';\n        _this.lineCount = 0;\n        _this.resizeToFit = false;\n        _this.textWrapping = false;\n        _this.shadowBlur = 0;\n        _this.shadowOffsetX = 0;\n        _this.shadowOffsetY = 0;\n        _this.shadowColor = new math_1.Color3(1, 1, 1);\n        _this.zIndex = 0;\n        _this.hTextAlign = \'center\';\n        _this.vTextAlign = \'center\';\n        _this.width = 1;\n        _this.height = 1;\n        _this.paddingTop = 0;\n        _this.paddingRight = 0;\n        _this.paddingBottom = 0;\n        _this.paddingLeft = 0;\n        _this.isPickable = false;\n        _this.billboard = false;\n        if (value) {\n            _this.value = value;\n        }\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "outlineWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "outlineColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "color", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "fontSize", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "fontWeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "opacity", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "value", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "lineSpacing", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "lineCount", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "resizeToFit", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "textWrapping", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "shadowBlur", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "shadowOffsetX", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "shadowOffsetY", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "shadowColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "zIndex", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "hTextAlign", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "vTextAlign", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "width", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "height", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "paddingTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "paddingRight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "paddingBottom", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "paddingLeft", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "isPickable", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], TextShape.prototype, "billboard", void 0);\n    TextShape = __decorate([\n        Component_1.Component(\'engine.text\', CLASS_ID.TEXT_SHAPE)\n    ], TextShape);\n    return TextShape;\n}(Shape));\nexports.TextShape = TextShape;\n/**\n * @public\n */\nvar TransparencyMode;\n(function (TransparencyMode) {\n    TransparencyMode[TransparencyMode["OPAQUE"] = 0] = "OPAQUE";\n    TransparencyMode[TransparencyMode["ALPHA_TEST"] = 1] = "ALPHA_TEST";\n    TransparencyMode[TransparencyMode["ALPHA_BLEND"] = 2] = "ALPHA_BLEND";\n    TransparencyMode[TransparencyMode["ALPHA_TEST_AND_BLEND"] = 3] = "ALPHA_TEST_AND_BLEND";\n    TransparencyMode[TransparencyMode["AUTO"] = 4] = "AUTO";\n})(TransparencyMode = exports.TransparencyMode || (exports.TransparencyMode = {}));\n/**\n * @public\n */\nvar Material = /** @class */ (function (_super) {\n    __extends(Material, _super);\n    function Material() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Cutoff level for ALPHATEST mode. Range is between 0 and 1.\n         * Defaults to 0.5\n         */\n        _this.alphaTest = 0.5;\n        /**\n         * Sets the transparency mode of the material.\n         * Defaults to -1.\n         *\n         * | Value | Type                                           |\n         * | ----- | ---------------------------------------------- |\n         * | 0     | OPAQUE  (default)                              |\n         * | 1     | ALPHATEST                                      |\n         * | 2     | ALPHABLEND                                     |\n         * | 3     | ALPHATESTANDBLEND                              |\n         * | 4     | AUTO (ALPHABLEND if alpha OPAQUE otherwise     |\n         */\n        _this.transparencyMode = TransparencyMode.AUTO;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "alphaTest", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "albedoColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "emissiveColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "metallic", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "roughness", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "ambientColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "reflectionColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "reflectivityColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "directIntensity", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "microSurface", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "emissiveIntensity", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "environmentIntensity", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "specularIntensity", void 0);\n    __decorate([\n        Component_1.ObservableComponent.component\n    ], Material.prototype, "albedoTexture", void 0);\n    __decorate([\n        Component_1.ObservableComponent.component\n    ], Material.prototype, "alphaTexture", void 0);\n    __decorate([\n        Component_1.ObservableComponent.component\n    ], Material.prototype, "emissiveTexture", void 0);\n    __decorate([\n        Component_1.ObservableComponent.component\n    ], Material.prototype, "bumpTexture", void 0);\n    __decorate([\n        Component_1.ObservableComponent.component\n    ], Material.prototype, "refractionTexture", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "disableLighting", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Material.prototype, "transparencyMode", void 0);\n    Material = __decorate([\n        Component_1.DisposableComponent(\'engine.material\', CLASS_ID.PBR_MATERIAL)\n    ], Material);\n    return Material;\n}(Component_1.ObservableComponent));\nexports.Material = Material;\n/**\n * @public\n */\nvar BasicMaterial = /** @class */ (function (_super) {\n    __extends(BasicMaterial, _super);\n    function BasicMaterial() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * A number between 0 and 1.\n         * Any pixel with an alpha lower than this value will be shown as transparent.\n         */\n        _this.alphaTest = 0.5;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.component\n    ], BasicMaterial.prototype, "texture", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], BasicMaterial.prototype, "alphaTest", void 0);\n    BasicMaterial = __decorate([\n        Component_1.DisposableComponent(\'engine.material\', CLASS_ID.BASIC_MATERIAL)\n    ], BasicMaterial);\n    return BasicMaterial;\n}(Component_1.ObservableComponent));\nexports.BasicMaterial = BasicMaterial;\n/**\n * @public\n */\nvar OnUUIDEvent = /** @class */ (function (_super) {\n    __extends(OnUUIDEvent, _super);\n    function OnUUIDEvent(callback) {\n        var _this = _super.call(this) || this;\n        _this.uuid = helpers_1.newId(\'UUID\');\n        if (!callback || !(\'apply\' in callback) || !(\'call\' in callback)) {\n            throw new Error(\'Callback is not a function\');\n        }\n        _this.callback = callback;\n        return _this;\n    }\n    OnUUIDEvent.uuidEvent = function (target, propertyKey) {\n        if (delete target[propertyKey]) {\n            var componentSymbol_1 = propertyKey + \'_\' + Math.random();\n            target[componentSymbol_1] = undefined;\n            Object.defineProperty(target, componentSymbol_1, __assign(__assign({}, Object.getOwnPropertyDescriptor(target, componentSymbol_1)), { enumerable: false }));\n            Object.defineProperty(target, propertyKey.toString(), {\n                get: function () {\n                    return this[componentSymbol_1];\n                },\n                set: function (value) {\n                    var oldValue = this[componentSymbol_1];\n                    if (value) {\n                        if (value instanceof OnUUIDEvent) {\n                            this.data[propertyKey] = value.uuid;\n                        }\n                        else {\n                            throw new Error(\'value is not an OnUUIDEvent\');\n                        }\n                    }\n                    else {\n                        this.data[propertyKey] = null;\n                    }\n                    this[componentSymbol_1] = value;\n                    if (value !== oldValue) {\n                        this.dirty = true;\n                        for (var i = 0; i < this.subscriptions.length; i++) {\n                            this.subscriptions[i](propertyKey, value, oldValue);\n                        }\n                    }\n                },\n                enumerable: true\n            });\n        }\n    };\n    OnUUIDEvent.prototype.toJSON = function () {\n        return { uuid: this.uuid, type: this.type };\n    };\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], OnUUIDEvent.prototype, "callback", void 0);\n    return OnUUIDEvent;\n}(Component_1.ObservableComponent));\nexports.OnUUIDEvent = OnUUIDEvent;\n/**\n * @internal\n */\nvar OnPointerLock = /** @class */ (function (_super) {\n    __extends(OnPointerLock, _super);\n    function OnPointerLock() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = \'onPointerLock\';\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnPointerLock.prototype, "type", void 0);\n    OnPointerLock = __decorate([\n        Component_1.Component(\'engine.onPointerLock\', CLASS_ID.UUID_CALLBACK)\n    ], OnPointerLock);\n    return OnPointerLock;\n}(OnUUIDEvent));\nexports.OnPointerLock = OnPointerLock;\n/**\n * @public\n */\nvar OnAnimationEnd = /** @class */ (function (_super) {\n    __extends(OnAnimationEnd, _super);\n    function OnAnimationEnd() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = \'onAnimationEnd\';\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnAnimationEnd.prototype, "type", void 0);\n    OnAnimationEnd = __decorate([\n        Component_1.Component(\'engine.onAnimationEnd\', CLASS_ID.UUID_CALLBACK)\n    ], OnAnimationEnd);\n    return OnAnimationEnd;\n}(OnUUIDEvent));\nexports.OnAnimationEnd = OnAnimationEnd;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Components.ts?')},"./packages/decentraland-ecs/src/decentraland/Events.ts":
/*!**************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Events.ts ***!
  \**************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar EventManager_1 = __webpack_require__(/*! ../ecs/EventManager */ "./packages/decentraland-ecs/src/ecs/EventManager.ts");\n/**\n * @public\n */\nvar UUIDEvent = /** @class */ (function () {\n    function UUIDEvent(uuid, payload) {\n        this.uuid = uuid;\n        this.payload = payload;\n    }\n    UUIDEvent = __decorate([\n        EventManager_1.EventConstructor()\n    ], UUIDEvent);\n    return UUIDEvent;\n}());\nexports.UUIDEvent = UUIDEvent;\n/**\n * @public\n */\nvar RaycastResponse = /** @class */ (function () {\n    function RaycastResponse(payload) {\n        this.payload = payload;\n    }\n    RaycastResponse = __decorate([\n        EventManager_1.EventConstructor()\n    ], RaycastResponse);\n    return RaycastResponse;\n}());\nexports.RaycastResponse = RaycastResponse;\n/**\n * @public\n */\nvar PointerEvent = /** @class */ (function () {\n    function PointerEvent(payload) {\n        this.payload = payload;\n    }\n    PointerEvent = __decorate([\n        EventManager_1.EventConstructor()\n    ], PointerEvent);\n    return PointerEvent;\n}());\nexports.PointerEvent = PointerEvent;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RlY2VudHJhbGFuZC9FdmVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxvREFBc0Q7QUFFdEQ7O0dBRUc7QUFFSDtJQUNFLG1CQUE0QixJQUFZLEVBQWtCLE9BQVU7UUFBeEMsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUFrQixZQUFPLEdBQVAsT0FBTyxDQUFHO0lBQUcsQ0FBQztJQUQ3RCxTQUFTO1FBRHJCLCtCQUFnQixFQUFFO09BQ04sU0FBUyxDQUVyQjtJQUFELGdCQUFDO0NBQUEsQUFGRCxJQUVDO0FBRlksOEJBQVM7QUFJdEI7O0dBRUc7QUFFSDtJQUNFLHlCQUNrQixPQUlmO1FBSmUsWUFBTyxHQUFQLE9BQU8sQ0FJdEI7SUFDQSxDQUFDO0lBUE8sZUFBZTtRQUQzQiwrQkFBZ0IsRUFBRTtPQUNOLGVBQWUsQ0FRM0I7SUFBRCxzQkFBQztDQUFBLEFBUkQsSUFRQztBQVJZLDBDQUFlO0FBVTVCOztHQUVHO0FBRUg7SUFDRSxzQkFBNEIsT0FBK0I7UUFBL0IsWUFBTyxHQUFQLE9BQU8sQ0FBd0I7SUFBRyxDQUFDO0lBRHBELFlBQVk7UUFEeEIsK0JBQWdCLEVBQUU7T0FDTixZQUFZLENBRXhCO0lBQUQsbUJBQUM7Q0FBQSxBQUZELElBRUM7QUFGWSxvQ0FBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50Q29uc3RydWN0b3IgfSBmcm9tICcuLi9lY3MvRXZlbnRNYW5hZ2VyJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQEV2ZW50Q29uc3RydWN0b3IoKVxuZXhwb3J0IGNsYXNzIFVVSURFdmVudDxUID0gYW55PiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSB1dWlkOiBzdHJpbmcsIHB1YmxpYyByZWFkb25seSBwYXlsb2FkOiBUKSB7fVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQEV2ZW50Q29uc3RydWN0b3IoKVxuZXhwb3J0IGNsYXNzIFJheWNhc3RSZXNwb25zZTxUPiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBwYXlsb2FkOiB7XG4gICAgICBxdWVyeUlkOiBzdHJpbmdcbiAgICAgIHF1ZXJ5VHlwZTogc3RyaW5nXG4gICAgICBwYXlsb2FkOiBUXG4gICAgfVxuICApIHt9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARXZlbnRDb25zdHJ1Y3RvcigpXG5leHBvcnQgY2xhc3MgUG9pbnRlckV2ZW50PEdsb2JhbElucHV0RXZlbnRSZXN1bHQ+IHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHBheWxvYWQ6IEdsb2JhbElucHV0RXZlbnRSZXN1bHQpIHt9XG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Events.ts?')},"./packages/decentraland-ecs/src/decentraland/Gizmos.ts":
/*!**************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Gizmos.ts ***!
  \**************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nvar Components_1 = __webpack_require__(/*! ./Components */ "./packages/decentraland-ecs/src/decentraland/Components.ts");\n/**\n * Gizmo identifiers\n * @beta\n */\nvar Gizmo;\n(function (Gizmo) {\n    Gizmo["MOVE"] = "MOVE";\n    Gizmo["ROTATE"] = "ROTATE";\n    Gizmo["SCALE"] = "SCALE";\n    Gizmo["NONE"] = "NONE";\n})(Gizmo = exports.Gizmo || (exports.Gizmo = {}));\n/**\n * This event is triggered after the user finalizes dragging a gizmo.\n * @beta\n */\nvar OnGizmoEvent = /** @class */ (function (_super) {\n    __extends(OnGizmoEvent, _super);\n    function OnGizmoEvent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = \'gizmoEvent\';\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnGizmoEvent.prototype, "type", void 0);\n    OnGizmoEvent = __decorate([\n        Component_1.Component(\'engine.gizmoEvent\', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnGizmoEvent);\n    return OnGizmoEvent;\n}(Components_1.OnUUIDEvent));\nexports.OnGizmoEvent = OnGizmoEvent;\n/**\n * Enables gizmos in the entity. Gizmos only work in EDITOR, PREVIEW or DEBUG modes.\n * @beta\n */\nvar Gizmos = /** @class */ (function (_super) {\n    __extends(Gizmos, _super);\n    function Gizmos() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Enable position gizmo\n         */\n        _this.position = true;\n        /**\n         * Enable rotation gizmo\n         */\n        _this.rotation = true;\n        /**\n         * Enable scale gizmo\n         */\n        _this.scale = true;\n        /**\n         * Cycle through gizmos using click.\n         */\n        _this.cycle = true;\n        /**\n         * Align the gizmos to match the local reference system\n         */\n        _this.localReference = false;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Gizmos.prototype, "position", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Gizmos.prototype, "rotation", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Gizmos.prototype, "scale", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Gizmos.prototype, "cycle", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Gizmos.prototype, "selectedGizmo", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], Gizmos.prototype, "localReference", void 0);\n    Gizmos = __decorate([\n        Component_1.Component(\'engine.gizmos\', Components_1.CLASS_ID.GIZMOS)\n    ], Gizmos);\n    return Gizmos;\n}(Component_1.ObservableComponent));\nexports.Gizmos = Gizmos;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2l6bW9zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RlY2VudHJhbGFuZC9HaXptb3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOENBQWlFO0FBQ2pFLDJDQUFvRDtBQUVwRDs7O0dBR0c7QUFDSCxJQUFZLEtBS1g7QUFMRCxXQUFZLEtBQUs7SUFDZixzQkFBYSxDQUFBO0lBQ2IsMEJBQWlCLENBQUE7SUFDakIsd0JBQWUsQ0FBQTtJQUNmLHNCQUFhLENBQUE7QUFDZixDQUFDLEVBTFcsS0FBSyxHQUFMLGFBQUssS0FBTCxhQUFLLFFBS2hCO0FBRUQ7OztHQUdHO0FBRUg7SUFBa0MsZ0NBQXlCO0lBQTNEO1FBQUEscUVBR0M7UUFEVSxVQUFJLEdBQVcsWUFBWSxDQUFBOztJQUN0QyxDQUFDO0lBREM7UUFEQywrQkFBbUIsQ0FBQyxRQUFROzhDQUNPO0lBRnpCLFlBQVk7UUFEeEIscUJBQVMsQ0FBQyxtQkFBbUIsRUFBRSxxQkFBUSxDQUFDLGFBQWEsQ0FBQztPQUMxQyxZQUFZLENBR3hCO0lBQUQsbUJBQUM7Q0FBQSxBQUhELENBQWtDLHdCQUFXLEdBRzVDO0FBSFksb0NBQVk7QUFLekI7OztHQUdHO0FBRUg7SUFBNEIsMEJBQW1CO0lBQS9DO1FBQUEscUVBb0NDO1FBbkNDOztXQUVHO1FBRUgsY0FBUSxHQUFZLElBQUksQ0FBQTtRQUV4Qjs7V0FFRztRQUVILGNBQVEsR0FBWSxJQUFJLENBQUE7UUFFeEI7O1dBRUc7UUFFSCxXQUFLLEdBQVksSUFBSSxDQUFBO1FBRXJCOztXQUVHO1FBRUgsV0FBSyxHQUFZLElBQUksQ0FBQTtRQVFyQjs7V0FFRztRQUVILG9CQUFjLEdBQVksS0FBSyxDQUFBOztJQUNqQyxDQUFDO0lBL0JDO1FBREMsK0JBQW1CLENBQUMsS0FBSzs0Q0FDRjtJQU14QjtRQURDLCtCQUFtQixDQUFDLEtBQUs7NENBQ0Y7SUFNeEI7UUFEQywrQkFBbUIsQ0FBQyxLQUFLO3lDQUNMO0lBTXJCO1FBREMsK0JBQW1CLENBQUMsS0FBSzt5Q0FDTDtJQU1yQjtRQURDLCtCQUFtQixDQUFDLEtBQUs7aURBQ0w7SUFNckI7UUFEQywrQkFBbUIsQ0FBQyxLQUFLO2tEQUNLO0lBbkNwQixNQUFNO1FBRGxCLHFCQUFTLENBQUMsZUFBZSxFQUFFLHFCQUFRLENBQUMsTUFBTSxDQUFDO09BQy9CLE1BQU0sQ0FvQ2xCO0lBQUQsYUFBQztDQUFBLEFBcENELENBQTRCLCtCQUFtQixHQW9DOUM7QUFwQ1ksd0JBQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9ic2VydmFibGVDb21wb25lbnQgfSBmcm9tICcuLi9lY3MvQ29tcG9uZW50J1xuaW1wb3J0IHsgQ0xBU1NfSUQsIE9uVVVJREV2ZW50IH0gZnJvbSAnLi9Db21wb25lbnRzJ1xuXG4vKipcbiAqIEdpem1vIGlkZW50aWZpZXJzXG4gKiBAYmV0YVxuICovXG5leHBvcnQgZW51bSBHaXptbyB7XG4gIE1PVkUgPSAnTU9WRScsXG4gIFJPVEFURSA9ICdST1RBVEUnLFxuICBTQ0FMRSA9ICdTQ0FMRScsXG4gIE5PTkUgPSAnTk9ORSdcbn1cblxuLyoqXG4gKiBUaGlzIGV2ZW50IGlzIHRyaWdnZXJlZCBhZnRlciB0aGUgdXNlciBmaW5hbGl6ZXMgZHJhZ2dpbmcgYSBnaXptby5cbiAqIEBiZXRhXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5naXptb0V2ZW50JywgQ0xBU1NfSUQuVVVJRF9DQUxMQkFDSylcbmV4cG9ydCBjbGFzcyBPbkdpem1vRXZlbnQgZXh0ZW5kcyBPblVVSURFdmVudDwnZ2l6bW9FdmVudCc+IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nID0gJ2dpem1vRXZlbnQnXG59XG5cbi8qKlxuICogRW5hYmxlcyBnaXptb3MgaW4gdGhlIGVudGl0eS4gR2l6bW9zIG9ubHkgd29yayBpbiBFRElUT1IsIFBSRVZJRVcgb3IgREVCVUcgbW9kZXMuXG4gKiBAYmV0YVxuICovXG5AQ29tcG9uZW50KCdlbmdpbmUuZ2l6bW9zJywgQ0xBU1NfSUQuR0laTU9TKVxuZXhwb3J0IGNsYXNzIEdpem1vcyBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICAvKipcbiAgICogRW5hYmxlIHBvc2l0aW9uIGdpem1vXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwb3NpdGlvbjogYm9vbGVhbiA9IHRydWVcblxuICAvKipcbiAgICogRW5hYmxlIHJvdGF0aW9uIGdpem1vXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICByb3RhdGlvbjogYm9vbGVhbiA9IHRydWVcblxuICAvKipcbiAgICogRW5hYmxlIHNjYWxlIGdpem1vXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzY2FsZTogYm9vbGVhbiA9IHRydWVcblxuICAvKipcbiAgICogQ3ljbGUgdGhyb3VnaCBnaXptb3MgdXNpbmcgY2xpY2suXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBjeWNsZTogYm9vbGVhbiA9IHRydWVcblxuICAvKipcbiAgICogSWYgY3ljbGUgaXMgZmFsc2UsIHRoaXMgd2lsbCBiZSB0aGUgc2VsZWN0ZWQgZ2l6bW9cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNlbGVjdGVkR2l6bW8/OiBHaXptb1xuXG4gIC8qKlxuICAgKiBBbGlnbiB0aGUgZ2l6bW9zIHRvIG1hdGNoIHRoZSBsb2NhbCByZWZlcmVuY2Ugc3lzdGVtXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBsb2NhbFJlZmVyZW5jZTogYm9vbGVhbiA9IGZhbHNlXG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Gizmos.ts?')},"./packages/decentraland-ecs/src/decentraland/Implementation.ts":
/*!**********************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Implementation.ts ***!
  \**********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IEntity_1 = __webpack_require__(/*! ../ecs/IEntity */ \"./packages/decentraland-ecs/src/ecs/IEntity.ts\");\nvar Events_1 = __webpack_require__(/*! ./Events */ \"./packages/decentraland-ecs/src/decentraland/Events.ts\");\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ \"./packages/decentraland-ecs/src/ecs/Component.ts\");\n// This number is defined in the protocol ECS.SetEntityParent.3\nvar ROOT_ENTITY_ID = '0';\nvar DecentralandSynchronizationSystem = /** @class */ (function () {\n    function DecentralandSynchronizationSystem(dcl) {\n        this.dcl = dcl;\n        this.cachedComponents = {};\n    }\n    DecentralandSynchronizationSystem.prototype.activate = function (engine) {\n        var _this = this;\n        this.engine = engine;\n        engine.eventManager.addListener(IEntity_1.ComponentAdded, this, this.componentAdded);\n        engine.eventManager.addListener(IEntity_1.ComponentRemoved, this, this.componentRemoved);\n        engine.eventManager.addListener(Component_1.DisposableComponentCreated, this, this.disposableComponentCreated);\n        engine.eventManager.addListener(Component_1.DisposableComponentRemoved, this, this.disposableComponentRemoved);\n        engine.eventManager.addListener(Component_1.DisposableComponentUpdated, this, this.disposableComponentUpdated);\n        engine.eventManager.addListener(IEntity_1.ParentChanged, this, this.parentChanged);\n        var rootId = engine.rootEntity.uuid;\n        this.dcl.addEntity(rootId);\n        // TODO(agus): send disposableComponents if exist\n        this.dcl.onUpdate(function (dt) {\n            engine.update(dt);\n            _this.presentEntities();\n        });\n        this.dcl.onEvent(function (event) {\n            var data = event.data;\n            switch (event.type) {\n                case 'uuidEvent':\n                    engine.eventManager.fireEvent(new Events_1.UUIDEvent(data.uuid, data.payload));\n                    break;\n                case 'raycastResponse':\n                    if (data.queryType === 'HitFirst') {\n                        engine.eventManager.fireEvent(new Events_1.RaycastResponse(data));\n                    }\n                    else if (data.queryType === 'HitAll') {\n                        engine.eventManager.fireEvent(new Events_1.RaycastResponse(data));\n                    }\n                    break;\n                case 'pointerEvent':\n                    engine.eventManager.fireEvent(new Events_1.PointerEvent(data.payload));\n                    break;\n            }\n        });\n    };\n    /**\n     * system.onAddEntity is called by the engine when a entity is added to the\n     * engine.\n     */\n    DecentralandSynchronizationSystem.prototype.onAddEntity = function (entity) {\n        if (entity && entity.isAddedToEngine()) {\n            var entityId = entity.uuid;\n            var parent_1 = entity.getParent();\n            this.dcl.addEntity(entityId);\n            if (parent_1) {\n                // If the entity has a parent, we send the the enparenting signal\n                // otherwise the engine will know the entity is set as a child of\n                // engine.rootEntity by default\n                this.dcl.setParent(entityId, parent_1.uuid);\n            }\n            // This creates a cache dictionary to avoid send redundant information to\n            // the engine in order to avoid unnecessary work in the main thread.\n            this.cachedComponents[entityId] = {};\n            // this iterator sends the current components of te engine at the moment\n            // of addition\n            for (var componentName in entity.components) {\n                var component = entity.components[componentName];\n                var classId = Component_1.getComponentClassId(component);\n                if (classId !== null) {\n                    if (Component_1.isDisposableComponent(component)) {\n                        // Send the attach component signal\n                        this.dcl.attachEntityComponent(entity.uuid, componentName, Component_1.getComponentId(component));\n                    }\n                    else {\n                        var componentJson = JSON.stringify(component);\n                        // Send the updated component\n                        this.dcl.updateEntityComponent(entityId, componentName, classId, componentJson);\n                        // Update the cached copy of the sent component\n                        this.cachedComponents[entityId][componentName] = componentJson;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * system.onRemoveEntity is called by the engine when a entity gets removed\n     * from the engine.\n     */\n    DecentralandSynchronizationSystem.prototype.onRemoveEntity = function (entity) {\n        if (entity.isAddedToEngine()) {\n            var entityId = entity.uuid;\n            // Send the removeEntity signal\n            this.dcl.removeEntity(entityId);\n            // Remove the caches from local memory\n            delete this.cachedComponents[entityId];\n        }\n    };\n    /**\n     * This method is called at the end of every update cycle.\n     * It finds and sends updates in components of the engine entities.\n     */\n    DecentralandSynchronizationSystem.prototype.presentEntities = function () {\n        for (var i in this.engine.entities) {\n            var entity = this.engine.entities[i];\n            var entityId = entity.uuid;\n            for (var componentName in entity.components) {\n                var component = entity.components[componentName];\n                var classId = Component_1.getComponentClassId(component);\n                if (classId !== null && !Component_1.isDisposableComponent(component)) {\n                    var componentJson = JSON.stringify(component);\n                    if (this.cachedComponents[entityId][componentName] !== componentJson) {\n                        // Send the updated component\n                        this.dcl.updateEntityComponent(entity.uuid, componentName, classId, componentJson);\n                        // Update the cached copy of the sent component\n                        this.cachedComponents[entityId][componentName] = componentJson;\n                    }\n                }\n            }\n        }\n        for (var id in this.engine.disposableComponents) {\n            var component = this.engine.disposableComponents[id];\n            if (component instanceof Component_1.ObservableComponent && component.dirty) {\n                this.dcl.componentUpdated(id, JSON.stringify(component));\n                component.dirty = false;\n            }\n        }\n    };\n    /**\n     * This method is called after a component is added to an entity. The event\n     * (param 1) contains the necessary information to notify the engine about the\n     * component that was added and the entity.\n     */\n    DecentralandSynchronizationSystem.prototype.componentAdded = function (event) {\n        if (event.entity.isAddedToEngine()) {\n            var component = event.entity.components[event.componentName];\n            if (Component_1.isDisposableComponent(component)) {\n                this.dcl.attachEntityComponent(event.entity.uuid, event.componentName, Component_1.getComponentId(component));\n            }\n            else if (event.classId !== null) {\n                var componentJson = JSON.stringify(component);\n                // Send the updated component\n                this.dcl.updateEntityComponent(event.entity.uuid, event.componentName, event.classId, componentJson);\n                // Update the cached copy of the sent component\n                this.cachedComponents[event.entity.uuid][event.componentName] = componentJson;\n            }\n        }\n    };\n    /**\n     * This method is called when a component is removed from an entity.\n     */\n    DecentralandSynchronizationSystem.prototype.componentRemoved = function (event) {\n        if (event.entity.isAddedToEngine()) {\n            this.dcl.removeEntityComponent(event.entity.uuid, event.componentName);\n            // Remove the cached component so we can send it again when re-adding\n            delete this.cachedComponents[event.entity.uuid][event.componentName];\n        }\n    };\n    /**\n     * This method is called after a disposableComponent is created.\n     * It instantiates the component in the engine, the event that updates the\n     * created component is fired immediatly after.\n     */\n    DecentralandSynchronizationSystem.prototype.disposableComponentCreated = function (event) {\n        this.dcl.componentCreated(event.componentId, event.componentName, event.classId);\n    };\n    /**\n     * This method is called after a disposableComponent is updated, once per\n     * update cycle and once after creation.\n     */\n    DecentralandSynchronizationSystem.prototype.disposableComponentRemoved = function (event) {\n        this.dcl.componentDisposed(event.componentId);\n    };\n    /**\n     * This method is called right after a diposableComponent gets disposed. That\n     * process is manual.\n     *\n     * TODO(menduz,dani): What happens if a disposableComponent gets disposed and\n     * it remains attached to some entities?\n     */\n    DecentralandSynchronizationSystem.prototype.disposableComponentUpdated = function (event) {\n        this.dcl.componentUpdated(event.componentId, JSON.stringify(event.component));\n    };\n    /**\n     * This method is called when a parent changes in an entity.\n     */\n    DecentralandSynchronizationSystem.prototype.parentChanged = function (event) {\n        this.dcl.setParent(event.entity.uuid, event.parent ? event.parent.uuid : ROOT_ENTITY_ID);\n    };\n    return DecentralandSynchronizationSystem;\n}());\nexports.DecentralandSynchronizationSystem = DecentralandSynchronizationSystem;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Implementation.ts?")},"./packages/decentraland-ecs/src/decentraland/Input.ts":
/*!*************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Input.ts ***!
  \*************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\n// tslint:disable:ter-indent\n// tslint:disable:ter-indent\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Types_1 = __webpack_require__(/*! ./Types */ "./packages/decentraland-ecs/src/decentraland/Types.ts");\nvar math_1 = __webpack_require__(/*! ./math */ "./packages/decentraland-ecs/src/decentraland/math/index.ts");\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\n/**\n * @public\n */\nvar ActionButton;\n(function (ActionButton) {\n    ActionButton["POINTER"] = "POINTER";\n    ActionButton["PRIMARY"] = "PRIMARY";\n    ActionButton["SECONDARY"] = "SECONDARY";\n})(ActionButton = exports.ActionButton || (exports.ActionButton = {}));\n/**\n * @public\n */\nvar PointerEventComponent = /** @class */ (function () {\n    function PointerEventComponent(callback) {\n        this.callback = callback;\n        if (!callback || !(\'apply\' in callback) || !(\'call\' in callback)) {\n            throw new Error(\'Callback is not a function\');\n        }\n        // tslint:disable-next-line:no-use-before-declare\n        Input.ensureInstance();\n    }\n    return PointerEventComponent;\n}());\nexports.PointerEventComponent = PointerEventComponent;\n/**\n * @public\n */\nvar GlobalPointerDown = /** @class */ (function (_super) {\n    __extends(GlobalPointerDown, _super);\n    function GlobalPointerDown() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GlobalPointerDown = __decorate([\n        Component_1.Component(\'pointerDown\')\n    ], GlobalPointerDown);\n    return GlobalPointerDown;\n}(PointerEventComponent));\nexports.GlobalPointerDown = GlobalPointerDown;\n/**\n * @public\n */\nvar GlobalPointerUp = /** @class */ (function (_super) {\n    __extends(GlobalPointerUp, _super);\n    function GlobalPointerUp() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GlobalPointerUp = __decorate([\n        Component_1.Component(\'pointerUp\')\n    ], GlobalPointerUp);\n    return GlobalPointerUp;\n}(PointerEventComponent));\nexports.GlobalPointerUp = GlobalPointerUp;\nvar Subscription = /** @class */ (function () {\n    function Subscription(fn, useRaycast) {\n        this.fn = fn;\n        this.useRaycast = useRaycast;\n    }\n    return Subscription;\n}());\n/**\n * @public\n */\nvar Input = /** @class */ (function () {\n    function Input() {\n        var _a, _b;\n        this.subscriptions = (_a = {},\n            _a[ActionButton.POINTER] = {\n                BUTTON_DOWN: [],\n                BUTTON_UP: []\n            },\n            _a[ActionButton.PRIMARY] = {\n                BUTTON_DOWN: [],\n                BUTTON_UP: []\n            },\n            _a[ActionButton.SECONDARY] = {\n                BUTTON_DOWN: [],\n                BUTTON_UP: []\n            },\n            _a);\n        this.internalState = (_b = {},\n            _b[ActionButton.POINTER] = {\n                BUTTON_DOWN: false\n            },\n            _b[ActionButton.PRIMARY] = {\n                BUTTON_DOWN: false\n            },\n            _b[ActionButton.SECONDARY] = {\n                BUTTON_DOWN: false\n            },\n            _b);\n    }\n    Object.defineProperty(Input, "instance", {\n        get: function () {\n            Input.ensureInstance();\n            return Input._instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Input.ensureInstance = function () {\n        if (!Input._instance) {\n            Input._instance = new Input();\n        }\n    };\n    /**\n     * Allows to know if a button is pressed\n     *\n     * Returns true if the button is pressed\n     * @param buttonId - The id of the button.\n     */\n    Input.prototype.isButtonPressed = function (buttonId) {\n        return this.internalState[buttonId];\n    };\n    /**\n     * Subscribes to an input event and triggers the provided callback.\n     *\n     * Returns a function that can be called to remove the subscription.\n     * @param eventName - The name of the event (see InputEventKind).\n     * @param buttonId - The id of the button.\n     * @param useRaycast - Enables getting raycast information.\n     * @param fn - A callback function to be called when the event is triggered.\n     */\n    Input.prototype.subscribe = function (eventName, buttonId, useRaycast, fn) {\n        var _this = this;\n        this.subscriptions[buttonId][eventName].push(new Subscription(fn, useRaycast));\n        return function () { return _this.unsubscribe(eventName, buttonId, fn); };\n    };\n    /**\n     * Removes an existing input event subscription.\n     * @param eventName - The name of the event (see InputEventKind).\n     * @param buttonId - The id of the button.\n     * @param fn - The callback function used when subscribing to the event.\n     */\n    Input.prototype.unsubscribe = function (eventName, buttonId, fn) {\n        var index = this.getSubscriptionId(eventName, buttonId, fn);\n        if (index > -1) {\n            return this.subscriptions[buttonId][eventName].splice(index, 1);\n        }\n        return false;\n    };\n    Input.prototype.handlePointerEvent = function (data) {\n        var button = this.getPointerById(data.buttonId);\n        var eventResult = __assign(__assign({}, data), { button: button, direction: new math_1.Vector3().copyFrom(data.direction), origin: new math_1.Vector3().copyFrom(data.origin), hit: undefined });\n        var hit = data.hit\n            ? __assign(__assign({}, data.hit), { hitPoint: new math_1.Vector3().copyFrom(data.hit.hitPoint), normal: new math_1.Vector3().copyFrom(data.hit.normal), worldNormal: new math_1.Vector3().copyFrom(data.hit.worldNormal) }) : undefined;\n        if (data.type === Types_1.InputEventType.DOWN) {\n            this.internalState[button].BUTTON_DOWN = true;\n            for (var i = 0; i < this.subscriptions[button][\'BUTTON_DOWN\'].length; i++) {\n                var subscription = this.subscriptions[button][\'BUTTON_DOWN\'][i];\n                // remove hit information when raycast is disabled\n                if (subscription.useRaycast) {\n                    eventResult.hit = hit;\n                }\n                else {\n                    eventResult.hit = undefined;\n                }\n                subscription.fn(eventResult);\n            }\n            if (hit && hit.entityId && Component_1.DisposableComponent.engine) {\n                var entity = Component_1.DisposableComponent.engine.entities[hit.entityId];\n                var handler = entity && entity.getComponentOrNull(GlobalPointerDown);\n                if (handler) {\n                    eventResult.hit = hit;\n                    handler.callback(eventResult);\n                }\n            }\n        }\n        else {\n            this.internalState[button].BUTTON_DOWN = false;\n            for (var i = 0; i < this.subscriptions[button][\'BUTTON_UP\'].length; i++) {\n                var subscription = this.subscriptions[button][\'BUTTON_UP\'][i];\n                // remove hit information when raycast is disabled\n                if (subscription.useRaycast) {\n                    eventResult.hit = hit;\n                }\n                else {\n                    eventResult.hit = undefined;\n                }\n                subscription.fn(eventResult);\n            }\n            if (hit && hit.entityId && Component_1.DisposableComponent.engine) {\n                var entity = Component_1.DisposableComponent.engine.entities[hit.entityId];\n                var handler = entity && entity.getComponentOrNull(GlobalPointerUp);\n                if (handler) {\n                    eventResult.hit = hit;\n                    handler.callback(eventResult);\n                }\n            }\n        }\n    };\n    Input.prototype.getSubscriptionId = function (eventName, buttonId, fn) {\n        for (var i = 0; i < this.subscriptions[buttonId][eventName].length; i++) {\n            if (this.subscriptions[buttonId][eventName][i].fn === fn) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    Input.prototype.getPointerById = function (id) {\n        if (id === 0)\n            return ActionButton.POINTER;\n        else if (id === 1)\n            return ActionButton.PRIMARY;\n        return ActionButton.SECONDARY;\n    };\n    return Input;\n}());\nexports.Input = Input;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Input.ts?')},"./packages/decentraland-ecs/src/decentraland/MessageBus.ts":
/*!******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/MessageBus.ts ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = __webpack_require__(/*! ../ecs/Observable */ \"./packages/decentraland-ecs/src/ecs/Observable.ts\");\nvar helpers_1 = __webpack_require__(/*! ../ecs/helpers */ \"./packages/decentraland-ecs/src/ecs/helpers.ts\");\nvar communicationsController = null;\nvar communicationsControllerPromise = null;\nvar _messageObserver = null;\n/**\n * @internal\n */\nfunction getMessageObserver() {\n    if (!_messageObserver) {\n        _messageObserver = new Observable_1.Observable();\n    }\n    return _messageObserver;\n}\nexports.getMessageObserver = getMessageObserver;\nfunction ensureCommunicationsController() {\n    if (!communicationsControllerPromise) {\n        communicationsControllerPromise = dcl.loadModule('@decentraland/CommunicationsController');\n        communicationsControllerPromise.then(function ($) {\n            communicationsController = $;\n        });\n        var observer_1 = getMessageObserver();\n        dcl.subscribe('comms');\n        dcl.onEvent(function (event) {\n            if (event.type === 'comms') {\n                dcl.log('Receiving comms message ', event.data);\n                observer_1.notifyObservers(event.data);\n            }\n        });\n    }\n    return communicationsControllerPromise;\n}\n/**\n * @public\n */\nvar MessageBus = /** @class */ (function () {\n    function MessageBus() {\n        var _this = this;\n        this.messageQueue = [];\n        this.connected = false;\n        this.flushing = false;\n        ensureCommunicationsController().then(function ($) {\n            _this.connected = true;\n            _this.flush();\n        });\n    }\n    MessageBus.prototype.on = function (message, callback) {\n        return getMessageObserver().add(function (e) {\n            try {\n                var m = JSON.parse(e.message);\n                if (m.message === message) {\n                    callback(m.payload, e.sender);\n                }\n            }\n            catch (e) {\n                dcl.error('Error parsing comms message ' + e.message, e);\n            }\n        });\n    };\n    // @internal\n    MessageBus.prototype.sendRaw = function (message) {\n        this.messageQueue.push(message);\n        if (this.connected) {\n            this.flush();\n        }\n    };\n    MessageBus.prototype.emit = function (message, payload) {\n        var messageToSend = JSON.stringify({ message: message, payload: payload });\n        this.sendRaw(messageToSend);\n        getMessageObserver().notifyObservers({ message: messageToSend, sender: 'self' });\n    };\n    MessageBus.prototype.flush = function () {\n        var _this = this;\n        if (this.messageQueue.length === 0)\n            return;\n        if (!this.connected)\n            return;\n        if (!communicationsController)\n            return;\n        if (this.flushing)\n            return;\n        var message = this.messageQueue.shift();\n        this.flushing = true;\n        dcl.callRpc(communicationsController.rpcHandle, 'send', [message]).then(function (_) {\n            _this.flushing = false;\n            _this.flush();\n        }, function (e) {\n            _this.flushing = false;\n            helpers_1.error('Error flushing MessageBus', e);\n        });\n    };\n    return MessageBus;\n}());\nexports.MessageBus = MessageBus;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZUJ1cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZWNlbnRyYWxhbmQvTWVzc2FnZUJ1cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGdEQUF3RDtBQUN4RCwwQ0FBc0M7QUFJdEMsSUFBSSx3QkFBd0IsR0FBNEIsSUFBSSxDQUFBO0FBQzVELElBQUksK0JBQStCLEdBQXlDLElBQUksQ0FBQTtBQUVoRixJQUFJLGdCQUFnQixHQUF3QyxJQUFJLENBQUE7QUFFaEU7O0dBRUc7QUFDSCxTQUFnQixrQkFBa0I7SUFDaEMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1FBQ3JCLGdCQUFnQixHQUFHLElBQUksdUJBQVUsRUFBb0IsQ0FBQTtLQUN0RDtJQUNELE9BQU8sZ0JBQWdCLENBQUE7QUFDekIsQ0FBQztBQUxELGdEQUtDO0FBRUQsU0FBUyw4QkFBOEI7SUFDckMsSUFBSSxDQUFDLCtCQUErQixFQUFFO1FBQ3BDLCtCQUErQixHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsd0NBQXdDLENBQUMsQ0FBQTtRQUUxRiwrQkFBK0IsQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDO1lBQ3BDLHdCQUF3QixHQUFHLENBQUMsQ0FBQTtRQUM5QixDQUFDLENBQUMsQ0FBQTtRQUVGLElBQU0sVUFBUSxHQUFHLGtCQUFrQixFQUFFLENBQUE7UUFFckMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUN0QixHQUFHLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztZQUNmLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUU7Z0JBQzFCLEdBQUcsQ0FBQyxHQUFHLENBQUMsMEJBQTBCLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO2dCQUMvQyxVQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxJQUFXLENBQUMsQ0FBQTthQUM1QztRQUNILENBQUMsQ0FBQyxDQUFBO0tBQ0g7SUFDRCxPQUFP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ZURlc2NyaXB0b3IsIElFdmVudHMgfSBmcm9tICcuL1R5cGVzJ1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT2JzZXJ2ZXIgfSBmcm9tICcuLi9lY3MvT2JzZXJ2YWJsZSdcbmltcG9ydCB7IGVycm9yIH0gZnJvbSAnLi4vZWNzL2hlbHBlcnMnXG5cbmRlY2xhcmUgY29uc3QgZGNsOiBEZWNlbnRyYWxhbmRJbnRlcmZhY2VcblxubGV0IGNvbW11bmljYXRpb25zQ29udHJvbGxlcjogTW9kdWxlRGVzY3JpcHRvciB8IG51bGwgPSBudWxsXG5sZXQgY29tbXVuaWNhdGlvbnNDb250cm9sbGVyUHJvbWlzZTogUHJvbWlzZUxpa2U8TW9kdWxlRGVzY3JpcHRvcj4gfCBudWxsID0gbnVsbFxuXG5sZXQgX21lc3NhZ2VPYnNlcnZlcjogbnVsbCB8IE9ic2VydmFibGU8SUV2ZW50c1snY29tbXMnXT4gPSBudWxsXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNZXNzYWdlT2JzZXJ2ZXIoKSB7XG4gIGlmICghX21lc3NhZ2VPYnNlcnZlcikge1xuICAgIF9tZXNzYWdlT2JzZXJ2ZXIgPSBuZXcgT2JzZXJ2YWJsZTxJRXZlbnRzWydjb21tcyddPigpXG4gIH1cbiAgcmV0dXJuIF9tZXNzYWdlT2JzZXJ2ZXJcbn1cblxuZnVuY3Rpb24gZW5zdXJlQ29tbXVuaWNhdGlvbnNDb250cm9sbGVyKCkge1xuICBpZiAoIWNvbW11bmljYXRpb25zQ29udHJvbGxlclByb21pc2UpIHtcbiAgICBjb21tdW5pY2F0aW9uc0NvbnRyb2xsZXJQcm9taXNlID0gZGNsLmxvYWRNb2R1bGUoJ0BkZWNlbnRyYWxhbmQvQ29tbXVuaWNhdGlvbnNDb250cm9sbGVyJylcblxuICAgIGNvbW11bmljYXRpb25zQ29udHJvbGxlclByb21pc2UudGhlbigkID0+IHtcbiAgICAgIGNvbW11bmljYXRpb25zQ29udHJvbGxlciA9ICRcbiAgICB9KVxuXG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBnZXRNZXNzYWdlT2JzZXJ2ZXIoKVxuXG4gICAgZGNsLnN1YnNjcmliZSgnY29tbXMnKVxuICAgIGRjbC5vbkV2ZW50KGV2ZW50ID0+IHtcbiAgICAgIGlmIChldmVudC50eXBlID09PSAnY29tbXMnKSB7XG4gICAgICAgIGRjbC5sb2coJ1JlY2VpdmluZyBjb21tcyBtZXNzYWdlICcsIGV2ZW50LmRhdGEpXG4gICAgICAgIG9ic2VydmVyLm5vdGlmeU9ic2VydmVycyhldmVudC5kYXRhIGFzIGFueSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIHJldHVybiBjb21tdW5pY2F0aW9uc0NvbnRyb2xsZXJQcm9taXNlXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgTWVzc2FnZUJ1cyB7XG4gIHByaXZhdGUgbWVzc2FnZVF1ZXVlOiBzdHJpbmdbXSA9IFtdXG4gIHByaXZhdGUgY29ubmVjdGVkID0gZmFsc2VcbiAgcHJpdmF0ZSBmbHVzaGluZyA9IGZhbHNlXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgZW5zdXJlQ29tbXVuaWNhdGlvbnNDb250cm9sbGVyKCkudGhlbigkID0+IHtcbiAgICAgIHRoaXMuY29ubmVjdGVkID0gdHJ1ZVxuICAgICAgdGhpcy5mbHVzaCgpXG4gICAgfSlcbiAgfVxuXG4gIG9uKG1lc3NhZ2U6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55LCBzZW5kZXI6IHN0cmluZykgPT4gdm9pZCk6IE9ic2VydmVyPElFdmVudHNbJ2NvbW1zJ10+IHtcbiAgICByZXR1cm4gZ2V0TWVzc2FnZU9ic2VydmVyKCkuYWRkKGUgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IG0gPSBKU09OLnBhcnNlKGUubWVzc2FnZSlcblxuICAgICAgICBpZiAobS5tZXNzYWdlID09PSBtZXNzYWdlKSB7XG4gICAgICAgICAgY2FsbGJhY2sobS5wYXlsb2FkLCBlLnNlbmRlcilcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBkY2wuZXJyb3IoJ0Vycm9yIHBhcnNpbmcgY29tbXMgbWVzc2FnZSAnICsgZS5tZXNzYWdlLCBlKVxuICAgICAgfVxuICAgIH0pIVxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIHNlbmRSYXcobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgdGhpcy5tZXNzYWdlUXVldWUucHVzaChtZXNzYWdlKVxuXG4gICAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgICB0aGlzLmZsdXNoKClcbiAgICB9XG4gIH1cblxuICBlbWl0KG1lc3NhZ2U6IHN0cmluZywgcGF5bG9hZDogUmVjb3JkPGFueSwgYW55Pikge1xuICAgIGNvbnN0IG1lc3NhZ2VUb1NlbmQgPSBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2UsIHBheWxvYWQgfSlcbiAgICB0aGlzLnNlbmRSYXcobWVzc2FnZVRvU2VuZClcbiAgICBnZXRNZXNzYWdlT2JzZXJ2ZXIoKS5ub3RpZnlPYnNlcnZlcnMoeyBtZXNzYWdlOiBtZXNzYWdlVG9TZW5kLCBzZW5kZXI6ICdzZWxmJyB9KVxuICB9XG5cbiAgcHJpdmF0ZSBmbHVzaCgpIHtcbiAgICBpZiAodGhpcy5tZXNzYWdlUXVldWUubGVuZ3RoID09PSAwKSByZXR1cm5cbiAgICBpZiAoIXRoaXMuY29ubmVjdGVkKSByZXR1cm5cbiAgICBpZiAoIWNvbW11bmljYXRpb25zQ29udHJvbGxlcikgcmV0dXJuXG4gICAgaWYgKHRoaXMuZmx1c2hpbmcpIHJldHVyblxuXG4gICAgY29uc3QgbWVzc2FnZSA9IHRoaXMubWVzc2FnZVF1ZXVlLnNoaWZ0KClcblxuICAgIHRoaXMuZmx1c2hpbmcgPSB0cnVlXG5cbiAgICBkY2wuY2FsbFJwYyhjb21tdW5pY2F0aW9uc0NvbnRyb2xsZXIucnBjSGFuZGxlLCAnc2VuZCcsIFttZXNzYWdlXSkudGhlbihcbiAgICAgIF8gPT4ge1xuICAgICAgICB0aGlzLmZsdXNoaW5nID0gZmFsc2VcbiAgICAgICAgdGhpcy5mbHVzaCgpXG4gICAgICB9LFxuICAgICAgZSA9PiB7XG4gICAgICAgIHRoaXMuZmx1c2hpbmcgPSBmYWxzZVxuICAgICAgICBlcnJvcignRXJyb3IgZmx1c2hpbmcgTWVzc2FnZUJ1cycsIGUpXG4gICAgICB9XG4gICAgKVxuICB9XG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/MessageBus.ts?")},"./packages/decentraland-ecs/src/decentraland/PhysicsCast.ts":
/*!*******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/PhysicsCast.ts ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar math_1 = __webpack_require__(/*! ./math */ \"./packages/decentraland-ecs/src/decentraland/math/index.ts\");\nvar helpers_1 = __webpack_require__(/*! ../ecs/helpers */ \"./packages/decentraland-ecs/src/ecs/helpers.ts\");\nvar Camera_1 = __webpack_require__(/*! ./Camera */ \"./packages/decentraland-ecs/src/decentraland/Camera.ts\");\n/**\n * @public\n */\nvar PhysicsCast = /** @class */ (function () {\n    function PhysicsCast() {\n        this.queries = {};\n    }\n    Object.defineProperty(PhysicsCast, \"instance\", {\n        get: function () {\n            PhysicsCast.ensureInstance();\n            return PhysicsCast._instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PhysicsCast.ensureInstance = function () {\n        if (!PhysicsCast._instance) {\n            PhysicsCast._instance = new PhysicsCast();\n        }\n    };\n    PhysicsCast.prototype.getRayFromCamera = function (distance) {\n        var rotation = Camera_1.Camera.instance.rotation;\n        var rotationMat = math_1.Matrix.Identity();\n        rotation.toRotationMatrix(rotationMat);\n        var direction = math_1.Vector3.TransformCoordinates(math_1.Vector3.Forward(), rotationMat);\n        var ray = {\n            origin: Camera_1.Camera.instance.position,\n            direction: direction,\n            distance: distance\n        };\n        return ray;\n    };\n    PhysicsCast.prototype.getRayFromPositions = function (from, to) {\n        var direction = to.subtract(from);\n        var length = direction.length();\n        var ray = {\n            origin: from,\n            direction: direction.normalize(),\n            distance: length\n        };\n        return ray;\n    };\n    PhysicsCast.prototype.hitFirst = function (ray, hitCallback) {\n        var queryId = helpers_1.uuid();\n        this.queries[queryId] = hitCallback;\n        dcl && dcl.query('raycast', { queryId: queryId, queryType: 'HitFirst', ray: ray });\n    };\n    PhysicsCast.prototype.hitAll = function (ray, hitCallback) {\n        var queryId = helpers_1.uuid();\n        this.queries[queryId] = hitCallback;\n        dcl && dcl.query('raycast', { queryId: queryId, queryType: 'HitAll', ray: ray });\n    };\n    PhysicsCast.prototype.hitFirstAvatar = function (ray, hitCallback) {\n        helpers_1.log('not implemented yet');\n    };\n    PhysicsCast.prototype.hitAllAvatars = function (ray, hitCallback) {\n        helpers_1.log('not implemented yet');\n    };\n    PhysicsCast.prototype.handleRaycastHitFirstResponse = function (response) {\n        this.queries[response.payload.queryId](response.payload.payload);\n        delete this.queries[response.payload.queryId];\n    };\n    PhysicsCast.prototype.handleRaycastHitAllResponse = function (response) {\n        this.queries[response.payload.queryId](response.payload.payload);\n        delete this.queries[response.payload.queryId];\n    };\n    return PhysicsCast;\n}());\nexports.PhysicsCast = PhysicsCast;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/PhysicsCast.ts?")},"./packages/decentraland-ecs/src/decentraland/Systems.ts":
/*!***************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Systems.ts ***!
  \***************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Events_1 = __webpack_require__(/*! ./Events */ \"./packages/decentraland-ecs/src/decentraland/Events.ts\");\nvar Components_1 = __webpack_require__(/*! ./Components */ \"./packages/decentraland-ecs/src/decentraland/Components.ts\");\nvar IEntity_1 = __webpack_require__(/*! ../ecs/IEntity */ \"./packages/decentraland-ecs/src/ecs/IEntity.ts\");\nvar Input_1 = __webpack_require__(/*! ./Input */ \"./packages/decentraland-ecs/src/decentraland/Input.ts\");\nvar PhysicsCast_1 = __webpack_require__(/*! ./PhysicsCast */ \"./packages/decentraland-ecs/src/decentraland/PhysicsCast.ts\");\n/**\n * @public\n */\nvar RaycastEventSystem = /** @class */ (function () {\n    function RaycastEventSystem() {\n    }\n    RaycastEventSystem.prototype.activate = function (engine) {\n        engine.eventManager.addListener(Events_1.RaycastResponse, this, function (event) {\n            if (event.payload.queryType === 'HitFirst') {\n                PhysicsCast_1.PhysicsCast.instance.handleRaycastHitFirstResponse(event);\n            }\n            else if (event.payload.queryType === 'HitAll') {\n                PhysicsCast_1.PhysicsCast.instance.handleRaycastHitAllResponse(event);\n            }\n        });\n        if (typeof dcl !== 'undefined') {\n            dcl.subscribe('raycastResponse');\n        }\n    };\n    RaycastEventSystem.prototype.deactivate = function () {\n        if (typeof dcl !== 'undefined') {\n            dcl.unsubscribe('raycastResponse');\n        }\n    };\n    return RaycastEventSystem;\n}());\nexports.RaycastEventSystem = RaycastEventSystem;\n/** @internal */\nexports.raycastEventSystem = new RaycastEventSystem();\n/**\n * @public\n */\nvar PointerEventSystem = /** @class */ (function () {\n    function PointerEventSystem() {\n    }\n    PointerEventSystem.prototype.activate = function (engine) {\n        engine.eventManager.addListener(Events_1.PointerEvent, this, function (event) {\n            Input_1.Input.instance.handlePointerEvent(event.payload);\n        });\n        if (typeof dcl !== 'undefined') {\n            dcl.subscribe('pointerUp');\n            dcl.subscribe('pointerDown');\n            dcl.subscribe('pointerEvent');\n        }\n    };\n    PointerEventSystem.prototype.deactivate = function () {\n        if (typeof dcl !== 'undefined') {\n            dcl.unsubscribe('pointerUp');\n            dcl.unsubscribe('pointerDown');\n            dcl.unsubscribe('pointerEvent');\n        }\n    };\n    return PointerEventSystem;\n}());\nexports.PointerEventSystem = PointerEventSystem;\n/** @internal */\nexports.pointerEventSystem = new PointerEventSystem();\n/**\n * @public\n */\nvar UUIDEventSystem = /** @class */ (function () {\n    function UUIDEventSystem() {\n        this.handlerMap = {};\n    }\n    UUIDEventSystem.prototype.activate = function (engine) {\n        engine.eventManager.addListener(Events_1.UUIDEvent, this, this.handleEvent);\n        engine.eventManager.addListener(IEntity_1.ComponentAdded, this, this.componentAdded);\n        engine.eventManager.addListener(IEntity_1.ComponentRemoved, this, this.componentRemoved);\n        if (typeof dcl !== 'undefined') {\n            dcl.subscribe('uuidEvent');\n        }\n    };\n    UUIDEventSystem.prototype.deactivate = function () {\n        if (typeof dcl !== 'undefined') {\n            dcl.unsubscribe('uuidEvent');\n        }\n    };\n    UUIDEventSystem.prototype.onAddEntity = function (entity) {\n        for (var componentName in entity.components) {\n            var component = entity.components[componentName];\n            if (component instanceof Components_1.OnUUIDEvent) {\n                this.handlerMap[component.uuid] = component;\n            }\n        }\n    };\n    UUIDEventSystem.prototype.onRemoveEntity = function (entity) {\n        for (var componentName in entity.components) {\n            var component = entity.components[componentName];\n            if (component instanceof Components_1.OnUUIDEvent) {\n                delete this.handlerMap[component.uuid];\n            }\n        }\n    };\n    UUIDEventSystem.prototype.componentAdded = function (event) {\n        if (event.entity.isAddedToEngine()) {\n            var component = event.entity.components[event.componentName];\n            if (component instanceof Components_1.OnUUIDEvent) {\n                this.handlerMap[component.uuid] = component;\n            }\n        }\n    };\n    UUIDEventSystem.prototype.componentRemoved = function (event) {\n        if (event.entity.isAddedToEngine()) {\n            if (event.component instanceof Components_1.OnUUIDEvent) {\n                delete this.handlerMap[event.component.uuid];\n            }\n        }\n    };\n    UUIDEventSystem.prototype.handleEvent = function (event) {\n        if (event.uuid in this.handlerMap) {\n            var handler = this.handlerMap[event.uuid];\n            if (handler) {\n                if (handler.callback && 'call' in handler.callback) {\n                    handler.callback(event.payload);\n                }\n            }\n        }\n    };\n    return UUIDEventSystem;\n}());\nexports.UUIDEventSystem = UUIDEventSystem;\n/** @internal */\nexports.uuidEventSystem = new UUIDEventSystem();\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Systems.ts?")},"./packages/decentraland-ecs/src/decentraland/Types.ts":
/*!*************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/Types.ts ***!
  \*************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/** @public */\nvar InputEventType;\n(function (InputEventType) {\n    InputEventType[InputEventType["DOWN"] = 0] = "DOWN";\n    InputEventType[InputEventType["UP"] = 1] = "UP";\n})(InputEventType = exports.InputEventType || (exports.InputEventType = {}));\n// @internal\nexports.AVATAR_OBSERVABLE = \'AVATAR_OBSERVABLE\';\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/Types.ts?')},"./packages/decentraland-ecs/src/decentraland/UIEvents.ts":
/*!****************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/UIEvents.ts ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ \"./packages/decentraland-ecs/src/ecs/Component.ts\");\nvar Systems_1 = __webpack_require__(/*! ./Systems */ \"./packages/decentraland-ecs/src/decentraland/Systems.ts\");\nvar Components_1 = __webpack_require__(/*! ./Components */ \"./packages/decentraland-ecs/src/decentraland/Components.ts\");\n/**\n * @public\n */\nvar OnFocus = /** @class */ (function (_super) {\n    __extends(OnFocus, _super);\n    function OnFocus(callback) {\n        var _this = _super.call(this, callback) || this;\n        _this.type = 'onFocus';\n        // This injection is necessary ONLY in events that are ALWAYS turned on and are\n        // not assignable to entities. Like events for the UI elements\n        // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n        Systems_1.uuidEventSystem.handlerMap[_this.uuid] = _this;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnFocus.prototype, \"type\", void 0);\n    OnFocus = __decorate([\n        Component_1.Component('engine.onFocus', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnFocus);\n    return OnFocus;\n}(Components_1.OnUUIDEvent));\nexports.OnFocus = OnFocus;\n/**\n * @public\n */\nvar OnTextSubmit = /** @class */ (function (_super) {\n    __extends(OnTextSubmit, _super);\n    function OnTextSubmit(callback) {\n        var _this = _super.call(this, callback) || this;\n        _this.type = 'onTextSubmit';\n        // This injection is necessary ONLY in events that are ALWAYS turned on and are\n        // not assignable to entities. Like events for the UI elements\n        // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n        Systems_1.uuidEventSystem.handlerMap[_this.uuid] = _this;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnTextSubmit.prototype, \"type\", void 0);\n    OnTextSubmit = __decorate([\n        Component_1.Component('engine.onTextSubmit', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnTextSubmit);\n    return OnTextSubmit;\n}(Components_1.OnUUIDEvent));\nexports.OnTextSubmit = OnTextSubmit;\n/**\n * @public\n */\nvar OnBlur = /** @class */ (function (_super) {\n    __extends(OnBlur, _super);\n    function OnBlur(callback) {\n        var _this = _super.call(this, callback) || this;\n        _this.type = 'onBlur';\n        // This injection is necessary ONLY in events that are ALWAYS turned on and are\n        // not assignable to entities. Like events for the UI elements\n        // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n        Systems_1.uuidEventSystem.handlerMap[_this.uuid] = _this;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnBlur.prototype, \"type\", void 0);\n    OnBlur = __decorate([\n        Component_1.Component('engine.onBlur', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnBlur);\n    return OnBlur;\n}(Components_1.OnUUIDEvent));\nexports.OnBlur = OnBlur;\n/**\n * @public\n */\nvar OnClick = /** @class */ (function (_super) {\n    __extends(OnClick, _super);\n    function OnClick(callback) {\n        var _this = _super.call(this, callback) || this;\n        _this.type = 'onClick';\n        // This injection is necessary ONLY in events that are ALWAYS turned on and are\n        // not assignable to entities. Like events for the UI elements\n        // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n        Systems_1.uuidEventSystem.handlerMap[_this.uuid] = _this;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnClick.prototype, \"type\", void 0);\n    OnClick = __decorate([\n        Component_1.Component('engine.onClick', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnClick);\n    return OnClick;\n}(Components_1.OnUUIDEvent));\nexports.OnClick = OnClick;\n/**\n * @public\n */\nvar OnEnter = /** @class */ (function (_super) {\n    __extends(OnEnter, _super);\n    function OnEnter(callback) {\n        var _this = _super.call(this, callback) || this;\n        _this.type = 'onEnter';\n        // This injection is necessary ONLY in events that are ALWAYS turned on and are\n        // not assignable to entities. Like events for the UI elements\n        // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n        Systems_1.uuidEventSystem.handlerMap[_this.uuid] = _this;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnEnter.prototype, \"type\", void 0);\n    OnEnter = __decorate([\n        Component_1.Component('engine.onEnter', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnEnter);\n    return OnEnter;\n}(Components_1.OnUUIDEvent));\nexports.OnEnter = OnEnter;\n/**\n * @public\n */\nvar OnChanged = /** @class */ (function (_super) {\n    __extends(OnChanged, _super);\n    function OnChanged(callback) {\n        var _this = _super.call(this, callback) || this;\n        _this.type = 'onChange';\n        // This injection is necessary ONLY in events that are ALWAYS turned on and are\n        // not assignable to entities. Like events for the UI elements\n        // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n        Systems_1.uuidEventSystem.handlerMap[_this.uuid] = _this;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnChanged.prototype, \"type\", void 0);\n    OnChanged = __decorate([\n        Component_1.Component('engine.onChange', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnChanged);\n    return OnChanged;\n}(Components_1.OnUUIDEvent));\nexports.OnChanged = OnChanged;\n/**\n * @public\n */\nvar OnPointerDown = /** @class */ (function (_super) {\n    __extends(OnPointerDown, _super);\n    function OnPointerDown(callback) {\n        var _this = _super.call(this, callback) || this;\n        _this.type = 'pointerDown';\n        // This injection is necessary ONLY in events that are ALWAYS turned on and are\n        // not assignable to entities. Like events for the UI elements\n        // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n        Systems_1.uuidEventSystem.handlerMap[_this.uuid] = _this;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnPointerDown.prototype, \"type\", void 0);\n    OnPointerDown = __decorate([\n        Component_1.Component('engine.pointerDown', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnPointerDown);\n    return OnPointerDown;\n}(Components_1.OnUUIDEvent));\nexports.OnPointerDown = OnPointerDown;\n/**\n * @public\n */\nvar OnPointerUp = /** @class */ (function (_super) {\n    __extends(OnPointerUp, _super);\n    function OnPointerUp(callback) {\n        var _this = _super.call(this, callback) || this;\n        _this.type = 'pointerUp';\n        // This injection is necessary ONLY in events that are ALWAYS turned on and are\n        // not assignable to entities. Like events for the UI elements\n        // TODO(Brian): This will be removed when UI gets back to the entity parenting.\n        Systems_1.uuidEventSystem.handlerMap[_this.uuid] = _this;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.readonly\n    ], OnPointerUp.prototype, \"type\", void 0);\n    OnPointerUp = __decorate([\n        Component_1.Component('engine.pointerUp', Components_1.CLASS_ID.UUID_CALLBACK)\n    ], OnPointerUp);\n    return OnPointerUp;\n}(Components_1.OnUUIDEvent));\nexports.OnPointerUp = OnPointerUp;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/UIEvents.ts?")},"./packages/decentraland-ecs/src/decentraland/UIShapes.ts":
/*!****************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/UIShapes.ts ***!
  \****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Component_1 = __webpack_require__(/*! ../ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nvar Components_1 = __webpack_require__(/*! ./Components */ "./packages/decentraland-ecs/src/decentraland/Components.ts");\nvar math_1 = __webpack_require__(/*! ./math */ "./packages/decentraland-ecs/src/decentraland/math/index.ts");\n/**\n * @public\n */\nvar UIShape = /** @class */ (function (_super) {\n    __extends(UIShape, _super);\n    function UIShape(parent) {\n        var _this = _super.call(this) || this;\n        /**\n         * Defines if the entity and its children should be rendered\n         */\n        _this.name = null;\n        _this.visible = true;\n        _this.opacity = 1;\n        _this.hAlign = \'center\';\n        _this.vAlign = \'center\';\n        _this.width = \'100px\';\n        _this.height = \'50px\';\n        _this.positionX = \'0px\';\n        _this.positionY = \'0px\';\n        _this.isPointerBlocker = true;\n        if (parent) {\n            _this._parent = parent;\n            _this.data.parentComponent = Component_1.getComponentId(parent);\n        }\n        return _this;\n    }\n    Object.defineProperty(UIShape.prototype, "parent", {\n        get: function () {\n            return this._parent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UIShape.prototype, "parentComponent", {\n        // @internal\n        get: function () {\n            return this.data.parentComponent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIShape.prototype, "name", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIShape.prototype, "visible", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIShape.prototype, "opacity", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIShape.prototype, "hAlign", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIShape.prototype, "vAlign", void 0);\n    __decorate([\n        Component_1.ObservableComponent.uiValue\n    ], UIShape.prototype, "width", void 0);\n    __decorate([\n        Component_1.ObservableComponent.uiValue\n    ], UIShape.prototype, "height", void 0);\n    __decorate([\n        Component_1.ObservableComponent.uiValue\n    ], UIShape.prototype, "positionX", void 0);\n    __decorate([\n        Component_1.ObservableComponent.uiValue\n    ], UIShape.prototype, "positionY", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIShape.prototype, "isPointerBlocker", void 0);\n    return UIShape;\n}(Component_1.ObservableComponent));\nexports.UIShape = UIShape;\n/**\n * @internal\n * NOTE(Brian): this should be deprecated\n */\nvar UIFullScreen = /** @class */ (function (_super) {\n    __extends(UIFullScreen, _super);\n    function UIFullScreen() {\n        return _super.call(this, null) || this;\n    }\n    UIFullScreen = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_FULLSCREEN_SHAPE)\n    ], UIFullScreen);\n    return UIFullScreen;\n}(UIShape));\nexports.UIFullScreen = UIFullScreen;\n/**\n * @internal\n * NOTE(Brian): this should be deprecated\n */\nvar UIWorldSpace = /** @class */ (function (_super) {\n    __extends(UIWorldSpace, _super);\n    function UIWorldSpace() {\n        return _super.call(this, null) || this;\n    }\n    UIWorldSpace = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_WORLD_SPACE_SHAPE)\n    ], UIWorldSpace);\n    return UIWorldSpace;\n}(UIShape));\nexports.UIWorldSpace = UIWorldSpace;\n/**\n * @public\n */\nvar UICanvas = /** @class */ (function (_super) {\n    __extends(UICanvas, _super);\n    function UICanvas() {\n        return _super.call(this, null) || this;\n    }\n    UICanvas = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_SCREEN_SPACE_SHAPE)\n    ], UICanvas);\n    return UICanvas;\n}(UIShape));\nexports.UICanvas = UICanvas;\n/**\n * @public\n */\nvar UIContainerRect = /** @class */ (function (_super) {\n    __extends(UIContainerRect, _super);\n    function UIContainerRect() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.adaptWidth = false;\n        _this.adaptHeight = false;\n        _this.thickness = 0;\n        _this.color = math_1.Color4.Clear();\n        _this.alignmentUsesSize = true;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerRect.prototype, "adaptWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerRect.prototype, "adaptHeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerRect.prototype, "thickness", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerRect.prototype, "color", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerRect.prototype, "alignmentUsesSize", void 0);\n    UIContainerRect = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_CONTAINER_RECT)\n    ], UIContainerRect);\n    return UIContainerRect;\n}(UIShape));\nexports.UIContainerRect = UIContainerRect;\n/**\n * @public\n */\nvar UIStackOrientation;\n(function (UIStackOrientation) {\n    UIStackOrientation[UIStackOrientation["VERTICAL"] = 0] = "VERTICAL";\n    UIStackOrientation[UIStackOrientation["HORIZONTAL"] = 1] = "HORIZONTAL";\n})(UIStackOrientation = exports.UIStackOrientation || (exports.UIStackOrientation = {}));\n/**\n * @public\n */\nvar UIContainerStack = /** @class */ (function (_super) {\n    __extends(UIContainerStack, _super);\n    function UIContainerStack() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.adaptWidth = true;\n        _this.adaptHeight = true;\n        _this.color = math_1.Color4.Clear();\n        _this.stackOrientation = UIStackOrientation.VERTICAL;\n        _this.spacing = 0;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerStack.prototype, "adaptWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerStack.prototype, "adaptHeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerStack.prototype, "color", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerStack.prototype, "stackOrientation", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIContainerStack.prototype, "spacing", void 0);\n    UIContainerStack = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_CONTAINER_STACK)\n    ], UIContainerStack);\n    return UIContainerStack;\n}(UIShape));\nexports.UIContainerStack = UIContainerStack;\n/**\n * @public\n */\nvar UIButton = /** @class */ (function (_super) {\n    __extends(UIButton, _super);\n    function UIButton() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.fontSize = 10;\n        _this.fontWeight = \'normal\';\n        _this.thickness = 0;\n        _this.cornerRadius = 0;\n        _this.color = math_1.Color4.White();\n        _this.background = math_1.Color4.White();\n        _this.paddingTop = 0;\n        _this.paddingRight = 0;\n        _this.paddingBottom = 0;\n        _this.paddingLeft = 0;\n        _this.shadowBlur = 0;\n        _this.shadowOffsetX = 0;\n        _this.shadowOffsetY = 0;\n        _this.shadowColor = math_1.Color4.Black();\n        _this.text = \'button\';\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "fontSize", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "fontWeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "thickness", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "cornerRadius", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "color", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "background", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "paddingTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "paddingRight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "paddingBottom", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "paddingLeft", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "shadowBlur", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "shadowOffsetX", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "shadowOffsetY", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "shadowColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIButton.prototype, "text", void 0);\n    UIButton = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_BUTTON_SHAPE)\n    ], UIButton);\n    return UIButton;\n}(UIShape));\nexports.UIButton = UIButton;\n/**\n * @public\n */\nvar UIText = /** @class */ (function (_super) {\n    __extends(UIText, _super);\n    function UIText() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.outlineWidth = 0;\n        _this.outlineColor = math_1.Color4.White();\n        _this.color = math_1.Color4.White();\n        _this.fontSize = 10;\n        _this.fontAutoSize = false;\n        _this.fontWeight = \'normal\';\n        _this.value = \'\';\n        _this.lineSpacing = 0;\n        _this.lineCount = 0;\n        _this.adaptWidth = false;\n        _this.adaptHeight = false;\n        _this.textWrapping = false;\n        _this.shadowBlur = 0;\n        _this.shadowOffsetX = 0;\n        _this.shadowOffsetY = 0;\n        _this.shadowColor = math_1.Color4.Black();\n        _this.hTextAlign = \'left\';\n        _this.vTextAlign = \'bottom\';\n        _this.paddingTop = 0;\n        _this.paddingRight = 0;\n        _this.paddingBottom = 0;\n        _this.paddingLeft = 0;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "outlineWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "outlineColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "color", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "fontSize", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "fontAutoSize", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "fontWeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "value", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "lineSpacing", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "lineCount", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "adaptWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "adaptHeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "textWrapping", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "shadowBlur", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "shadowOffsetX", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "shadowOffsetY", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "shadowColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "hTextAlign", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "vTextAlign", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "paddingTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "paddingRight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "paddingBottom", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIText.prototype, "paddingLeft", void 0);\n    UIText = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_TEXT_SHAPE)\n    ], UIText);\n    return UIText;\n}(UIShape));\nexports.UIText = UIText;\n/**\n * @public\n */\nvar UIInputText = /** @class */ (function (_super) {\n    __extends(UIInputText, _super);\n    function UIInputText() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.outlineWidth = 0;\n        _this.outlineColor = math_1.Color4.Black();\n        _this.color = math_1.Color4.Clear();\n        _this.thickness = 1;\n        _this.fontSize = 10;\n        _this.fontWeight = \'normal\';\n        _this.value = \'\';\n        _this.placeholderColor = math_1.Color4.White();\n        _this.placeholder = \'\';\n        _this.margin = 10;\n        _this.maxWidth = 100;\n        _this.hTextAlign = \'left\';\n        _this.vTextAlign = \'bottom\';\n        _this.autoStretchWidth = true;\n        _this.background = math_1.Color4.Black();\n        _this.focusedBackground = math_1.Color4.Black();\n        _this.textWrapping = false;\n        _this.shadowBlur = 0;\n        _this.shadowOffsetX = 0;\n        _this.shadowOffsetY = 0;\n        _this.shadowColor = math_1.Color4.White();\n        _this.paddingTop = 0;\n        _this.paddingRight = 0;\n        _this.paddingBottom = 0;\n        _this.paddingLeft = 0;\n        _this.onTextSubmit = null;\n        _this.onChanged = null;\n        _this.onFocus = null;\n        _this.onBlur = null;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "outlineWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "outlineColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "color", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "thickness", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "fontSize", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "fontWeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "value", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "placeholderColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "placeholder", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "margin", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "maxWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "hTextAlign", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "vTextAlign", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "autoStretchWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "background", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "focusedBackground", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "textWrapping", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "shadowBlur", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "shadowOffsetX", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "shadowOffsetY", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "shadowColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "paddingTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "paddingRight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "paddingBottom", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIInputText.prototype, "paddingLeft", void 0);\n    __decorate([\n        Components_1.OnUUIDEvent.uuidEvent\n    ], UIInputText.prototype, "onTextSubmit", void 0);\n    __decorate([\n        Components_1.OnUUIDEvent.uuidEvent\n    ], UIInputText.prototype, "onChanged", void 0);\n    __decorate([\n        Components_1.OnUUIDEvent.uuidEvent\n    ], UIInputText.prototype, "onFocus", void 0);\n    __decorate([\n        Components_1.OnUUIDEvent.uuidEvent\n    ], UIInputText.prototype, "onBlur", void 0);\n    UIInputText = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_INPUT_TEXT_SHAPE)\n    ], UIInputText);\n    return UIInputText;\n}(UIShape));\nexports.UIInputText = UIInputText;\n/**\n * @public\n */\nvar UIImage = /** @class */ (function (_super) {\n    __extends(UIImage, _super);\n    function UIImage(parent, source) {\n        var _this = _super.call(this, parent) || this;\n        _this.sourceLeft = 0;\n        _this.sourceTop = 0;\n        _this.sourceWidth = 1;\n        _this.sourceHeight = 1;\n        _this.paddingTop = 0;\n        _this.paddingRight = 0;\n        _this.paddingBottom = 0;\n        _this.paddingLeft = 0;\n        _this.sizeInPixels = true;\n        _this.onClick = null;\n        _this.source = source;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "sourceLeft", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "sourceTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "sourceWidth", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "sourceHeight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.component\n    ], UIImage.prototype, "source", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "paddingTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "paddingRight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "paddingBottom", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "paddingLeft", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIImage.prototype, "sizeInPixels", void 0);\n    __decorate([\n        Components_1.OnUUIDEvent.uuidEvent\n    ], UIImage.prototype, "onClick", void 0);\n    UIImage = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_IMAGE_SHAPE)\n    ], UIImage);\n    return UIImage;\n}(UIShape));\nexports.UIImage = UIImage;\n/**\n * @public\n */\nvar UIScrollRect = /** @class */ (function (_super) {\n    __extends(UIScrollRect, _super);\n    function UIScrollRect() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.valueX = 0;\n        _this.valueY = 0;\n        _this.borderColor = math_1.Color4.White();\n        _this.backgroundColor = math_1.Color4.Clear();\n        _this.isHorizontal = false;\n        _this.isVertical = false;\n        _this.paddingTop = 0;\n        _this.paddingRight = 0;\n        _this.paddingBottom = 0;\n        _this.paddingLeft = 0;\n        _this.onChanged = null;\n        return _this;\n    }\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "valueX", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "valueY", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "borderColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "backgroundColor", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "isHorizontal", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "isVertical", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "paddingTop", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "paddingRight", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "paddingBottom", void 0);\n    __decorate([\n        Component_1.ObservableComponent.field\n    ], UIScrollRect.prototype, "paddingLeft", void 0);\n    __decorate([\n        Components_1.OnUUIDEvent.uuidEvent\n    ], UIScrollRect.prototype, "onChanged", void 0);\n    UIScrollRect = __decorate([\n        Component_1.DisposableComponent(\'engine.shape\', Components_1.CLASS_ID.UI_SLIDER_SHAPE)\n    ], UIScrollRect);\n    return UIScrollRect;\n}(UIShape));\nexports.UIScrollRect = UIScrollRect;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/UIShapes.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Angle.ts":
/*!******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Angle.ts ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * Defines angle representation\n * @public\n */\nvar Angle = /** @class */ (function () {\n    /**\n     * Creates an Angle object of "radians" radians (float).\n     */\n    function Angle(radians) {\n        this._radians = radians;\n        if (this._radians < 0.0) {\n            this._radians += 2.0 * Math.PI;\n        }\n    }\n    /**\n     * Gets a new Angle object valued with the angle value in radians between the two given vectors\n     * @param a - defines first vector\n     * @param b - defines second vector\n     * @returns a new Angle\n     */\n    Angle.BetweenTwoPoints = function (a, b) {\n        var delta = b.subtract(a);\n        var theta = Math.atan2(delta.y, delta.x);\n        return new Angle(theta);\n    };\n    /**\n     * Gets a new Angle object from the given float in radians\n     * @param radians - defines the angle value in radians\n     * @returns a new Angle\n     */\n    Angle.FromRadians = function (radians) {\n        return new Angle(radians);\n    };\n    /**\n     * Gets a new Angle object from the given float in degrees\n     * @param degrees - defines the angle value in degrees\n     * @returns a new Angle\n     */\n    Angle.FromDegrees = function (degrees) {\n        return new Angle((degrees * Math.PI) / 180.0);\n    };\n    /**\n     * Get value in degrees\n     * @returns the Angle value in degrees (float)\n     */\n    Angle.prototype.degrees = function () {\n        return (this._radians * 180.0) / Math.PI;\n    };\n    /**\n     * Get value in radians\n     * @returns the Angle value in radians (float)\n     */\n    Angle.prototype.radians = function () {\n        return this._radians;\n    };\n    return Angle;\n}());\nexports.Angle = Angle;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQW5nbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGVjZW50cmFsYW5kL21hdGgvQW5nbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQTs7O0dBR0c7QUFDSDtJQUdFOztPQUVHO0lBQ0gsZUFBWSxPQUFlO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFBO1FBQ3ZCLElBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQTtTQUMvQjtJQUNILENBQUM7SUFFRDs7Ozs7T0FLRztJQUNXLHNCQUFnQixHQUE5QixVQUErQixDQUFVLEVBQUUsQ0FBVTtRQUNuRCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3pCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDeEMsT0FBTyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN6QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNXLGlCQUFXLEdBQXpCLFVBQTBCLE9BQWU7UUFDdkMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMzQixDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNXLGlCQUFXLEdBQXpCLFVBQTBCLE9BQWU7UUFDdkMsT0FBTyxJQUFJLEtBQUssQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUE7SUFDL0MsQ0FBQztJQUVEOzs7T0FHRztJQUNJLHVCQUFPLEdBQWQ7UUFDRSxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFBO0lBQzFDLENBQUM7SUFFRDs7O09BR0c7SUFDSSx1QkFBTyxHQUFkO1FBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFBO0lBQ3RCLENBQUM7SUFDSCxZQUFDO0FBQUQsQ0FBQyxBQXpERCxJQXlEQztBQXpEWSxzQkFBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuL1ZlY3RvcjInXG5cbi8qKlxuICogRGVmaW5lcyBhbmdsZSByZXByZXNlbnRhdGlvblxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgQW5nbGUge1xuICBwcml2YXRlIF9yYWRpYW5zOiBudW1iZXJcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBBbmdsZSBvYmplY3Qgb2YgXCJyYWRpYW5zXCIgcmFkaWFucyAoZmxvYXQpLlxuICAgKi9cbiAgY29uc3RydWN0b3IocmFkaWFuczogbnVtYmVyKSB7XG4gICAgdGhpcy5fcmFkaWFucyA9IHJhZGlhbnNcbiAgICBpZiAodGhpcy5fcmFkaWFucyA8IDAuMCkge1xuICAgICAgdGhpcy5fcmFkaWFucyArPSAyLjAgKiBNYXRoLlBJXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYSBuZXcgQW5nbGUgb2JqZWN0IHZhbHVlZCB3aXRoIHRoZSBhbmdsZSB2YWx1ZSBpbiByYWRpYW5zIGJldHdlZW4gdGhlIHR3byBnaXZlbiB2ZWN0b3JzXG4gICAqIEBwYXJhbSBhIC0gZGVmaW5lcyBmaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIGIgLSBkZWZpbmVzIHNlY29uZCB2ZWN0b3JcbiAgICogQHJldHVybnMgYSBuZXcgQW5nbGVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgQmV0d2VlblR3b1BvaW50cyhhOiBWZWN0b3IyLCBiOiBWZWN0b3IyKTogQW5nbGUge1xuICAgIGxldCBkZWx0YSA9IGIuc3VidHJhY3QoYSlcbiAgICBsZXQgdGhldGEgPSBNYXRoLmF0YW4yKGRlbHRhLnksIGRlbHRhLngpXG4gICAgcmV0dXJuIG5ldyBBbmdsZSh0aGV0YSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGEgbmV3IEFuZ2xlIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBmbG9hdCBpbiByYWRpYW5zXG4gICAqIEBwYXJhbSByYWRpYW5zIC0gZGVmaW5lcyB0aGUgYW5nbGUgdmFsdWUgaW4gcmFkaWFuc1xuICAgKiBAcmV0dXJucyBhIG5ldyBBbmdsZVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBGcm9tUmFkaWFucyhyYWRpYW5zOiBudW1iZXIpOiBBbmdsZSB7XG4gICAgcmV0dXJuIG5ldyBBbmdsZShyYWRpYW5zKVxuICB9XG4gIC8qKlxuICAgKiBHZXRzIGEgbmV3IEFuZ2xlIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBmbG9hdCBpbiBkZWdyZWVzXG4gICAqIEBwYXJhbSBkZWdyZWVzIC0gZGVmaW5lcyB0aGUgYW5nbGUgdmFsdWUgaW4gZGVncmVlc1xuICAgKiBAcmV0dXJucyBhIG5ldyBBbmdsZVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBGcm9tRGVncmVlcyhkZWdyZWVzOiBudW1iZXIpOiBBbmdsZSB7XG4gICAgcmV0dXJuIG5ldyBBbmdsZSgoZGVncmVlcyAqIE1hdGguUEkpIC8gMTgwLjApXG4gIH1cblxuICAvKipcbiAgICogR2V0IHZhbHVlIGluIGRlZ3JlZXNcbiAgICogQHJldHVybnMgdGhlIEFuZ2xlIHZhbHVlIGluIGRlZ3JlZXMgKGZsb2F0KVxuICAgKi9cbiAgcHVibGljIGRlZ3JlZXMoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9yYWRpYW5zICogMTgwLjApIC8gTWF0aC5QSVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB2YWx1ZSBpbiByYWRpYW5zXG4gICAqIEByZXR1cm5zIHRoZSBBbmdsZSB2YWx1ZSBpbiByYWRpYW5zIChmbG9hdClcbiAgICovXG4gIHB1YmxpYyByYWRpYW5zKCkge1xuICAgIHJldHVybiB0aGlzLl9yYWRpYW5zXG4gIH1cbn1cbiJdfQ==\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Angle.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Arc2.ts":
/*!*****************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Arc2.ts ***!
  \*****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Angle_1 = __webpack_require__(/*! ./Angle */ "./packages/decentraland-ecs/src/decentraland/math/Angle.ts");\nvar Vector2_1 = __webpack_require__(/*! ./Vector2 */ "./packages/decentraland-ecs/src/decentraland/math/Vector2.ts");\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\n/**\n * This represents an arc in a 2d space.\n * @public\n */\nvar Arc2 = /** @class */ (function () {\n    /**\n     * Creates an Arc object from the three given points : start, middle and end.\n     * @param startPoint - Defines the start point of the arc\n     * @param midPoint - Defines the midlle point of the arc\n     * @param endPoint - Defines the end point of the arc\n     */\n    function Arc2(\n    /** Defines the start point of the arc */\n    startPoint, \n    /** Defines the mid point of the arc */\n    midPoint, \n    /** Defines the end point of the arc */\n    endPoint) {\n        this.startPoint = startPoint;\n        this.midPoint = midPoint;\n        this.endPoint = endPoint;\n        var temp = Math.pow(midPoint.x, 2) + Math.pow(midPoint.y, 2);\n        var startToMid = (Math.pow(startPoint.x, 2) + Math.pow(startPoint.y, 2) - temp) / 2;\n        var midToEnd = (temp - Math.pow(endPoint.x, 2) - Math.pow(endPoint.y, 2)) / 2;\n        var det = (startPoint.x - midPoint.x) * (midPoint.y - endPoint.y) - (midPoint.x - endPoint.x) * (startPoint.y - midPoint.y);\n        this.centerPoint = new Vector2_1.Vector2((startToMid * (midPoint.y - endPoint.y) - midToEnd * (startPoint.y - midPoint.y)) / det, ((startPoint.x - midPoint.x) * midToEnd - (midPoint.x - endPoint.x) * startToMid) / det);\n        this.radius = this.centerPoint.subtract(this.startPoint).length();\n        this.startAngle = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.startPoint);\n        var a1 = this.startAngle.degrees();\n        var a2 = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.midPoint).degrees();\n        var a3 = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.endPoint).degrees();\n        // angles correction\n        if (a2 - a1 > +180.0) {\n            a2 -= 360.0;\n        }\n        if (a2 - a1 < -180.0) {\n            a2 += 360.0;\n        }\n        if (a3 - a2 > +180.0) {\n            a3 -= 360.0;\n        }\n        if (a3 - a2 < -180.0) {\n            a3 += 360.0;\n        }\n        this.orientation = a2 - a1 < 0 ? types_1.Orientation.CW : types_1.Orientation.CCW;\n        this.angle = Angle_1.Angle.FromDegrees(this.orientation === types_1.Orientation.CW ? a1 - a3 : a3 - a1);\n    }\n    return Arc2;\n}());\nexports.Arc2 = Arc2;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXJjMi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNlbnRyYWxhbmQvbWF0aC9BcmMyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQStCO0FBQy9CLHFDQUFtQztBQUNuQyxpQ0FBcUM7QUFFckM7OztHQUdHO0FBQ0g7SUFzQkU7Ozs7O09BS0c7SUFDSDtJQUNFLHlDQUF5QztJQUNsQyxVQUFtQjtJQUMxQix1Q0FBdUM7SUFDaEMsUUFBaUI7SUFDeEIsdUNBQXVDO0lBQ2hDLFFBQWlCO1FBSmpCLGVBQVUsR0FBVixVQUFVLENBQVM7UUFFbkIsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUVqQixhQUFRLEdBQVIsUUFBUSxDQUFTO1FBRXhCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDNUQsSUFBSSxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNuRixJQUFJLFFBQVEsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzdFLElBQUksR0FBRyxHQUNMLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFFbkgsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGlCQUFPLENBQzVCLENBQUMsVUFBVSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQ3ZGLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQ3hGLENBQUE7UUFFRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUVqRSxJQUFJLENBQUMsVUFBVSxHQUFHLGFBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUUzRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2xDLElBQUksRUFBRSxHQUFHLGFBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUMxRSxJQUFJLEVBQUUsR0FBRyxhQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7UUFFMUUsb0JBQW9CO1FBQ3BCLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRTtZQUNwQixFQUFFLElBQUksS0FBSyxDQUFBO1NBQ1o7UUFDRCxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUU7WUFDcEIsRUFBRSxJQUFJLEtBQUssQ0FBQTtTQUNaO1FBQ0QsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFO1lBQ3BCLEVBQUUsSUFBSSxLQUFLLENBQUE7U0FDWjtRQUNELElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRTtZQUNwQixFQUFFLElBQUksS0FBSyxDQUFBO1NBQ1o7UUFFRCxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsbUJBQVcsQ0FBQyxHQUFHLENBQUE7UUFDakUsSUFBSSxDQUFDLEtBQUssR0FBRyxhQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEtBQUssbUJBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTtJQUN6RixDQUFDO0lBQ0gsV0FBQztBQUFELENBQUMsQUF4RUQsSUF3RUM7QUF4RVksb0JBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmdsZSB9IGZyb20gJy4vQW5nbGUnXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi9WZWN0b3IyJ1xuaW1wb3J0IHsgT3JpZW50YXRpb24gfSBmcm9tICcuL3R5cGVzJ1xuXG4vKipcbiAqIFRoaXMgcmVwcmVzZW50cyBhbiBhcmMgaW4gYSAyZCBzcGFjZS5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEFyYzIge1xuICAvKipcbiAgICogRGVmaW5lcyB0aGUgY2VudGVyIHBvaW50IG9mIHRoZSBhcmMuXG4gICAqL1xuICBwdWJsaWMgY2VudGVyUG9pbnQ6IFZlY3RvcjJcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIHJhZGl1cyBvZiB0aGUgYXJjLlxuICAgKi9cbiAgcHVibGljIHJhZGl1czogbnVtYmVyXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBhbmdsZSBvZiB0aGUgYXJjIChmcm9tIG1pZCBwb2ludCB0byBlbmQgcG9pbnQpLlxuICAgKi9cbiAgcHVibGljIGFuZ2xlOiBBbmdsZVxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgc3RhcnQgYW5nbGUgb2YgdGhlIGFyYyAoZnJvbSBzdGFydCBwb2ludCB0byBtaWRkbGUgcG9pbnQpLlxuICAgKi9cbiAgcHVibGljIHN0YXJ0QW5nbGU6IEFuZ2xlXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgYXJjIChjbG9jayB3aXNlL2NvdW50ZXIgY2xvY2sgd2lzZSkuXG4gICAqL1xuICBwdWJsaWMgb3JpZW50YXRpb246IE9yaWVudGF0aW9uXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gQXJjIG9iamVjdCBmcm9tIHRoZSB0aHJlZSBnaXZlbiBwb2ludHMgOiBzdGFydCwgbWlkZGxlIGFuZCBlbmQuXG4gICAqIEBwYXJhbSBzdGFydFBvaW50IC0gRGVmaW5lcyB0aGUgc3RhcnQgcG9pbnQgb2YgdGhlIGFyY1xuICAgKiBAcGFyYW0gbWlkUG9pbnQgLSBEZWZpbmVzIHRoZSBtaWRsbGUgcG9pbnQgb2YgdGhlIGFyY1xuICAgKiBAcGFyYW0gZW5kUG9pbnQgLSBEZWZpbmVzIHRoZSBlbmQgcG9pbnQgb2YgdGhlIGFyY1xuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgLyoqIERlZmluZXMgdGhlIHN0YXJ0IHBvaW50IG9mIHRoZSBhcmMgKi9cbiAgICBwdWJsaWMgc3RhcnRQb2ludDogVmVjdG9yMixcbiAgICAvKiogRGVmaW5lcyB0aGUgbWlkIHBvaW50IG9mIHRoZSBhcmMgKi9cbiAgICBwdWJsaWMgbWlkUG9pbnQ6IFZlY3RvcjIsXG4gICAgLyoqIERlZmluZXMgdGhlIGVuZCBwb2ludCBvZiB0aGUgYXJjICovXG4gICAgcHVibGljIGVuZFBvaW50OiBWZWN0b3IyXG4gICkge1xuICAgIGxldCB0ZW1wID0gTWF0aC5wb3cobWlkUG9pbnQueCwgMikgKyBNYXRoLnBvdyhtaWRQb2ludC55LCAyKVxuICAgIGxldCBzdGFydFRvTWlkID0gKE1hdGgucG93KHN0YXJ0UG9pbnQueCwgMikgKyBNYXRoLnBvdyhzdGFydFBvaW50LnksIDIpIC0gdGVtcCkgLyAyXG4gICAgbGV0IG1pZFRvRW5kID0gKHRlbXAgLSBNYXRoLnBvdyhlbmRQb2ludC54LCAyKSAtIE1hdGgucG93KGVuZFBvaW50LnksIDIpKSAvIDJcbiAgICBsZXQgZGV0ID1cbiAgICAgIChzdGFydFBvaW50LnggLSBtaWRQb2ludC54KSAqIChtaWRQb2ludC55IC0gZW5kUG9pbnQueSkgLSAobWlkUG9pbnQueCAtIGVuZFBvaW50LngpICogKHN0YXJ0UG9pbnQueSAtIG1pZFBvaW50LnkpXG5cbiAgICB0aGlzLmNlbnRlclBvaW50ID0gbmV3IFZlY3RvcjIoXG4gICAgICAoc3RhcnRUb01pZCAqIChtaWRQb2ludC55IC0gZW5kUG9pbnQueSkgLSBtaWRUb0VuZCAqIChzdGFydFBvaW50LnkgLSBtaWRQb2ludC55KSkgLyBkZXQsXG4gICAgICAoKHN0YXJ0UG9pbnQueCAtIG1pZFBvaW50LngpICogbWlkVG9FbmQgLSAobWlkUG9pbnQueCAtIGVuZFBvaW50LngpICogc3RhcnRUb01pZCkgLyBkZXRcbiAgICApXG5cbiAgICB0aGlzLnJhZGl1cyA9IHRoaXMuY2VudGVyUG9pbnQuc3VidHJhY3QodGhpcy5zdGFydFBvaW50KS5sZW5ndGgoKVxuXG4gICAgdGhpcy5zdGFydEFuZ2xlID0gQW5nbGUuQmV0d2VlblR3b1BvaW50cyh0aGlzLmNlbnRlclBvaW50LCB0aGlzLnN0YXJ0UG9pbnQpXG5cbiAgICBsZXQgYTEgPSB0aGlzLnN0YXJ0QW5nbGUuZGVncmVlcygpXG4gICAgbGV0IGEyID0gQW5nbGUuQmV0d2VlblR3b1BvaW50cyh0aGlzLmNlbnRlclBvaW50LCB0aGlzLm1pZFBvaW50KS5kZWdyZWVzKClcbiAgICBsZXQgYTMgPSBBbmdsZS5CZXR3ZWVuVHdvUG9pbnRzKHRoaXMuY2VudGVyUG9pbnQsIHRoaXMuZW5kUG9pbnQpLmRlZ3JlZXMoKVxuXG4gICAgLy8gYW5nbGVzIGNvcnJlY3Rpb25cbiAgICBpZiAoYTIgLSBhMSA+ICsxODAuMCkge1xuICAgICAgYTIgLT0gMzYwLjBcbiAgICB9XG4gICAgaWYgKGEyIC0gYTEgPCAtMTgwLjApIHtcbiAgICAgIGEyICs9IDM2MC4wXG4gICAgfVxuICAgIGlmIChhMyAtIGEyID4gKzE4MC4wKSB7XG4gICAgICBhMyAtPSAzNjAuMFxuICAgIH1cbiAgICBpZiAoYTMgLSBhMiA8IC0xODAuMCkge1xuICAgICAgYTMgKz0gMzYwLjBcbiAgICB9XG5cbiAgICB0aGlzLm9yaWVudGF0aW9uID0gYTIgLSBhMSA8IDAgPyBPcmllbnRhdGlvbi5DVyA6IE9yaWVudGF0aW9uLkNDV1xuICAgIHRoaXMuYW5nbGUgPSBBbmdsZS5Gcm9tRGVncmVlcyh0aGlzLm9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5DVyA/IGExIC0gYTMgOiBhMyAtIGExKVxuICB9XG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Arc2.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Axis.ts":
/*!*****************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Axis.ts ***!
  \*****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Vector3_1 = __webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts");\n/**\n * Defines the 3 main axes\n * @public\n */\nvar Axis = /** @class */ (function () {\n    function Axis() {\n    }\n    /** X axis */\n    Axis.X = new Vector3_1.Vector3(1.0, 0.0, 0.0);\n    /** Y axis */\n    Axis.Y = new Vector3_1.Vector3(0.0, 1.0, 0.0);\n    /** Z axis */\n    Axis.Z = new Vector3_1.Vector3(0.0, 0.0, 1.0);\n    return Axis;\n}());\nexports.Axis = Axis;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXhpcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNlbnRyYWxhbmQvbWF0aC9BeGlzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQW1DO0FBRW5DOzs7R0FHRztBQUNIO0lBQUE7SUFPQSxDQUFDO0lBTkMsYUFBYTtJQUNDLE1BQUMsR0FBWSxJQUFJLGlCQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUNyRCxhQUFhO0lBQ0MsTUFBQyxHQUFZLElBQUksaUJBQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ3JELGFBQWE7SUFDQyxNQUFDLEdBQVksSUFBSSxpQkFBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDdkQsV0FBQztDQUFBLEFBUEQsSUFPQztBQVBZLG9CQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4vVmVjdG9yMydcblxuLyoqXG4gKiBEZWZpbmVzIHRoZSAzIG1haW4gYXhlc1xuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgQXhpcyB7XG4gIC8qKiBYIGF4aXMgKi9cbiAgcHVibGljIHN0YXRpYyBYOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoMS4wLCAwLjAsIDAuMClcbiAgLyoqIFkgYXhpcyAqL1xuICBwdWJsaWMgc3RhdGljIFk6IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygwLjAsIDEuMCwgMC4wKVxuICAvKiogWiBheGlzICovXG4gIHB1YmxpYyBzdGF0aWMgWjogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKDAuMCwgMC4wLCAxLjApXG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Axis.ts?')},"./packages/decentraland-ecs/src/decentraland/math/BezierCurve.ts":
/*!************************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/BezierCurve.ts ***!
  \************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * Class used to represent a Bezier curve\n * @public\n */\nvar BezierCurve = /** @class */ (function () {\n    function BezierCurve() {\n    }\n    /**\n     * Returns the cubic Bezier interpolated value (float) at "t" (float) from the given x1, y1, x2, y2 floats\n     * @param t - defines the time\n     * @param x1 - defines the left coordinate on X axis\n     * @param y1 - defines the left coordinate on Y axis\n     * @param x2 - defines the right coordinate on X axis\n     * @param y2 - defines the right coordinate on Y axis\n     * @returns the interpolated value\n     */\n    BezierCurve.Interpolate = function (t, x1, y1, x2, y2) {\n        // Extract X (which is equal to time here)\n        var f0 = 1 - 3 * x2 + 3 * x1;\n        var f1 = 3 * x2 - 6 * x1;\n        var f2 = 3 * x1;\n        var refinedT = t;\n        for (var i = 0; i < 5; i++) {\n            var refinedT2 = refinedT * refinedT;\n            var refinedT3 = refinedT2 * refinedT;\n            var x = f0 * refinedT3 + f1 * refinedT2 + f2 * refinedT;\n            var slope = 1.0 / (3.0 * f0 * refinedT2 + 2.0 * f1 * refinedT + f2);\n            refinedT -= (x - t) * slope;\n            refinedT = Math.min(1, Math.max(0, refinedT));\n        }\n        // Resolve cubic bezier for the given x\n        return (3 * Math.pow(1 - refinedT, 2) * refinedT * y1 +\n            3 * (1 - refinedT) * Math.pow(refinedT, 2) * y2 +\n            Math.pow(refinedT, 3));\n    };\n    return BezierCurve;\n}());\nexports.BezierCurve = BezierCurve;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmV6aWVyQ3VydmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGVjZW50cmFsYW5kL21hdGgvQmV6aWVyQ3VydmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7O0dBR0c7QUFDSDtJQUFBO0lBa0NBLENBQUM7SUFqQ0M7Ozs7Ozs7O09BUUc7SUFDVyx1QkFBVyxHQUF6QixVQUEwQixDQUFTLEVBQUUsRUFBVSxFQUFFLEVBQVUsRUFBRSxFQUFVLEVBQUUsRUFBVTtRQUNqRiwwQ0FBMEM7UUFDMUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtRQUM1QixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDeEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtRQUVmLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQTtRQUNoQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFCLElBQUksU0FBUyxHQUFHLFFBQVEsR0FBRyxRQUFRLENBQUE7WUFDbkMsSUFBSSxTQUFTLEdBQUcsU0FBUyxHQUFHLFFBQVEsQ0FBQTtZQUVwQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsU0FBUyxHQUFHLEVBQUUsR0FBRyxTQUFTLEdBQUcsRUFBRSxHQUFHLFFBQVEsQ0FBQTtZQUN2RCxJQUFJLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLFFBQVEsR0FBRyxFQUFFLENBQUMsQ0FBQTtZQUNuRSxRQUFRLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFBO1lBQzNCLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFBO1NBQzlDO1FBRUQsdUNBQXVDO1FBQ3ZDLE9BQU8sQ0FDTCxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsQ0FBQyxHQUFHLFFBQVEsR0FBRyxFQUFFO1lBQzdDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFO1lBQy9DLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUN0QixDQUFBO0lBQ0gsQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FBQyxBQWxDRCxJQWtDQztBQWxDWSxrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2xhc3MgdXNlZCB0byByZXByZXNlbnQgYSBCZXppZXIgY3VydmVcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEJlemllckN1cnZlIHtcbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1YmljIEJlemllciBpbnRlcnBvbGF0ZWQgdmFsdWUgKGZsb2F0KSBhdCBcInRcIiAoZmxvYXQpIGZyb20gdGhlIGdpdmVuIHgxLCB5MSwgeDIsIHkyIGZsb2F0c1xuICAgKiBAcGFyYW0gdCAtIGRlZmluZXMgdGhlIHRpbWVcbiAgICogQHBhcmFtIHgxIC0gZGVmaW5lcyB0aGUgbGVmdCBjb29yZGluYXRlIG9uIFggYXhpc1xuICAgKiBAcGFyYW0geTEgLSBkZWZpbmVzIHRoZSBsZWZ0IGNvb3JkaW5hdGUgb24gWSBheGlzXG4gICAqIEBwYXJhbSB4MiAtIGRlZmluZXMgdGhlIHJpZ2h0IGNvb3JkaW5hdGUgb24gWCBheGlzXG4gICAqIEBwYXJhbSB5MiAtIGRlZmluZXMgdGhlIHJpZ2h0IGNvb3JkaW5hdGUgb24gWSBheGlzXG4gICAqIEByZXR1cm5zIHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgSW50ZXJwb2xhdGUodDogbnVtYmVyLCB4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAvLyBFeHRyYWN0IFggKHdoaWNoIGlzIGVxdWFsIHRvIHRpbWUgaGVyZSlcbiAgICBsZXQgZjAgPSAxIC0gMyAqIHgyICsgMyAqIHgxXG4gICAgbGV0IGYxID0gMyAqIHgyIC0gNiAqIHgxXG4gICAgbGV0IGYyID0gMyAqIHgxXG5cbiAgICBsZXQgcmVmaW5lZFQgPSB0XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgIGxldCByZWZpbmVkVDIgPSByZWZpbmVkVCAqIHJlZmluZWRUXG4gICAgICBsZXQgcmVmaW5lZFQzID0gcmVmaW5lZFQyICogcmVmaW5lZFRcblxuICAgICAgbGV0IHggPSBmMCAqIHJlZmluZWRUMyArIGYxICogcmVmaW5lZFQyICsgZjIgKiByZWZpbmVkVFxuICAgICAgbGV0IHNsb3BlID0gMS4wIC8gKDMuMCAqIGYwICogcmVmaW5lZFQyICsgMi4wICogZjEgKiByZWZpbmVkVCArIGYyKVxuICAgICAgcmVmaW5lZFQgLT0gKHggLSB0KSAqIHNsb3BlXG4gICAgICByZWZpbmVkVCA9IE1hdGgubWluKDEsIE1hdGgubWF4KDAsIHJlZmluZWRUKSlcbiAgICB9XG5cbiAgICAvLyBSZXNvbHZlIGN1YmljIGJlemllciBmb3IgdGhlIGdpdmVuIHhcbiAgICByZXR1cm4gKFxuICAgICAgMyAqIE1hdGgucG93KDEgLSByZWZpbmVkVCwgMikgKiByZWZpbmVkVCAqIHkxICtcbiAgICAgIDMgKiAoMSAtIHJlZmluZWRUKSAqIE1hdGgucG93KHJlZmluZWRULCAyKSAqIHkyICtcbiAgICAgIE1hdGgucG93KHJlZmluZWRULCAzKVxuICAgIClcbiAgfVxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/BezierCurve.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Color3.ts":
/*!*******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Color3.ts ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\nvar Color4_1 = __webpack_require__(/*! ./Color4 */ "./packages/decentraland-ecs/src/decentraland/math/Color4.ts");\nvar Scalar_1 = __webpack_require__(/*! ./Scalar */ "./packages/decentraland-ecs/src/decentraland/math/Scalar.ts");\n/**\n * Class used to hold a RBG color\n * @public\n */\nvar Color3 = /** @class */ (function () {\n    /**\n     * Creates a new Color3 object from red, green, blue values, all between 0 and 1\n     * @param r - defines the red component (between 0 and 1, default is 0)\n     * @param g - defines the green component (between 0 and 1, default is 0)\n     * @param b - defines the blue component (between 0 and 1, default is 0)\n     */\n    function Color3(\n    /**\n     * Defines the red component (between 0 and 1, default is 0)\n     */\n    r, \n    /**\n     * Defines the green component (between 0 and 1, default is 0)\n     */\n    g, \n    /**\n     * Defines the blue component (between 0 and 1, default is 0)\n     */\n    b) {\n        if (r === void 0) { r = 0; }\n        if (g === void 0) { g = 0; }\n        if (b === void 0) { b = 0; }\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n    // Statics\n    /**\n     * Creates a new Color3 from the string containing valid hexadecimal values\n     * @param hex - defines a string containing valid hexadecimal values\n     * @returns a new Color3 object\n     */\n    Color3.FromHexString = function (hex) {\n        if (hex.substring(0, 1) !== \'#\' || hex.length !== 7) {\n            return new Color3(0, 0, 0);\n        }\n        var r = parseInt(hex.substring(1, 3), 16);\n        var g = parseInt(hex.substring(3, 5), 16);\n        var b = parseInt(hex.substring(5, 7), 16);\n        return Color3.FromInts(r, g, b);\n    };\n    /**\n     * Creates a new Vector3 from the starting index of the given array\n     * @param array - defines the source array\n     * @param offset - defines an offset in the source array\n     * @returns a new Color3 object\n     */\n    Color3.FromArray = function (array, offset) {\n        if (offset === void 0) { offset = 0; }\n        return new Color3(array[offset], array[offset + 1], array[offset + 2]);\n    };\n    /**\n     * Creates a new Color3 from integer values (less than 256)\n     * @param r - defines the red component to read from (value between 0 and 255)\n     * @param g - defines the green component to read from (value between 0 and 255)\n     * @param b - defines the blue component to read from (value between 0 and 255)\n     * @returns a new Color3 object\n     */\n    Color3.FromInts = function (r, g, b) {\n        return new Color3(r / 255.0, g / 255.0, b / 255.0);\n    };\n    /**\n     * Creates a new Color3 with values linearly interpolated of "amount" between the start Color3 and the end Color3\n     * @param start - defines the start Color3 value\n     * @param end - defines the end Color3 value\n     * @param amount - defines the gradient value between start and end\n     * @returns a new Color3 object\n     */\n    Color3.Lerp = function (start, end, amount) {\n        var result = new Color3(0.0, 0.0, 0.0);\n        Color3.LerpToRef(start, end, amount, result);\n        return result;\n    };\n    /**\n     * Creates a new Color3 with values linearly interpolated of "amount" between the start Color3 and the end Color3\n     * @param left - defines the start value\n     * @param right - defines the end value\n     * @param amount - defines the gradient factor\n     * @param result - defines the Color3 object where to store the result\n     */\n    Color3.LerpToRef = function (left, right, amount, result) {\n        result.r = left.r + (right.r - left.r) * amount;\n        result.g = left.g + (right.g - left.g) * amount;\n        result.b = left.b + (right.b - left.b) * amount;\n    };\n    /**\n     * Returns a Color3 value containing a red color\n     * @returns a new Color3 object\n     */\n    Color3.Red = function () {\n        return new Color3(1, 0, 0);\n    };\n    /**\n     * Returns a Color3 value containing a green color\n     * @returns a new Color3 object\n     */\n    Color3.Green = function () {\n        return new Color3(0, 1, 0);\n    };\n    /**\n     * Returns a Color3 value containing a blue color\n     * @returns a new Color3 object\n     */\n    Color3.Blue = function () {\n        return new Color3(0, 0, 1);\n    };\n    /**\n     * Returns a Color3 value containing a black color\n     * @returns a new Color3 object\n     */\n    Color3.Black = function () {\n        return new Color3(0, 0, 0);\n    };\n    /**\n     * Returns a Color3 value containing a white color\n     * @returns a new Color3 object\n     */\n    Color3.White = function () {\n        return new Color3(1, 1, 1);\n    };\n    /**\n     * Returns a Color3 value containing a purple color\n     * @returns a new Color3 object\n     */\n    Color3.Purple = function () {\n        return new Color3(0.5, 0, 0.5);\n    };\n    /**\n     * Returns a Color3 value containing a magenta color\n     * @returns a new Color3 object\n     */\n    Color3.Magenta = function () {\n        return new Color3(1, 0, 1);\n    };\n    /**\n     * Returns a Color3 value containing a yellow color\n     * @returns a new Color3 object\n     */\n    Color3.Yellow = function () {\n        return new Color3(1, 1, 0);\n    };\n    /**\n     * Returns a Color3 value containing a gray color\n     * @returns a new Color3 object\n     */\n    Color3.Gray = function () {\n        return new Color3(0.5, 0.5, 0.5);\n    };\n    /**\n     * Returns a Color3 value containing a teal color\n     * @returns a new Color3 object\n     */\n    Color3.Teal = function () {\n        return new Color3(0, 1.0, 1.0);\n    };\n    /**\n     * Returns a Color3 value containing a random color\n     * @returns a new Color3 object\n     */\n    Color3.Random = function () {\n        return new Color3(Math.random(), Math.random(), Math.random());\n    };\n    /**\n     * Creates a string with the Color3 current values\n     * @returns the string representation of the Color3 object\n     */\n    Color3.prototype.toString = function () {\n        return \'{R: \' + this.r + \' G:\' + this.g + \' B:\' + this.b + \'}\';\n    };\n    /**\n     * Returns the string "Color3"\n     * @returns "Color3"\n     */\n    Color3.prototype.getClassName = function () {\n        return \'Color3\';\n    };\n    /**\n     * Compute the Color3 hash code\n     * @returns an unique number that can be used to hash Color3 objects\n     */\n    Color3.prototype.getHashCode = function () {\n        var hash = this.r || 0;\n        hash = (hash * 397) ^ (this.g || 0);\n        hash = (hash * 397) ^ (this.b || 0);\n        return hash;\n    };\n    // Operators\n    /**\n     * Stores in the given array from the given starting index the red, green, blue values as successive elements\n     * @param array - defines the array where to store the r,g,b components\n     * @param index - defines an optional index in the target array to define where to start storing values\n     * @returns the current Color3 object\n     */\n    Color3.prototype.toArray = function (array, index) {\n        if (index === void 0) { index = 0; }\n        array[index] = this.r;\n        array[index + 1] = this.g;\n        array[index + 2] = this.b;\n        return this;\n    };\n    /**\n     * Returns a new Color4 object from the current Color3 and the given alpha\n     * @param alpha - defines the alpha component on the new Color4 object (default is 1)\n     * @returns a new Color4 object\n     */\n    Color3.prototype.toColor4 = function (alpha) {\n        if (alpha === void 0) { alpha = 1; }\n        return new Color4_1.Color4(this.r, this.g, this.b, alpha);\n    };\n    /**\n     * Returns a new array populated with 3 numeric elements : red, green and blue values\n     * @returns the new array\n     */\n    Color3.prototype.asArray = function () {\n        var result = new Array();\n        this.toArray(result, 0);\n        return result;\n    };\n    /**\n     * Returns the luminance value\n     * @returns a float value\n     */\n    Color3.prototype.toLuminance = function () {\n        return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;\n    };\n    /**\n     * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object\n     * @param otherColor - defines the second operand\n     * @returns the new Color3 object\n     */\n    Color3.prototype.multiply = function (otherColor) {\n        return new Color3(this.r * otherColor.r, this.g * otherColor.g, this.b * otherColor.b);\n    };\n    /**\n     * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object "result"\n     * @param otherColor - defines the second operand\n     * @param result - defines the Color3 object where to store the result\n     * @returns the current Color3\n     */\n    Color3.prototype.multiplyToRef = function (otherColor, result) {\n        result.r = this.r * otherColor.r;\n        result.g = this.g * otherColor.g;\n        result.b = this.b * otherColor.b;\n        return this;\n    };\n    /**\n     * Determines equality between Color3 objects\n     * @param otherColor - defines the second operand\n     * @returns true if the rgb values are equal to the given ones\n     */\n    Color3.prototype.equals = function (otherColor) {\n        return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b;\n    };\n    /**\n     * Determines equality between the current Color3 object and a set of r,b,g values\n     * @param r - defines the red component to check\n     * @param g - defines the green component to check\n     * @param b - defines the blue component to check\n     * @returns true if the rgb values are equal to the given ones\n     */\n    Color3.prototype.equalsFloats = function (r, g, b) {\n        return this.r === r && this.g === g && this.b === b;\n    };\n    /**\n     * Multiplies in place each rgb value by scale\n     * @param scale - defines the scaling factor\n     * @returns the updated Color3\n     */\n    Color3.prototype.scale = function (scale) {\n        return new Color3(this.r * scale, this.g * scale, this.b * scale);\n    };\n    /**\n     * Multiplies the rgb values by scale and stores the result into "result"\n     * @param scale - defines the scaling factor\n     * @param result - defines the Color3 object where to store the result\n     * @returns the unmodified current Color3\n     */\n    Color3.prototype.scaleToRef = function (scale, result) {\n        result.r = this.r * scale;\n        result.g = this.g * scale;\n        result.b = this.b * scale;\n        return this;\n    };\n    /**\n     * Scale the current Color3 values by a factor and add the result to a given Color3\n     * @param scale - defines the scale factor\n     * @param result - defines color to store the result into\n     * @returns the unmodified current Color3\n     */\n    Color3.prototype.scaleAndAddToRef = function (scale, result) {\n        result.r += this.r * scale;\n        result.g += this.g * scale;\n        result.b += this.b * scale;\n        return this;\n    };\n    /**\n     * Clamps the rgb values by the min and max values and stores the result into "result"\n     * @param min - defines minimum clamping value (default is 0)\n     * @param max - defines maximum clamping value (default is 1)\n     * @param result - defines color to store the result into\n     * @returns the original Color3\n     */\n    Color3.prototype.clampToRef = function (min, max, result) {\n        if (min === void 0) { min = 0; }\n        if (max === void 0) { max = 1; }\n        result.r = Scalar_1.Scalar.Clamp(this.r, min, max);\n        result.g = Scalar_1.Scalar.Clamp(this.g, min, max);\n        result.b = Scalar_1.Scalar.Clamp(this.b, min, max);\n        return this;\n    };\n    /**\n     * Creates a new Color3 set with the added values of the current Color3 and of the given one\n     * @param otherColor - defines the second operand\n     * @returns the new Color3\n     */\n    Color3.prototype.add = function (otherColor) {\n        return new Color3(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b);\n    };\n    /**\n     * Stores the result of the addition of the current Color3 and given one rgb values into "result"\n     * @param otherColor - defines the second operand\n     * @param result - defines Color3 object to store the result into\n     * @returns the unmodified current Color3\n     */\n    Color3.prototype.addToRef = function (otherColor, result) {\n        result.r = this.r + otherColor.r;\n        result.g = this.g + otherColor.g;\n        result.b = this.b + otherColor.b;\n        return this;\n    };\n    /**\n     * Returns a new Color3 set with the subtracted values of the given one from the current Color3\n     * @param otherColor - defines the second operand\n     * @returns the new Color3\n     */\n    Color3.prototype.subtract = function (otherColor) {\n        return new Color3(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b);\n    };\n    /**\n     * Stores the result of the subtraction of given one from the current Color3 rgb values into "result"\n     * @param otherColor - defines the second operand\n     * @param result - defines Color3 object to store the result into\n     * @returns the unmodified current Color3\n     */\n    Color3.prototype.subtractToRef = function (otherColor, result) {\n        result.r = this.r - otherColor.r;\n        result.g = this.g - otherColor.g;\n        result.b = this.b - otherColor.b;\n        return this;\n    };\n    /**\n     * Copy the current object\n     * @returns a new Color3 copied the current one\n     */\n    Color3.prototype.clone = function () {\n        return new Color3(this.r, this.g, this.b);\n    };\n    /**\n     * Copies the rgb values from the source in the current Color3\n     * @param source - defines the source Color3 object\n     * @returns the updated Color3 object\n     */\n    Color3.prototype.copyFrom = function (source) {\n        this.r = source.r;\n        this.g = source.g;\n        this.b = source.b;\n        return this;\n    };\n    /**\n     * Updates the Color3 rgb values from the given floats\n     * @param r - defines the red component to read from\n     * @param g - defines the green component to read from\n     * @param b - defines the blue component to read from\n     * @returns the current Color3 object\n     */\n    Color3.prototype.copyFromFloats = function (r, g, b) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        return this;\n    };\n    /**\n     * Updates the Color3 rgb values from the given floats\n     * @param r - defines the red component to read from\n     * @param g - defines the green component to read from\n     * @param b - defines the blue component to read from\n     * @returns the current Color3 object\n     */\n    Color3.prototype.set = function (r, g, b) {\n        return this.copyFromFloats(r, g, b);\n    };\n    /**\n     * Compute the Color3 hexadecimal code as a string\n     * @returns a string containing the hexadecimal representation of the Color3 object\n     */\n    Color3.prototype.toHexString = function () {\n        var intR = (this.r * 255) | 0;\n        var intG = (this.g * 255) | 0;\n        var intB = (this.b * 255) | 0;\n        return \'#\' + Scalar_1.Scalar.ToHex(intR) + Scalar_1.Scalar.ToHex(intG) + Scalar_1.Scalar.ToHex(intB);\n    };\n    /**\n     * Computes a new Color3 converted from the current one to linear space\n     * @returns a new Color3 object\n     */\n    Color3.prototype.toLinearSpace = function () {\n        var convertedColor = new Color3();\n        this.toLinearSpaceToRef(convertedColor);\n        return convertedColor;\n    };\n    /**\n     * Converts the Color3 values to linear space and stores the result in "convertedColor"\n     * @param convertedColor - defines the Color3 object where to store the linear space version\n     * @returns the unmodified Color3\n     */\n    Color3.prototype.toLinearSpaceToRef = function (convertedColor) {\n        convertedColor.r = Math.pow(this.r, types_1.ToLinearSpace);\n        convertedColor.g = Math.pow(this.g, types_1.ToLinearSpace);\n        convertedColor.b = Math.pow(this.b, types_1.ToLinearSpace);\n        return this;\n    };\n    /**\n     * Computes a new Color3 converted from the current one to gamma space\n     * @returns a new Color3 object\n     */\n    Color3.prototype.toGammaSpace = function () {\n        var convertedColor = new Color3();\n        this.toGammaSpaceToRef(convertedColor);\n        return convertedColor;\n    };\n    /**\n     * Converts the Color3 values to gamma space and stores the result in "convertedColor"\n     * @param convertedColor - defines the Color3 object where to store the gamma space version\n     * @returns the unmodified Color3\n     */\n    Color3.prototype.toGammaSpaceToRef = function (convertedColor) {\n        convertedColor.r = Math.pow(this.r, types_1.ToGammaSpace);\n        convertedColor.g = Math.pow(this.g, types_1.ToGammaSpace);\n        convertedColor.b = Math.pow(this.b, types_1.ToGammaSpace);\n        return this;\n    };\n    /**\n     * Serializes Color3\n     */\n    Color3.prototype.toJSON = function () {\n        return {\n            r: this.r,\n            g: this.g,\n            b: this.b\n        };\n    };\n    return Color3;\n}());\nexports.Color3 = Color3;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Color3.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Color4.ts":
/*!*******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Color4.ts ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Scalar_1 = __webpack_require__(/*! ./Scalar */ "./packages/decentraland-ecs/src/decentraland/math/Scalar.ts");\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\n/**\n * Class used to hold a RBGA color\n * @public\n */\nvar Color4 = /** @class */ (function () {\n    /**\n     * Creates a new Color4 object from red, green, blue values, all between 0 and 1\n     * @param r - defines the red component (between 0 and 1, default is 0)\n     * @param g - defines the green component (between 0 and 1, default is 0)\n     * @param b - defines the blue component (between 0 and 1, default is 0)\n     * @param a - defines the alpha component (between 0 and 1, default is 1)\n     */\n    function Color4(\n    /**\n     * Defines the red component (between 0 and 1, default is 0)\n     */\n    r, \n    /**\n     * Defines the green component (between 0 and 1, default is 0)\n     */\n    g, \n    /**\n     * Defines the blue component (between 0 and 1, default is 0)\n     */\n    b, \n    /**\n     * Defines the alpha component (between 0 and 1, default is 1)\n     */\n    a) {\n        if (r === void 0) { r = 0; }\n        if (g === void 0) { g = 0; }\n        if (b === void 0) { b = 0; }\n        if (a === void 0) { a = 1; }\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n    // Statics\n    /**\n     * Creates a new Color4 from the string containing valid hexadecimal values\n     * @param hex - defines a string containing valid hexadecimal values\n     * @returns a new Color4 object\n     */\n    Color4.FromHexString = function (hex) {\n        if (hex.substring(0, 1) !== \'#\' || hex.length !== 9) {\n            return new Color4(0.0, 0.0, 0.0, 0.0);\n        }\n        var r = parseInt(hex.substring(1, 3), 16);\n        var g = parseInt(hex.substring(3, 5), 16);\n        var b = parseInt(hex.substring(5, 7), 16);\n        var a = parseInt(hex.substring(7, 9), 16);\n        return Color4.FromInts(r, g, b, a);\n    };\n    /**\n     * Creates a new Color4 object set with the linearly interpolated values of "amount" between the left Color4 object and the right Color4 object\n     * @param left - defines the start value\n     * @param right - defines the end value\n     * @param amount - defines the gradient factor\n     * @returns a new Color4 object\n     */\n    Color4.Lerp = function (left, right, amount) {\n        var result = new Color4(0.0, 0.0, 0.0, 0.0);\n        Color4.LerpToRef(left, right, amount, result);\n        return result;\n    };\n    /**\n     * Set the given "result" with the linearly interpolated values of "amount" between the left Color4 object and the right Color4 object\n     * @param left - defines the start value\n     * @param right - defines the end value\n     * @param amount - defines the gradient factor\n     * @param result - defines the Color4 object where to store data\n     */\n    Color4.LerpToRef = function (left, right, amount, result) {\n        result.r = left.r + (right.r - left.r) * amount;\n        result.g = left.g + (right.g - left.g) * amount;\n        result.b = left.b + (right.b - left.b) * amount;\n        result.a = left.a + (right.a - left.a) * amount;\n    };\n    /**\n     * Returns a Color4 value containing a red color\n     * @returns a new Color3 object\n     */\n    Color4.Red = function () {\n        return new Color4(1.0, 0, 0, 1.0);\n    };\n    /**\n     * Returns a Color4 value containing a green color\n     * @returns a new Color4 object\n     */\n    Color4.Green = function () {\n        return new Color4(0, 1.0, 0, 1.0);\n    };\n    /**\n     * Returns a Color4 value containing a blue color\n     * @returns a new Color4 object\n     */\n    Color4.Blue = function () {\n        return new Color4(0, 0, 1.0, 1.0);\n    };\n    /**\n     * Returns a Color4 value containing a black color\n     * @returns a new Color4 object\n     */\n    Color4.Black = function () {\n        return new Color4(0, 0, 0, 1);\n    };\n    /**\n     * Returns a Color4 value containing a white color\n     * @returns a new Color4 object\n     */\n    Color4.White = function () {\n        return new Color4(1, 1, 1, 1);\n    };\n    /**\n     * Returns a Color4 value containing a purple color\n     * @returns a new Color4 object\n     */\n    Color4.Purple = function () {\n        return new Color4(0.5, 0, 0.5, 1);\n    };\n    /**\n     * Returns a Color4 value containing a magenta color\n     * @returns a new Color4 object\n     */\n    Color4.Magenta = function () {\n        return new Color4(1, 0, 1, 1);\n    };\n    /**\n     * Returns a Color4 value containing a yellow color\n     * @returns a new Color4 object\n     */\n    Color4.Yellow = function () {\n        return new Color4(1, 1, 0, 1);\n    };\n    /**\n     * Returns a Color4 value containing a gray color\n     * @returns a new Color4 object\n     */\n    Color4.Gray = function () {\n        return new Color4(0.5, 0.5, 0.5, 1.0);\n    };\n    /**\n     * Returns a Color4 value containing a teal color\n     * @returns a new Color4 object\n     */\n    Color4.Teal = function () {\n        return new Color4(0, 1.0, 1.0, 1.0);\n    };\n    /**\n     * Returns a Color4 value containing a transparent color\n     * @returns a new Color4 object\n     */\n    Color4.Clear = function () {\n        return new Color4(0, 0, 0, 0);\n    };\n    /**\n     * Creates a new Color4 from a Color3 and an alpha value\n     * @param color3 - defines the source Color3 to read from\n     * @param alpha - defines the alpha component (1.0 by default)\n     * @returns a new Color4 object\n     */\n    Color4.FromColor3 = function (color3, alpha) {\n        if (alpha === void 0) { alpha = 1.0; }\n        return new Color4(color3.r, color3.g, color3.b, alpha);\n    };\n    /**\n     * Creates a new Color4 from the starting index element of the given array\n     * @param array - defines the source array to read from\n     * @param offset - defines the offset in the source array\n     * @returns a new Color4 object\n     */\n    Color4.FromArray = function (array, offset) {\n        if (offset === void 0) { offset = 0; }\n        return new Color4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n    };\n    /**\n     * Creates a new Color3 from integer values (less than 256)\n     * @param r - defines the red component to read from (value between 0 and 255)\n     * @param g - defines the green component to read from (value between 0 and 255)\n     * @param b - defines the blue component to read from (value between 0 and 255)\n     * @param a - defines the alpha component to read from (value between 0 and 255)\n     * @returns a new Color3 object\n     */\n    Color4.FromInts = function (r, g, b, a) {\n        return new Color4(r / 255.0, g / 255.0, b / 255.0, a / 255.0);\n    };\n    /**\n     * Check the content of a given array and convert it to an array containing RGBA data\n     * If the original array was already containing count * 4 values then it is returned directly\n     * @param colors - defines the array to check\n     * @param count - defines the number of RGBA data to expect\n     * @returns an array containing count * 4 values (RGBA)\n     */\n    Color4.CheckColors4 = function (colors, count) {\n        // Check if color3 was used\n        if (colors.length === count * 3) {\n            var colors4 = [];\n            for (var index = 0; index < colors.length; index += 3) {\n                var newIndex = (index / 3) * 4;\n                colors4[newIndex] = colors[index];\n                colors4[newIndex + 1] = colors[index + 1];\n                colors4[newIndex + 2] = colors[index + 2];\n                colors4[newIndex + 3] = 1.0;\n            }\n            return colors4;\n        }\n        return colors;\n    };\n    // Operators\n    /**\n     * Adds in place the given Color4 values to the current Color4 object\n     * @param right - defines the second operand\n     * @returns the current updated Color4 object\n     */\n    Color4.prototype.addInPlace = function (right) {\n        this.r += right.r;\n        this.g += right.g;\n        this.b += right.b;\n        this.a += right.a;\n        return this;\n    };\n    /**\n     * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values\n     * @returns the new array\n     */\n    Color4.prototype.asArray = function () {\n        var result = new Array();\n        this.toArray(result, 0);\n        return result;\n    };\n    /**\n     * Stores from the starting index in the given array the Color4 successive values\n     * @param array - defines the array where to store the r,g,b components\n     * @param index - defines an optional index in the target array to define where to start storing values\n     * @returns the current Color4 object\n     */\n    Color4.prototype.toArray = function (array, index) {\n        if (index === void 0) { index = 0; }\n        array[index] = this.r;\n        array[index + 1] = this.g;\n        array[index + 2] = this.b;\n        array[index + 3] = this.a;\n        return this;\n    };\n    /**\n     * Creates a new Color4 set with the added values of the current Color4 and of the given one\n     * @param right - defines the second operand\n     * @returns a new Color4 object\n     */\n    Color4.prototype.add = function (right) {\n        return new Color4(this.r + right.r, this.g + right.g, this.b + right.b, this.a + right.a);\n    };\n    /**\n     * Creates a new Color4 set with the subtracted values of the given one from the current Color4\n     * @param right - defines the second operand\n     * @returns a new Color4 object\n     */\n    Color4.prototype.subtract = function (right) {\n        return new Color4(this.r - right.r, this.g - right.g, this.b - right.b, this.a - right.a);\n    };\n    /**\n     * Subtracts the given ones from the current Color4 values and stores the results in "result"\n     * @param right - defines the second operand\n     * @param result - defines the Color4 object where to store the result\n     * @returns the current Color4 object\n     */\n    Color4.prototype.subtractToRef = function (right, result) {\n        result.r = this.r - right.r;\n        result.g = this.g - right.g;\n        result.b = this.b - right.b;\n        result.a = this.a - right.a;\n        return this;\n    };\n    /**\n     * Creates a new Color4 with the current Color4 values multiplied by scale\n     * @param scale - defines the scaling factor to apply\n     * @returns a new Color4 object\n     */\n    Color4.prototype.scale = function (scale) {\n        return new Color4(this.r * scale, this.g * scale, this.b * scale, this.a * scale);\n    };\n    /**\n     * Multiplies the current Color4 values by scale and stores the result in "result"\n     * @param scale - defines the scaling factor to apply\n     * @param result - defines the Color4 object where to store the result\n     * @returns the current unmodified Color4\n     */\n    Color4.prototype.scaleToRef = function (scale, result) {\n        result.r = this.r * scale;\n        result.g = this.g * scale;\n        result.b = this.b * scale;\n        result.a = this.a * scale;\n        return this;\n    };\n    /**\n     * Scale the current Color4 values by a factor and add the result to a given Color4\n     * @param scale - defines the scale factor\n     * @param result - defines the Color4 object where to store the result\n     * @returns the unmodified current Color4\n     */\n    Color4.prototype.scaleAndAddToRef = function (scale, result) {\n        result.r += this.r * scale;\n        result.g += this.g * scale;\n        result.b += this.b * scale;\n        result.a += this.a * scale;\n        return this;\n    };\n    /**\n     * Clamps the rgb values by the min and max values and stores the result into "result"\n     * @param min - defines minimum clamping value (default is 0)\n     * @param max - defines maximum clamping value (default is 1)\n     * @param result - defines color to store the result into.\n     * @returns the cuurent Color4\n     */\n    Color4.prototype.clampToRef = function (min, max, result) {\n        if (min === void 0) { min = 0; }\n        if (max === void 0) { max = 1; }\n        result.r = Scalar_1.Scalar.Clamp(this.r, min, max);\n        result.g = Scalar_1.Scalar.Clamp(this.g, min, max);\n        result.b = Scalar_1.Scalar.Clamp(this.b, min, max);\n        result.a = Scalar_1.Scalar.Clamp(this.a, min, max);\n        return this;\n    };\n    /**\n     * Multipy an Color4 value by another and return a new Color4 object\n     * @param color - defines the Color4 value to multiply by\n     * @returns a new Color4 object\n     */\n    Color4.prototype.multiply = function (color) {\n        return new Color4(this.r * color.r, this.g * color.g, this.b * color.b, this.a * color.a);\n    };\n    /**\n     * Multipy a Color4 value by another and push the result in a reference value\n     * @param color - defines the Color4 value to multiply by\n     * @param result - defines the Color4 to fill the result in\n     * @returns the result Color4\n     */\n    Color4.prototype.multiplyToRef = function (color, result) {\n        result.r = this.r * color.r;\n        result.g = this.g * color.g;\n        result.b = this.b * color.b;\n        result.a = this.a * color.a;\n        return result;\n    };\n    /**\n     * Creates a string with the Color4 current values\n     * @returns the string representation of the Color4 object\n     */\n    Color4.prototype.toString = function () {\n        return \'{R: \' + this.r + \' G:\' + this.g + \' B:\' + this.b + \' A:\' + this.a + \'}\';\n    };\n    /**\n     * Returns the string "Color4"\n     * @returns "Color4"\n     */\n    Color4.prototype.getClassName = function () {\n        return \'Color4\';\n    };\n    /**\n     * Compute the Color4 hash code\n     * @returns an unique number that can be used to hash Color4 objects\n     */\n    Color4.prototype.getHashCode = function () {\n        var hash = this.r || 0;\n        hash = (hash * 397) ^ (this.g || 0);\n        hash = (hash * 397) ^ (this.b || 0);\n        hash = (hash * 397) ^ (this.a || 0);\n        return hash;\n    };\n    /**\n     * Creates a new Color4 copied from the current one\n     * @returns a new Color4 object\n     */\n    Color4.prototype.clone = function () {\n        return new Color4(this.r, this.g, this.b, this.a);\n    };\n    /**\n     * Copies the given Color4 values into the current one\n     * @param source - defines the source Color4 object\n     * @returns the current updated Color4 object\n     */\n    Color4.prototype.copyFrom = function (source) {\n        this.r = source.r;\n        this.g = source.g;\n        this.b = source.b;\n        this.a = source.a;\n        return this;\n    };\n    /**\n     * Copies the given float values into the current one\n     * @param r - defines the red component to read from\n     * @param g - defines the green component to read from\n     * @param b - defines the blue component to read from\n     * @param a - defines the alpha component to read from\n     * @returns the current updated Color4 object\n     */\n    Color4.prototype.copyFromFloats = function (r, g, b, a) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n        return this;\n    };\n    /**\n     * Copies the given float values into the current one\n     * @param r - defines the red component to read from\n     * @param g - defines the green component to read from\n     * @param b - defines the blue component to read from\n     * @param a - defines the alpha component to read from\n     * @returns the current updated Color4 object\n     */\n    Color4.prototype.set = function (r, g, b, a) {\n        return this.copyFromFloats(r, g, b, a);\n    };\n    /**\n     * Compute the Color4 hexadecimal code as a string\n     * @returns a string containing the hexadecimal representation of the Color4 object\n     */\n    Color4.prototype.toHexString = function () {\n        var intR = (this.r * 255) | 0;\n        var intG = (this.g * 255) | 0;\n        var intB = (this.b * 255) | 0;\n        var intA = (this.a * 255) | 0;\n        return \'#\' + Scalar_1.Scalar.ToHex(intR) + Scalar_1.Scalar.ToHex(intG) + Scalar_1.Scalar.ToHex(intB) + Scalar_1.Scalar.ToHex(intA);\n    };\n    /**\n     * Computes a new Color4 converted from the current one to linear space\n     * @returns a new Color4 object\n     */\n    Color4.prototype.toLinearSpace = function () {\n        var convertedColor = new Color4();\n        this.toLinearSpaceToRef(convertedColor);\n        return convertedColor;\n    };\n    /**\n     * Converts the Color4 values to linear space and stores the result in "convertedColor"\n     * @param convertedColor - defines the Color4 object where to store the linear space version\n     * @returns the unmodified Color4\n     */\n    Color4.prototype.toLinearSpaceToRef = function (convertedColor) {\n        convertedColor.r = Math.pow(this.r, types_1.ToLinearSpace);\n        convertedColor.g = Math.pow(this.g, types_1.ToLinearSpace);\n        convertedColor.b = Math.pow(this.b, types_1.ToLinearSpace);\n        convertedColor.a = this.a;\n        return this;\n    };\n    /**\n     * Computes a new Color4 converted from the current one to gamma space\n     * @returns a new Color4 object\n     */\n    Color4.prototype.toGammaSpace = function () {\n        var convertedColor = new Color4();\n        this.toGammaSpaceToRef(convertedColor);\n        return convertedColor;\n    };\n    /**\n     * Converts the Color4 values to gamma space and stores the result in "convertedColor"\n     * @param convertedColor - defines the Color4 object where to store the gamma space version\n     * @returns the unmodified Color4\n     */\n    Color4.prototype.toGammaSpaceToRef = function (convertedColor) {\n        convertedColor.r = Math.pow(this.r, types_1.ToGammaSpace);\n        convertedColor.g = Math.pow(this.g, types_1.ToGammaSpace);\n        convertedColor.b = Math.pow(this.b, types_1.ToGammaSpace);\n        convertedColor.a = this.a;\n        return this;\n    };\n    return Color4;\n}());\nexports.Color4 = Color4;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Color4.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Curve3d.ts":
/*!********************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Curve3d.ts ***!
  \********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Vector3_1 = __webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts");\n/**\n * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\n * A Curve3 is designed from a series of successive Vector3.\n * {@link https://doc.babylonjs.com/how_to/how_to_use_curve3 }\n * @public\n */\nvar Curve3 = /** @class */ (function () {\n    /**\n     * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\n     * A Curve3 is designed from a series of successive Vector3.\n     * {@link http://doc.babylonjs.com/tutorials/How_to_use_Curve3#curve3-object | Tutorial }\n     * @param points - points which make up the curve\n     */\n    function Curve3(points) {\n        this._length = 0.0;\n        this._points = points;\n        this._length = this._computeLength(points);\n    }\n    /**\n     * Returns a Curve3 object along a Quadratic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#quadratic-bezier-curve\n     * @param v0 - (Vector3) the origin point of the Quadratic Bezier\n     * @param v1 - (Vector3) the control point\n     * @param v2 - (Vector3) the end point of the Quadratic Bezier\n     * @param nbPoints - (integer) the wanted number of points in the curve\n     * @returns the created Curve3\n     */\n    Curve3.CreateQuadraticBezier = function (v0, v1, v2, nbPoints) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        nbPoints = nbPoints > 2 ? nbPoints : 3;\n        var bez = new Array();\n        var equation = function (t, val0, val1, val2) {\n            var res = (1.0 - t) * (1.0 - t) * val0 + 2.0 * t * (1.0 - t) * val1 + t * t * val2;\n            return res;\n        };\n        for (var i = 0; i <= nbPoints; i++) {\n            bez.push(new Vector3_1.Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x), equation(i / nbPoints, v0.y, v1.y, v2.y), equation(i / nbPoints, v0.z, v1.z, v2.z)));\n        }\n        return new Curve3(bez);\n    };\n    /**\n     * Returns a Curve3 object along a Cubic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#cubic-bezier-curve\n     * @param v0 - (Vector3) the origin point of the Cubic Bezier\n     * @param v1 - (Vector3) the first control point\n     * @param v2 - (Vector3) the second control point\n     * @param v3 - (Vector3) the end point of the Cubic Bezier\n     * @param nbPoints - (integer) the wanted number of points in the curve\n     * @returns the created Curve3\n     */\n    Curve3.CreateCubicBezier = function (v0, v1, v2, v3, nbPoints) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        nbPoints = nbPoints > 3 ? nbPoints : 4;\n        var bez = new Array();\n        var equation = function (t, val0, val1, val2, val3) {\n            var res = (1.0 - t) * (1.0 - t) * (1.0 - t) * val0 +\n                3.0 * t * (1.0 - t) * (1.0 - t) * val1 +\n                3.0 * t * t * (1.0 - t) * val2 +\n                t * t * t * val3;\n            return res;\n        };\n        for (var i = 0; i <= nbPoints; i++) {\n            bez.push(new Vector3_1.Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x, v3.x), equation(i / nbPoints, v0.y, v1.y, v2.y, v3.y), equation(i / nbPoints, v0.z, v1.z, v2.z, v3.z)));\n        }\n        return new Curve3(bez);\n    };\n    /**\n     * Returns a Curve3 object along a Hermite Spline curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#hermite-spline\n     * @param p1 - (Vector3) the origin point of the Hermite Spline\n     * @param t1 - (Vector3) the tangent vector at the origin point\n     * @param p2 - (Vector3) the end point of the Hermite Spline\n     * @param t2 - (Vector3) the tangent vector at the end point\n     * @param nbPoints - (integer) the wanted number of points in the curve\n     * @returns the created Curve3\n     */\n    Curve3.CreateHermiteSpline = function (p1, t1, p2, t2, nbPoints) {\n        var hermite = new Array();\n        var step = 1.0 / nbPoints;\n        for (var i = 0; i <= nbPoints; i++) {\n            hermite.push(Vector3_1.Vector3.Hermite(p1, t1, p2, t2, i * step));\n        }\n        return new Curve3(hermite);\n    };\n    /**\n     * Returns a Curve3 object along a CatmullRom Spline curve :\n     * @param points - (array of Vector3) the points the spline must pass through. At least, four points required\n     * @param nbPoints - (integer) the wanted number of points between each curve control points\n     * @param closed - (boolean) optional with default false, when true forms a closed loop from the points\n     * @returns the created Curve3\n     */\n    Curve3.CreateCatmullRomSpline = function (points, nbPoints, closed) {\n        var catmullRom = new Array();\n        var step = 1.0 / nbPoints;\n        var amount = 0.0;\n        if (closed) {\n            var pointsCount = points.length;\n            for (var i = 0; i < pointsCount; i++) {\n                amount = 0;\n                for (var c = 0; c < nbPoints; c++) {\n                    catmullRom.push(Vector3_1.Vector3.CatmullRom(points[i % pointsCount], points[(i + 1) % pointsCount], points[(i + 2) % pointsCount], points[(i + 3) % pointsCount], amount));\n                    amount += step;\n                }\n            }\n            catmullRom.push(catmullRom[0]);\n        }\n        else {\n            var totalPoints = new Array();\n            totalPoints.push(points[0].clone());\n            Array.prototype.push.apply(totalPoints, points);\n            totalPoints.push(points[points.length - 1].clone());\n            var i = 0;\n            for (i = 0; i < totalPoints.length - 3; i++) {\n                amount = 0;\n                for (var c = 0; c < nbPoints; c++) {\n                    catmullRom.push(Vector3_1.Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\n                    amount += step;\n                }\n            }\n            i--;\n            catmullRom.push(Vector3_1.Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\n        }\n        return new Curve3(catmullRom);\n    };\n    /**\n     * @returns the Curve3 stored array of successive Vector3\n     */\n    Curve3.prototype.getPoints = function () {\n        return this._points;\n    };\n    /**\n     * @returns the computed length (float) of the curve.\n     */\n    Curve3.prototype.length = function () {\n        return this._length;\n    };\n    /**\n     * Returns a new instance of Curve3 object : var curve = curveA.continue(curveB);\n     * This new Curve3 is built by translating and sticking the curveB at the end of the curveA.\n     * curveA and curveB keep unchanged.\n     * @param curve - the curve to continue from this curve\n     * @returns the newly constructed curve\n     */\n    Curve3.prototype.continue = function (curve) {\n        var lastPoint = this._points[this._points.length - 1];\n        var continuedPoints = this._points.slice();\n        var curvePoints = curve.getPoints();\n        for (var i = 1; i < curvePoints.length; i++) {\n            continuedPoints.push(curvePoints[i].subtract(curvePoints[0]).add(lastPoint));\n        }\n        var continuedCurve = new Curve3(continuedPoints);\n        return continuedCurve;\n    };\n    Curve3.prototype._computeLength = function (path) {\n        var l = 0;\n        for (var i = 1; i < path.length; i++) {\n            l += path[i].subtract(path[i - 1]).length();\n        }\n        return l;\n    };\n    return Curve3;\n}());\nexports.Curve3 = Curve3;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Curve3d.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Furstum.ts":
/*!********************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Furstum.ts ***!
  \********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Plane_1 = __webpack_require__(/*! ./Plane */ "./packages/decentraland-ecs/src/decentraland/math/Plane.ts");\n/**\n * Reprasents a camera frustum\n * @beta\n */\nvar Frustum = /** @class */ (function () {\n    function Frustum() {\n    }\n    /**\n     * Gets the planes representing the frustum\n     * @param transform - matrix to be applied to the returned planes\n     * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\n     */\n    Frustum.GetPlanes = function (transform) {\n        var frustumPlanes = [];\n        for (var index = 0; index < 6; index++) {\n            frustumPlanes.push(new Plane_1.Plane(0.0, 0.0, 0.0, 0.0));\n        }\n        Frustum.GetPlanesToRef(transform, frustumPlanes);\n        return frustumPlanes;\n    };\n    /**\n     * Gets the near frustum plane transformed by the transform matrix\n     * @param transform - transformation matrix to be applied to the resulting frustum plane\n     * @param frustumPlane - the resuling frustum plane\n     */\n    Frustum.GetNearPlaneToRef = function (transform, frustumPlane) {\n        var m = transform.m;\n        frustumPlane.normal.x = m[3] + m[2];\n        frustumPlane.normal.y = m[7] + m[6];\n        frustumPlane.normal.z = m[11] + m[10];\n        frustumPlane.d = m[15] + m[14];\n        frustumPlane.normalize();\n    };\n    /**\n     * Gets the far frustum plane transformed by the transform matrix\n     * @param transform - transformation matrix to be applied to the resulting frustum plane\n     * @param frustumPlane - the resuling frustum plane\n     */\n    Frustum.GetFarPlaneToRef = function (transform, frustumPlane) {\n        var m = transform.m;\n        frustumPlane.normal.x = m[3] - m[2];\n        frustumPlane.normal.y = m[7] - m[6];\n        frustumPlane.normal.z = m[11] - m[10];\n        frustumPlane.d = m[15] - m[14];\n        frustumPlane.normalize();\n    };\n    /**\n     * Gets the left frustum plane transformed by the transform matrix\n     * @param transform - transformation matrix to be applied to the resulting frustum plane\n     * @param frustumPlane - the resuling frustum plane\n     */\n    Frustum.GetLeftPlaneToRef = function (transform, frustumPlane) {\n        var m = transform.m;\n        frustumPlane.normal.x = m[3] + m[0];\n        frustumPlane.normal.y = m[7] + m[4];\n        frustumPlane.normal.z = m[11] + m[8];\n        frustumPlane.d = m[15] + m[12];\n        frustumPlane.normalize();\n    };\n    /**\n     * Gets the right frustum plane transformed by the transform matrix\n     * @param transform - transformation matrix to be applied to the resulting frustum plane\n     * @param frustumPlane - the resuling frustum plane\n     */\n    Frustum.GetRightPlaneToRef = function (transform, frustumPlane) {\n        var m = transform.m;\n        frustumPlane.normal.x = m[3] - m[0];\n        frustumPlane.normal.y = m[7] - m[4];\n        frustumPlane.normal.z = m[11] - m[8];\n        frustumPlane.d = m[15] - m[12];\n        frustumPlane.normalize();\n    };\n    /**\n     * Gets the top frustum plane transformed by the transform matrix\n     * @param transform - transformation matrix to be applied to the resulting frustum plane\n     * @param frustumPlane - the resuling frustum plane\n     */\n    Frustum.GetTopPlaneToRef = function (transform, frustumPlane) {\n        var m = transform.m;\n        frustumPlane.normal.x = m[3] - m[1];\n        frustumPlane.normal.y = m[7] - m[5];\n        frustumPlane.normal.z = m[11] - m[9];\n        frustumPlane.d = m[15] - m[13];\n        frustumPlane.normalize();\n    };\n    /**\n     * Gets the bottom frustum plane transformed by the transform matrix\n     * @param transform - transformation matrix to be applied to the resulting frustum plane\n     * @param frustumPlane - the resuling frustum plane\n     */\n    Frustum.GetBottomPlaneToRef = function (transform, frustumPlane) {\n        var m = transform.m;\n        frustumPlane.normal.x = m[3] + m[1];\n        frustumPlane.normal.y = m[7] + m[5];\n        frustumPlane.normal.z = m[11] + m[9];\n        frustumPlane.d = m[15] + m[13];\n        frustumPlane.normalize();\n    };\n    /**\n     * Sets the given array "frustumPlanes" with the 6 Frustum planes computed by the given transformation matrix.\n     * @param transform - transformation matrix to be applied to the resulting frustum planes\n     * @param frustumPlanes - the resuling frustum planes\n     */\n    Frustum.GetPlanesToRef = function (transform, frustumPlanes) {\n        // Near\n        Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);\n        // Far\n        Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);\n        // Left\n        Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);\n        // Right\n        Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);\n        // Top\n        Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);\n        // Bottom\n        Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\n    };\n    return Frustum;\n}());\nexports.Frustum = Frustum;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Furstum.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Matrix.ts":
/*!*******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Matrix.ts ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Vector3_1 = __webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts");\nvar Quaternion_1 = __webpack_require__(/*! ./Quaternion */ "./packages/decentraland-ecs/src/decentraland/math/Quaternion.ts");\nvar preallocatedVariables_1 = __webpack_require__(/*! ./preallocatedVariables */ "./packages/decentraland-ecs/src/decentraland/math/preallocatedVariables.ts");\nvar Vector4_1 = __webpack_require__(/*! ./Vector4 */ "./packages/decentraland-ecs/src/decentraland/math/Vector4.ts");\n/**\n * Class used to store matrix data (4x4)\n * @public\n */\nvar Matrix = /** @class */ (function () {\n    /**\n     * Creates an empty matrix (filled with zeros)\n     */\n    function Matrix() {\n        this._isIdentity = false;\n        this._isIdentityDirty = true;\n        this._isIdentity3x2 = true;\n        this._isIdentity3x2Dirty = true;\n        this._m = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        this._updateIdentityStatus(false);\n    }\n    Object.defineProperty(Matrix.prototype, "m", {\n        /**\n         * Gets the internal data of the matrix\n         */\n        get: function () {\n            return this._m;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Matrix, "IdentityReadOnly", {\n        /**\n         * Gets an identity matrix that must not be updated\n         */\n        get: function () {\n            return Matrix._identityReadOnly;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Statics\n    /**\n     * Creates a matrix from an array\n     * @param array - defines the source array\n     * @param offset - defines an offset in the source array\n     * @returns a new Matrix set from the starting index of the given array\n     */\n    Matrix.FromArray = function (array, offset) {\n        if (offset === void 0) { offset = 0; }\n        var result = new Matrix();\n        Matrix.FromArrayToRef(array, offset, result);\n        return result;\n    };\n    /**\n     * Copy the content of an array into a given matrix\n     * @param array - defines the source array\n     * @param offset - defines an offset in the source array\n     * @param result - defines the target matrix\n     */\n    Matrix.FromArrayToRef = function (array, offset, result) {\n        for (var index = 0; index < 16; index++) {\n            result._m[index] = array[index + offset];\n        }\n        result._markAsUpdated();\n    };\n    /**\n     * Stores an array into a matrix after having multiplied each component by a given factor\n     * @param array - defines the source array\n     * @param offset - defines the offset in the source array\n     * @param scale - defines the scaling factor\n     * @param result - defines the target matrix\n     */\n    Matrix.FromFloatArrayToRefScaled = function (array, offset, scale, result) {\n        for (var index = 0; index < 16; index++) {\n            result._m[index] = array[index + offset] * scale;\n        }\n        result._markAsUpdated();\n    };\n    /**\n     * Stores a list of values (16) inside a given matrix\n     * @param initialM11 - defines 1st value of 1st row\n     * @param initialM12 - defines 2nd value of 1st row\n     * @param initialM13 - defines 3rd value of 1st row\n     * @param initialM14 - defines 4th value of 1st row\n     * @param initialM21 - defines 1st value of 2nd row\n     * @param initialM22 - defines 2nd value of 2nd row\n     * @param initialM23 - defines 3rd value of 2nd row\n     * @param initialM24 - defines 4th value of 2nd row\n     * @param initialM31 - defines 1st value of 3rd row\n     * @param initialM32 - defines 2nd value of 3rd row\n     * @param initialM33 - defines 3rd value of 3rd row\n     * @param initialM34 - defines 4th value of 3rd row\n     * @param initialM41 - defines 1st value of 4th row\n     * @param initialM42 - defines 2nd value of 4th row\n     * @param initialM43 - defines 3rd value of 4th row\n     * @param initialM44 - defines 4th value of 4th row\n     * @param result - defines the target matrix\n     */\n    Matrix.FromValuesToRef = function (initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result) {\n        var m = result._m;\n        m[0] = initialM11;\n        m[1] = initialM12;\n        m[2] = initialM13;\n        m[3] = initialM14;\n        m[4] = initialM21;\n        m[5] = initialM22;\n        m[6] = initialM23;\n        m[7] = initialM24;\n        m[8] = initialM31;\n        m[9] = initialM32;\n        m[10] = initialM33;\n        m[11] = initialM34;\n        m[12] = initialM41;\n        m[13] = initialM42;\n        m[14] = initialM43;\n        m[15] = initialM44;\n        result._markAsUpdated();\n    };\n    /**\n     * Creates new matrix from a list of values (16)\n     * @param initialM11 - defines 1st value of 1st row\n     * @param initialM12 - defines 2nd value of 1st row\n     * @param initialM13 - defines 3rd value of 1st row\n     * @param initialM14 - defines 4th value of 1st row\n     * @param initialM21 - defines 1st value of 2nd row\n     * @param initialM22 - defines 2nd value of 2nd row\n     * @param initialM23 - defines 3rd value of 2nd row\n     * @param initialM24 - defines 4th value of 2nd row\n     * @param initialM31 - defines 1st value of 3rd row\n     * @param initialM32 - defines 2nd value of 3rd row\n     * @param initialM33 - defines 3rd value of 3rd row\n     * @param initialM34 - defines 4th value of 3rd row\n     * @param initialM41 - defines 1st value of 4th row\n     * @param initialM42 - defines 2nd value of 4th row\n     * @param initialM43 - defines 3rd value of 4th row\n     * @param initialM44 - defines 4th value of 4th row\n     * @returns the new matrix\n     */\n    Matrix.FromValues = function (initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44) {\n        var result = new Matrix();\n        var m = result._m;\n        m[0] = initialM11;\n        m[1] = initialM12;\n        m[2] = initialM13;\n        m[3] = initialM14;\n        m[4] = initialM21;\n        m[5] = initialM22;\n        m[6] = initialM23;\n        m[7] = initialM24;\n        m[8] = initialM31;\n        m[9] = initialM32;\n        m[10] = initialM33;\n        m[11] = initialM34;\n        m[12] = initialM41;\n        m[13] = initialM42;\n        m[14] = initialM43;\n        m[15] = initialM44;\n        result._markAsUpdated();\n        return result;\n    };\n    /**\n     * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n     * @param scale - defines the scale vector3\n     * @param rotation - defines the rotation quaternion\n     * @param translation - defines the translation vector3\n     * @returns a new matrix\n     */\n    Matrix.Compose = function (scale, rotation, translation) {\n        var result = new Matrix();\n        Matrix.ComposeToRef(scale, rotation, translation, result);\n        return result;\n    };\n    /**\n     * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n     * @param scale - defines the scale vector3\n     * @param rotation - defines the rotation quaternion\n     * @param translation - defines the translation vector3\n     * @param result - defines the target matrix\n     */\n    Matrix.ComposeToRef = function (scale, rotation, translation, result) {\n        Matrix.ScalingToRef(scale.x, scale.y, scale.z, preallocatedVariables_1.MathTmp.Matrix[1]);\n        rotation.toRotationMatrix(preallocatedVariables_1.MathTmp.Matrix[0]);\n        preallocatedVariables_1.MathTmp.Matrix[1].multiplyToRef(preallocatedVariables_1.MathTmp.Matrix[0], result);\n        result.setTranslation(translation);\n    };\n    /**\n     * Creates a new identity matrix\n     * @returns a new identity matrix\n     */\n    Matrix.Identity = function () {\n        var identity = Matrix.FromValues(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n        identity._updateIdentityStatus(true);\n        return identity;\n    };\n    /**\n     * Creates a new identity matrix and stores the result in a given matrix\n     * @param result - defines the target matrix\n     */\n    Matrix.IdentityToRef = function (result) {\n        Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n        result._updateIdentityStatus(true);\n    };\n    /**\n     * Creates a new zero matrix\n     * @returns a new zero matrix\n     */\n    Matrix.Zero = function () {\n        var zero = Matrix.FromValues(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n        zero._updateIdentityStatus(false);\n        return zero;\n    };\n    /**\n     * Creates a new rotation matrix for "angle" radians around the X axis\n     * @param angle - defines the angle (in radians) to use\n     * @returns the new matrix\n     */\n    Matrix.RotationX = function (angle) {\n        var result = new Matrix();\n        Matrix.RotationXToRef(angle, result);\n        return result;\n    };\n    /**\n     * Creates a new matrix as the invert of a given matrix\n     * @param source - defines the source matrix\n     * @returns the new matrix\n     */\n    Matrix.Invert = function (source) {\n        var result = new Matrix();\n        source.invertToRef(result);\n        return result;\n    };\n    /**\n     * Creates a new rotation matrix for "angle" radians around the X axis and stores it in a given matrix\n     * @param angle - defines the angle (in radians) to use\n     * @param result - defines the target matrix\n     */\n    Matrix.RotationXToRef = function (angle, result) {\n        var s = Math.sin(angle);\n        var c = Math.cos(angle);\n        Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n        result._updateIdentityStatus(c === 1 && s === 0);\n    };\n    /**\n     * Creates a new rotation matrix for "angle" radians around the Y axis\n     * @param angle - defines the angle (in radians) to use\n     * @returns the new matrix\n     */\n    Matrix.RotationY = function (angle) {\n        var result = new Matrix();\n        Matrix.RotationYToRef(angle, result);\n        return result;\n    };\n    /**\n     * Creates a new rotation matrix for "angle" radians around the Y axis and stores it in a given matrix\n     * @param angle - defines the angle (in radians) to use\n     * @param result - defines the target matrix\n     */\n    Matrix.RotationYToRef = function (angle, result) {\n        var s = Math.sin(angle);\n        var c = Math.cos(angle);\n        Matrix.FromValuesToRef(c, 0.0, -s, 0.0, 0.0, 1.0, 0.0, 0.0, s, 0.0, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n        result._updateIdentityStatus(c === 1 && s === 0);\n    };\n    /**\n     * Creates a new rotation matrix for "angle" radians around the Z axis\n     * @param angle - defines the angle (in radians) to use\n     * @returns the new matrix\n     */\n    Matrix.RotationZ = function (angle) {\n        var result = new Matrix();\n        Matrix.RotationZToRef(angle, result);\n        return result;\n    };\n    /**\n     * Creates a new rotation matrix for "angle" radians around the Z axis and stores it in a given matrix\n     * @param angle - defines the angle (in radians) to use\n     * @param result - defines the target matrix\n     */\n    Matrix.RotationZToRef = function (angle, result) {\n        var s = Math.sin(angle);\n        var c = Math.cos(angle);\n        Matrix.FromValuesToRef(c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n        result._updateIdentityStatus(c === 1 && s === 0);\n    };\n    /**\n     * Creates a new rotation matrix for "angle" radians around the given axis\n     * @param axis - defines the axis to use\n     * @param angle - defines the angle (in radians) to use\n     * @returns the new matrix\n     */\n    Matrix.RotationAxis = function (axis, angle) {\n        var result = new Matrix();\n        Matrix.RotationAxisToRef(axis, angle, result);\n        return result;\n    };\n    /**\n     * Creates a new rotation matrix for "angle" radians around the given axis and stores it in a given matrix\n     * @param axis - defines the axis to use\n     * @param angle - defines the angle (in radians) to use\n     * @param result - defines the target matrix\n     */\n    Matrix.RotationAxisToRef = function (axis, angle, result) {\n        var s = Math.sin(-angle);\n        var c = Math.cos(-angle);\n        var c1 = 1 - c;\n        axis.normalize();\n        var m = result._m;\n        m[0] = axis.x * axis.x * c1 + c;\n        m[1] = axis.x * axis.y * c1 - axis.z * s;\n        m[2] = axis.x * axis.z * c1 + axis.y * s;\n        m[3] = 0.0;\n        m[4] = axis.y * axis.x * c1 + axis.z * s;\n        m[5] = axis.y * axis.y * c1 + c;\n        m[6] = axis.y * axis.z * c1 - axis.x * s;\n        m[7] = 0.0;\n        m[8] = axis.z * axis.x * c1 - axis.y * s;\n        m[9] = axis.z * axis.y * c1 + axis.x * s;\n        m[10] = axis.z * axis.z * c1 + c;\n        m[11] = 0.0;\n        m[12] = 0.0;\n        m[13] = 0.0;\n        m[14] = 0.0;\n        m[15] = 1.0;\n        result._markAsUpdated();\n    };\n    /**\n     * Creates a rotation matrix\n     * @param yaw - defines the yaw angle in radians (Y axis)\n     * @param pitch - defines the pitch angle in radians (X axis)\n     * @param roll - defines the roll angle in radians (X axis)\n     * @returns the new rotation matrix\n     */\n    Matrix.RotationYawPitchRoll = function (yaw, pitch, roll) {\n        var result = new Matrix();\n        Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, result);\n        return result;\n    };\n    /**\n     * Creates a rotation matrix and stores it in a given matrix\n     * @param yaw - defines the yaw angle in radians (Y axis)\n     * @param pitch - defines the pitch angle in radians (X axis)\n     * @param roll - defines the roll angle in radians (X axis)\n     * @param result - defines the target matrix\n     */\n    Matrix.RotationYawPitchRollToRef = function (yaw, pitch, roll, result) {\n        Quaternion_1.Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, preallocatedVariables_1.MathTmp.Quaternion[0]);\n        preallocatedVariables_1.MathTmp.Quaternion[0].toRotationMatrix(result);\n    };\n    /**\n     * Creates a scaling matrix\n     * @param x - defines the scale factor on X axis\n     * @param y - defines the scale factor on Y axis\n     * @param z - defines the scale factor on Z axis\n     * @returns the new matrix\n     */\n    Matrix.Scaling = function (x, y, z) {\n        var result = new Matrix();\n        Matrix.ScalingToRef(x, y, z, result);\n        return result;\n    };\n    /**\n     * Creates a scaling matrix and stores it in a given matrix\n     * @param x - defines the scale factor on X axis\n     * @param y - defines the scale factor on Y axis\n     * @param z - defines the scale factor on Z axis\n     * @param result - defines the target matrix\n     */\n    Matrix.ScalingToRef = function (x, y, z, result) {\n        Matrix.FromValuesToRef(x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n        result._updateIdentityStatus(x === 1 && y === 1 && z === 1);\n    };\n    /**\n     * Creates a translation matrix\n     * @param x - defines the translation on X axis\n     * @param y - defines the translation on Y axis\n     * @param z - defines the translationon Z axis\n     * @returns the new matrix\n     */\n    Matrix.Translation = function (x, y, z) {\n        var result = new Matrix();\n        Matrix.TranslationToRef(x, y, z, result);\n        return result;\n    };\n    /**\n     * Creates a translation matrix and stores it in a given matrix\n     * @param x - defines the translation on X axis\n     * @param y - defines the translation on Y axis\n     * @param z - defines the translationon Z axis\n     * @param result - defines the target matrix\n     */\n    Matrix.TranslationToRef = function (x, y, z, result) {\n        Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0, result);\n        result._updateIdentityStatus(x === 0 && y === 0 && z === 0);\n    };\n    /**\n     * Returns a new Matrix whose values are the interpolated values for "gradient" (float) between the ones of the matrices "startValue" and "endValue".\n     * @param startValue - defines the start value\n     * @param endValue - defines the end value\n     * @param gradient - defines the gradient factor\n     * @returns the new matrix\n     */\n    Matrix.Lerp = function (startValue, endValue, gradient) {\n        var result = new Matrix();\n        Matrix.LerpToRef(startValue, endValue, gradient, result);\n        return result;\n    };\n    /**\n     * Set the given matrix "result" as the interpolated values for "gradient" (float) between the ones of the matrices "startValue" and "endValue".\n     * @param startValue - defines the start value\n     * @param endValue - defines the end value\n     * @param gradient - defines the gradient factor\n     * @param result - defines the Matrix object where to store data\n     */\n    Matrix.LerpToRef = function (startValue, endValue, gradient, result) {\n        for (var index = 0; index < 16; index++) {\n            result._m[index] = startValue._m[index] * (1.0 - gradient) + endValue._m[index] * gradient;\n        }\n        result._markAsUpdated();\n    };\n    /**\n     * Builds a new matrix whose values are computed by:\n     * * decomposing the the "startValue" and "endValue" matrices into their respective scale, rotation and translation matrices\n     * * interpolating for "gradient" (float) the values between each of these decomposed matrices between the start and the end\n     * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n     * @param startValue - defines the first matrix\n     * @param endValue - defines the second matrix\n     * @param gradient - defines the gradient between the two matrices\n     * @returns the new matrix\n     */\n    Matrix.DecomposeLerp = function (startValue, endValue, gradient) {\n        var result = new Matrix();\n        Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\n        return result;\n    };\n    /**\n     * Update a matrix to values which are computed by:\n     * * decomposing the the "startValue" and "endValue" matrices into their respective scale, rotation and translation matrices\n     * * interpolating for "gradient" (float) the values between each of these decomposed matrices between the start and the end\n     * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n     * @param startValue - defines the first matrix\n     * @param endValue - defines the second matrix\n     * @param gradient - defines the gradient between the two matrices\n     * @param result - defines the target matrix\n     */\n    Matrix.DecomposeLerpToRef = function (startValue, endValue, gradient, result) {\n        var startScale = preallocatedVariables_1.MathTmp.Vector3[0];\n        var startRotation = preallocatedVariables_1.MathTmp.Quaternion[0];\n        var startTranslation = preallocatedVariables_1.MathTmp.Vector3[1];\n        startValue.decompose(startScale, startRotation, startTranslation);\n        var endScale = preallocatedVariables_1.MathTmp.Vector3[2];\n        var endRotation = preallocatedVariables_1.MathTmp.Quaternion[1];\n        var endTranslation = preallocatedVariables_1.MathTmp.Vector3[3];\n        endValue.decompose(endScale, endRotation, endTranslation);\n        var resultScale = preallocatedVariables_1.MathTmp.Vector3[4];\n        Vector3_1.Vector3.LerpToRef(startScale, endScale, gradient, resultScale);\n        var resultRotation = preallocatedVariables_1.MathTmp.Quaternion[2];\n        Quaternion_1.Quaternion.SlerpToRef(startRotation, endRotation, gradient, resultRotation);\n        var resultTranslation = preallocatedVariables_1.MathTmp.Vector3[5];\n        Vector3_1.Vector3.LerpToRef(startTranslation, endTranslation, gradient, resultTranslation);\n        Matrix.ComposeToRef(resultScale, resultRotation, resultTranslation, result);\n    };\n    /**\n     * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like "up"\n     * This function works in left handed mode\n     * @param eye - defines the final position of the entity\n     * @param target - defines where the entity should look at\n     * @param up - defines the up vector for the entity\n     * @returns the new matrix\n     */\n    Matrix.LookAtLH = function (eye, target, up) {\n        var result = new Matrix();\n        Matrix.LookAtLHToRef(eye, target, up, result);\n        return result;\n    };\n    /**\n     * Sets the given "result" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like "up".\n     * This function works in left handed mode\n     * @param eye - defines the final position of the entity\n     * @param target - defines where the entity should look at\n     * @param up - defines the up vector for the entity\n     * @param result - defines the target matrix\n     */\n    Matrix.LookAtLHToRef = function (eye, target, up, result) {\n        var xAxis = preallocatedVariables_1.MathTmp.Vector3[0];\n        var yAxis = preallocatedVariables_1.MathTmp.Vector3[1];\n        var zAxis = preallocatedVariables_1.MathTmp.Vector3[2];\n        // Z axis\n        target.subtractToRef(eye, zAxis);\n        zAxis.normalize();\n        // X axis\n        Vector3_1.Vector3.CrossToRef(up, zAxis, xAxis);\n        var xSquareLength = xAxis.lengthSquared();\n        if (xSquareLength === 0) {\n            xAxis.x = 1.0;\n        }\n        else {\n            xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n        }\n        // Y axis\n        Vector3_1.Vector3.CrossToRef(zAxis, xAxis, yAxis);\n        yAxis.normalize();\n        // Eye angles\n        var ex = -Vector3_1.Vector3.Dot(xAxis, eye);\n        var ey = -Vector3_1.Vector3.Dot(yAxis, eye);\n        var ez = -Vector3_1.Vector3.Dot(zAxis, eye);\n        Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);\n    };\n    /**\n     * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like "up"\n     * This function works in right handed mode\n     * @param eye - defines the final position of the entity\n     * @param target - defines where the entity should look at\n     * @param up - defines the up vector for the entity\n     * @returns the new matrix\n     */\n    Matrix.LookAtRH = function (eye, target, up) {\n        var result = new Matrix();\n        Matrix.LookAtRHToRef(eye, target, up, result);\n        return result;\n    };\n    /**\n     * Sets the given "result" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like "up".\n     * This function works in right handed mode\n     * @param eye - defines the final position of the entity\n     * @param target - defines where the entity should look at\n     * @param up - defines the up vector for the entity\n     * @param result - defines the target matrix\n     */\n    Matrix.LookAtRHToRef = function (eye, target, up, result) {\n        var xAxis = preallocatedVariables_1.MathTmp.Vector3[0];\n        var yAxis = preallocatedVariables_1.MathTmp.Vector3[1];\n        var zAxis = preallocatedVariables_1.MathTmp.Vector3[2];\n        // Z axis\n        eye.subtractToRef(target, zAxis);\n        zAxis.normalize();\n        // X axis\n        Vector3_1.Vector3.CrossToRef(up, zAxis, xAxis);\n        var xSquareLength = xAxis.lengthSquared();\n        if (xSquareLength === 0) {\n            xAxis.x = 1.0;\n        }\n        else {\n            xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n        }\n        // Y axis\n        Vector3_1.Vector3.CrossToRef(zAxis, xAxis, yAxis);\n        yAxis.normalize();\n        // Eye angles\n        var ex = -Vector3_1.Vector3.Dot(xAxis, eye);\n        var ey = -Vector3_1.Vector3.Dot(yAxis, eye);\n        var ez = -Vector3_1.Vector3.Dot(zAxis, eye);\n        Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);\n    };\n    /**\n     * Create a left-handed orthographic projection matrix\n     * @param width - defines the viewport width\n     * @param height - defines the viewport height\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @returns a new matrix as a left-handed orthographic projection matrix\n     */\n    Matrix.OrthoLH = function (width, height, znear, zfar) {\n        var matrix = new Matrix();\n        Matrix.OrthoLHToRef(width, height, znear, zfar, matrix);\n        return matrix;\n    };\n    /**\n     * Store a left-handed orthographic projection to a given matrix\n     * @param width - defines the viewport width\n     * @param height - defines the viewport height\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @param result - defines the target matrix\n     */\n    Matrix.OrthoLHToRef = function (width, height, znear, zfar, result) {\n        var n = znear;\n        var f = zfar;\n        var a = 2.0 / width;\n        var b = 2.0 / height;\n        var c = 2.0 / (f - n);\n        var d = -(f + n) / (f - n);\n        Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, 0.0, 0.0, d, 1.0, result);\n        result._updateIdentityStatus(a === 1 && b === 1 && c === 1 && d === 0);\n    };\n    /**\n     * Create a left-handed orthographic projection matrix\n     * @param left - defines the viewport left coordinate\n     * @param right - defines the viewport right coordinate\n     * @param bottom - defines the viewport bottom coordinate\n     * @param top - defines the viewport top coordinate\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @returns a new matrix as a left-handed orthographic projection matrix\n     */\n    Matrix.OrthoOffCenterLH = function (left, right, bottom, top, znear, zfar) {\n        var matrix = new Matrix();\n        Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix);\n        return matrix;\n    };\n    /**\n     * Stores a left-handed orthographic projection into a given matrix\n     * @param left - defines the viewport left coordinate\n     * @param right - defines the viewport right coordinate\n     * @param bottom - defines the viewport bottom coordinate\n     * @param top - defines the viewport top coordinate\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @param result - defines the target matrix\n     */\n    Matrix.OrthoOffCenterLHToRef = function (left, right, bottom, top, znear, zfar, result) {\n        var n = znear;\n        var f = zfar;\n        var a = 2.0 / (right - left);\n        var b = 2.0 / (top - bottom);\n        var c = 2.0 / (f - n);\n        var d = -(f + n) / (f - n);\n        var i0 = (left + right) / (left - right);\n        var i1 = (top + bottom) / (bottom - top);\n        Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, i0, i1, d, 1.0, result);\n        result._markAsUpdated();\n    };\n    /**\n     * Creates a right-handed orthographic projection matrix\n     * @param left - defines the viewport left coordinate\n     * @param right - defines the viewport right coordinate\n     * @param bottom - defines the viewport bottom coordinate\n     * @param top - defines the viewport top coordinate\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @returns a new matrix as a right-handed orthographic projection matrix\n     */\n    Matrix.OrthoOffCenterRH = function (left, right, bottom, top, znear, zfar) {\n        var matrix = new Matrix();\n        Matrix.OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix);\n        return matrix;\n    };\n    /**\n     * Stores a right-handed orthographic projection into a given matrix\n     * @param left - defines the viewport left coordinate\n     * @param right - defines the viewport right coordinate\n     * @param bottom - defines the viewport bottom coordinate\n     * @param top - defines the viewport top coordinate\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @param result - defines the target matrix\n     */\n    Matrix.OrthoOffCenterRHToRef = function (left, right, bottom, top, znear, zfar, result) {\n        Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result);\n        result._m[10] *= -1; // No need to call _markAsUpdated as previous function already called it and let _isIdentityDirty to true\n    };\n    /**\n     * Creates a left-handed perspective projection matrix\n     * @param width - defines the viewport width\n     * @param height - defines the viewport height\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @returns a new matrix as a left-handed perspective projection matrix\n     */\n    Matrix.PerspectiveLH = function (width, height, znear, zfar) {\n        var matrix = new Matrix();\n        var n = znear;\n        var f = zfar;\n        var a = (2.0 * n) / width;\n        var b = (2.0 * n) / height;\n        var c = (f + n) / (f - n);\n        var d = (-2.0 * f * n) / (f - n);\n        Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, matrix);\n        matrix._updateIdentityStatus(false);\n        return matrix;\n    };\n    /**\n     * Creates a left-handed perspective projection matrix\n     * @param fov - defines the horizontal field of view\n     * @param aspect - defines the aspect ratio\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @returns a new matrix as a left-handed perspective projection matrix\n     */\n    Matrix.PerspectiveFovLH = function (fov, aspect, znear, zfar) {\n        var matrix = new Matrix();\n        Matrix.PerspectiveFovLHToRef(fov, aspect, znear, zfar, matrix);\n        return matrix;\n    };\n    /**\n     * Stores a left-handed perspective projection into a given matrix\n     * @param fov - defines the horizontal field of view\n     * @param aspect - defines the aspect ratio\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @param result - defines the target matrix\n     * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n     */\n    Matrix.PerspectiveFovLHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\n        if (isVerticalFovFixed === void 0) { isVerticalFovFixed = true; }\n        var n = znear;\n        var f = zfar;\n        var t = 1.0 / Math.tan(fov * 0.5);\n        var a = isVerticalFovFixed ? t / aspect : t;\n        var b = isVerticalFovFixed ? t : t * aspect;\n        var c = (f + n) / (f - n);\n        var d = (-2.0 * f * n) / (f - n);\n        Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, result);\n        result._updateIdentityStatus(false);\n    };\n    /**\n     * Creates a right-handed perspective projection matrix\n     * @param fov - defines the horizontal field of view\n     * @param aspect - defines the aspect ratio\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @returns a new matrix as a right-handed perspective projection matrix\n     */\n    Matrix.PerspectiveFovRH = function (fov, aspect, znear, zfar) {\n        var matrix = new Matrix();\n        Matrix.PerspectiveFovRHToRef(fov, aspect, znear, zfar, matrix);\n        return matrix;\n    };\n    /**\n     * Stores a right-handed perspective projection into a given matrix\n     * @param fov - defines the horizontal field of view\n     * @param aspect - defines the aspect ratio\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @param result - defines the target matrix\n     * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n     */\n    Matrix.PerspectiveFovRHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\n        /* alternatively this could be expressed as:\n        //    m = PerspectiveFovLHToRef\n        //    m[10] *= -1.0;\n        //    m[11] *= -1.0;\n        */\n        if (isVerticalFovFixed === void 0) { isVerticalFovFixed = true; }\n        var n = znear;\n        var f = zfar;\n        var t = 1.0 / Math.tan(fov * 0.5);\n        var a = isVerticalFovFixed ? t / aspect : t;\n        var b = isVerticalFovFixed ? t : t * aspect;\n        var c = -(f + n) / (f - n);\n        var d = (-2 * f * n) / (f - n);\n        Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, -1.0, 0.0, 0.0, d, 0.0, result);\n        result._updateIdentityStatus(false);\n    };\n    /**\n     * Stores a perspective projection for WebVR info a given matrix\n     * @param fov - defines the field of view\n     * @param znear - defines the near clip plane\n     * @param zfar - defines the far clip plane\n     * @param result - defines the target matrix\n     * @param rightHanded - defines if the matrix must be in right-handed mode (false by default)\n     */\n    Matrix.PerspectiveFovWebVRToRef = function (fov, znear, zfar, result, rightHanded) {\n        if (rightHanded === void 0) { rightHanded = false; }\n        var rightHandedFactor = rightHanded ? -1 : 1;\n        var upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);\n        var downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);\n        var leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);\n        var rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);\n        var xScale = 2.0 / (leftTan + rightTan);\n        var yScale = 2.0 / (upTan + downTan);\n        var m = result._m;\n        m[0] = xScale;\n        m[1] = m[2] = m[3] = m[4] = 0.0;\n        m[5] = yScale;\n        m[6] = m[7] = 0.0;\n        m[8] = (leftTan - rightTan) * xScale * 0.5;\n        m[9] = -((upTan - downTan) * yScale * 0.5);\n        m[10] = -zfar / (znear - zfar);\n        m[11] = 1.0 * rightHandedFactor;\n        m[12] = m[13] = m[15] = 0.0;\n        m[14] = -(2.0 * zfar * znear) / (zfar - znear);\n        result._markAsUpdated();\n    };\n    /**\n     * Extracts a 2x2 matrix from a given matrix and store the result in a FloatArray\n     * @param matrix - defines the matrix to use\n     * @returns a new FloatArray array with 4 elements : the 2x2 matrix extracted from the given matrix\n     */\n    Matrix.GetAsMatrix2x2 = function (matrix) {\n        return [matrix._m[0], matrix._m[1], matrix._m[4], matrix._m[5]];\n    };\n    /**\n     * Extracts a 3x3 matrix from a given matrix and store the result in a FloatArray\n     * @param matrix - defines the matrix to use\n     * @returns a new FloatArray array with 9 elements : the 3x3 matrix extracted from the given matrix\n     */\n    Matrix.GetAsMatrix3x3 = function (matrix) {\n        return [\n            matrix._m[0],\n            matrix._m[1],\n            matrix._m[2],\n            matrix._m[4],\n            matrix._m[5],\n            matrix._m[6],\n            matrix._m[8],\n            matrix._m[9],\n            matrix._m[10]\n        ];\n    };\n    /**\n     * Compute the transpose of a given matrix\n     * @param matrix - defines the matrix to transpose\n     * @returns the new matrix\n     */\n    Matrix.Transpose = function (matrix) {\n        var result = new Matrix();\n        Matrix.TransposeToRef(matrix, result);\n        return result;\n    };\n    /**\n     * Compute the transpose of a matrix and store it in a target matrix\n     * @param matrix - defines the matrix to transpose\n     * @param result - defines the target matrix\n     */\n    Matrix.TransposeToRef = function (matrix, result) {\n        var rm = result._m;\n        var mm = matrix._m;\n        rm[0] = mm[0];\n        rm[1] = mm[4];\n        rm[2] = mm[8];\n        rm[3] = mm[12];\n        rm[4] = mm[1];\n        rm[5] = mm[5];\n        rm[6] = mm[9];\n        rm[7] = mm[13];\n        rm[8] = mm[2];\n        rm[9] = mm[6];\n        rm[10] = mm[10];\n        rm[11] = mm[14];\n        rm[12] = mm[3];\n        rm[13] = mm[7];\n        rm[14] = mm[11];\n        rm[15] = mm[15];\n        // identity-ness does not change when transposing\n        result._updateIdentityStatus(matrix._isIdentity, matrix._isIdentityDirty);\n    };\n    /**\n     * Computes a reflection matrix from a plane\n     * @param plane - defines the reflection plane\n     * @returns a new matrix\n     */\n    Matrix.Reflection = function (plane) {\n        var matrix = new Matrix();\n        Matrix.ReflectionToRef(plane, matrix);\n        return matrix;\n    };\n    /**\n     * Computes a reflection matrix from a plane\n     * @param plane - defines the reflection plane\n     * @param result - defines the target matrix\n     */\n    Matrix.ReflectionToRef = function (plane, result) {\n        plane.normalize();\n        var x = plane.normal.x;\n        var y = plane.normal.y;\n        var z = plane.normal.z;\n        var temp = -2 * x;\n        var temp2 = -2 * y;\n        var temp3 = -2 * z;\n        Matrix.FromValuesToRef(temp * x + 1, temp2 * x, temp3 * x, 0.0, temp * y, temp2 * y + 1, temp3 * y, 0.0, temp * z, temp2 * z, temp3 * z + 1, 0.0, temp * plane.d, temp2 * plane.d, temp3 * plane.d, 1.0, result);\n    };\n    /**\n     * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\n     * @param xaxis - defines the value of the 1st axis\n     * @param yaxis - defines the value of the 2nd axis\n     * @param zaxis - defines the value of the 3rd axis\n     * @param result - defines the target matrix\n     */\n    Matrix.FromXYZAxesToRef = function (xaxis, yaxis, zaxis, result) {\n        Matrix.FromValuesToRef(xaxis.x, xaxis.y, xaxis.z, 0.0, yaxis.x, yaxis.y, yaxis.z, 0.0, zaxis.x, zaxis.y, zaxis.z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n    };\n    /**\n     * Creates a rotation matrix from a quaternion and stores it in a target matrix\n     * @param quat - defines the quaternion to use\n     * @param result - defines the target matrix\n     */\n    Matrix.FromQuaternionToRef = function (quat, result) {\n        var xx = quat.x * quat.x;\n        var yy = quat.y * quat.y;\n        var zz = quat.z * quat.z;\n        var xy = quat.x * quat.y;\n        var zw = quat.z * quat.w;\n        var zx = quat.z * quat.x;\n        var yw = quat.y * quat.w;\n        var yz = quat.y * quat.z;\n        var xw = quat.x * quat.w;\n        result._m[0] = 1.0 - 2.0 * (yy + zz);\n        result._m[1] = 2.0 * (xy + zw);\n        result._m[2] = 2.0 * (zx - yw);\n        result._m[3] = 0.0;\n        result._m[4] = 2.0 * (xy - zw);\n        result._m[5] = 1.0 - 2.0 * (zz + xx);\n        result._m[6] = 2.0 * (yz + xw);\n        result._m[7] = 0.0;\n        result._m[8] = 2.0 * (zx + yw);\n        result._m[9] = 2.0 * (yz - xw);\n        result._m[10] = 1.0 - 2.0 * (yy + xx);\n        result._m[11] = 0.0;\n        result._m[12] = 0.0;\n        result._m[13] = 0.0;\n        result._m[14] = 0.0;\n        result._m[15] = 1.0;\n        result._markAsUpdated();\n    };\n    /** @internal */\n    Matrix.prototype._markAsUpdated = function () {\n        this.updateFlag = Matrix._updateFlagSeed++;\n        this._isIdentity = false;\n        this._isIdentity3x2 = false;\n        this._isIdentityDirty = true;\n        this._isIdentity3x2Dirty = true;\n    };\n    // Properties\n    /**\n     * Check if the current matrix is identity\n     * @returns true is the matrix is the identity matrix\n     */\n    Matrix.prototype.isIdentity = function () {\n        if (this._isIdentityDirty) {\n            this._isIdentityDirty = false;\n            var m = this._m;\n            this._isIdentity =\n                m[0] === 1.0 &&\n                    m[1] === 0.0 &&\n                    m[2] === 0.0 &&\n                    m[3] === 0.0 &&\n                    m[4] === 0.0 &&\n                    m[5] === 1.0 &&\n                    m[6] === 0.0 &&\n                    m[7] === 0.0 &&\n                    m[8] === 0.0 &&\n                    m[9] === 0.0 &&\n                    m[10] === 1.0 &&\n                    m[11] === 0.0 &&\n                    m[12] === 0.0 &&\n                    m[13] === 0.0 &&\n                    m[14] === 0.0 &&\n                    m[15] === 1.0;\n        }\n        return this._isIdentity;\n    };\n    /**\n     * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\n     * @returns true is the matrix is the identity matrix\n     */\n    Matrix.prototype.isIdentityAs3x2 = function () {\n        if (this._isIdentity3x2Dirty) {\n            this._isIdentity3x2Dirty = false;\n            if (this._m[0] !== 1.0 || this._m[5] !== 1.0 || this._m[15] !== 1.0) {\n                this._isIdentity3x2 = false;\n            }\n            else if (this._m[1] !== 0.0 ||\n                this._m[2] !== 0.0 ||\n                this._m[3] !== 0.0 ||\n                this._m[4] !== 0.0 ||\n                this._m[6] !== 0.0 ||\n                this._m[7] !== 0.0 ||\n                this._m[8] !== 0.0 ||\n                this._m[9] !== 0.0 ||\n                this._m[10] !== 0.0 ||\n                this._m[11] !== 0.0 ||\n                this._m[12] !== 0.0 ||\n                this._m[13] !== 0.0 ||\n                this._m[14] !== 0.0) {\n                this._isIdentity3x2 = false;\n            }\n            else {\n                this._isIdentity3x2 = true;\n            }\n        }\n        return this._isIdentity3x2;\n    };\n    /**\n     * Gets the determinant of the matrix\n     * @returns the matrix determinant\n     */\n    Matrix.prototype.determinant = function () {\n        if (this._isIdentity === true) {\n            return 1;\n        }\n        var m = this._m;\n        // tslint:disable-next-line:one-variable-per-declaration\n        var m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\n        // tslint:disable-next-line:one-variable-per-declaration\n        var m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\n        // tslint:disable-next-line:one-variable-per-declaration\n        var m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\n        // tslint:disable-next-line:one-variable-per-declaration\n        var m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\n        /*\n        // https://en.wikipedia.org/wiki/Laplace_expansion\n        // to compute the deterrminant of a 4x4 Matrix we compute the cofactors of any row or column,\n        // then we multiply each Cofactor by its corresponding matrix value and sum them all to get the determinant\n        // Cofactor(i, j) = sign(i,j) * det(Minor(i, j))\n        // where\n        //  - sign(i,j) = (i+j) % 2 === 0 ? 1 : -1\n        //  - Minor(i, j) is the 3x3 matrix we get by removing row i and column j from current Matrix\n        //\n        // Here we do that for the 1st row.\n        */\n        // tslint:disable:variable-name\n        var det_22_33 = m22 * m33 - m32 * m23;\n        var det_21_33 = m21 * m33 - m31 * m23;\n        var det_21_32 = m21 * m32 - m31 * m22;\n        var det_20_33 = m20 * m33 - m30 * m23;\n        var det_20_32 = m20 * m32 - m22 * m30;\n        var det_20_31 = m20 * m31 - m30 * m21;\n        var cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n        var cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n        var cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n        var cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n        // tslint:enable:variable-name\n        return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n    };\n    // Methods\n    /**\n     * Returns the matrix as a FloatArray\n     * @returns the matrix underlying array\n     */\n    Matrix.prototype.toArray = function () {\n        return this._m;\n    };\n    /**\n     * Returns the matrix as a FloatArray\n     * @returns the matrix underlying array.\n     */\n    Matrix.prototype.asArray = function () {\n        return this._m;\n    };\n    /**\n     * Inverts the current matrix in place\n     * @returns the current inverted matrix\n     */\n    Matrix.prototype.invert = function () {\n        this.invertToRef(this);\n        return this;\n    };\n    /**\n     * Sets all the matrix elements to zero\n     * @returns the current matrix\n     */\n    Matrix.prototype.reset = function () {\n        Matrix.FromValuesToRef(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, this);\n        this._updateIdentityStatus(false);\n        return this;\n    };\n    /**\n     * Adds the current matrix with a second one\n     * @param other - defines the matrix to add\n     * @returns a new matrix as the addition of the current matrix and the given one\n     */\n    Matrix.prototype.add = function (other) {\n        var result = new Matrix();\n        this.addToRef(other, result);\n        return result;\n    };\n    /**\n     * Sets the given matrix "result" to the addition of the current matrix and the given one\n     * @param other - defines the matrix to add\n     * @param result - defines the target matrix\n     * @returns the current matrix\n     */\n    Matrix.prototype.addToRef = function (other, result) {\n        for (var index = 0; index < 16; index++) {\n            result._m[index] = this._m[index] + other._m[index];\n        }\n        result._markAsUpdated();\n        return this;\n    };\n    /**\n     * Adds in place the given matrix to the current matrix\n     * @param other - defines the second operand\n     * @returns the current updated matrix\n     */\n    Matrix.prototype.addToSelf = function (other) {\n        for (var index = 0; index < 16; index++) {\n            this._m[index] += other._m[index];\n        }\n        this._markAsUpdated();\n        return this;\n    };\n    /**\n     * Sets the given matrix to the current inverted Matrix\n     * @param other - defines the target matrix\n     * @returns the unmodified current matrix\n     */\n    Matrix.prototype.invertToRef = function (other) {\n        if (this._isIdentity === true) {\n            Matrix.IdentityToRef(other);\n            return this;\n        }\n        // the inverse of a Matrix is the transpose of cofactor matrix divided by the determinant\n        var m = this._m;\n        // tslint:disable:one-variable-per-declaration\n        var m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\n        var m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\n        var m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\n        var m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\n        // tslint:enable:one-variable-per-declaration\n        // tslint:disable:variable-name\n        var det_22_33 = m22 * m33 - m32 * m23;\n        var det_21_33 = m21 * m33 - m31 * m23;\n        var det_21_32 = m21 * m32 - m31 * m22;\n        var det_20_33 = m20 * m33 - m30 * m23;\n        var det_20_32 = m20 * m32 - m22 * m30;\n        var det_20_31 = m20 * m31 - m30 * m21;\n        var cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n        var cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n        var cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n        var cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n        var det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n        if (det === 0) {\n            // not invertible\n            other.copyFrom(this);\n            return this;\n        }\n        var detInv = 1 / det;\n        var det_12_33 = m12 * m33 - m32 * m13;\n        var det_11_33 = m11 * m33 - m31 * m13;\n        var det_11_32 = m11 * m32 - m31 * m12;\n        var det_10_33 = m10 * m33 - m30 * m13;\n        var det_10_32 = m10 * m32 - m30 * m12;\n        var det_10_31 = m10 * m31 - m30 * m11;\n        var det_12_23 = m12 * m23 - m22 * m13;\n        var det_11_23 = m11 * m23 - m21 * m13;\n        var det_11_22 = m11 * m22 - m21 * m12;\n        var det_10_23 = m10 * m23 - m20 * m13;\n        var det_10_22 = m10 * m22 - m20 * m12;\n        var det_10_21 = m10 * m21 - m20 * m11;\n        var cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32);\n        var cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32);\n        var cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31);\n        var cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31);\n        var cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32);\n        var cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32);\n        var cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31);\n        var cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31);\n        var cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22);\n        var cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22);\n        var cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21);\n        var cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21);\n        Matrix.FromValuesToRef(cofact_00 * detInv, cofact_10 * detInv, cofact_20 * detInv, cofact_30 * detInv, cofact_01 * detInv, cofact_11 * detInv, cofact_21 * detInv, cofact_31 * detInv, cofact_02 * detInv, cofact_12 * detInv, cofact_22 * detInv, cofact_32 * detInv, cofact_03 * detInv, cofact_13 * detInv, cofact_23 * detInv, cofact_33 * detInv, other);\n        // tslint:enable:variable-name\n        return this;\n    };\n    /**\n     * add a value at the specified position in the current Matrix\n     * @param index - the index of the value within the matrix. between 0 and 15.\n     * @param value - the value to be added\n     * @returns the current updated matrix\n     */\n    Matrix.prototype.addAtIndex = function (index, value) {\n        this._m[index] += value;\n        this._markAsUpdated();\n        return this;\n    };\n    /**\n     * mutiply the specified position in the current Matrix by a value\n     * @param index - the index of the value within the matrix. between 0 and 15.\n     * @param value - the value to be added\n     * @returns the current updated matrix\n     */\n    Matrix.prototype.multiplyAtIndex = function (index, value) {\n        this._m[index] *= value;\n        this._markAsUpdated();\n        return this;\n    };\n    /**\n     * Inserts the translation vector (using 3 floats) in the current matrix\n     * @param x - defines the 1st component of the translation\n     * @param y - defines the 2nd component of the translation\n     * @param z - defines the 3rd component of the translation\n     * @returns the current updated matrix\n     */\n    Matrix.prototype.setTranslationFromFloats = function (x, y, z) {\n        this._m[12] = x;\n        this._m[13] = y;\n        this._m[14] = z;\n        this._markAsUpdated();\n        return this;\n    };\n    /**\n     * Inserts the translation vector in the current matrix\n     * @param vector3 - defines the translation to insert\n     * @returns the current updated matrix\n     */\n    Matrix.prototype.setTranslation = function (vector3) {\n        return this.setTranslationFromFloats(vector3.x, vector3.y, vector3.z);\n    };\n    /**\n     * Gets the translation value of the current matrix\n     * @returns a new Vector3 as the extracted translation from the matrix\n     */\n    Matrix.prototype.getTranslation = function () {\n        return new Vector3_1.Vector3(this._m[12], this._m[13], this._m[14]);\n    };\n    /**\n     * Fill a Vector3 with the extracted translation from the matrix\n     * @param result - defines the Vector3 where to store the translation\n     * @returns the current matrix\n     */\n    Matrix.prototype.getTranslationToRef = function (result) {\n        result.x = this._m[12];\n        result.y = this._m[13];\n        result.z = this._m[14];\n        return this;\n    };\n    /**\n     * Remove rotation and scaling part from the matrix\n     * @returns the updated matrix\n     */\n    Matrix.prototype.removeRotationAndScaling = function () {\n        var m = this.m;\n        Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, m[12], m[13], m[14], m[15], this);\n        this._updateIdentityStatus(m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1);\n        return this;\n    };\n    /**\n     * Multiply two matrices\n     * @param other - defines the second operand\n     * @returns a new matrix set with the multiplication result of the current Matrix and the given one\n     */\n    Matrix.prototype.multiply = function (other) {\n        var result = new Matrix();\n        this.multiplyToRef(other, result);\n        return result;\n    };\n    /**\n     * Copy the current matrix from the given one\n     * @param other - defines the source matrix\n     * @returns the current updated matrix\n     */\n    Matrix.prototype.copyFrom = function (other) {\n        other.copyToArray(this._m);\n        var o = other;\n        this._updateIdentityStatus(o._isIdentity, o._isIdentityDirty, o._isIdentity3x2, o._isIdentity3x2Dirty);\n        return this;\n    };\n    /**\n     * Populates the given array from the starting index with the current matrix values\n     * @param array - defines the target array\n     * @param offset - defines the offset in the target array where to start storing values\n     * @returns the current matrix\n     */\n    Matrix.prototype.copyToArray = function (array, offset) {\n        if (offset === void 0) { offset = 0; }\n        for (var index = 0; index < 16; index++) {\n            array[offset + index] = this._m[index];\n        }\n        return this;\n    };\n    /**\n     * Sets the given matrix "result" with the multiplication result of the current Matrix and the given one\n     * @param other - defines the second operand\n     * @param result - defines the matrix where to store the multiplication\n     * @returns the current matrix\n     */\n    Matrix.prototype.multiplyToRef = function (other, result) {\n        if (this._isIdentity) {\n            result.copyFrom(other);\n            return this;\n        }\n        if (other._isIdentity) {\n            result.copyFrom(this);\n            return this;\n        }\n        this.multiplyToArray(other, result._m, 0);\n        result._markAsUpdated();\n        return this;\n    };\n    /**\n     * Sets the FloatArray "result" from the given index "offset" with the multiplication of the current matrix and the given one\n     * @param other - defines the second operand\n     * @param result - defines the array where to store the multiplication\n     * @param offset - defines the offset in the target array where to start storing values\n     * @returns the current matrix\n     */\n    Matrix.prototype.multiplyToArray = function (other, result, offset) {\n        var m = this._m;\n        var otherM = other.m;\n        // tslint:disable:one-variable-per-declaration\n        var tm0 = m[0], tm1 = m[1], tm2 = m[2], tm3 = m[3];\n        var tm4 = m[4], tm5 = m[5], tm6 = m[6], tm7 = m[7];\n        var tm8 = m[8], tm9 = m[9], tm10 = m[10], tm11 = m[11];\n        var tm12 = m[12], tm13 = m[13], tm14 = m[14], tm15 = m[15];\n        var om0 = otherM[0], om1 = otherM[1], om2 = otherM[2], om3 = otherM[3];\n        var om4 = otherM[4], om5 = otherM[5], om6 = otherM[6], om7 = otherM[7];\n        var om8 = otherM[8], om9 = otherM[9], om10 = otherM[10], om11 = otherM[11];\n        var om12 = otherM[12], om13 = otherM[13], om14 = otherM[14], om15 = otherM[15];\n        // tslint:enable:one-variable-per-declaration\n        result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12;\n        result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13;\n        result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14;\n        result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15;\n        result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12;\n        result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13;\n        result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14;\n        result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15;\n        result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12;\n        result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13;\n        result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14;\n        result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15;\n        result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12;\n        result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13;\n        result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14;\n        result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15;\n        return this;\n    };\n    /**\n     * Check equality between this matrix and a second one\n     * @param value - defines the second matrix to compare\n     * @returns true is the current matrix and the given one values are strictly equal\n     */\n    Matrix.prototype.equals = function (value) {\n        var other = value;\n        if (!other) {\n            return false;\n        }\n        if (this._isIdentity || other._isIdentity) {\n            if (!this._isIdentityDirty && !other._isIdentityDirty) {\n                return this._isIdentity && other._isIdentity;\n            }\n        }\n        var m = this.m;\n        var om = other.m;\n        return (m[0] === om[0] &&\n            m[1] === om[1] &&\n            m[2] === om[2] &&\n            m[3] === om[3] &&\n            m[4] === om[4] &&\n            m[5] === om[5] &&\n            m[6] === om[6] &&\n            m[7] === om[7] &&\n            m[8] === om[8] &&\n            m[9] === om[9] &&\n            m[10] === om[10] &&\n            m[11] === om[11] &&\n            m[12] === om[12] &&\n            m[13] === om[13] &&\n            m[14] === om[14] &&\n            m[15] === om[15]);\n    };\n    /**\n     * Clone the current matrix\n     * @returns a new matrix from the current matrix\n     */\n    Matrix.prototype.clone = function () {\n        var matrix = new Matrix();\n        matrix.copyFrom(this);\n        return matrix;\n    };\n    /**\n     * Returns the name of the current matrix class\n     * @returns the string "Matrix"\n     */\n    Matrix.prototype.getClassName = function () {\n        return \'Matrix\';\n    };\n    /**\n     * Gets the hash code of the current matrix\n     * @returns the hash code\n     */\n    Matrix.prototype.getHashCode = function () {\n        var hash = this._m[0] || 0;\n        for (var i = 1; i < 16; i++) {\n            hash = (hash * 397) ^ (this._m[i] || 0);\n        }\n        return hash;\n    };\n    /**\n     * Decomposes the current Matrix into a translation, rotation and scaling components\n     * @param scale - defines the scale vector3 given as a reference to update\n     * @param rotation - defines the rotation quaternion given as a reference to update\n     * @param translation - defines the translation vector3 given as a reference to update\n     * @returns true if operation was successful\n     */\n    Matrix.prototype.decompose = function (scale, rotation, translation) {\n        if (this._isIdentity) {\n            if (translation) {\n                translation.setAll(0);\n            }\n            if (scale) {\n                scale.setAll(1);\n            }\n            if (rotation) {\n                rotation.copyFromFloats(0, 0, 0, 1);\n            }\n            return true;\n        }\n        var m = this._m;\n        if (translation) {\n            translation.copyFromFloats(m[12], m[13], m[14]);\n        }\n        var usedScale = scale || preallocatedVariables_1.MathTmp.Vector3[0];\n        usedScale.x = Math.sqrt(m[0] * m[0] + m[1] * m[1] + m[2] * m[2]);\n        usedScale.y = Math.sqrt(m[4] * m[4] + m[5] * m[5] + m[6] * m[6]);\n        usedScale.z = Math.sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10]);\n        if (this.determinant() <= 0) {\n            usedScale.y *= -1;\n        }\n        if (usedScale.x === 0 || usedScale.y === 0 || usedScale.z === 0) {\n            if (rotation) {\n                rotation.copyFromFloats(0.0, 0.0, 0.0, 1.0);\n            }\n            return false;\n        }\n        if (rotation) {\n            // tslint:disable-next-line:one-variable-per-declaration\n            var sx = 1 / usedScale.x, sy = 1 / usedScale.y, sz = 1 / usedScale.z;\n            Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, preallocatedVariables_1.MathTmp.Matrix[0]);\n            Quaternion_1.Quaternion.FromRotationMatrixToRef(preallocatedVariables_1.MathTmp.Matrix[0], rotation);\n        }\n        return true;\n    };\n    /**\n     * Gets specific row of the matrix\n     * @param index - defines the number of the row to get\n     * @returns the index-th row of the current matrix as a new Vector4\n     */\n    Matrix.prototype.getRow = function (index) {\n        if (index < 0 || index > 3) {\n            return null;\n        }\n        var i = index * 4;\n        return new Vector4_1.Vector4(this._m[i + 0], this._m[i + 1], this._m[i + 2], this._m[i + 3]);\n    };\n    /**\n     * Sets the index-th row of the current matrix to the vector4 values\n     * @param index - defines the number of the row to set\n     * @param row - defines the target vector4\n     * @returns the updated current matrix\n     */\n    Matrix.prototype.setRow = function (index, row) {\n        return this.setRowFromFloats(index, row.x, row.y, row.z, row.w);\n    };\n    /**\n     * Compute the transpose of the matrix\n     * @returns the new transposed matrix\n     */\n    Matrix.prototype.transpose = function () {\n        return Matrix.Transpose(this);\n    };\n    /**\n     * Compute the transpose of the matrix and store it in a given matrix\n     * @param result - defines the target matrix\n     * @returns the current matrix\n     */\n    Matrix.prototype.transposeToRef = function (result) {\n        Matrix.TransposeToRef(this, result);\n        return this;\n    };\n    /**\n     * Sets the index-th row of the current matrix with the given 4 x float values\n     * @param index - defines the row index\n     * @param x - defines the x component to set\n     * @param y - defines the y component to set\n     * @param z - defines the z component to set\n     * @param w - defines the w component to set\n     * @returns the updated current matrix\n     */\n    Matrix.prototype.setRowFromFloats = function (index, x, y, z, w) {\n        if (index < 0 || index > 3) {\n            return this;\n        }\n        var i = index * 4;\n        this._m[i + 0] = x;\n        this._m[i + 1] = y;\n        this._m[i + 2] = z;\n        this._m[i + 3] = w;\n        this._markAsUpdated();\n        return this;\n    };\n    /**\n     * Compute a new matrix set with the current matrix values multiplied by scale (float)\n     * @param scale - defines the scale factor\n     * @returns a new matrix\n     */\n    Matrix.prototype.scale = function (scale) {\n        var result = new Matrix();\n        this.scaleToRef(scale, result);\n        return result;\n    };\n    /**\n     * Scale the current matrix values by a factor to a given result matrix\n     * @param scale - defines the scale factor\n     * @param result - defines the matrix to store the result\n     * @returns the current matrix\n     */\n    Matrix.prototype.scaleToRef = function (scale, result) {\n        for (var index = 0; index < 16; index++) {\n            result._m[index] = this._m[index] * scale;\n        }\n        result._markAsUpdated();\n        return this;\n    };\n    /**\n     * Scale the current matrix values by a factor and add the result to a given matrix\n     * @param scale - defines the scale factor\n     * @param result - defines the Matrix to store the result\n     * @returns the current matrix\n     */\n    Matrix.prototype.scaleAndAddToRef = function (scale, result) {\n        for (var index = 0; index < 16; index++) {\n            result._m[index] += this._m[index] * scale;\n        }\n        result._markAsUpdated();\n        return this;\n    };\n    /**\n     * Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column).\n     * @param ref - matrix to store the result\n     */\n    Matrix.prototype.toNormalMatrix = function (ref) {\n        var tmp = preallocatedVariables_1.MathTmp.Matrix[0];\n        this.invertToRef(tmp);\n        tmp.transposeToRef(ref);\n        var m = ref._m;\n        Matrix.FromValuesToRef(m[0], m[1], m[2], 0.0, m[4], m[5], m[6], 0.0, m[8], m[9], m[10], 0.0, 0.0, 0.0, 0.0, 1.0, ref);\n    };\n    /**\n     * Gets only rotation part of the current matrix\n     * @returns a new matrix sets to the extracted rotation matrix from the current one\n     */\n    Matrix.prototype.getRotationMatrix = function () {\n        var result = new Matrix();\n        this.getRotationMatrixToRef(result);\n        return result;\n    };\n    /**\n     * Extracts the rotation matrix from the current one and sets it as the given "result"\n     * @param result - defines the target matrix to store data to\n     * @returns the current matrix\n     */\n    Matrix.prototype.getRotationMatrixToRef = function (result) {\n        var scale = preallocatedVariables_1.MathTmp.Vector3[0];\n        if (!this.decompose(scale)) {\n            Matrix.IdentityToRef(result);\n            return this;\n        }\n        var m = this._m;\n        // tslint:disable-next-line:one-variable-per-declaration\n        var sx = 1 / scale.x, sy = 1 / scale.y, sz = 1 / scale.z;\n        Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n        return this;\n    };\n    /**\n     * Toggles model matrix from being right handed to left handed in place and vice versa\n     */\n    Matrix.prototype.toggleModelMatrixHandInPlace = function () {\n        var m = this._m;\n        m[2] *= -1;\n        m[6] *= -1;\n        m[8] *= -1;\n        m[9] *= -1;\n        m[14] *= -1;\n        this._markAsUpdated();\n    };\n    /**\n     * Toggles projection matrix from being right handed to left handed in place and vice versa\n     */\n    Matrix.prototype.toggleProjectionMatrixHandInPlace = function () {\n        var m = this._m;\n        m[8] *= -1;\n        m[9] *= -1;\n        m[10] *= -1;\n        m[11] *= -1;\n        this._markAsUpdated();\n    };\n    /** @internal */\n    Matrix.prototype._updateIdentityStatus = function (isIdentity, isIdentityDirty, isIdentity3x2, isIdentity3x2Dirty) {\n        if (isIdentityDirty === void 0) { isIdentityDirty = false; }\n        if (isIdentity3x2 === void 0) { isIdentity3x2 = false; }\n        if (isIdentity3x2Dirty === void 0) { isIdentity3x2Dirty = true; }\n        this.updateFlag = Matrix._updateFlagSeed++;\n        this._isIdentity = isIdentity;\n        this._isIdentity3x2 = isIdentity || isIdentity3x2;\n        this._isIdentityDirty = this._isIdentity ? false : isIdentityDirty;\n        this._isIdentity3x2Dirty = this._isIdentity3x2 ? false : isIdentity3x2Dirty;\n    };\n    Matrix._updateFlagSeed = 0;\n    Matrix._identityReadOnly = Matrix.Identity();\n    return Matrix;\n}());\nexports.Matrix = Matrix;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Matrix.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Path2d.ts":
/*!*******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Path2d.ts ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Vector2_1 = __webpack_require__(/*! ./Vector2 */ "./packages/decentraland-ecs/src/decentraland/math/Vector2.ts");\nvar Arc2_1 = __webpack_require__(/*! ./Arc2 */ "./packages/decentraland-ecs/src/decentraland/math/Arc2.ts");\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\n/**\n * Represents a 2D path made up of multiple 2D points\n * @public\n */\nvar Path2 = /** @class */ (function () {\n    /**\n     * Creates a Path2 object from the starting 2D coordinates x and y.\n     * @param x - the starting points x value\n     * @param y - the starting points y value\n     */\n    function Path2(x, y) {\n        /**\n         * If the path start and end point are the same\n         */\n        this.closed = false;\n        this._points = new Array();\n        this._length = 0.0;\n        this._points.push(new Vector2_1.Vector2(x, y));\n    }\n    /**\n     * Creates a new path starting from an x and y position\n     * @param x - starting x value\n     * @param y - starting y value\n     * @returns a new Path2 starting at the coordinates (x, y).\n     */\n    Path2.StartingAt = function (x, y) {\n        return new Path2(x, y);\n    };\n    /**\n     * Adds a new segment until the given coordinates (x, y) to the current Path2.\n     * @param x - the added points x value\n     * @param y - the added points y value\n     * @returns the updated Path2.\n     */\n    Path2.prototype.addLineTo = function (x, y) {\n        if (this.closed) {\n            return this;\n        }\n        var newPoint = new Vector2_1.Vector2(x, y);\n        var previousPoint = this._points[this._points.length - 1];\n        this._points.push(newPoint);\n        this._length += newPoint.subtract(previousPoint).length();\n        return this;\n    };\n    /**\n     * Adds _numberOfSegments_ segments according to the arc definition (middle point coordinates, end point coordinates, the arc start point being the current Path2 last point) to the current Path2.\n     * @param midX - middle point x value\n     * @param midY - middle point y value\n     * @param endX - end point x value\n     * @param endY - end point y value\n     * @param numberOfSegments - (default: 36)\n     * @returns the updated Path2.\n     */\n    Path2.prototype.addArcTo = function (midX, midY, endX, endY, numberOfSegments) {\n        if (numberOfSegments === void 0) { numberOfSegments = 36; }\n        if (this.closed) {\n            return this;\n        }\n        var startPoint = this._points[this._points.length - 1];\n        var midPoint = new Vector2_1.Vector2(midX, midY);\n        var endPoint = new Vector2_1.Vector2(endX, endY);\n        var arc = new Arc2_1.Arc2(startPoint, midPoint, endPoint);\n        var increment = arc.angle.radians() / numberOfSegments;\n        if (arc.orientation === types_1.Orientation.CW) {\n            increment *= -1;\n        }\n        var currentAngle = arc.startAngle.radians() + increment;\n        for (var i = 0; i < numberOfSegments; i++) {\n            var x = Math.cos(currentAngle) * arc.radius + arc.centerPoint.x;\n            var y = Math.sin(currentAngle) * arc.radius + arc.centerPoint.y;\n            this.addLineTo(x, y);\n            currentAngle += increment;\n        }\n        return this;\n    };\n    /**\n     * Closes the Path2.\n     * @returns the Path2.\n     */\n    Path2.prototype.close = function () {\n        this.closed = true;\n        return this;\n    };\n    /**\n     * Gets the sum of the distance between each sequential point in the path\n     * @returns the Path2 total length (float).\n     */\n    Path2.prototype.length = function () {\n        var result = this._length;\n        if (!this.closed) {\n            var lastPoint = this._points[this._points.length - 1];\n            var firstPoint = this._points[0];\n            result += firstPoint.subtract(lastPoint).length();\n        }\n        return result;\n    };\n    /**\n     * Gets the points which construct the path\n     * @returns the Path2 internal array of points.\n     */\n    Path2.prototype.getPoints = function () {\n        return this._points;\n    };\n    /**\n     * Retreives the point at the distance aways from the starting point\n     * @param normalizedLengthPosition - the length along the path to retreive the point from\n     * @returns a new Vector2 located at a percentage of the Path2 total length on this path.\n     */\n    Path2.prototype.getPointAtLengthPosition = function (normalizedLengthPosition) {\n        if (normalizedLengthPosition < 0 || normalizedLengthPosition > 1) {\n            return Vector2_1.Vector2.Zero();\n        }\n        var lengthPosition = normalizedLengthPosition * this.length();\n        var previousOffset = 0;\n        for (var i = 0; i < this._points.length; i++) {\n            var j = (i + 1) % this._points.length;\n            var a = this._points[i];\n            var b = this._points[j];\n            var bToA = b.subtract(a);\n            var nextOffset = bToA.length() + previousOffset;\n            if (lengthPosition >= previousOffset && lengthPosition <= nextOffset) {\n                var dir = bToA.normalize();\n                var localOffset = lengthPosition - previousOffset;\n                return new Vector2_1.Vector2(a.x + dir.x * localOffset, a.y + dir.y * localOffset);\n            }\n            previousOffset = nextOffset;\n        }\n        return Vector2_1.Vector2.Zero();\n    };\n    return Path2;\n}());\nexports.Path2 = Path2;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Path2d.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Path3d.ts":
/*!*******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Path3d.ts ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Vector3_1 = __webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts");\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\nvar Scalar_1 = __webpack_require__(/*! ./Scalar */ "./packages/decentraland-ecs/src/decentraland/math/Scalar.ts");\n/**\n * Represents a 3D path made up of multiple 3D points\n * @public\n */\nvar Path3D = /** @class */ (function () {\n    /**\n     * new Path3D(path, normal, raw)\n     * Creates a Path3D. A Path3D is a logical math object, so not a mesh.\n     * please read the description in the tutorial :  http://doc.babylonjs.com/tutorials/How_to_use_Path3D\n     * @param path - an array of Vector3, the curve axis of the Path3D\n     * @param normal - (options) Vector3, the first wanted normal to the curve. Ex (0, 1, 0) for a vertical normal.\n     * @param raw - (optional, default false) : boolean, if true the returned Path3D isn\'t normalized. Useful to depict path acceleration or speed.\n     */\n    function Path3D(\n    /**\n     * an array of Vector3, the curve axis of the Path3D\n     */\n    path, firstNormal, raw) {\n        if (firstNormal === void 0) { firstNormal = null; }\n        this.path = path;\n        this._curve = new Array();\n        this._distances = new Array();\n        this._tangents = new Array();\n        this._normals = new Array();\n        this._binormals = new Array();\n        for (var p = 0; p < path.length; p++) {\n            this._curve[p] = path[p].clone(); // hard copy\n        }\n        this._raw = raw || false;\n        this._compute(firstNormal);\n    }\n    /**\n     * Returns the Path3D array of successive Vector3 designing its curve.\n     * @returns the Path3D array of successive Vector3 designing its curve.\n     */\n    Path3D.prototype.getCurve = function () {\n        return this._curve;\n    };\n    /**\n     * Returns an array populated with tangent vectors on each Path3D curve point.\n     * @returns an array populated with tangent vectors on each Path3D curve point.\n     */\n    Path3D.prototype.getTangents = function () {\n        return this._tangents;\n    };\n    /**\n     * Returns an array populated with normal vectors on each Path3D curve point.\n     * @returns an array populated with normal vectors on each Path3D curve point.\n     */\n    Path3D.prototype.getNormals = function () {\n        return this._normals;\n    };\n    /**\n     * Returns an array populated with binormal vectors on each Path3D curve point.\n     * @returns an array populated with binormal vectors on each Path3D curve point.\n     */\n    Path3D.prototype.getBinormals = function () {\n        return this._binormals;\n    };\n    /**\n     * Returns an array populated with distances (float) of the i-th point from the first curve point.\n     * @returns an array populated with distances (float) of the i-th point from the first curve point.\n     */\n    Path3D.prototype.getDistances = function () {\n        return this._distances;\n    };\n    /**\n     * Forces the Path3D tangent, normal, binormal and distance recomputation.\n     * @param path - path which all values are copied into the curves points\n     * @param firstNormal - which should be projected onto the curve\n     * @returns the same object updated.\n     */\n    Path3D.prototype.update = function (path, firstNormal) {\n        if (firstNormal === void 0) { firstNormal = null; }\n        for (var p = 0; p < path.length; p++) {\n            this._curve[p].x = path[p].x;\n            this._curve[p].y = path[p].y;\n            this._curve[p].z = path[p].z;\n        }\n        this._compute(firstNormal);\n        return this;\n    };\n    // private function compute() : computes tangents, normals and binormals\n    Path3D.prototype._compute = function (firstNormal) {\n        var l = this._curve.length;\n        // first and last tangents\n        this._tangents[0] = this._getFirstNonNullVector(0);\n        if (!this._raw) {\n            this._tangents[0].normalize();\n        }\n        this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2]);\n        if (!this._raw) {\n            this._tangents[l - 1].normalize();\n        }\n        // normals and binormals at first point : arbitrary vector with _normalVector()\n        var tg0 = this._tangents[0];\n        var pp0 = this._normalVector(this._curve[0], tg0, firstNormal);\n        this._normals[0] = pp0;\n        if (!this._raw) {\n            this._normals[0].normalize();\n        }\n        this._binormals[0] = Vector3_1.Vector3.Cross(tg0, this._normals[0]);\n        if (!this._raw) {\n            this._binormals[0].normalize();\n        }\n        this._distances[0] = 0.0;\n        // normals and binormals : next points\n        var prev; // previous vector (segment)\n        var cur; // current vector (segment)\n        var curTang; // current tangent\n        // previous normal\n        var prevBinor; // previous binormal\n        for (var i = 1; i < l; i++) {\n            // tangents\n            prev = this._getLastNonNullVector(i);\n            if (i < l - 1) {\n                cur = this._getFirstNonNullVector(i);\n                this._tangents[i] = prev.add(cur);\n                this._tangents[i].normalize();\n            }\n            this._distances[i] = this._distances[i - 1] + prev.length();\n            // normals and binormals\n            // http://www.cs.cmu.edu/afs/andrew/scs/cs/15-462/web/old/asst2camera.html\n            curTang = this._tangents[i];\n            prevBinor = this._binormals[i - 1];\n            this._normals[i] = Vector3_1.Vector3.Cross(prevBinor, curTang);\n            if (!this._raw) {\n                this._normals[i].normalize();\n            }\n            this._binormals[i] = Vector3_1.Vector3.Cross(curTang, this._normals[i]);\n            if (!this._raw) {\n                this._binormals[i].normalize();\n            }\n        }\n    };\n    // returns the first non null vector from index : curve[index + N].subtract(curve[index])\n    Path3D.prototype._getFirstNonNullVector = function (index) {\n        var i = 1;\n        var nNVector = this._curve[index + i].subtract(this._curve[index]);\n        while (nNVector.length() === 0 && index + i + 1 < this._curve.length) {\n            i++;\n            nNVector = this._curve[index + i].subtract(this._curve[index]);\n        }\n        return nNVector;\n    };\n    // returns the last non null vector from index : curve[index].subtract(curve[index - N])\n    Path3D.prototype._getLastNonNullVector = function (index) {\n        var i = 1;\n        var nLVector = this._curve[index].subtract(this._curve[index - i]);\n        while (nLVector.length() === 0 && index > i + 1) {\n            i++;\n            nLVector = this._curve[index].subtract(this._curve[index - i]);\n        }\n        return nLVector;\n    };\n    // private function normalVector(v0, vt, va) :\n    // returns an arbitrary point in the plane defined by the point v0 and the vector vt orthogonal to this plane\n    // if va is passed, it returns the va projection on the plane orthogonal to vt at the point v0\n    Path3D.prototype._normalVector = function (v0, vt, va) {\n        var normal0;\n        var tgl = vt.length();\n        if (tgl === 0.0) {\n            tgl = 1.0;\n        }\n        if (va === undefined || va === null) {\n            var point = void 0;\n            if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.y) / tgl, 1.0, types_1.Epsilon)) {\n                // search for a point in the plane\n                point = new Vector3_1.Vector3(0.0, -1.0, 0.0);\n            }\n            else if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.x) / tgl, 1.0, types_1.Epsilon)) {\n                point = new Vector3_1.Vector3(1.0, 0.0, 0.0);\n            }\n            else if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.z) / tgl, 1.0, types_1.Epsilon)) {\n                point = new Vector3_1.Vector3(0.0, 0.0, 1.0);\n            }\n            else {\n                point = Vector3_1.Vector3.Zero();\n            }\n            normal0 = Vector3_1.Vector3.Cross(vt, point);\n        }\n        else {\n            normal0 = Vector3_1.Vector3.Cross(vt, va);\n            Vector3_1.Vector3.CrossToRef(normal0, vt, normal0);\n        }\n        normal0.normalize();\n        return normal0;\n    };\n    return Path3D;\n}());\nexports.Path3D = Path3D;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Path3d.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Plane.ts":
/*!******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Plane.ts ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Vector3_1 = __webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts");\nvar Matrix_1 = __webpack_require__(/*! ./Matrix */ "./packages/decentraland-ecs/src/decentraland/math/Matrix.ts");\nvar preallocatedVariables_1 = __webpack_require__(/*! ./preallocatedVariables */ "./packages/decentraland-ecs/src/decentraland/math/preallocatedVariables.ts");\n/**\n * Represens a plane by the equation ax + by + cz + d = 0\n * @public\n */\nvar Plane = /** @class */ (function () {\n    /**\n     * Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0\n     * @param a - a component of the plane\n     * @param b - b component of the plane\n     * @param c - c component of the plane\n     * @param d - d component of the plane\n     */\n    function Plane(a, b, c, d) {\n        this.normal = new Vector3_1.Vector3(a, b, c);\n        this.d = d;\n    }\n    // Statics\n    /**\n     * Creates a plane from an  array\n     * @param array - the array to create a plane from\n     * @returns a new Plane from the given array.\n     */\n    Plane.FromArray = function (array) {\n        return new Plane(array[0], array[1], array[2], array[3]);\n    };\n    /**\n     * Creates a plane from three points\n     * @param point1 - point used to create the plane\n     * @param point2 - point used to create the plane\n     * @param point3 - point used to create the plane\n     * @returns a new Plane defined by the three given points.\n     */\n    Plane.FromPoints = function (point1, point2, point3) {\n        var result = new Plane(0.0, 0.0, 0.0, 0.0);\n        result.copyFromPoints(point1, point2, point3);\n        return result;\n    };\n    /**\n     * Creates a plane from an origin point and a normal\n     * @param origin - origin of the plane to be constructed\n     * @param normal - normal of the plane to be constructed\n     * @returns a new Plane the normal vector to this plane at the given origin point.\n     * Note : the vector "normal" is updated because normalized.\n     */\n    Plane.FromPositionAndNormal = function (origin, normal) {\n        var result = new Plane(0.0, 0.0, 0.0, 0.0);\n        normal.normalize();\n        result.normal = normal;\n        result.d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\n        return result;\n    };\n    /**\n     * Calculates the distance from a plane and a point\n     * @param origin - origin of the plane to be constructed\n     * @param normal - normal of the plane to be constructed\n     * @param point - point to calculate distance to\n     * @returns the signed distance between the plane defined by the normal vector at the "origin"" point and the given other point.\n     */\n    Plane.SignedDistanceToPlaneFromPositionAndNormal = function (origin, normal, point) {\n        var d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\n        return Vector3_1.Vector3.Dot(point, normal) + d;\n    };\n    /**\n     * @returns the plane coordinates as a new array of 4 elements [a, b, c, d].\n     */\n    Plane.prototype.asArray = function () {\n        return [this.normal.x, this.normal.y, this.normal.z, this.d];\n    };\n    // Methods\n    /**\n     * @returns a new plane copied from the current Plane.\n     */\n    Plane.prototype.clone = function () {\n        return new Plane(this.normal.x, this.normal.y, this.normal.z, this.d);\n    };\n    /**\n     * @returns the string "Plane".\n     */\n    Plane.prototype.getClassName = function () {\n        return \'Plane\';\n    };\n    /**\n     * @returns the Plane hash code.\n     */\n    Plane.prototype.getHashCode = function () {\n        var hash = this.normal.getHashCode();\n        hash = (hash * 397) ^ (this.d || 0);\n        return hash;\n    };\n    /**\n     * Normalize the current Plane in place.\n     * @returns the updated Plane.\n     */\n    Plane.prototype.normalize = function () {\n        var norm = Math.sqrt(this.normal.x * this.normal.x + this.normal.y * this.normal.y + this.normal.z * this.normal.z);\n        var magnitude = 0.0;\n        if (norm !== 0) {\n            magnitude = 1.0 / norm;\n        }\n        this.normal.x *= magnitude;\n        this.normal.y *= magnitude;\n        this.normal.z *= magnitude;\n        this.d *= magnitude;\n        return this;\n    };\n    /**\n     * Applies a transformation the plane and returns the result\n     * @param transformation - the transformation matrix to be applied to the plane\n     * @returns a new Plane as the result of the transformation of the current Plane by the given matrix.\n     */\n    Plane.prototype.transform = function (transformation) {\n        var transposedMatrix = preallocatedVariables_1.MathTmp.Matrix[0];\n        Matrix_1.Matrix.TransposeToRef(transformation, transposedMatrix);\n        var m = transposedMatrix.m;\n        var x = this.normal.x;\n        var y = this.normal.y;\n        var z = this.normal.z;\n        var d = this.d;\n        var normalX = x * m[0] + y * m[1] + z * m[2] + d * m[3];\n        var normalY = x * m[4] + y * m[5] + z * m[6] + d * m[7];\n        var normalZ = x * m[8] + y * m[9] + z * m[10] + d * m[11];\n        var finalD = x * m[12] + y * m[13] + z * m[14] + d * m[15];\n        return new Plane(normalX, normalY, normalZ, finalD);\n    };\n    /**\n     * Calcualtte the dot product between the point and the plane normal\n     * @param point - point to calculate the dot product with\n     * @returns the dot product (float) of the point coordinates and the plane normal.\n     */\n    Plane.prototype.dotCoordinate = function (point) {\n        return this.normal.x * point.x + this.normal.y * point.y + this.normal.z * point.z + this.d;\n    };\n    /**\n     * Updates the current Plane from the plane defined by the three given points.\n     * @param point1 - one of the points used to contruct the plane\n     * @param point2 - one of the points used to contruct the plane\n     * @param point3 - one of the points used to contruct the plane\n     * @returns the updated Plane.\n     */\n    Plane.prototype.copyFromPoints = function (point1, point2, point3) {\n        var x1 = point2.x - point1.x;\n        var y1 = point2.y - point1.y;\n        var z1 = point2.z - point1.z;\n        var x2 = point3.x - point1.x;\n        var y2 = point3.y - point1.y;\n        var z2 = point3.z - point1.z;\n        var yz = y1 * z2 - z1 * y2;\n        var xz = z1 * x2 - x1 * z2;\n        var xy = x1 * y2 - y1 * x2;\n        var pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);\n        var invPyth;\n        if (pyth !== 0) {\n            invPyth = 1.0 / pyth;\n        }\n        else {\n            invPyth = 0.0;\n        }\n        this.normal.x = yz * invPyth;\n        this.normal.y = xz * invPyth;\n        this.normal.z = xy * invPyth;\n        this.d = -(this.normal.x * point1.x + this.normal.y * point1.y + this.normal.z * point1.z);\n        return this;\n    };\n    /**\n     * Checks if the plane is facing a given direction\n     * @param direction - the direction to check if the plane is facing\n     * @param epsilon - value the dot product is compared against (returns true if dot &lt;= epsilon)\n     * @returns True is the vector "direction"  is the same side than the plane normal.\n     */\n    Plane.prototype.isFrontFacingTo = function (direction, epsilon) {\n        var dot = Vector3_1.Vector3.Dot(this.normal, direction);\n        return dot <= epsilon;\n    };\n    /**\n     * Calculates the distance to a point\n     * @param point - point to calculate distance to\n     * @returns the signed distance (float) from the given point to the Plane.\n     */\n    Plane.prototype.signedDistanceTo = function (point) {\n        return Vector3_1.Vector3.Dot(point, this.normal) + this.d;\n    };\n    return Plane;\n}());\nexports.Plane = Plane;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Plane.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Quaternion.ts":
/*!***********************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Quaternion.ts ***!
  \***********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Matrix_1 = __webpack_require__(/*! ./Matrix */ "./packages/decentraland-ecs/src/decentraland/math/Matrix.ts");\nvar Vector3_1 = __webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts");\nvar preallocatedVariables_1 = __webpack_require__(/*! ./preallocatedVariables */ "./packages/decentraland-ecs/src/decentraland/math/preallocatedVariables.ts");\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\n/**\n * Class used to store quaternion data\n * {@link https://en.wikipedia.org/wiki/Quaternion }\n * {@link http://doc.babylonjs.com/features/position,_rotation,_scaling }\n * @public\n */\nvar Quaternion = /** @class */ (function () {\n    /**\n     * Creates a new Quaternion from the given floats\n     * @param x - defines the first component (0 by default)\n     * @param y - defines the second component (0 by default)\n     * @param z - defines the third component (0 by default)\n     * @param w - defines the fourth component (1.0 by default)\n     */\n    function Quaternion(\n    /** defines the first component (0 by default) */\n    x, \n    /** defines the second component (0 by default) */\n    y, \n    /** defines the third component (0 by default) */\n    z, \n    /** defines the fourth component (1.0 by default) */\n    w) {\n        if (x === void 0) { x = 0.0; }\n        if (y === void 0) { y = 0.0; }\n        if (z === void 0) { z = 0.0; }\n        if (w === void 0) { w = 1.0; }\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n    // Statics\n    /**\n     * Creates a new quaternion from a rotation matrix\n     * @param matrix - defines the source matrix\n     * @returns a new quaternion created from the given rotation matrix values\n     */\n    Quaternion.FromRotationMatrix = function (matrix) {\n        var result = new Quaternion();\n        Quaternion.FromRotationMatrixToRef(matrix, result);\n        return result;\n    };\n    /**\n     * Updates the given quaternion with the given rotation matrix values\n     * @param matrix - defines the source matrix\n     * @param result - defines the target quaternion\n     */\n    Quaternion.FromRotationMatrixToRef = function (matrix, result) {\n        var data = matrix.m;\n        // tslint:disable:one-variable-per-declaration\n        var m11 = data[0], m12 = data[4], m13 = data[8];\n        var m21 = data[1], m22 = data[5], m23 = data[9];\n        var m31 = data[2], m32 = data[6], m33 = data[10];\n        // tslint:enable:one-variable-per-declaration\n        var trace = m11 + m22 + m33;\n        var s;\n        if (trace > 0) {\n            s = 0.5 / Math.sqrt(trace + 1.0);\n            result.w = 0.25 / s;\n            result.x = (m32 - m23) * s;\n            result.y = (m13 - m31) * s;\n            result.z = (m21 - m12) * s;\n        }\n        else if (m11 > m22 && m11 > m33) {\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n            result.w = (m32 - m23) / s;\n            result.x = 0.25 * s;\n            result.y = (m12 + m21) / s;\n            result.z = (m13 + m31) / s;\n        }\n        else if (m22 > m33) {\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n            result.w = (m13 - m31) / s;\n            result.x = (m12 + m21) / s;\n            result.y = 0.25 * s;\n            result.z = (m23 + m32) / s;\n        }\n        else {\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n            result.w = (m21 - m12) / s;\n            result.x = (m13 + m31) / s;\n            result.y = (m23 + m32) / s;\n            result.z = 0.25 * s;\n        }\n    };\n    /**\n     * Returns the dot product (float) between the quaternions "left" and "right"\n     * @param left - defines the left operand\n     * @param right - defines the right operand\n     * @returns the dot product\n     */\n    Quaternion.Dot = function (left, right) {\n        return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n    };\n    /**\n     * Checks if the two quaternions are close to each other\n     * @param quat0 - defines the first quaternion to check\n     * @param quat1 - defines the second quaternion to check\n     * @returns true if the two quaternions are close to each other\n     */\n    Quaternion.AreClose = function (quat0, quat1) {\n        var dot = Quaternion.Dot(quat0, quat1);\n        return dot >= 0;\n    };\n    /**\n     * Creates an empty quaternion\n     * @returns a new quaternion set to (0.0, 0.0, 0.0)\n     */\n    Quaternion.Zero = function () {\n        return new Quaternion(0.0, 0.0, 0.0, 0.0);\n    };\n    /**\n     * Inverse a given quaternion\n     * @param q - defines the source quaternion\n     * @returns a new quaternion as the inverted current quaternion\n     */\n    Quaternion.Inverse = function (q) {\n        return new Quaternion(-q.x, -q.y, -q.z, q.w);\n    };\n    /**\n     * Gets a boolean indicating if the given quaternion is identity\n     * @param quaternion - defines the quaternion to check\n     * @returns true if the quaternion is identity\n     */\n    Quaternion.IsIdentity = function (quaternion) {\n        return quaternion && quaternion.x === 0 && quaternion.y === 0 && quaternion.z === 0 && quaternion.w === 1;\n    };\n    /**\n     * Creates a quaternion from a rotation around an axis\n     * @param axis - defines the axis to use\n     * @param angle - defines the angle to use (in Euler degrees)\n     * @returns a new quaternion created from the given axis (Vector3) and angle in radians (float)\n     */\n    Quaternion.RotationAxis = function (axis, angle) {\n        var angleRad = angle * types_1.DEG2RAD;\n        return Quaternion.RotationAxisToRef(axis, angleRad, new Quaternion());\n    };\n    /**\n     * Creates a rotation around an axis and stores it into the given quaternion\n     * @param axis - defines the axis to use\n     * @param angle - defines the angle to use (in Euler degrees)\n     * @param result - defines the target quaternion\n     * @returns the target quaternion\n     */\n    Quaternion.RotationAxisToRef = function (axis, angle, result) {\n        var angleRad = angle * types_1.DEG2RAD;\n        var sin = Math.sin(angleRad / 2);\n        axis.normalize();\n        result.w = Math.cos(angleRad / 2);\n        result.x = axis.x * sin;\n        result.y = axis.y * sin;\n        result.z = axis.z * sin;\n        return result;\n    };\n    /**\n     * Creates a new quaternion from data stored into an array\n     * @param array - defines the data source\n     * @param offset - defines the offset in the source array where the data starts\n     * @returns a new quaternion\n     */\n    Quaternion.FromArray = function (array, offset) {\n        if (offset === void 0) { offset = 0; }\n        return new Quaternion(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n    };\n    /**\n     * Creates a new quaternion from a set of euler angles and stores it in the target quaternion\n     */\n    Quaternion.FromEulerAnglesRef = function (x, y, z, result) {\n        return Quaternion.RotationYawPitchRollToRef(y * types_1.DEG2RAD, x * types_1.DEG2RAD, z * types_1.DEG2RAD, result);\n    };\n    /**\n     * Creates a new quaternion from the given Euler float angles (y, x, z)\n     * @param yaw - defines the rotation around Y axis\n     * @param pitch - defines the rotation around X axis\n     * @param roll - defines the rotation around Z axis\n     * @returns the new quaternion\n     */\n    Quaternion.RotationYawPitchRoll = function (yaw, pitch, roll) {\n        var q = new Quaternion();\n        Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, q);\n        return q;\n    };\n    /**\n     * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n     * @param yaw - defines the rotation around Y axis\n     * @param pitch - defines the rotation around X axis\n     * @param roll - defines the rotation around Z axis\n     * @param result - defines the target quaternion\n     */\n    Quaternion.RotationYawPitchRollToRef = function (yaw, pitch, roll, result) {\n        var halfRoll = roll * 0.5;\n        var halfPitch = pitch * 0.5;\n        var halfYaw = yaw * 0.5;\n        var c1 = Math.cos(halfPitch);\n        var c2 = Math.cos(halfYaw);\n        var c3 = Math.cos(halfRoll);\n        var s1 = Math.sin(halfPitch);\n        var s2 = Math.sin(halfYaw);\n        var s3 = Math.sin(halfRoll);\n        result.x = s1 * c2 * c3 + c1 * s2 * s3;\n        result.y = c1 * s2 * c3 - s1 * c2 * s3;\n        result.z = c1 * c2 * s3 + s1 * s2 * c3;\n        result.w = c1 * c2 * c3 - s1 * s2 * s3;\n    };\n    /**\n     * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation\n     * @param alpha - defines the rotation around first axis\n     * @param beta - defines the rotation around second axis\n     * @param gamma - defines the rotation around third axis\n     * @returns the new quaternion\n     */\n    Quaternion.RotationAlphaBetaGamma = function (alpha, beta, gamma) {\n        var result = new Quaternion();\n        Quaternion.RotationAlphaBetaGammaToRef(alpha, beta, gamma, result);\n        return result;\n    };\n    /**\n     * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion\n     * @param alpha - defines the rotation around first axis\n     * @param beta - defines the rotation around second axis\n     * @param gamma - defines the rotation around third axis\n     * @param result - defines the target quaternion\n     */\n    Quaternion.RotationAlphaBetaGammaToRef = function (alpha, beta, gamma, result) {\n        // Produces a quaternion from Euler angles in the z-x-z orientation\n        var halfGammaPlusAlpha = (gamma + alpha) * 0.5;\n        var halfGammaMinusAlpha = (gamma - alpha) * 0.5;\n        var halfBeta = beta * 0.5;\n        result.x = Math.cos(halfGammaMinusAlpha) * Math.sin(halfBeta);\n        result.y = Math.sin(halfGammaMinusAlpha) * Math.sin(halfBeta);\n        result.z = Math.sin(halfGammaPlusAlpha) * Math.cos(halfBeta);\n        result.w = Math.cos(halfGammaPlusAlpha) * Math.cos(halfBeta);\n    };\n    /**\n     * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\n     * @param axis1 - defines the first axis\n     * @param axis2 - defines the second axis\n     * @param axis3 - defines the third axis\n     * @returns the new quaternion\n     */\n    Quaternion.RotationQuaternionFromAxis = function (axis1, axis2, axis3) {\n        var quat = new Quaternion(0.0, 0.0, 0.0, 0.0);\n        Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n        return quat;\n    };\n    /**\n     * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\n     * @param axis1 - defines the first axis\n     * @param axis2 - defines the second axis\n     * @param axis3 - defines the third axis\n     * @param ref - defines the target quaternion\n     */\n    Quaternion.RotationQuaternionFromAxisToRef = function (axis1, axis2, axis3, ref) {\n        var rotMat = preallocatedVariables_1.MathTmp.Matrix[0];\n        Matrix_1.Matrix.FromXYZAxesToRef(axis1.normalize(), axis2.normalize(), axis3.normalize(), rotMat);\n        Quaternion.FromRotationMatrixToRef(rotMat, ref);\n    };\n    /**\n     * Interpolates between two quaternions\n     * @param left - defines first quaternion\n     * @param right - defines second quaternion\n     * @param amount - defines the gradient to use\n     * @returns the new interpolated quaternion\n     */\n    Quaternion.Slerp = function (left, right, amount) {\n        var result = Quaternion.Identity;\n        Quaternion.SlerpToRef(left, right, amount, result);\n        return result;\n    };\n    /**\n     * Interpolates between two quaternions and stores it into a target quaternion\n     * @param left - defines first quaternion\n     * @param right - defines second quaternion\n     * @param amount - defines the gradient to use\n     * @param result - defines the target quaternion\n     */\n    Quaternion.SlerpToRef = function (left, right, amount, result) {\n        var num2;\n        var num3;\n        var num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n        var flag = false;\n        if (num4 < 0) {\n            flag = true;\n            num4 = -num4;\n        }\n        if (num4 > 0.999999) {\n            num3 = 1 - amount;\n            num2 = flag ? -amount : amount;\n        }\n        else {\n            var num5 = Math.acos(num4);\n            var num6 = 1.0 / Math.sin(num5);\n            num3 = Math.sin((1.0 - amount) * num5) * num6;\n            num2 = flag ? -Math.sin(amount * num5) * num6 : Math.sin(amount * num5) * num6;\n        }\n        result.x = num3 * left.x + num2 * right.x;\n        result.y = num3 * left.y + num2 * right.y;\n        result.z = num3 * left.z + num2 * right.z;\n        result.w = num3 * left.w + num2 * right.w;\n    };\n    /**\n     * Interpolate between two quaternions using Hermite interpolation\n     * @param value1 - defines first quaternion\n     * @param tangent1 - defines the incoming tangent\n     * @param value2 - defines second quaternion\n     * @param tangent2 - defines the outgoing tangent\n     * @param amount - defines the target quaternion\n     * @returns the new interpolated quaternion\n     */\n    Quaternion.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n        var squared = amount * amount;\n        var cubed = amount * squared;\n        var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n        var part2 = -2.0 * cubed + 3.0 * squared;\n        var part3 = cubed - 2.0 * squared + amount;\n        var part4 = cubed - squared;\n        var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;\n        var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;\n        var z = value1.z * part1 + value2.z * part2 + tangent1.z * part3 + tangent2.z * part4;\n        var w = value1.w * part1 + value2.w * part2 + tangent1.w * part3 + tangent2.w * part4;\n        return new Quaternion(x, y, z, w);\n    };\n    Object.defineProperty(Quaternion, "Identity", {\n        /**\n         * Creates an identity quaternion\n         * @returns - the identity quaternion\n         */\n        get: function () {\n            return new Quaternion(0.0, 0.0, 0.0, 1.0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the angle in degrees between two rotations a and b.\n     * @param quat1 - defines the first quaternion\n     * @param quat2 - defines the second quaternion\n     */\n    Quaternion.Angle = function (quat1, quat2) {\n        var dot = Quaternion.Dot(quat1, quat2);\n        return Math.acos(Math.min(Math.abs(dot), 1)) * 2 * types_1.RAD2DEG;\n    };\n    /**\n     * Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.\n     * @param x - the rotation on the x axis in euler degrees\n     * @param y - the rotation on the y axis in euler degrees\n     * @param z - the rotation on the z axis in euler degrees\n     */\n    Quaternion.Euler = function (x, y, z) {\n        return Quaternion.RotationYawPitchRoll(y * types_1.DEG2RAD, x * types_1.DEG2RAD, z * types_1.DEG2RAD);\n    };\n    /**\n     * Creates a rotation with the specified forward and upwards directions.\n     * @param forward - the direction to look in\n     * @param up - the vector that defines in which direction up is\n     */\n    Quaternion.LookRotation = function (forward, up) {\n        if (up === void 0) { up = preallocatedVariables_1.MathTmp.staticUp; }\n        var forwardNew = Vector3_1.Vector3.Normalize(forward);\n        var right = Vector3_1.Vector3.Normalize(Vector3_1.Vector3.Cross(up, forwardNew));\n        var upNew = Vector3_1.Vector3.Cross(forwardNew, right);\n        var m00 = right.x;\n        var m01 = right.y;\n        var m02 = right.z;\n        var m10 = upNew.x;\n        var m11 = upNew.y;\n        var m12 = upNew.z;\n        var m20 = forwardNew.x;\n        var m21 = forwardNew.y;\n        var m22 = forwardNew.z;\n        var num8 = m00 + m11 + m22;\n        var quaternion = new Quaternion();\n        if (num8 > 0) {\n            var num = Math.sqrt(num8 + 1);\n            quaternion.w = num * 0.5;\n            num = 0.5 / num;\n            quaternion.x = (m12 - m21) * num;\n            quaternion.y = (m20 - m02) * num;\n            quaternion.z = (m01 - m10) * num;\n            return quaternion;\n        }\n        if (m00 >= m11 && m00 >= m22) {\n            var num7 = Math.sqrt(1 + m00 - m11 - m22);\n            var num4 = 0.5 / num7;\n            quaternion.x = 0.5 * num7;\n            quaternion.y = (m01 + m10) * num4;\n            quaternion.z = (m02 + m20) * num4;\n            quaternion.w = (m12 - m21) * num4;\n            return quaternion;\n        }\n        if (m11 > m22) {\n            var num6 = Math.sqrt(1 + m11 - m00 - m22);\n            var num3 = 0.5 / num6;\n            quaternion.x = (m10 + m01) * num3;\n            quaternion.y = 0.5 * num6;\n            quaternion.z = (m21 + m12) * num3;\n            quaternion.w = (m20 - m02) * num3;\n            return quaternion;\n        }\n        var num5 = Math.sqrt(1 + m22 - m00 - m11);\n        var num2 = 0.5 / num5;\n        quaternion.x = (m20 + m02) * num2;\n        quaternion.y = (m21 + m12) * num2;\n        quaternion.z = 0.5 * num5;\n        quaternion.w = (m01 - m10) * num2;\n        return quaternion;\n    };\n    /**\n     * The from quaternion is rotated towards to by an angular step of maxDegreesDelta.\n     * @param from - defines the first quaternion\n     * @param to - defines the second quaternion\n     * @param maxDegreesDelta - the interval step\n     */\n    Quaternion.RotateTowards = function (from, to, maxDegreesDelta) {\n        var num = Quaternion.Angle(from, to);\n        if (num === 0) {\n            return to;\n        }\n        var t = Math.min(1, maxDegreesDelta / num);\n        return Quaternion.Slerp(from, to, t);\n    };\n    /**\n     * Creates a rotation which rotates from fromDirection to toDirection.\n     * @param from - defines the first Vector\n     * @param to - defines the second Vector\n     */\n    Quaternion.FromToRotation = function (from, to) {\n        var result = new Quaternion();\n        var v0 = from.normalize();\n        var v1 = to.normalize();\n        var d = Vector3_1.Vector3.Dot(v0, v1);\n        if (d > -1 + types_1.Epsilon) {\n            var s = Math.sqrt((1 + d) * 2);\n            var invs = 1 / s;\n            var c = Vector3_1.Vector3.Cross(v0, v1).scaleInPlace(invs);\n            result.set(c.x, c.y, c.z, s * 0.5);\n        }\n        else if (d > 1 - types_1.Epsilon) {\n            return new Quaternion(0, 0, 0, 1);\n        }\n        else {\n            var axis = Vector3_1.Vector3.Cross(Vector3_1.Vector3.Right(), v0);\n            if (axis.lengthSquared() < types_1.Epsilon) {\n                axis = Vector3_1.Vector3.Cross(Vector3_1.Vector3.Forward(), v0);\n            }\n            result.set(axis.x, axis.y, axis.z, 0);\n        }\n        return result.normalize();\n    };\n    Object.defineProperty(Quaternion.prototype, "normalized", {\n        /**\n         * Converts this quaternion to one with the same orientation but with a magnitude of 1.\n         */\n        get: function () {\n            return this.normalize();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a rotation which rotates from fromDirection to toDirection.\n     * @param from - defines the first Vector\n     * @param to - defines the second Vector\n     * @param up - defines the direction\n     */\n    Quaternion.prototype.setFromToRotation = function (from, to, up) {\n        if (up === void 0) { up = preallocatedVariables_1.MathTmp.staticUp; }\n        preallocatedVariables_1.MathTmp.tmpMatrix = Matrix_1.Matrix.Zero(); // clean up preallocated matrix\n        Matrix_1.Matrix.LookAtLHToRef(from, to, up, preallocatedVariables_1.MathTmp.tmpMatrix);\n        preallocatedVariables_1.MathTmp.tmpMatrix.invert();\n        Quaternion.FromRotationMatrixToRef(preallocatedVariables_1.MathTmp.tmpMatrix, this);\n    };\n    Object.defineProperty(Quaternion.prototype, "eulerAngles", {\n        /**\n         * Sets the euler angle representation of the rotation.\n         */\n        get: function () {\n            var out = new Vector3_1.Vector3();\n            var mat = new Matrix_1.Matrix();\n            this.toRotationMatrix(mat);\n            var m = Matrix_1.Matrix.GetAsMatrix3x3(mat);\n            out.y = types_1.RAD2DEG * Math.asin(Math.max(-1, Math.min(1, m[6])));\n            if (Math.abs(m[6]) < 0.99999) {\n                out.x = types_1.RAD2DEG * Math.atan2(-m[7], m[8]);\n                out.z = types_1.RAD2DEG * Math.atan2(-m[3], m[0]);\n            }\n            else {\n                out.x = types_1.RAD2DEG * Math.atan2(m[5], m[4]);\n                out.z = 0;\n            }\n            return out;\n        },\n        /**\n         * Gets the euler angle representation of the rotation.\n         */\n        set: function (euler) {\n            this.setEuler(euler.x, euler.y, euler.z);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets a string representation for the current quaternion\n     * @returns a string with the Quaternion coordinates\n     */\n    Quaternion.prototype.toString = function () {\n        return "(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";\n    };\n    Object.defineProperty(Quaternion.prototype, "length", {\n        /**\n         * Gets length of current quaternion\n         * @returns the quaternion length (float)\n         */\n        get: function () {\n            return Math.sqrt(this.lengthSquared);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Quaternion.prototype, "lengthSquared", {\n        /**\n         * Gets length of current quaternion\n         * @returns the quaternion length (float)\n         */\n        get: function () {\n            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the class name of the quaternion\n     * @returns the string "Quaternion"\n     */\n    Quaternion.prototype.getClassName = function () {\n        return \'Quaternion\';\n    };\n    /**\n     * Gets a hash code for this quaternion\n     * @returns the quaternion hash code\n     */\n    Quaternion.prototype.getHashCode = function () {\n        var hash = this.x || 0;\n        hash = (hash * 397) ^ (this.y || 0);\n        hash = (hash * 397) ^ (this.z || 0);\n        hash = (hash * 397) ^ (this.w || 0);\n        return hash;\n    };\n    /**\n     * Copy the quaternion to an array\n     * @returns a new array populated with 4 elements from the quaternion coordinates\n     */\n    Quaternion.prototype.asArray = function () {\n        return [this.x, this.y, this.z, this.w];\n    };\n    /**\n     * Check if two quaternions are equals\n     * @param otherQuaternion - defines the second operand\n     * @returns true if the current quaternion and the given one coordinates are strictly equals\n     */\n    Quaternion.prototype.equals = function (otherQuaternion) {\n        return (otherQuaternion &&\n            this.x === otherQuaternion.x &&\n            this.y === otherQuaternion.y &&\n            this.z === otherQuaternion.z &&\n            this.w === otherQuaternion.w);\n    };\n    /**\n     * Clone the current quaternion\n     * @returns a new quaternion copied from the current one\n     */\n    Quaternion.prototype.clone = function () {\n        return new Quaternion(this.x, this.y, this.z, this.w);\n    };\n    /**\n     * Copy a quaternion to the current one\n     * @param other - defines the other quaternion\n     * @returns the updated current quaternion\n     */\n    Quaternion.prototype.copyFrom = function (other) {\n        this.x = other.x;\n        this.y = other.y;\n        this.z = other.z;\n        this.w = other.w;\n        return this;\n    };\n    /**\n     * Updates the current quaternion with the given float coordinates\n     * @param x - defines the x coordinate\n     * @param y - defines the y coordinate\n     * @param z - defines the z coordinate\n     * @param w - defines the w coordinate\n     * @returns the updated current quaternion\n     */\n    Quaternion.prototype.copyFromFloats = function (x, y, z, w) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n        return this;\n    };\n    /**\n     * Updates the current quaternion from the given float coordinates\n     * @param x - defines the x coordinate\n     * @param y - defines the y coordinate\n     * @param z - defines the z coordinate\n     * @param w - defines the w coordinate\n     * @returns the updated current quaternion\n     */\n    Quaternion.prototype.set = function (x, y, z, w) {\n        return this.copyFromFloats(x, y, z, w);\n    };\n    /**\n     * Updates the current quaternion from the given euler angles\n     * @returns the updated current quaternion\n     */\n    Quaternion.prototype.setEuler = function (x, y, z) {\n        Quaternion.RotationYawPitchRollToRef(y * types_1.DEG2RAD, x * types_1.DEG2RAD, z * types_1.DEG2RAD, this);\n        return this;\n    };\n    /**\n     * @internal\n     * Adds two quaternions\n     * @param other - defines the second operand\n     * @returns a new quaternion as the addition result of the given one and the current quaternion\n     */\n    Quaternion.prototype.add = function (other) {\n        return new Quaternion(this.x + other.x, this.y + other.y, this.z + other.z, this.w + other.w);\n    };\n    /**\n     * @internal\n     * Add a quaternion to the current one\n     * @param other - defines the quaternion to add\n     * @returns the current quaternion\n     */\n    Quaternion.prototype.addInPlace = function (other) {\n        this.x += other.x;\n        this.y += other.y;\n        this.z += other.z;\n        this.w += other.w;\n        return this;\n    };\n    /**\n     * Subtract two quaternions\n     * @param other - defines the second operand\n     * @returns a new quaternion as the subtraction result of the given one from the current one\n     */\n    Quaternion.prototype.subtract = function (other) {\n        return new Quaternion(this.x - other.x, this.y - other.y, this.z - other.z, this.w - other.w);\n    };\n    /**\n     * Multiplies the current quaternion by a scale factor\n     * @param value - defines the scale factor\n     * @returns a new quaternion set by multiplying the current quaternion coordinates by the float "scale"\n     */\n    Quaternion.prototype.scale = function (value) {\n        return new Quaternion(this.x * value, this.y * value, this.z * value, this.w * value);\n    };\n    /**\n     * Scale the current quaternion values by a factor and stores the result to a given quaternion\n     * @param scale - defines the scale factor\n     * @param result - defines the Quaternion object where to store the result\n     * @returns the unmodified current quaternion\n     */\n    Quaternion.prototype.scaleToRef = function (scale, result) {\n        result.x = this.x * scale;\n        result.y = this.y * scale;\n        result.z = this.z * scale;\n        result.w = this.w * scale;\n        return this;\n    };\n    /**\n     * Multiplies in place the current quaternion by a scale factor\n     * @param value - defines the scale factor\n     * @returns the current modified quaternion\n     */\n    Quaternion.prototype.scaleInPlace = function (value) {\n        this.x *= value;\n        this.y *= value;\n        this.z *= value;\n        this.w *= value;\n        return this;\n    };\n    /**\n     * Scale the current quaternion values by a factor and add the result to a given quaternion\n     * @param scale - defines the scale factor\n     * @param result - defines the Quaternion object where to store the result\n     * @returns the unmodified current quaternion\n     */\n    Quaternion.prototype.scaleAndAddToRef = function (scale, result) {\n        result.x += this.x * scale;\n        result.y += this.y * scale;\n        result.z += this.z * scale;\n        result.w += this.w * scale;\n        return this;\n    };\n    /**\n     * Multiplies two quaternions\n     * @param q1 - defines the second operand\n     * @returns a new quaternion set as the multiplication result of the current one with the given one "q1"\n     */\n    Quaternion.prototype.multiply = function (q1) {\n        var result = new Quaternion(0, 0, 0, 1.0);\n        this.multiplyToRef(q1, result);\n        return result;\n    };\n    /**\n     * Sets the given "result" as the the multiplication result of the current one with the given one "q1"\n     * @param q1 - defines the second operand\n     * @param result - defines the target quaternion\n     * @returns the current quaternion\n     */\n    Quaternion.prototype.multiplyToRef = function (q1, result) {\n        var x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x;\n        var y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y;\n        var z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z;\n        var w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w;\n        result.copyFromFloats(x, y, z, w);\n        return this;\n    };\n    /**\n     * Updates the current quaternion with the multiplication of itself with the given one "q1"\n     * @param q1 - defines the second operand\n     * @returns the currentupdated quaternion\n     */\n    Quaternion.prototype.multiplyInPlace = function (q1) {\n        this.multiplyToRef(q1, this);\n        return this;\n    };\n    /**\n     * Conjugates (1-q) the current quaternion and stores the result in the given quaternion\n     * @param ref - defines the target quaternion\n     * @returns the current quaternion\n     */\n    Quaternion.prototype.conjugateToRef = function (ref) {\n        ref.copyFromFloats(-this.x, -this.y, -this.z, this.w);\n        return this;\n    };\n    /**\n     * Conjugates in place (1-q) the current quaternion\n     * @returns the current updated quaternion\n     */\n    Quaternion.prototype.conjugateInPlace = function () {\n        this.x *= -1;\n        this.y *= -1;\n        this.z *= -1;\n        return this;\n    };\n    /**\n     * Conjugates in place (1-q) the current quaternion\n     * @returns a new quaternion\n     */\n    Quaternion.prototype.conjugate = function () {\n        var result = new Quaternion(-this.x, -this.y, -this.z, this.w);\n        return result;\n    };\n    /**\n     * Normalize in place the current quaternion\n     * @returns the current updated quaternion\n     */\n    Quaternion.prototype.normalize = function () {\n        var length = 1.0 / this.length;\n        this.x *= length;\n        this.y *= length;\n        this.z *= length;\n        this.w *= length;\n        return this;\n    };\n    Quaternion.prototype.angleAxis = function (degress, axis) {\n        if (axis.lengthSquared() === 0) {\n            return Quaternion.Identity;\n        }\n        var result = Quaternion.Identity;\n        var radians = degress * types_1.DEG2RAD;\n        radians *= 0.5;\n        var a2 = axis.normalize();\n        a2 = axis.scaleInPlace(Math.sin(radians));\n        result.x = a2.x;\n        result.y = a2.y;\n        result.z = a2.z;\n        result.w = Math.cos(radians);\n        return result.normalize();\n    };\n    /**\n     * Updates the given rotation matrix with the current quaternion values\n     * @param result - defines the target matrix\n     * @returns the current unchanged quaternion\n     */\n    Quaternion.prototype.toRotationMatrix = function (result) {\n        Matrix_1.Matrix.FromQuaternionToRef(this, result);\n        return this;\n    };\n    /**\n     * Updates the current quaternion from the given rotation matrix values\n     * @param matrix - defines the source matrix\n     * @returns the current updated quaternion\n     */\n    Quaternion.prototype.fromRotationMatrix = function (matrix) {\n        Quaternion.FromRotationMatrixToRef(matrix, this);\n        return this;\n    };\n    return Quaternion;\n}());\nexports.Quaternion = Quaternion;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Quaternion.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Scalar.ts":
/*!*******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Scalar.ts ***!
  \*******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * Scalar computation library\n * @public\n */\nvar Scalar = /** @class */ (function () {\n    function Scalar() {\n    }\n    /**\n     * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n     * @param a - number\n     * @param b - number\n     * @param epsilon - (default = 1.401298E-45)\n     * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n     */\n    Scalar.WithinEpsilon = function (a, b, epsilon) {\n        if (epsilon === void 0) { epsilon = 1.401298e-45; }\n        var num = a - b;\n        return -epsilon <= num && num <= epsilon;\n    };\n    /**\n     * Returns a string : the upper case translation of the number i to hexadecimal.\n     * @param i - number\n     * @returns the upper case translation of the number i to hexadecimal.\n     */\n    Scalar.ToHex = function (i) {\n        var str = i.toString(16);\n        if (i <= 15) {\n            return (\'0\' + str).toUpperCase();\n        }\n        return str.toUpperCase();\n    };\n    /**\n     * Returns -1 if value is negative and +1 is value is positive.\n     * @param _value - the value\n     * @returns the value itself if it\'s equal to zero.\n     */\n    Scalar.Sign = function (value) {\n        var _value = +value; // convert to a number\n        if (_value === 0 || isNaN(_value)) {\n            return _value;\n        }\n        return _value > 0 ? 1 : -1;\n    };\n    /**\n     * Returns the value itself if it\'s between min and max.\n     * Returns min if the value is lower than min.\n     * Returns max if the value is greater than max.\n     * @param value - the value to clmap\n     * @param min - the min value to clamp to (default: 0)\n     * @param max - the max value to clamp to (default: 1)\n     * @returns the clamped value\n     */\n    Scalar.Clamp = function (value, min, max) {\n        if (min === void 0) { min = 0; }\n        if (max === void 0) { max = 1; }\n        return Math.min(max, Math.max(min, value));\n    };\n    /**\n     * the log2 of value.\n     * @param value - the value to compute log2 of\n     * @returns the log2 of value.\n     */\n    Scalar.Log2 = function (value) {\n        return Math.log(value) * Math.LOG2E;\n    };\n    /**\n     * Loops the value, so that it is never larger than length and never smaller than 0.\n     *\n     * This is similar to the modulo operator but it works with floating point numbers.\n     * For example, using 3.0 for t and 2.5 for length, the result would be 0.5.\n     * With t = 5 and length = 2.5, the result would be 0.0.\n     * Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\n     * @param value - the value\n     * @param length - the length\n     * @returns the looped value\n     */\n    Scalar.Repeat = function (value, length) {\n        return value - Math.floor(value / length) * length;\n    };\n    /**\n     * Normalize the value between 0.0 and 1.0 using min and max values\n     * @param value - value to normalize\n     * @param min - max to normalize between\n     * @param max - min to normalize between\n     * @returns the normalized value\n     */\n    Scalar.Normalize = function (value, min, max) {\n        return (value - min) / (max - min);\n    };\n    /**\n     * Denormalize the value from 0.0 and 1.0 using min and max values\n     * @param normalized - value to denormalize\n     * @param min - max to denormalize between\n     * @param max - min to denormalize between\n     * @returns the denormalized value\n     */\n    Scalar.Denormalize = function (normalized, min, max) {\n        return normalized * (max - min) + min;\n    };\n    /**\n     * Calculates the shortest difference between two given angles given in degrees.\n     * @param current - current angle in degrees\n     * @param target - target angle in degrees\n     * @returns the delta\n     */\n    Scalar.DeltaAngle = function (current, target) {\n        var num = Scalar.Repeat(target - current, 360.0);\n        if (num > 180.0) {\n            num -= 360.0;\n        }\n        return num;\n    };\n    /**\n     * PingPongs the value t, so that it is never larger than length and never smaller than 0.\n     * @param tx - value\n     * @param length - length\n     * @returns The returned value will move back and forth between 0 and length\n     */\n    Scalar.PingPong = function (tx, length) {\n        var t = Scalar.Repeat(tx, length * 2.0);\n        return length - Math.abs(t - length);\n    };\n    /**\n     * Interpolates between min and max with smoothing at the limits.\n     *\n     * This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up\n     * from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\n     * @param from - from\n     * @param to - to\n     * @param tx - value\n     * @returns the smooth stepped value\n     */\n    Scalar.SmoothStep = function (from, to, tx) {\n        var t = Scalar.Clamp(tx);\n        t = -2.0 * t * t * t + 3.0 * t * t;\n        return to * t + from * (1.0 - t);\n    };\n    /**\n     * Moves a value current towards target.\n     *\n     * This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta.\n     * Negative values of maxDelta pushes the value away from target.\n     * @param current - current value\n     * @param target - target value\n     * @param maxDelta - max distance to move\n     * @returns resulting value\n     */\n    Scalar.MoveTowards = function (current, target, maxDelta) {\n        var result = 0;\n        if (Math.abs(target - current) <= maxDelta) {\n            result = target;\n        }\n        else {\n            result = current + Scalar.Sign(target - current) * maxDelta;\n        }\n        return result;\n    };\n    /**\n     * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\n     *\n     * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta\n     *  are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\n     * @param current - current value\n     * @param target - target value\n     * @param maxDelta - max distance to move\n     * @returns resulting angle\n     */\n    Scalar.MoveTowardsAngle = function (current, target, maxDelta) {\n        var num = Scalar.DeltaAngle(current, target);\n        var result = 0;\n        if (-maxDelta < num && num < maxDelta) {\n            result = target;\n        }\n        else {\n            result = Scalar.MoveTowards(current, current + num, maxDelta);\n        }\n        return result;\n    };\n    /**\n     * Creates a new scalar with values linearly interpolated of "amount" between the start scalar and the end scalar.\n     * @param start - start value\n     * @param end - target value\n     * @param amount - amount to lerp between\n     * @returns the lerped value\n     */\n    Scalar.Lerp = function (start, end, amount) {\n        return start + (end - start) * amount;\n    };\n    /**\n     * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.\n     * The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\n     * @param start - start value\n     * @param end - target value\n     * @param amount - amount to lerp between\n     * @returns the lerped value\n     */\n    Scalar.LerpAngle = function (start, end, amount) {\n        var num = Scalar.Repeat(end - start, 360.0);\n        if (num > 180.0) {\n            num -= 360.0;\n        }\n        return start + num * Scalar.Clamp(amount);\n    };\n    /**\n     * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\n     * @param a - start value\n     * @param b - target value\n     * @param value - value between a and b\n     * @returns the inverseLerp value\n     */\n    Scalar.InverseLerp = function (a, b, value) {\n        var result = 0;\n        if (a !== b) {\n            result = Scalar.Clamp((value - a) / (b - a));\n        }\n        else {\n            result = 0.0;\n        }\n        return result;\n    };\n    /**\n     * Returns a new scalar located for "amount" (float) on the Hermite spline defined by the scalars "value1", "value3", "tangent1", "tangent2".\n     * {@link http://mathworld.wolfram.com/HermitePolynomial.html}\n     * @param value1 - spline value\n     * @param tangent1 - spline value\n     * @param value2 - spline value\n     * @param tangent2 - spline value\n     * @param amount - input value\n     * @returns hermite result\n     */\n    Scalar.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n        var squared = amount * amount;\n        var cubed = amount * squared;\n        var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n        var part2 = -2.0 * cubed + 3.0 * squared;\n        var part3 = cubed - 2.0 * squared + amount;\n        var part4 = cubed - squared;\n        return value1 * part1 + value2 * part2 + tangent1 * part3 + tangent2 * part4;\n    };\n    /**\n     * Returns a random float number between and min and max values\n     * @param min - min value of random\n     * @param max - max value of random\n     * @returns random value\n     */\n    Scalar.RandomRange = function (min, max) {\n        if (min === max) {\n            return min;\n        }\n        return Math.random() * (max - min) + min;\n    };\n    /**\n     * This function returns percentage of a number in a given range.\n     *\n     * RangeToPercent(40,20,60) will return 0.5 (50%)\n     * RangeToPercent(34,0,100) will return 0.34 (34%)\n     * @param num - to convert to percentage\n     * @param min - min range\n     * @param max - max range\n     * @returns the percentage\n     */\n    Scalar.RangeToPercent = function (num, min, max) {\n        return (num - min) / (max - min);\n    };\n    /**\n     * This function returns number that corresponds to the percentage in a given range.\n     *\n     * PercentToRange(0.34,0,100) will return 34.\n     * @param percent - to convert to number\n     * @param min - min range\n     * @param max - max range\n     * @returns the number\n     */\n    Scalar.PercentToRange = function (percent, min, max) {\n        return (max - min) * percent + min;\n    };\n    /**\n     * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\n     * @param angle - The angle to normalize in radian.\n     * @returns The converted angle.\n     */\n    Scalar.NormalizeRadians = function (angle) {\n        // More precise but slower version kept for reference.\n        // tslint:disable:no-commented-out-code\n        /*\n          // angle = angle % Tools.TwoPi;\n          // angle = (angle + Tools.TwoPi) % Tools.TwoPi;\n    \n          //if (angle > Math.PI) {\n          //\tangle -= Tools.TwoPi;\n          //}\n           */\n        return angle - Scalar.TwoPi * Math.floor((angle + Math.PI) / Scalar.TwoPi);\n    };\n    /**\n     * Two pi constants convenient for computation.\n     */\n    Scalar.TwoPi = Math.PI * 2;\n    return Scalar;\n}());\nexports.Scalar = Scalar;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Scalar.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Size.ts":
/*!*****************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Size.ts ***!
  \*****************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * Size containing widht and height\n * @public\n */\nvar Size = /** @class */ (function () {\n    /**\n     * Creates a Size object from the given width and height (floats).\n     * @param width - width of the new size\n     * @param height - height of the new size\n     */\n    function Size(width, height) {\n        this.width = width;\n        this.height = height;\n    }\n    Object.defineProperty(Size.prototype, "surface", {\n        /**\n         * The surface of the Size : width * height (float).\n         */\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Create a new size of zero\n     * @returns a new Size set to (0.0, 0.0)\n     */\n    Size.Zero = function () {\n        return new Size(0.0, 0.0);\n    };\n    /**\n     * Creates a new Size set at the linear interpolation "amount" between "start" and "end"\n     * @param start - starting size to lerp between\n     * @param end - end size to lerp between\n     * @param amount - amount to lerp between the start and end values\n     * @returns a new Size set at the linear interpolation "amount" between "start" and "end"\n     */\n    Size.Lerp = function (start, end, amount) {\n        var w = start.width + (end.width - start.width) * amount;\n        var h = start.height + (end.height - start.height) * amount;\n        return new Size(w, h);\n    };\n    /**\n     * Returns a string with the Size width and height\n     * @returns a string with the Size width and height\n     */\n    Size.prototype.toString = function () {\n        return "{W: " + this.width + ", H: " + this.height + "}";\n    };\n    /**\n     * "Size"\n     * @returns the string "Size"\n     */\n    Size.prototype.getClassName = function () {\n        return \'Size\';\n    };\n    /**\n     * Returns the Size hash code.\n     * @returns a hash code for a unique width and height\n     */\n    Size.prototype.getHashCode = function () {\n        var hash = this.width || 0;\n        hash = (hash * 397) ^ (this.height || 0);\n        return hash;\n    };\n    /**\n     * Updates the current size from the given one.\n     * @param src - the given size\n     */\n    Size.prototype.copyFrom = function (src) {\n        this.width = src.width;\n        this.height = src.height;\n    };\n    /**\n     * Updates in place the current Size from the given floats.\n     * @param width - width of the new size\n     * @param height - height of the new size\n     * @returns the updated Size.\n     */\n    Size.prototype.copyFromFloats = function (width, height) {\n        this.width = width;\n        this.height = height;\n        return this;\n    };\n    /**\n     * Updates in place the current Size from the given floats.\n     * @param width - width to set\n     * @param height - height to set\n     * @returns the updated Size.\n     */\n    Size.prototype.set = function (width, height) {\n        return this.copyFromFloats(width, height);\n    };\n    /**\n     * Multiplies the width and height by numbers\n     * @param w - factor to multiple the width by\n     * @param h - factor to multiple the height by\n     * @returns a new Size set with the multiplication result of the current Size and the given floats.\n     */\n    Size.prototype.multiplyByFloats = function (w, h) {\n        return new Size(this.width * w, this.height * h);\n    };\n    /**\n     * Clones the size\n     * @returns a new Size copied from the given one.\n     */\n    Size.prototype.clone = function () {\n        return new Size(this.width, this.height);\n    };\n    /**\n     * True if the current Size and the given one width and height are strictly equal.\n     * @param other - the other size to compare against\n     * @returns True if the current Size and the given one width and height are strictly equal.\n     */\n    Size.prototype.equals = function (other) {\n        if (!other) {\n            return false;\n        }\n        return this.width === other.width && this.height === other.height;\n    };\n    /**\n     * Sums the width and height of two sizes\n     * @param otherSize - size to add to this size\n     * @returns a new Size set as the addition result of the current Size and the given one.\n     */\n    Size.prototype.add = function (otherSize) {\n        var r = new Size(this.width + otherSize.width, this.height + otherSize.height);\n        return r;\n    };\n    /**\n     * Subtracts the width and height of two\n     * @param otherSize - size to subtract to this size\n     * @returns a new Size set as the subtraction result of  the given one from the current Size.\n     */\n    Size.prototype.subtract = function (otherSize) {\n        var r = new Size(this.width - otherSize.width, this.height - otherSize.height);\n        return r;\n    };\n    return Size;\n}());\nexports.Size = Size;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Size.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Vector2.ts":
/*!********************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Vector2.ts ***!
  \********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\nvar Scalar_1 = __webpack_require__(/*! ./Scalar */ "./packages/decentraland-ecs/src/decentraland/math/Scalar.ts");\n/**\n * Class representing a vector containing 2 coordinates\n * @public\n */\nvar Vector2 = /** @class */ (function () {\n    /**\n     * Creates a new Vector2 from the given x and y coordinates\n     * @param x - defines the first coordinate\n     * @param y - defines the second coordinate\n     */\n    function Vector2(\n    /** defines the first coordinate */\n    x, \n    /** defines the second coordinate */\n    y) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * Gets a new Vector2(0, 0)\n     * @returns a new Vector2\n     */\n    Vector2.Zero = function () {\n        return new Vector2(0, 0);\n    };\n    /**\n     * Gets a new Vector2(1, 1)\n     * @returns a new Vector2\n     */\n    Vector2.One = function () {\n        return new Vector2(1, 1);\n    };\n    /**\n     * Returns a new Vector2 as the result of the addition of the two given vectors.\n     * @param vector1 - the first vector\n     * @param vector2 - the second vector\n     * @returns the resulting vector\n     */\n    Vector2.Add = function (vector1, vector2) {\n        return new Vector2(vector1.x, vector1.y).addInPlace(vector2);\n    };\n    /**\n     * Gets a new Vector2 set from the given index element of the given array\n     * @param array - defines the data source\n     * @param offset - defines the offset in the data source\n     * @returns a new Vector2\n     */\n    Vector2.FromArray = function (array, offset) {\n        if (offset === void 0) { offset = 0; }\n        return new Vector2(array[offset], array[offset + 1]);\n    };\n    /**\n     * Sets "result" from the given index element of the given array\n     * @param array - defines the data source\n     * @param offset - defines the offset in the data source\n     * @param result - defines the target vector\n     */\n    Vector2.FromArrayToRef = function (array, offset, result) {\n        result.x = array[offset];\n        result.y = array[offset + 1];\n    };\n    /**\n     * Gets a new Vector2 located for "amount" (float) on the CatmullRom spline defined by the given four Vector2\n     * @param value1 - defines 1st point of control\n     * @param value2 - defines 2nd point of control\n     * @param value3 - defines 3rd point of control\n     * @param value4 - defines 4th point of control\n     * @param amount - defines the interpolation factor\n     * @returns a new Vector2\n     */\n    Vector2.CatmullRom = function (value1, value2, value3, value4, amount) {\n        var squared = amount * amount;\n        var cubed = amount * squared;\n        var x = 0.5 *\n            (2.0 * value2.x +\n                (-value1.x + value3.x) * amount +\n                (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared +\n                (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n        var y = 0.5 *\n            (2.0 * value2.y +\n                (-value1.y + value3.y) * amount +\n                (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared +\n                (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n        return new Vector2(x, y);\n    };\n    /**\n     * Returns a new Vector2 set with same the coordinates than "value" ones if the vector "value" is in the square defined by "min" and "max".\n     * If a coordinate of "value" is lower than "min" coordinates, the returned Vector2 is given this "min" coordinate.\n     * If a coordinate of "value" is greater than "max" coordinates, the returned Vector2 is given this "max" coordinate\n     * @param value - defines the value to clamp\n     * @param min - defines the lower limit\n     * @param max - defines the upper limit\n     * @returns a new Vector2\n     */\n    Vector2.Clamp = function (value, min, max) {\n        var x = value.x;\n        x = x > max.x ? max.x : x;\n        x = x < min.x ? min.x : x;\n        var y = value.y;\n        y = y > max.y ? max.y : y;\n        y = y < min.y ? min.y : y;\n        return new Vector2(x, y);\n    };\n    /**\n     * Returns a new Vector2 located for "amount" (float) on the Hermite spline defined by the vectors "value1", "value3", "tangent1", "tangent2"\n     * @param value1 - defines the 1st control point\n     * @param tangent1 - defines the outgoing tangent\n     * @param value2 - defines the 2nd control point\n     * @param tangent2 - defines the incoming tangent\n     * @param amount - defines the interpolation factor\n     * @returns a new Vector2\n     */\n    Vector2.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n        var squared = amount * amount;\n        var cubed = amount * squared;\n        var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n        var part2 = -2.0 * cubed + 3.0 * squared;\n        var part3 = cubed - 2.0 * squared + amount;\n        var part4 = cubed - squared;\n        var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;\n        var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;\n        return new Vector2(x, y);\n    };\n    /**\n     * Returns a new Vector2 located for "amount" (float) on the linear interpolation between the vector "start" adn the vector "end".\n     * @param start - defines the start vector\n     * @param end - defines the end vector\n     * @param amount - defines the interpolation factor\n     * @returns a new Vector2\n     */\n    Vector2.Lerp = function (start, end, amount) {\n        var x = start.x + (end.x - start.x) * amount;\n        var y = start.y + (end.y - start.y) * amount;\n        return new Vector2(x, y);\n    };\n    /**\n     * Gets the dot product of the vector "left" and the vector "right"\n     * @param left - defines first vector\n     * @param right - defines second vector\n     * @returns the dot product (float)\n     */\n    Vector2.Dot = function (left, right) {\n        return left.x * right.x + left.y * right.y;\n    };\n    /**\n     * Returns a new Vector2 equal to the normalized given vector\n     * @param vector - defines the vector to normalize\n     * @returns a new Vector2\n     */\n    Vector2.Normalize = function (vector) {\n        var newVector = new Vector2(vector.x, vector.y);\n        newVector.normalize();\n        return newVector;\n    };\n    /**\n     * Gets a new Vector2 set with the minimal coordinate values from the "left" and "right" vectors\n     * @param left - defines 1st vector\n     * @param right - defines 2nd vector\n     * @returns a new Vector2\n     */\n    Vector2.Minimize = function (left, right) {\n        var x = left.x < right.x ? left.x : right.x;\n        var y = left.y < right.y ? left.y : right.y;\n        return new Vector2(x, y);\n    };\n    /**\n     * Gets a new Vecto2 set with the maximal coordinate values from the "left" and "right" vectors\n     * @param left - defines 1st vector\n     * @param right - defines 2nd vector\n     * @returns a new Vector2\n     */\n    Vector2.Maximize = function (left, right) {\n        var x = left.x > right.x ? left.x : right.x;\n        var y = left.y > right.y ? left.y : right.y;\n        return new Vector2(x, y);\n    };\n    /**\n     * Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix\n     * @param vector - defines the vector to transform\n     * @param transformation - defines the matrix to apply\n     * @returns a new Vector2\n     */\n    Vector2.Transform = function (vector, transformation) {\n        var r = Vector2.Zero();\n        Vector2.TransformToRef(vector, transformation, r);\n        return r;\n    };\n    /**\n     * Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector "result" coordinates\n     * @param vector - defines the vector to transform\n     * @param transformation - defines the matrix to apply\n     * @param result - defines the target vector\n     */\n    Vector2.TransformToRef = function (vector, transformation, result) {\n        var m = transformation.m;\n        var x = vector.x * m[0] + vector.y * m[4] + m[12];\n        var y = vector.x * m[1] + vector.y * m[5] + m[13];\n        result.x = x;\n        result.y = y;\n    };\n    /**\n     * Determines if a given vector is included in a triangle\n     * @param p - defines the vector to test\n     * @param p0 - defines 1st triangle point\n     * @param p1 - defines 2nd triangle point\n     * @param p2 - defines 3rd triangle point\n     * @returns true if the point "p" is in the triangle defined by the vertors "p0", "p1", "p2"\n     */\n    Vector2.PointInTriangle = function (p, p0, p1, p2) {\n        var a = (1 / 2) * (-p1.y * p2.x + p0.y * (-p1.x + p2.x) + p0.x * (p1.y - p2.y) + p1.x * p2.y);\n        var sign = a < 0 ? -1 : 1;\n        var s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) * sign;\n        var t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) * sign;\n        return s > 0 && t > 0 && s + t < 2 * a * sign;\n    };\n    /**\n     * Gets the distance between the vectors "value1" and "value2"\n     * @param value1 - defines first vector\n     * @param value2 - defines second vector\n     * @returns the distance between vectors\n     */\n    Vector2.Distance = function (value1, value2) {\n        return Math.sqrt(Vector2.DistanceSquared(value1, value2));\n    };\n    /**\n     * Returns the squared distance between the vectors "value1" and "value2"\n     * @param value1 - defines first vector\n     * @param value2 - defines second vector\n     * @returns the squared distance between vectors\n     */\n    Vector2.DistanceSquared = function (value1, value2) {\n        var x = value1.x - value2.x;\n        var y = value1.y - value2.y;\n        return x * x + y * y;\n    };\n    /**\n     * Gets a new Vector2 located at the center of the vectors "value1" and "value2"\n     * @param value1 - defines first vector\n     * @param value2 - defines second vector\n     * @returns a new Vector2\n     */\n    Vector2.Center = function (value1, value2) {\n        var center = Vector2.Add(value1, value2);\n        center.scaleInPlace(0.5);\n        return center;\n    };\n    /**\n     * Gets the shortest distance (float) between the point "p" and the segment defined by the two points "segA" and "segB".\n     * @param p - defines the middle point\n     * @param segA - defines one point of the segment\n     * @param segB - defines the other point of the segment\n     * @returns the shortest distance\n     */\n    Vector2.DistanceOfPointFromSegment = function (p, segA, segB) {\n        var l2 = Vector2.DistanceSquared(segA, segB);\n        if (l2 === 0.0) {\n            return Vector2.Distance(p, segA);\n        }\n        var v = segB.subtract(segA);\n        var t = Math.max(0, Math.min(1, Vector2.Dot(p.subtract(segA), v) / l2));\n        var proj = segA.add(v.multiplyByFloats(t, t));\n        return Vector2.Distance(p, proj);\n    };\n    /**\n     * Gets a string with the Vector2 coordinates\n     * @returns a string with the Vector2 coordinates\n     */\n    Vector2.prototype.toString = function () {\n        return \'{X: \' + this.x + \' Y:\' + this.y + \'}\';\n    };\n    /**\n     * Gets class name\n     * @returns the string "Vector2"\n     */\n    Vector2.prototype.getClassName = function () {\n        return \'Vector2\';\n    };\n    /**\n     * Gets current vector hash code\n     * @returns the Vector2 hash code as a number\n     */\n    Vector2.prototype.getHashCode = function () {\n        var hash = this.x || 0;\n        hash = (hash * 397) ^ (this.y || 0);\n        return hash;\n    };\n    // Operators\n    /**\n     * Sets the Vector2 coordinates in the given array or FloatArray from the given index.\n     * @param array - defines the source array\n     * @param index - defines the offset in source array\n     * @returns the current Vector2\n     */\n    Vector2.prototype.toArray = function (array, index) {\n        if (index === void 0) { index = 0; }\n        array[index] = this.x;\n        array[index + 1] = this.y;\n        return this;\n    };\n    /**\n     * Copy the current vector to an array\n     * @returns a new array with 2 elements: the Vector2 coordinates.\n     */\n    Vector2.prototype.asArray = function () {\n        var result = new Array();\n        this.toArray(result, 0);\n        return result;\n    };\n    /**\n     * Sets the Vector2 coordinates with the given Vector2 coordinates\n     * @param source - defines the source Vector2\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.copyFrom = function (source) {\n        this.x = source.x;\n        this.y = source.y;\n        return this;\n    };\n    /**\n     * Sets the Vector2 coordinates with the given floats\n     * @param x - defines the first coordinate\n     * @param y - defines the second coordinate\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.copyFromFloats = function (x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    };\n    /**\n     * Sets the Vector2 coordinates with the given floats\n     * @param x - defines the first coordinate\n     * @param y - defines the second coordinate\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.set = function (x, y) {\n        return this.copyFromFloats(x, y);\n    };\n    /**\n     * Add another vector with the current one\n     * @param otherVector - defines the other vector\n     * @returns a new Vector2 set with the addition of the current Vector2 and the given one coordinates\n     */\n    Vector2.prototype.add = function (otherVector) {\n        return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n    };\n    /**\n     * Sets the "result" coordinates with the addition of the current Vector2 and the given one coordinates\n     * @param otherVector - defines the other vector\n     * @param result - defines the target vector\n     * @returns the unmodified current Vector2\n     */\n    Vector2.prototype.addToRef = function (otherVector, result) {\n        result.x = this.x + otherVector.x;\n        result.y = this.y + otherVector.y;\n        return this;\n    };\n    /**\n     * Set the Vector2 coordinates by adding the given Vector2 coordinates\n     * @param otherVector - defines the other vector\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.addInPlace = function (otherVector) {\n        this.x += otherVector.x;\n        this.y += otherVector.y;\n        return this;\n    };\n    /**\n     * Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates\n     * @param otherVector - defines the other vector\n     * @returns a new Vector2\n     */\n    Vector2.prototype.addVector3 = function (otherVector) {\n        return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n    };\n    /**\n     * Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2\n     * @param otherVector - defines the other vector\n     * @returns a new Vector2\n     */\n    Vector2.prototype.subtract = function (otherVector) {\n        return new Vector2(this.x - otherVector.x, this.y - otherVector.y);\n    };\n    /**\n     * Sets the "result" coordinates with the subtraction of the given one from the current Vector2 coordinates.\n     * @param otherVector - defines the other vector\n     * @param result - defines the target vector\n     * @returns the unmodified current Vector2\n     */\n    Vector2.prototype.subtractToRef = function (otherVector, result) {\n        result.x = this.x - otherVector.x;\n        result.y = this.y - otherVector.y;\n        return this;\n    };\n    /**\n     * Sets the current Vector2 coordinates by subtracting from it the given one coordinates\n     * @param otherVector - defines the other vector\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.subtractInPlace = function (otherVector) {\n        this.x -= otherVector.x;\n        this.y -= otherVector.y;\n        return this;\n    };\n    /**\n     * Multiplies in place the current Vector2 coordinates by the given ones\n     * @param otherVector - defines the other vector\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.multiplyInPlace = function (otherVector) {\n        this.x *= otherVector.x;\n        this.y *= otherVector.y;\n        return this;\n    };\n    /**\n     * Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates\n     * @param otherVector - defines the other vector\n     * @returns a new Vector2\n     */\n    Vector2.prototype.multiply = function (otherVector) {\n        return new Vector2(this.x * otherVector.x, this.y * otherVector.y);\n    };\n    /**\n     * Sets "result" coordinates with the multiplication of the current Vector2 and the given one coordinates\n     * @param otherVector - defines the other vector\n     * @param result - defines the target vector\n     * @returns the unmodified current Vector2\n     */\n    Vector2.prototype.multiplyToRef = function (otherVector, result) {\n        result.x = this.x * otherVector.x;\n        result.y = this.y * otherVector.y;\n        return this;\n    };\n    /**\n     * Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats\n     * @param x - defines the first coordinate\n     * @param y - defines the second coordinate\n     * @returns a new Vector2\n     */\n    Vector2.prototype.multiplyByFloats = function (x, y) {\n        return new Vector2(this.x * x, this.y * y);\n    };\n    /**\n     * Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates\n     * @param otherVector - defines the other vector\n     * @returns a new Vector2\n     */\n    Vector2.prototype.divide = function (otherVector) {\n        return new Vector2(this.x / otherVector.x, this.y / otherVector.y);\n    };\n    /**\n     * Sets the "result" coordinates with the Vector2 divided by the given one coordinates\n     * @param otherVector - defines the other vector\n     * @param result - defines the target vector\n     * @returns the unmodified current Vector2\n     */\n    Vector2.prototype.divideToRef = function (otherVector, result) {\n        result.x = this.x / otherVector.x;\n        result.y = this.y / otherVector.y;\n        return this;\n    };\n    /**\n     * Divides the current Vector2 coordinates by the given ones\n     * @param otherVector - defines the other vector\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.divideInPlace = function (otherVector) {\n        return this.divideToRef(otherVector, this);\n    };\n    /**\n     * Gets a new Vector2 with current Vector2 negated coordinates\n     * @returns a new Vector2\n     */\n    Vector2.prototype.negate = function () {\n        return new Vector2(-this.x, -this.y);\n    };\n    /**\n     * Multiply the Vector2 coordinates by scale\n     * @param scale - defines the scaling factor\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.scaleInPlace = function (scale) {\n        this.x *= scale;\n        this.y *= scale;\n        return this;\n    };\n    /**\n     * Returns a new Vector2 scaled by "scale" from the current Vector2\n     * @param scale - defines the scaling factor\n     * @returns a new Vector2\n     */\n    Vector2.prototype.scale = function (scale) {\n        var result = new Vector2(0, 0);\n        this.scaleToRef(scale, result);\n        return result;\n    };\n    /**\n     * Scale the current Vector2 values by a factor to a given Vector2\n     * @param scale - defines the scale factor\n     * @param result - defines the Vector2 object where to store the result\n     * @returns the unmodified current Vector2\n     */\n    Vector2.prototype.scaleToRef = function (scale, result) {\n        result.x = this.x * scale;\n        result.y = this.y * scale;\n        return this;\n    };\n    /**\n     * Scale the current Vector2 values by a factor and add the result to a given Vector2\n     * @param scale - defines the scale factor\n     * @param result - defines the Vector2 object where to store the result\n     * @returns the unmodified current Vector2\n     */\n    Vector2.prototype.scaleAndAddToRef = function (scale, result) {\n        result.x += this.x * scale;\n        result.y += this.y * scale;\n        return this;\n    };\n    /**\n     * Gets a boolean if two vectors are equals\n     * @param otherVector - defines the other vector\n     * @returns true if the given vector coordinates strictly equal the current Vector2 ones\n     */\n    Vector2.prototype.equals = function (otherVector) {\n        return otherVector && this.x === otherVector.x && this.y === otherVector.y;\n    };\n    /**\n     * Gets a boolean if two vectors are equals (using an epsilon value)\n     * @param otherVector - defines the other vector\n     * @param epsilon - defines the minimal distance to consider equality\n     * @returns true if the given vector coordinates are close to the current ones by a distance of epsilon.\n     */\n    Vector2.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\n        if (epsilon === void 0) { epsilon = types_1.Epsilon; }\n        return (otherVector &&\n            Scalar_1.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n            Scalar_1.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon));\n    };\n    /**\n     * Gets a new Vector2 from current Vector2 floored values\n     * @returns a new Vector2\n     */\n    Vector2.prototype.floor = function () {\n        return new Vector2(Math.floor(this.x), Math.floor(this.y));\n    };\n    /**\n     * Gets a new Vector2 from current Vector2 floored values\n     * @returns a new Vector2\n     */\n    Vector2.prototype.fract = function () {\n        return new Vector2(this.x - Math.floor(this.x), this.y - Math.floor(this.y));\n    };\n    // Properties\n    /**\n     * Gets the length of the vector\n     * @returns the vector length (float)\n     */\n    Vector2.prototype.length = function () {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    };\n    /**\n     * Gets the vector squared length\n     * @returns the vector squared length (float)\n     */\n    Vector2.prototype.lengthSquared = function () {\n        return this.x * this.x + this.y * this.y;\n    };\n    // Methods\n    /**\n     * Normalize the vector\n     * @returns the current updated Vector2\n     */\n    Vector2.prototype.normalize = function () {\n        var len = this.length();\n        if (len === 0) {\n            return this;\n        }\n        var num = 1.0 / len;\n        this.x *= num;\n        this.y *= num;\n        return this;\n    };\n    /**\n     * Gets a new Vector2 copied from the Vector2\n     * @returns a new Vector2\n     */\n    Vector2.prototype.clone = function () {\n        return new Vector2(this.x, this.y);\n    };\n    return Vector2;\n}());\nexports.Vector2 = Vector2;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Vector2.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Vector3.ts":
/*!********************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Vector3.ts ***!
  \********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar preallocatedVariables_1 = __webpack_require__(/*! ./preallocatedVariables */ "./packages/decentraland-ecs/src/decentraland/math/preallocatedVariables.ts");\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\nvar Quaternion_1 = __webpack_require__(/*! ./Quaternion */ "./packages/decentraland-ecs/src/decentraland/math/Quaternion.ts");\nvar Scalar_1 = __webpack_require__(/*! ./Scalar */ "./packages/decentraland-ecs/src/decentraland/math/Scalar.ts");\n/**\n * Classed used to store (x,y,z) vector representation\n * A Vector3 is the main object used in 3D geometry\n * It can represent etiher the coordinates of a point the space, either a direction\n * Reminder: Babylon.js uses a left handed forward facing system\n * @public\n */\nvar Vector3 = /** @class */ (function () {\n    /**\n     * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\n     * @param x - defines the first coordinates (on X axis)\n     * @param y - defines the second coordinates (on Y axis)\n     * @param z - defines the third coordinates (on Z axis)\n     */\n    function Vector3(\n    /**\n     * Defines the first coordinates (on X axis)\n     */\n    x, \n    /**\n     * Defines the second coordinates (on Y axis)\n     */\n    y, \n    /**\n     * Defines the third coordinates (on Z axis)\n     */\n    z) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (z === void 0) { z = 0; }\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    Object.defineProperty(Vector3.prototype, "isNonUniform", {\n        /**\n         * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\n         */\n        get: function () {\n            var absX = Math.abs(this.x);\n            var absY = Math.abs(this.y);\n            if (absX !== absY) {\n                return true;\n            }\n            var absZ = Math.abs(this.z);\n            if (absX !== absZ) {\n                return true;\n            }\n            if (absY !== absZ) {\n                return true;\n            }\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Statics\n    /**\n     * Returns a new Vector3 as the result of the addition of the two given vectors.\n     * @param vector1 - the first vector\n     * @param vector2 - the second vector\n     * @returns the resulting vector\n     */\n    Vector3.Add = function (vector1, vector2) {\n        return new Vector3(vector1.x, vector1.y, vector1.z).addInPlace(vector2);\n    };\n    /**\n     * Get the clip factor between two vectors\n     * @param vector0 - defines the first operand\n     * @param vector1 - defines the second operand\n     * @param axis - defines the axis to use\n     * @param size - defines the size along the axis\n     * @returns the clip factor\n     */\n    Vector3.GetClipFactor = function (vector0, vector1, axis, size) {\n        var d0 = Vector3.Dot(vector0, axis) - size;\n        var d1 = Vector3.Dot(vector1, axis) - size;\n        var s = d0 / (d0 - d1);\n        return s;\n    };\n    /**\n     * Get angle between two vectors\n     * @param vector0 - angle between vector0 and vector1\n     * @param vector1 - angle between vector0 and vector1\n     * @param normal - direction of the normal\n     * @returns the angle between vector0 and vector1\n     */\n    Vector3.GetAngleBetweenVectors = function (vector0, vector1, normal) {\n        var v0 = vector0.normalizeToRef(preallocatedVariables_1.MathTmp.Vector3[1]);\n        var v1 = vector1.normalizeToRef(preallocatedVariables_1.MathTmp.Vector3[2]);\n        var dot = Vector3.Dot(v0, v1);\n        var n = preallocatedVariables_1.MathTmp.Vector3[3];\n        Vector3.CrossToRef(v0, v1, n);\n        if (Vector3.Dot(n, normal) > 0) {\n            return Math.acos(dot);\n        }\n        return -Math.acos(dot);\n    };\n    /**\n     * Returns a new Vector3 set from the index "offset" of the given array\n     * @param array - defines the source array\n     * @param offset - defines the offset in the source array\n     * @returns the new Vector3\n     */\n    Vector3.FromArray = function (array, offset) {\n        if (offset === void 0) { offset = 0; }\n        return new Vector3(array[offset], array[offset + 1], array[offset + 2]);\n    };\n    /**\n     * Returns a new Vector3 set from the index "offset" of the given FloatArray\n     * This function is deprecated.  Use FromArray instead\n     * @param array - defines the source array\n     * @param offset - defines the offset in the source array\n     * @returns the new Vector3\n     */\n    Vector3.FromFloatArray = function (array, offset) {\n        return Vector3.FromArray(array, offset);\n    };\n    /**\n     * Sets the given vector "result" with the element values from the index "offset" of the given array\n     * @param array - defines the source array\n     * @param offset - defines the offset in the source array\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.FromArrayToRef = function (array, offset, result) {\n        result.x = array[offset];\n        result.y = array[offset + 1];\n        result.z = array[offset + 2];\n    };\n    /**\n     * Sets the given vector "result" with the element values from the index "offset" of the given FloatArray\n     * This function is deprecated.  Use FromArrayToRef instead.\n     * @param array - defines the source array\n     * @param offset - defines the offset in the source array\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.FromFloatArrayToRef = function (array, offset, result) {\n        return Vector3.FromArrayToRef(array, offset, result);\n    };\n    /**\n     * Sets the given vector "result" with the given floats.\n     * @param x - defines the x coordinate of the source\n     * @param y - defines the y coordinate of the source\n     * @param z - defines the z coordinate of the source\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.FromFloatsToRef = function (x, y, z, result) {\n        result.copyFromFloats(x, y, z);\n    };\n    /**\n     * Returns a new Vector3 set to (0.0, 0.0, 0.0)\n     * @returns a new empty Vector3\n     */\n    Vector3.Zero = function () {\n        return new Vector3(0.0, 0.0, 0.0);\n    };\n    /**\n     * Returns a new Vector3 set to (1.0, 1.0, 1.0)\n     * @returns a new unit Vector3\n     */\n    Vector3.One = function () {\n        return new Vector3(1.0, 1.0, 1.0);\n    };\n    /**\n     * Returns a new Vector3 set to (0.0, 1.0, 0.0)\n     * @returns a new up Vector3\n     */\n    Vector3.Up = function () {\n        return new Vector3(0.0, 1.0, 0.0);\n    };\n    /**\n     * Returns a new Vector3 set to (0.0, -1.0, 0.0)\n     * @returns a new down Vector3\n     */\n    Vector3.Down = function () {\n        return new Vector3(0.0, -1.0, 0.0);\n    };\n    /**\n     * Returns a new Vector3 set to (0.0, 0.0, 1.0)\n     * @returns a new forward Vector3\n     */\n    Vector3.Forward = function () {\n        return new Vector3(0.0, 0.0, 1.0);\n    };\n    /**\n     * Returns a new Vector3 set to (0.0, 0.0, -1.0)\n     * @returns a new forward Vector3\n     */\n    Vector3.Backward = function () {\n        return new Vector3(0.0, 0.0, -1.0);\n    };\n    /**\n     * Returns a new Vector3 set to (1.0, 0.0, 0.0)\n     * @returns a new right Vector3\n     */\n    Vector3.Right = function () {\n        return new Vector3(1.0, 0.0, 0.0);\n    };\n    /**\n     * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\n     * @returns a new left Vector3\n     */\n    Vector3.Left = function () {\n        return new Vector3(-1.0, 0.0, 0.0);\n    };\n    /**\n     * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector.\n     * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n     * @param vector - defines the Vector3 to transform\n     * @param transformation - defines the transformation matrix\n     * @returns the transformed Vector3\n     */\n    Vector3.TransformCoordinates = function (vector, transformation) {\n        var result = Vector3.Zero();\n        Vector3.TransformCoordinatesToRef(vector, transformation, result);\n        return result;\n    };\n    /**\n     * Sets the given vector "result" coordinates with the result of the transformation by the given matrix of the given vector\n     * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n     * @param vector - defines the Vector3 to transform\n     * @param transformation - defines the transformation matrix\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.TransformCoordinatesToRef = function (vector, transformation, result) {\n        return Vector3.TransformCoordinatesFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\n    };\n    /**\n     * Sets the given vector "result" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)\n     * This method computes tranformed coordinates only, not transformed direction vectors\n     * @param x - define the x coordinate of the source vector\n     * @param y - define the y coordinate of the source vector\n     * @param z - define the z coordinate of the source vector\n     * @param transformation - defines the transformation matrix\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.TransformCoordinatesFromFloatsToRef = function (x, y, z, transformation, result) {\n        var m = transformation.m;\n        var rx = x * m[0] + y * m[4] + z * m[8] + m[12];\n        var ry = x * m[1] + y * m[5] + z * m[9] + m[13];\n        var rz = x * m[2] + y * m[6] + z * m[10] + m[14];\n        var rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15]);\n        result.x = rx * rw;\n        result.y = ry * rw;\n        result.z = rz * rw;\n    };\n    /**\n     * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector\n     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n     * @param vector - defines the Vector3 to transform\n     * @param transformation - defines the transformation matrix\n     * @returns the new Vector3\n     */\n    Vector3.TransformNormal = function (vector, transformation) {\n        var result = Vector3.Zero();\n        Vector3.TransformNormalToRef(vector, transformation, result);\n        return result;\n    };\n    /**\n     * Sets the given vector "result" with the result of the normal transformation by the given matrix of the given vector\n     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n     * @param vector - defines the Vector3 to transform\n     * @param transformation - defines the transformation matrix\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.TransformNormalToRef = function (vector, transformation, result) {\n        this.TransformNormalFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\n    };\n    /**\n     * Sets the given vector "result" with the result of the normal transformation by the given matrix of the given floats (x, y, z)\n     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n     * @param x - define the x coordinate of the source vector\n     * @param y - define the y coordinate of the source vector\n     * @param z - define the z coordinate of the source vector\n     * @param transformation - defines the transformation matrix\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.TransformNormalFromFloatsToRef = function (x, y, z, transformation, result) {\n        var m = transformation.m;\n        result.x = x * m[0] + y * m[4] + z * m[8];\n        result.y = x * m[1] + y * m[5] + z * m[9];\n        result.z = x * m[2] + y * m[6] + z * m[10];\n    };\n    /**\n     * Returns a new Vector3 located for "amount" on the CatmullRom interpolation spline defined by the vectors "value1", "value2", "value3", "value4"\n     * @param value1 - defines the first control point\n     * @param value2 - defines the second control point\n     * @param value3 - defines the third control point\n     * @param value4 - defines the fourth control point\n     * @param amount - defines the amount on the spline to use\n     * @returns the new Vector3\n     */\n    Vector3.CatmullRom = function (value1, value2, value3, value4, amount) {\n        var squared = amount * amount;\n        var cubed = amount * squared;\n        var x = 0.5 *\n            (2.0 * value2.x +\n                (-value1.x + value3.x) * amount +\n                (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared +\n                (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n        var y = 0.5 *\n            (2.0 * value2.y +\n                (-value1.y + value3.y) * amount +\n                (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared +\n                (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n        var z = 0.5 *\n            (2.0 * value2.z +\n                (-value1.z + value3.z) * amount +\n                (2.0 * value1.z - 5.0 * value2.z + 4.0 * value3.z - value4.z) * squared +\n                (-value1.z + 3.0 * value2.z - 3.0 * value3.z + value4.z) * cubed);\n        return new Vector3(x, y, z);\n    };\n    /**\n     * Returns a new Vector3 set with the coordinates of "value", if the vector "value" is in the cube defined by the vectors "min" and "max"\n     * If a coordinate value of "value" is lower than one of the "min" coordinate, then this "value" coordinate is set with the "min" one\n     * If a coordinate value of "value" is greater than one of the "max" coordinate, then this "value" coordinate is set with the "max" one\n     * @param value - defines the current value\n     * @param min - defines the lower range value\n     * @param max - defines the upper range value\n     * @returns the new Vector3\n     */\n    Vector3.Clamp = function (value, min, max) {\n        var v = new Vector3();\n        Vector3.ClampToRef(value, min, max, v);\n        return v;\n    };\n    /**\n     * Sets the given vector "result" with the coordinates of "value", if the vector "value" is in the cube defined by the vectors "min" and "max"\n     * If a coordinate value of "value" is lower than one of the "min" coordinate, then this "value" coordinate is set with the "min" one\n     * If a coordinate value of "value" is greater than one of the "max" coordinate, then this "value" coordinate is set with the "max" one\n     * @param value - defines the current value\n     * @param min - defines the lower range value\n     * @param max - defines the upper range value\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.ClampToRef = function (value, min, max, result) {\n        var x = value.x;\n        x = x > max.x ? max.x : x;\n        x = x < min.x ? min.x : x;\n        var y = value.y;\n        y = y > max.y ? max.y : y;\n        y = y < min.y ? min.y : y;\n        var z = value.z;\n        z = z > max.z ? max.z : z;\n        z = z < min.z ? min.z : z;\n        result.copyFromFloats(x, y, z);\n    };\n    /**\n     * Returns a new Vector3 located for "amount" (float) on the Hermite interpolation spline defined by the vectors "value1", "tangent1", "value2", "tangent2"\n     * @param value1 - defines the first control point\n     * @param tangent1 - defines the first tangent vector\n     * @param value2 - defines the second control point\n     * @param tangent2 - defines the second tangent vector\n     * @param amount - defines the amount on the interpolation spline (between 0 and 1)\n     * @returns the new Vector3\n     */\n    Vector3.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n        var squared = amount * amount;\n        var cubed = amount * squared;\n        var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n        var part2 = -2.0 * cubed + 3.0 * squared;\n        var part3 = cubed - 2.0 * squared + amount;\n        var part4 = cubed - squared;\n        var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;\n        var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;\n        var z = value1.z * part1 + value2.z * part2 + tangent1.z * part3 + tangent2.z * part4;\n        return new Vector3(x, y, z);\n    };\n    /**\n     * Returns a new Vector3 located for "amount" (float) on the linear interpolation between the vectors "start" and "end"\n     * @param start - defines the start value\n     * @param end - defines the end value\n     * @param amount - max defines amount between both (between 0 and 1)\n     * @returns the new Vector3\n     */\n    Vector3.Lerp = function (start, end, amount) {\n        var result = new Vector3(0, 0, 0);\n        Vector3.LerpToRef(start, end, amount, result);\n        return result;\n    };\n    /**\n     * Sets the given vector "result" with the result of the linear interpolation from the vector "start" for "amount" to the vector "end"\n     * @param start - defines the start value\n     * @param end - defines the end value\n     * @param amount - max defines amount between both (between 0 and 1)\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.LerpToRef = function (start, end, amount, result) {\n        result.x = start.x + (end.x - start.x) * amount;\n        result.y = start.y + (end.y - start.y) * amount;\n        result.z = start.z + (end.z - start.z) * amount;\n    };\n    /**\n     * Returns the dot product (float) between the vectors "left" and "right"\n     * @param left - defines the left operand\n     * @param right - defines the right operand\n     * @returns the dot product\n     */\n    Vector3.Dot = function (left, right) {\n        return left.x * right.x + left.y * right.y + left.z * right.z;\n    };\n    /**\n     * Returns a new Vector3 as the cross product of the vectors "left" and "right"\n     * The cross product is then orthogonal to both "left" and "right"\n     * @param left - defines the left operand\n     * @param right - defines the right operand\n     * @returns the cross product\n     */\n    Vector3.Cross = function (left, right) {\n        var result = Vector3.Zero();\n        Vector3.CrossToRef(left, right, result);\n        return result;\n    };\n    /**\n     * Sets the given vector "result" with the cross product of "left" and "right"\n     * The cross product is then orthogonal to both "left" and "right"\n     * @param left - defines the left operand\n     * @param right - defines the right operand\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.CrossToRef = function (left, right, result) {\n        var x = left.y * right.z - left.z * right.y;\n        var y = left.z * right.x - left.x * right.z;\n        var z = left.x * right.y - left.y * right.x;\n        result.copyFromFloats(x, y, z);\n    };\n    /**\n     * Returns a new Vector3 as the normalization of the given vector\n     * @param vector - defines the Vector3 to normalize\n     * @returns the new Vector3\n     */\n    Vector3.Normalize = function (vector) {\n        var result = Vector3.Zero();\n        Vector3.NormalizeToRef(vector, result);\n        return result;\n    };\n    /**\n     * Sets the given vector "result" with the normalization of the given first vector\n     * @param vector - defines the Vector3 to normalize\n     * @param result - defines the Vector3 where to store the result\n     */\n    Vector3.NormalizeToRef = function (vector, result) {\n        vector.normalizeToRef(result);\n    };\n    /**\n     * Gets the minimal coordinate values between two Vector3\n     * @param left - defines the first operand\n     * @param right - defines the second operand\n     * @returns the new Vector3\n     */\n    Vector3.Minimize = function (left, right) {\n        var min = new Vector3(left.x, left.y, left.z);\n        min.minimizeInPlace(right);\n        return min;\n    };\n    /**\n     * Gets the maximal coordinate values between two Vector3\n     * @param left - defines the first operand\n     * @param right - defines the second operand\n     * @returns the new Vector3\n     */\n    Vector3.Maximize = function (left, right) {\n        var max = new Vector3(left.x, left.y, left.z);\n        max.maximizeInPlace(right);\n        return max;\n    };\n    /**\n     * Returns the distance between the vectors "value1" and "value2"\n     * @param value1 - defines the first operand\n     * @param value2 - defines the second operand\n     * @returns the distance\n     */\n    Vector3.Distance = function (value1, value2) {\n        return Math.sqrt(Vector3.DistanceSquared(value1, value2));\n    };\n    /**\n     * Returns the squared distance between the vectors "value1" and "value2"\n     * @param value1 - defines the first operand\n     * @param value2 - defines the second operand\n     * @returns the squared distance\n     */\n    Vector3.DistanceSquared = function (value1, value2) {\n        var x = value1.x - value2.x;\n        var y = value1.y - value2.y;\n        var z = value1.z - value2.z;\n        return x * x + y * y + z * z;\n    };\n    /**\n     * Returns a new Vector3 located at the center between "value1" and "value2"\n     * @param value1 - defines the first operand\n     * @param value2 - defines the second operand\n     * @returns the new Vector3\n     */\n    Vector3.Center = function (value1, value2) {\n        var center = Vector3.Add(value1, value2);\n        center.scaleInPlace(0.5);\n        return center;\n    };\n    /**\n     * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),\n     * RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply\n     * to something in order to rotate it from its local system to the given target system\n     * Note: axis1, axis2 and axis3 are normalized during this operation\n     * @param axis1 - defines the first axis\n     * @param axis2 - defines the second axis\n     * @param axis3 - defines the third axis\n     * @returns a new Vector3\n     */\n    Vector3.RotationFromAxis = function (axis1, axis2, axis3) {\n        var rotation = Vector3.Zero();\n        Vector3.RotationFromAxisToRef(axis1, axis2, axis3, rotation);\n        return rotation;\n    };\n    /**\n     * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\n     * @param axis1 - defines the first axis\n     * @param axis2 - defines the second axis\n     * @param axis3 - defines the third axis\n     * @param ref - defines the Vector3 where to store the result\n     */\n    Vector3.RotationFromAxisToRef = function (axis1, axis2, axis3, ref) {\n        var quat = preallocatedVariables_1.MathTmp.Quaternion[0];\n        Quaternion_1.Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n        ref.copyFrom(quat.eulerAngles);\n    };\n    /**\n     * Creates a string representation of the Vector3\n     * @returns a string with the Vector3 coordinates.\n     */\n    Vector3.prototype.toString = function () {\n        return "(" + this.x + ", " + this.y + ", " + this.z + ")";\n    };\n    /**\n     * Gets the class name\n     * @returns the string "Vector3"\n     */\n    Vector3.prototype.getClassName = function () {\n        return \'Vector3\';\n    };\n    /**\n     * Creates the Vector3 hash code\n     * @returns a number which tends to be unique between Vector3 instances\n     */\n    Vector3.prototype.getHashCode = function () {\n        var hash = this.x || 0;\n        hash = (hash * 397) ^ (this.y || 0);\n        hash = (hash * 397) ^ (this.z || 0);\n        return hash;\n    };\n    // Operators\n    /**\n     * Creates an array containing three elements : the coordinates of the Vector3\n     * @returns a new array of numbers\n     */\n    Vector3.prototype.asArray = function () {\n        var result = [];\n        this.toArray(result, 0);\n        return result;\n    };\n    /**\n     * Populates the given array or FloatArray from the given index with the successive coordinates of the Vector3\n     * @param array - defines the destination array\n     * @param index - defines the offset in the destination array\n     * @returns the current Vector3\n     */\n    Vector3.prototype.toArray = function (array, index) {\n        if (index === void 0) { index = 0; }\n        array[index] = this.x;\n        array[index + 1] = this.y;\n        array[index + 2] = this.z;\n        return this;\n    };\n    /**\n     * Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)\n     * @returns a new Quaternion object, computed from the Vector3 coordinates\n     */\n    Vector3.prototype.toQuaternion = function () {\n        return Quaternion_1.Quaternion.Identity.setEuler(this.y, this.x, this.z);\n    };\n    /**\n     * Adds the given vector to the current Vector3\n     * @param otherVector - defines the second operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.addInPlace = function (otherVector) {\n        return this.addInPlaceFromFloats(otherVector.x, otherVector.y, otherVector.z);\n    };\n    /**\n     * Adds the given coordinates to the current Vector3\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.addInPlaceFromFloats = function (x, y, z) {\n        this.x += x;\n        this.y += y;\n        this.z += z;\n        return this;\n    };\n    /**\n     * Gets a new Vector3, result of the addition the current Vector3 and the given vector\n     * @param otherVector - defines the second operand\n     * @returns the resulting Vector3\n     */\n    Vector3.prototype.add = function (otherVector) {\n        return new Vector3(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);\n    };\n    /**\n     * Adds the current Vector3 to the given one and stores the result in the vector "result"\n     * @param otherVector - defines the second operand\n     * @param result - defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n    Vector3.prototype.addToRef = function (otherVector, result) {\n        return result.copyFromFloats(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);\n    };\n    /**\n     * Subtract the given vector from the current Vector3\n     * @param otherVector - defines the second operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.subtractInPlace = function (otherVector) {\n        this.x -= otherVector.x;\n        this.y -= otherVector.y;\n        this.z -= otherVector.z;\n        return this;\n    };\n    /**\n     * Returns a new Vector3, result of the subtraction of the given vector from the current Vector3\n     * @param otherVector - defines the second operand\n     * @returns the resulting Vector3\n     */\n    Vector3.prototype.subtract = function (otherVector) {\n        return new Vector3(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z);\n    };\n    /**\n     * Subtracts the given vector from the current Vector3 and stores the result in the vector "result".\n     * @param otherVector - defines the second operand\n     * @param result - defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n    Vector3.prototype.subtractToRef = function (otherVector, result) {\n        return this.subtractFromFloatsToRef(otherVector.x, otherVector.y, otherVector.z, result);\n    };\n    /**\n     * Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @returns the resulting Vector3\n     */\n    Vector3.prototype.subtractFromFloats = function (x, y, z) {\n        return new Vector3(this.x - x, this.y - y, this.z - z);\n    };\n    /**\n     * Subtracts the given floats from the current Vector3 coordinates and set the given vector "result" with this result\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @param result - defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n    Vector3.prototype.subtractFromFloatsToRef = function (x, y, z, result) {\n        return result.copyFromFloats(this.x - x, this.y - y, this.z - z);\n    };\n    /**\n     * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective\n     * @param matrix - The transformation matrix\n     */\n    Vector3.prototype.applyMatrix4 = function (matrix) {\n        this.applyMatrix4ToRef(matrix, this);\n    };\n    /**\n     * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective and set the given vector "result" with this result\n     * @param matrix - The transformation matrix\n     * @param result - defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n    Vector3.prototype.applyMatrix4ToRef = function (matrix, result) {\n        var _a = this, x = _a.x, y = _a.y, z = _a.z;\n        var m = matrix.m;\n        var w = 1 / (m[3] * x + m[7] * y + m[11] * z + m[15]);\n        result.x = (m[0] * x + m[4] * y + m[8] * z + m[12]) * w;\n        result.y = (m[1] * x + m[5] * y + m[9] * z + m[13]) * w;\n        result.z = (m[2] * x + m[6] * y + m[10] * z + m[14]) * w;\n        return result;\n    };\n    /**\n     * Rotates the current Vector3 based on the given quaternion\n     * @param q - defines the Quaternion\n     * @returns the current Vector3\n     */\n    Vector3.prototype.rotate = function (q) {\n        return this.rotateToRef(q, this);\n    };\n    /**\n     * Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3.\n     * @param q - defines the Quaternion\n     * @param result - defines the target Vector3\n     * @returns the current Vector3\n     */\n    Vector3.prototype.rotateToRef = function (q, result) {\n        var _a = this, x = _a.x, y = _a.y, z = _a.z;\n        var qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n        // calculate quat * vector\n        var ix = qw * x + qy * z - qz * y;\n        var iy = qw * y + qz * x - qx * z;\n        var iz = qw * z + qx * y - qy * x;\n        var iw = -qx * x - qy * y - qz * z;\n        // calculate result * inverse quat\n        result.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        result.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        result.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n        return result;\n    };\n    /**\n     * Gets a new Vector3 set with the current Vector3 negated coordinates\n     * @returns a new Vector3\n     */\n    Vector3.prototype.negate = function () {\n        return new Vector3(-this.x, -this.y, -this.z);\n    };\n    /**\n     * Multiplies the Vector3 coordinates by the float "scale"\n     * @param scale - defines the multiplier factor\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.scaleInPlace = function (scale) {\n        this.x *= scale;\n        this.y *= scale;\n        this.z *= scale;\n        return this;\n    };\n    /**\n     * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float "scale"\n     * @param scale - defines the multiplier factor\n     * @returns a new Vector3\n     */\n    Vector3.prototype.scale = function (scale) {\n        return new Vector3(this.x * scale, this.y * scale, this.z * scale);\n    };\n    /**\n     * Multiplies the current Vector3 coordinates by the float "scale" and stores the result in the given vector "result" coordinates\n     * @param scale - defines the multiplier factor\n     * @param result - defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n    Vector3.prototype.scaleToRef = function (scale, result) {\n        return result.copyFromFloats(this.x * scale, this.y * scale, this.z * scale);\n    };\n    /**\n     * Scale the current Vector3 values by a factor and add the result to a given Vector3\n     * @param scale - defines the scale factor\n     * @param result - defines the Vector3 object where to store the result\n     * @returns the unmodified current Vector3\n     */\n    Vector3.prototype.scaleAndAddToRef = function (scale, result) {\n        return result.addInPlaceFromFloats(this.x * scale, this.y * scale, this.z * scale);\n    };\n    /**\n     * Returns true if the current Vector3 and the given vector coordinates are strictly equal\n     * @param otherVector - defines the second operand\n     * @returns true if both vectors are equals\n     */\n    Vector3.prototype.equals = function (otherVector) {\n        return otherVector && this.x === otherVector.x && this.y === otherVector.y && this.z === otherVector.z;\n    };\n    /**\n     * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\n     * @param otherVector - defines the second operand\n     * @param epsilon - defines the minimal distance to define values as equals\n     * @returns true if both vectors are distant less than epsilon\n     */\n    Vector3.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\n        if (epsilon === void 0) { epsilon = types_1.Epsilon; }\n        return (otherVector &&\n            Scalar_1.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n            Scalar_1.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) &&\n            Scalar_1.Scalar.WithinEpsilon(this.z, otherVector.z, epsilon));\n    };\n    /**\n     * Returns true if the current Vector3 coordinates equals the given floats\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @returns true if both vectors are equals\n     */\n    Vector3.prototype.equalsToFloats = function (x, y, z) {\n        return this.x === x && this.y === y && this.z === z;\n    };\n    /**\n     * Multiplies the current Vector3 coordinates by the given ones\n     * @param otherVector - defines the second operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.multiplyInPlace = function (otherVector) {\n        this.x *= otherVector.x;\n        this.y *= otherVector.y;\n        this.z *= otherVector.z;\n        return this;\n    };\n    /**\n     * Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector\n     * @param otherVector - defines the second operand\n     * @returns the new Vector3\n     */\n    Vector3.prototype.multiply = function (otherVector) {\n        return this.multiplyByFloats(otherVector.x, otherVector.y, otherVector.z);\n    };\n    /**\n     * Multiplies the current Vector3 by the given one and stores the result in the given vector "result"\n     * @param otherVector - defines the second operand\n     * @param result - defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n    Vector3.prototype.multiplyToRef = function (otherVector, result) {\n        return result.copyFromFloats(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z);\n    };\n    /**\n     * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @returns the new Vector3\n     */\n    Vector3.prototype.multiplyByFloats = function (x, y, z) {\n        return new Vector3(this.x * x, this.y * y, this.z * z);\n    };\n    /**\n     * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\n     * @param otherVector - defines the second operand\n     * @returns the new Vector3\n     */\n    Vector3.prototype.divide = function (otherVector) {\n        return new Vector3(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);\n    };\n    /**\n     * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector "result"\n     * @param otherVector - defines the second operand\n     * @param result - defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n    Vector3.prototype.divideToRef = function (otherVector, result) {\n        return result.copyFromFloats(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);\n    };\n    /**\n     * Divides the current Vector3 coordinates by the given ones.\n     * @param otherVector - defines the second operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.divideInPlace = function (otherVector) {\n        return this.divideToRef(otherVector, this);\n    };\n    /**\n     * Updates the current Vector3 with the minimal coordinate values between its and the given vector ones\n     * @param other - defines the second operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.minimizeInPlace = function (other) {\n        return this.minimizeInPlaceFromFloats(other.x, other.y, other.z);\n    };\n    /**\n     * Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.\n     * @param other - defines the second operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.maximizeInPlace = function (other) {\n        return this.maximizeInPlaceFromFloats(other.x, other.y, other.z);\n    };\n    /**\n     * Updates the current Vector3 with the minimal coordinate values between its and the given coordinates\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.minimizeInPlaceFromFloats = function (x, y, z) {\n        if (x < this.x) {\n            this.x = x;\n        }\n        if (y < this.y) {\n            this.y = y;\n        }\n        if (z < this.z) {\n            this.z = z;\n        }\n        return this;\n    };\n    /**\n     * Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.maximizeInPlaceFromFloats = function (x, y, z) {\n        if (x > this.x) {\n            this.x = x;\n        }\n        if (y > this.y) {\n            this.y = y;\n        }\n        if (z > this.z) {\n            this.z = z;\n        }\n        return this;\n    };\n    /**\n     * Gets a new Vector3 from current Vector3 floored values\n     * @returns a new Vector3\n     */\n    Vector3.prototype.floor = function () {\n        return new Vector3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));\n    };\n    /**\n     * Gets a new Vector3 from current Vector3 floored values\n     * @returns a new Vector3\n     */\n    Vector3.prototype.fract = function () {\n        return new Vector3(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z));\n    };\n    // Properties\n    /**\n     * Gets the length of the Vector3\n     * @returns the length of the Vecto3\n     */\n    Vector3.prototype.length = function () {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    };\n    /**\n     * Gets the squared length of the Vector3\n     * @returns squared length of the Vector3\n     */\n    Vector3.prototype.lengthSquared = function () {\n        return this.x * this.x + this.y * this.y + this.z * this.z;\n    };\n    /**\n     * Normalize the current Vector3.\n     * Please note that this is an in place operation.\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.normalize = function () {\n        return this.normalizeFromLength(this.length());\n    };\n    /**\n     * Normalize the current Vector3 with the given input length.\n     * Please note that this is an in place operation.\n     * @param len - the length of the vector\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.normalizeFromLength = function (len) {\n        if (len === 0 || len === 1.0) {\n            return this;\n        }\n        return this.scaleInPlace(1.0 / len);\n    };\n    /**\n     * Normalize the current Vector3 to a new vector\n     * @returns the new Vector3\n     */\n    Vector3.prototype.normalizeToNew = function () {\n        var normalized = new Vector3(0, 0, 0);\n        this.normalizeToRef(normalized);\n        return normalized;\n    };\n    /**\n     * Normalize the current Vector3 to the reference\n     * @param reference - define the Vector3 to update\n     * @returns the updated Vector3\n     */\n    Vector3.prototype.normalizeToRef = function (reference) {\n        var len = this.length();\n        if (len === 0 || len === 1.0) {\n            return reference.copyFromFloats(this.x, this.y, this.z);\n        }\n        return this.scaleToRef(1.0 / len, reference);\n    };\n    /**\n     * Creates a new Vector3 copied from the current Vector3\n     * @returns the new Vector3\n     */\n    Vector3.prototype.clone = function () {\n        return new Vector3(this.x, this.y, this.z);\n    };\n    /**\n     * Copies the given vector coordinates to the current Vector3 ones\n     * @param source - defines the source Vector3\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.copyFrom = function (source) {\n        return this.copyFromFloats(source.x, source.y, source.z);\n    };\n    /**\n     * Copies the given floats to the current Vector3 coordinates\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.copyFromFloats = function (x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return this;\n    };\n    /**\n     * Copies the given floats to the current Vector3 coordinates\n     * @param x - defines the x coordinate of the operand\n     * @param y - defines the y coordinate of the operand\n     * @param z - defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.set = function (x, y, z) {\n        return this.copyFromFloats(x, y, z);\n    };\n    /**\n     * Copies the given float to the current Vector3 coordinates\n     * @param v - defines the x, y and z coordinates of the operand\n     * @returns the current updated Vector3\n     */\n    Vector3.prototype.setAll = function (v) {\n        this.x = this.y = this.z = v;\n        return this;\n    };\n    return Vector3;\n}());\nexports.Vector3 = Vector3;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmVjdG9yMy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNlbnRyYWxhbmQvbWF0aC9WZWN0b3IzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUVBQWlEO0FBQ2pELGlDQUE2QztBQUU3QywyQ0FBeUM7QUFDekMsbUNBQWlDO0FBU2pDOzs7Ozs7R0FNRztBQUNIO0lBc0JFOzs7OztPQUtHO0lBQ0g7SUFDRTs7T0FFRztJQUNJLENBQWE7SUFDcEI7O09BRUc7SUFDSSxDQUFhO0lBQ3BCOztPQUVHO0lBQ0ksQ0FBYTtRQVJiLGtCQUFBLEVBQUEsS0FBYTtRQUliLGtCQUFBLEVBQUEsS0FBYTtRQUliLGtCQUFBLEVBQUEsS0FBYTtRQVJiLE1BQUMsR0FBRCxDQUFDLENBQVk7UUFJYixNQUFDLEdBQUQsQ0FBQyxDQUFZO1FBSWIsTUFBQyxHQUFELENBQUMsQ0FBWTtJQUNuQixDQUFDO0lBckNKLHNCQUFXLGlDQUFZO1FBSHZCOztXQUVHO2FBQ0g7WUFDRSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUMzQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUMzQixJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7Z0JBQ2pCLE9BQU8sSUFBSSxDQUFBO2FBQ1o7WUFFRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUMzQixJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7Z0JBQ2pCLE9BQU8sSUFBSSxDQUFBO2FBQ1o7WUFFRCxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7Z0JBQ2pCLE9BQU8sSUFBSSxDQUFBO2FBQ1o7WUFFRCxPQUFPLEtBQUssQ0FBQTtRQUNkLENBQUM7OztPQUFBO0lBc0JELFVBQVU7SUFFVjs7Ozs7T0FL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QkFDdkUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFBO1FBRXJFLElBQUksQ0FBQyxHQUNILEdBQUc7WUFDSCxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQztnQkFDYixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTTtnQkFDL0IsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTztnQkFDdkUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFBO1FBRXJFLElBQUksQ0FBQyxHQUNILEdBQUc7WUFDSCxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQztnQkFDYixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTTtnQkFDL0IsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTztnQkFDdkUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENB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Q3hDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksd0JBQU0sR0FBYixVQUFjLENBQVM7UUFDckIsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzVCLE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztJQUNILGNBQUM7QUFBRCxDQUFDLEFBM25DRCxJQTJuQ0M7QUEzbkNZLDBCQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWF0aFRtcCB9IGZyb20gJy4vcHJlYWxsb2NhdGVkVmFyaWFibGVzJ1xuaW1wb3J0IHsgRmxvYXRBcnJheSwgRXBzaWxvbiB9IGZyb20gJy4vdHlwZXMnXG5pbXBvcnQgeyBNYXRyaXggfSBmcm9tICcuL01hdHJpeCdcbmltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tICcuL1F1YXRlcm5pb24nXG5pbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuL1NjYWxhcidcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIFJlYWRPbmx5VmVjdG9yMyA9IHtcbiAgcmVhZG9ubHkgeTogbnVtYmVyXG4gIHJlYWRvbmx5IHg6IG51bWJlclxuICByZWFkb25seSB6OiBudW1iZXJcbn1cblxuLyoqXG4gKiBDbGFzc2VkIHVzZWQgdG8gc3RvcmUgKHgseSx6KSB2ZWN0b3IgcmVwcmVzZW50YXRpb25cbiAqIEEgVmVjdG9yMyBpcyB0aGUgbWFpbiBvYmplY3QgdXNlZCBpbiAzRCBnZW9tZXRyeVxuICogSXQgY2FuIHJlcHJlc2VudCBldGloZXIgdGhlIGNvb3JkaW5hdGVzIG9mIGEgcG9pbnQgdGhlIHNwYWNlLCBlaXRoZXIgYSBkaXJlY3Rpb25cbiAqIFJlbWluZGVyOiBCYWJ5bG9uLmpzIHVzZXMgYSBsZWZ0IGhhbmRlZCBmb3J3YXJkIGZhY2luZyBzeXN0ZW1cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFZlY3RvcjMge1xuICAvKipcbiAgICogR2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyB0aGF0IHRoZSB2ZWN0b3IgaXMgbm9uIHVuaWZvcm0gbWVhbmluZyB4LCB5IG9yIHogYXJlIG5vdCBhbGwgdGhlIHNhbWVcbiAgICovXG4gIHB1YmxpYyBnZXQgaXNOb25Vbmlmb3JtKCk6IGJvb2xlYW4ge1xuICAgIGxldCBhYnNYID0gTWF0aC5hYnModGhpcy54KVxuICAgIGxldCBhYnNZID0gTWF0aC5hYnModGhpcy55KVxuICAgIGlmIChhYnNYICE9PSBhYnNZKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGxldCBhYnNaID0gTWF0aC5hYnModGhpcy56KVxuICAgIGlmIChhYnNYICE9PSBhYnNaKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChhYnNZICE9PSBhYnNaKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFZlY3RvcjMgb2JqZWN0IGZyb20gdGhlIGdpdmVuIHgsIHksIHogKGZsb2F0cykgY29vcmRpbmF0ZXMuXG4gICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgZmlyc3QgY29vcmRpbmF0ZXMgKG9uIFggYXhpcylcbiAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSBzZWNvbmQgY29vcmRpbmF0ZXMgKG9uIFkgYXhpcylcbiAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB0aGlyZCBjb29yZGluYXRlcyAob24gWiBheGlzKVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgZmlyc3QgY29vcmRpbmF0ZXMgKG9uIFggYXhpcylcbiAgICAgKi9cbiAgICBwdWJsaWMgeDogbnVtYmVyID0gMCxcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBzZWNvbmQgY29vcmRpbmF0ZXMgKG9uIFkgYXhpcylcbiAgICAgKi9cbiAgICBwdWJsaWMgeTogbnVtYmVyID0gMCxcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSB0aGlyZCBjb29yZGluYXRlcyAob24gWiBheGlzKVxuICAgICAqL1xuICAgIHB1YmxpYyB6OiBudW1iZXIgPSAwXG4gICkge31cblxuICAvLyBTdGF0aWNzXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBhcyB0aGUgcmVzdWx0IG9mIHRoZSBhZGRpdGlvbiBvZiB0aGUgdHdvIGdpdmVuIHZlY3RvcnMuXG4gICAqIEBwYXJhbSB2ZWN0b3IxIC0gdGhlIGZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0gdmVjdG9yMiAtIHRoZSBzZWNvbmQgdmVjdG9yXG4gICAqIEByZXR1cm5zIHRoZSByZXN1bHRpbmcgdmVjdG9yXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIEFkZCh2ZWN0b3IxOiBSZWFkT25seVZlY3RvcjMsIHZlY3RvcjI6IFJlYWRPbmx5VmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMyh2ZWN0b3IxLngsIHZlY3RvcjEueSwgdmVjdG9yMS56KS5hZGRJblBsYWNlKHZlY3RvcjIpXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjbGlwIGZhY3RvciBiZXR3ZWVuIHR3byB2ZWN0b3JzXG4gICAqIEBwYXJhbSB2ZWN0b3IwIC0gZGVmaW5lcyB0aGUgZmlyc3Qgb3BlcmFuZFxuICAgKiBAcGFyYW0gdmVjdG9yMSAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAqIEBwYXJhbSBheGlzIC0gZGVmaW5lcyB0aGUgYXhpcyB0byB1c2VcbiAgICogQHBhcmFtIHNpemUgLSBkZWZpbmVzIHRoZSBzaXplIGFsb25nIHRoZSBheGlzXG4gICAqIEByZXR1cm5zIHRoZSBjbGlwIGZhY3RvclxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBHZXRDbGlwRmFjdG9yKHZlY3RvcjA6IFJlYWRPbmx5VmVjdG9yMywgdmVjdG9yMTogUmVhZE9ubHlWZWN0b3IzLCBheGlzOiBSZWFkT25seVZlY3RvcjMsIHNpemU6IG51bWJlcikge1xuICAgIGxldCBkMCA9IFZlY3RvcjMuRG90KHZlY3RvcjAsIGF4aXMpIC0gc2l6ZVxuICAgIGxldCBkMSA9IFZlY3RvcjMuRG90KHZlY3RvcjEsIGF4aXMpIC0gc2l6ZVxuXG4gICAgbGV0IHMgPSBkMCAvIChkMCAtIGQxKVxuXG4gICAgcmV0dXJuIHNcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYW5nbGUgYmV0d2VlbiB0d28gdmVjdG9yc1xuICAgKiBAcGFyYW0gdmVjdG9yMCAtIGFuZ2xlIGJldHdlZW4gdmVjdG9yMCBhbmQgdmVjdG9yMVxuICAgKiBAcGFyYW0gdmVjdG9yMSAtIGFuZ2xlIGJldHdlZW4gdmVjdG9yMCBhbmQgdmVjdG9yMVxuICAgKiBAcGFyYW0gbm9ybWFsIC0gZGlyZWN0aW9uIG9mIHRoZSBub3JtYWxcbiAgICogQHJldHVybnMgdGhlIGFuZ2xlIGJldHdlZW4gdmVjdG9yMCBhbmQgdmVjdG9yMVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBHZXRBbmdsZUJldHdlZW5WZWN0b3JzKHZlY3RvcjA6IFZlY3RvcjMsIHZlY3RvcjE6IFZlY3RvcjMsIG5vcm1hbDogUmVhZE9ubHlWZWN0b3IzKTogbnVtYmVyIHtcbiAgICBjb25zdCB2MDogVmVjdG9yMyA9IHZlY3RvcjAubm9ybWFsaXplVG9SZWYoTWF0aFRtcC5WZWN0b3IzWzFdKVxuICAgIGNvbnN0IHYxOiBWZWN0b3IzID0gdmVjdG9yMS5ub3JtYWxpemVUb1JlZihNYXRoVG1wLlZlY3RvcjNbMl0pXG4gICAgY29uc3QgZG90OiBudW1iZXIgPSBWZWN0b3IzLkRvdCh2MCwgdjEpXG4gICAgY29uc3QgbiA9IE1hdGhUbXAuVmVjdG9yM1szXVxuICAgIFZlY3RvcjMuQ3Jvc3NUb1JlZih2MCwgdjEsIG4pXG4gICAgaWYgKFZlY3RvcjMuRG90KG4sIG5vcm1hbCkgPiAwKSB7XG4gICAgICByZXR1cm4gTWF0aC5hY29zKGRvdClcbiAgICB9XG4gICAgcmV0dXJuIC1NYXRoLmFjb3MoZG90KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgZnJvbSB0aGUgaW5kZXggXCJvZmZzZXRcIiBvZiB0aGUgZ2l2ZW4gYXJyYXlcbiAgICogQHBhcmFtIGFycmF5IC0gZGVmaW5lcyB0aGUgc291cmNlIGFycmF5XG4gICAqIEBwYXJhbSBvZmZzZXQgLSBkZWZpbmVzIHRoZSBvZmZzZXQgaW4gdGhlIHNvdXJjZSBhcnJheVxuICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgRnJvbUFycmF5KGFycmF5OiBBcnJheUxpa2U8bnVtYmVyPiwgb2Zmc2V0OiBudW1iZXIgPSAwKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IzKGFycmF5W29mZnNldF0sIGFycmF5W29mZnNldCArIDFdLCBhcnJheVtvZmZzZXQgKyAyXSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IGZyb20gdGhlIGluZGV4IFwib2Zmc2V0XCIgb2YgdGhlIGdpdmVuIEZsb2F0QXJyYXlcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkLiAgVXNlIEZyb21BcnJheSBpbnN0ZWFkXG4gICAqIEBwYXJhbSBhcnJheSAtIGRlZmluZXMgdGhlIHNvdXJjZSBhcnJheVxuICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSBzb3VyY2UgYXJyYXlcbiAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIEZyb21GbG9hdEFycmF5KGFycmF5OiBGbG9hdEFycmF5LCBvZmZzZXQ/OiBudW1iZXIpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gVmVjdG9yMy5Gcm9tQXJyYXkoYXJyYXksIG9mZnNldClcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSBlbGVtZW50IHZhbHVlcyBmcm9tIHRoZSBpbmRleCBcIm9mZnNldFwiIG9mIHRoZSBnaXZlbiBhcnJheVxuICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICogQHBhcmFtIG9mZnNldCAtIGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgc291cmNlIGFycmF5XG4gICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgRnJvbUFycmF5VG9SZWYoYXJyYXk6IEFycmF5TGlrZTxudW1iZXI+LCBvZmZzZXQ6IG51bWJlciwgcmVzdWx0OiBWZWN0b3IzKTogdm9pZCB7XG4gICAgcmVzdWx0LnggPSBhcnJheVtvZmZzZXRdXG4gICAgcmVzdWx0LnkgPSBhcnJheVtvZmZzZXQgKyAxXVxuICAgIHJlc3VsdC56ID0gYXJyYXlbb2Zmc2V0ICsgMl1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSBlbGVtZW50IHZhbHVlcyBmcm9tIHRoZSBpbmRleCBcIm9mZnNldFwiIG9mIHRoZSBnaXZlbiBGbG9hdEFycmF5XG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZC4gIFVzZSBGcm9tQXJyYXlUb1JlZiBpbnN0ZWFkLlxuICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICogQHBhcmFtIG9mZnNldCAtIGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgc291cmNlIGFycmF5XG4gICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgRnJvbUZsb2F0QXJyYXlUb1JlZihhcnJheTogRmxvYXRBcnJheSwgb2Zmc2V0OiBudW1iZXIsIHJlc3VsdDogVmVjdG9yMyk6IHZvaWQge1xuICAgIHJldHVybiBWZWN0b3IzLkZyb21BcnJheVRvUmVmKGFycmF5LCBvZmZzZXQsIHJlc3VsdClcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSBnaXZlbiBmbG9hdHMuXG4gICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgeCBjb29yZGluYXRlIG9mIHRoZSBzb3VyY2VcbiAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIHNvdXJjZVxuICAgKiBAcGFyYW0geiAtIGRlZmluZXMgdGhlIHogY29vcmRpbmF0ZSBvZiB0aGUgc291cmNlXG4gICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgRnJvbUZsb2F0c1RvUmVmKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIsIHJlc3VsdDogVmVjdG9yMyk6IHZvaWQge1xuICAgIHJlc3VsdC5jb3B5RnJvbUZsb2F0cyh4LCB5LCB6KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgdG8gKDAuMCwgMC4wLCAwLjApXG4gICAqIEByZXR1cm5zIGEgbmV3IGVtcHR5IFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgWmVybygpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjMoMC4wLCAwLjAsIDAuMClcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB0byAoMS4wLCAxLjAsIDEuMClcbiAgICogQHJldHVybnMgYSBuZXcgdW5pdCBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIE9uZSgpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjMoMS4wLCAxLjAsIDEuMClcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB0byAoMC4wLCAxLjAsIDAuMClcbiAgICogQHJldHVybnMgYSBuZXcgdXAgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBVcCgpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjMoMC4wLCAxLjAsIDAuMClcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB0byAoMC4wLCAtMS4wLCAwLjApXG4gICAqIEByZXR1cm5zIGEgbmV3IGRvd24gVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBEb3duKCk6IFZlY3RvcjMge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMygwLjAsIC0xLjAsIDAuMClcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB0byAoMC4wLCAwLjAsIDEuMClcbiAgICogQHJldHVybnMgYSBuZXcgZm9yd2FyZCBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIEZvcndhcmQoKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IzKDAuMCwgMC4wLCAxLjApXG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgdG8gKDAuMCwgMC4wLCAtMS4wKVxuICAgKiBAcmV0dXJucyBhIG5ldyBmb3J3YXJkIFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgQmFja3dhcmQoKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IzKDAuMCwgMC4wLCAtMS4wKVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHRvICgxLjAsIDAuMCwgMC4wKVxuICAgKiBAcmV0dXJucyBhIG5ldyByaWdodCBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIFJpZ2h0KCk6IFZlY3RvcjMge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMygxLjAsIDAuMCwgMC4wKVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHRvICgtMS4wLCAwLjAsIDAuMClcbiAgICogQHJldHVybnMgYSBuZXcgbGVmdCBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIExlZnQoKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IzKC0xLjAsIDAuMCwgMC4wKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSB0cmFuc2Zvcm1hdGlvbiBieSB0aGUgZ2l2ZW4gbWF0cml4IG9mIHRoZSBnaXZlbiB2ZWN0b3IuXG4gICAqIFRoaXMgbWV0aG9kIGNvbXB1dGVzIHRyYW5mb3JtZWQgY29vcmRpbmF0ZXMgb25seSwgbm90IHRyYW5zZm9ybWVkIGRpcmVjdGlvbiB2ZWN0b3JzIChpZS4gaXQgdGFrZXMgdHJhbnNsYXRpb24gaW4gYWNjb3VudClcbiAgICogQHBhcmFtIHZlY3RvciAtIGRlZmluZXMgdGhlIFZlY3RvcjMgdG8gdHJhbnNmb3JtXG4gICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIGRlZmluZXMgdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxuICAgKiBAcmV0dXJucyB0aGUgdHJhbnNmb3JtZWQgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBUcmFuc2Zvcm1Db29yZGluYXRlcyh2ZWN0b3I6IFJlYWRPbmx5VmVjdG9yMywgdHJhbnNmb3JtYXRpb246IE1hdHJpeCk6IFZlY3RvcjMge1xuICAgIGxldCByZXN1bHQgPSBWZWN0b3IzLlplcm8oKVxuICAgIFZlY3RvcjMuVHJhbnNmb3JtQ29vcmRpbmF0ZXNUb1JlZih2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIGNvb3JkaW5hdGVzIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgdHJhbnNmb3JtYXRpb24gYnkgdGhlIGdpdmVuIG1hdHJpeCBvZiB0aGUgZ2l2ZW4gdmVjdG9yXG4gICAqIFRoaXMgbWV0aG9kIGNvbXB1dGVzIHRyYW5mb3JtZWQgY29vcmRpbmF0ZXMgb25seSwgbm90IHRyYW5zZm9ybWVkIGRpcmVjdGlvbiB2ZWN0b3JzIChpZS4gaXQgdGFrZXMgdHJhbnNsYXRpb24gaW4gYWNjb3VudClcbiAgICogQHBhcmFtIHZlY3RvciAtIGRlZmluZXMgdGhlIFZlY3RvcjMgdG8gdHJhbnNmb3JtXG4gICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIGRlZmluZXMgdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxuICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIFRyYW5zZm9ybUNvb3JkaW5hdGVzVG9SZWYoXG4gICAgdmVjdG9yOiBSZWFkT25seVZlY3RvcjMsXG4gICAgdHJhbnNmb3JtYXRpb246IFJlYWRvbmx5PE1hdHJpeD4sXG4gICAgcmVzdWx0OiBWZWN0b3IzXG4gICk6IHZvaWQge1xuICAgIHJldHVybiBWZWN0b3IzLlRyYW5zZm9ybUNvb3JkaW5hdGVzRnJvbUZsb2F0c1RvUmVmKHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnosIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgY29vcmRpbmF0ZXMgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSB0cmFuc2Zvcm1hdGlvbiBieSB0aGUgZ2l2ZW4gbWF0cml4IG9mIHRoZSBnaXZlbiBmbG9hdHMgKHgsIHksIHopXG4gICAqIFRoaXMgbWV0aG9kIGNvbXB1dGVzIHRyYW5mb3JtZWQgY29vcmRpbmF0ZXMgb25seSwgbm90IHRyYW5zZm9ybWVkIGRpcmVjdGlvbiB2ZWN0b3JzXG4gICAqIEBwYXJhbSB4IC0gZGVmaW5lIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIHNvdXJjZSB2ZWN0b3JcbiAgICogQHBhcmFtIHkgLSBkZWZpbmUgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgc291cmNlIHZlY3RvclxuICAgKiBAcGFyYW0geiAtIGRlZmluZSB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBzb3VyY2UgdmVjdG9yXG4gICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIGRlZmluZXMgdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxuICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIFRyYW5zZm9ybUNvb3JkaW5hdGVzRnJvbUZsb2F0c1RvUmVmKFxuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXIsXG4gICAgejogbnVtYmVyLFxuICAgIHRyYW5zZm9ybWF0aW9uOiBSZWFkb25seTxNYXRyaXg+LFxuICAgIHJlc3VsdDogVmVjdG9yM1xuICApOiB2b2lkIHtcbiAgICBjb25zdCBtID0gdHJhbnNmb3JtYXRpb24ubVxuICAgIGxldCByeCA9IHggKiBtWzBdICsgeSAqIG1bNF0gKyB6ICogbVs4XSArIG1bMTJdXG4gICAgbGV0IHJ5ID0geCAqIG1bMV0gKyB5ICogbVs1XSArIHogKiBtWzldICsgbVsxM11cbiAgICBsZXQgcnogPSB4ICogbVsyXSArIHkgKiBtWzZdICsgeiAqIG1bMTBdICsgbVsxNF1cbiAgICBsZXQgcncgPSAxIC8gKHggKiBtWzNdICsgeSAqIG1bN10gKyB6ICogbVsxMV0gKyBtWzE1XSlcblxuICAgIHJlc3VsdC54ID0gcnggKiByd1xuICAgIHJlc3VsdC55ID0gcnkgKiByd1xuICAgIHJlc3VsdC56ID0gcnogKiByd1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBub3JtYWwgdHJhbnNmb3JtYXRpb24gYnkgdGhlIGdpdmVuIG1hdHJpeCBvZiB0aGUgZ2l2ZW4gdmVjdG9yXG4gICAqIFRoaXMgbWV0aG9kcyBjb21wdXRlcyB0cmFuc2Zvcm1lZCBub3JtYWxpemVkIGRpcmVjdGlvbiB2ZWN0b3JzIG9ubHkgKGllLiBpdCBkb2VzIG5vdCBhcHBseSB0cmFuc2xhdGlvbilcbiAgICogQHBhcmFtIHZlY3RvciAtIGRlZmluZXMgdGhlIFZlY3RvcjMgdG8gdHJhbnNmb3JtXG4gICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIGRlZmluZXMgdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxuICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgVHJhbnNmb3JtTm9ybWFsKHZlY3RvcjogUmVhZE9ubHlWZWN0b3IzLCB0cmFuc2Zvcm1hdGlvbjogTWF0cml4KTogVmVjdG9yMyB7XG4gICAgbGV0IHJlc3VsdCA9IFZlY3RvcjMuWmVybygpXG4gICAgVmVjdG9yMy5UcmFuc2Zvcm1Ob3JtYWxUb1JlZih2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgbm9ybWFsIHRyYW5zZm9ybWF0aW9uIGJ5IHRoZSBnaXZlbiBtYXRyaXggb2YgdGhlIGdpdmVuIHZlY3RvclxuICAgKiBUaGlzIG1ldGhvZHMgY29tcHV0ZXMgdHJhbnNmb3JtZWQgbm9ybWFsaXplZCBkaXJlY3Rpb24gdmVjdG9ycyBvbmx5IChpZS4gaXQgZG9lcyBub3QgYXBwbHkgdHJhbnNsYXRpb24pXG4gICAqIEBwYXJhbSB2ZWN0b3IgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIHRvIHRyYW5zZm9ybVxuICAgKiBAcGFyYW0gdHJhbnNmb3JtYXRpb24gLSBkZWZpbmVzIHRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXhcbiAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBUcmFuc2Zvcm1Ob3JtYWxUb1JlZih2ZWN0b3I6IFJlYWRPbmx5VmVjdG9yMywgdHJhbnNmb3JtYXRpb246IFJlYWRvbmx5PE1hdHJpeD4sIHJlc3VsdDogVmVjdG9yMyk6IHZvaWQge1xuICAgIHRoaXMuVHJhbnNmb3JtTm9ybWFsRnJvbUZsb2F0c1RvUmVmKHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnosIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBub3JtYWwgdHJhbnNmb3JtYXRpb24gYnkgdGhlIGdpdmVuIG1hdHJpeCBvZiB0aGUgZ2l2ZW4gZmxvYXRzICh4LCB5LCB6KVxuICAgKiBUaGlzIG1ldGhvZHMgY29tcHV0ZXMgdHJhbnNmb3JtZWQgbm9ybWFsaXplZCBkaXJlY3Rpb24gdmVjdG9ycyBvbmx5IChpZS4gaXQgZG9lcyBub3QgYXBwbHkgdHJhbnNsYXRpb24pXG4gICAqIEBwYXJhbSB4IC0gZGVmaW5lIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIHNvdXJjZSB2ZWN0b3JcbiAgICogQHBhcmFtIHkgLSBkZWZpbmUgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgc291cmNlIHZlY3RvclxuICAgKiBAcGFyYW0geiAtIGRlZmluZSB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBzb3VyY2UgdmVjdG9yXG4gICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIGRlZmluZXMgdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxuICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIFRyYW5zZm9ybU5vcm1hbEZyb21GbG9hdHNUb1JlZihcbiAgICB4OiBudW1iZXIsXG4gICAgeTogbnVtYmVyLFxuICAgIHo6IG51bWJlcixcbiAgICB0cmFuc2Zvcm1hdGlvbjogUmVhZG9ubHk8TWF0cml4PixcbiAgICByZXN1bHQ6IFZlY3RvcjNcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgbSA9IHRyYW5zZm9ybWF0aW9uLm1cbiAgICByZXN1bHQueCA9IHggKiBtWzBdICsgeSAqIG1bNF0gKyB6ICogbVs4XVxuICAgIHJlc3VsdC55ID0geCAqIG1bMV0gKyB5ICogbVs1XSArIHogKiBtWzldXG4gICAgcmVzdWx0LnogPSB4ICogbVsyXSArIHkgKiBtWzZdICsgeiAqIG1bMTBdXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIGxvY2F0ZWQgZm9yIFwiYW1vdW50XCIgb24gdGhlIENhdG11bGxSb20gaW50ZXJwb2xhdGlvbiBzcGxpbmUgZGVmaW5lZCBieSB0aGUgdmVjdG9ycyBcInZhbHVlMVwiLCBcInZhbHVlMlwiLCBcInZhbHVlM1wiLCBcInZhbHVlNFwiXG4gICAqIEBwYXJhbSB2YWx1ZTEgLSBkZWZpbmVzIHRoZSBmaXJzdCBjb250cm9sIHBvaW50XG4gICAqIEBwYXJhbSB2YWx1ZTIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgY29udHJvbCBwb2ludFxuICAgKiBAcGFyYW0gdmFsdWUzIC0gZGVmaW5lcyB0aGUgdGhpcmQgY29udHJvbCBwb2ludFxuICAgKiBAcGFyYW0gdmFsdWU0IC0gZGVmaW5lcyB0aGUgZm91cnRoIGNvbnRyb2wgcG9pbnRcbiAgICogQHBhcmFtIGFtb3VudCAtIGRlZmluZXMgdGhlIGFtb3VudCBvbiB0aGUgc3BsaW5lIHRvIHVzZVxuICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgQ2F0bXVsbFJvbShcbiAgICB2YWx1ZTE6IFJlYWRPbmx5VmVjdG9yMyxcbiAgICB2YWx1ZTI6IFJlYWRPbmx5VmVjdG9yMyxcbiAgICB2YWx1ZTM6IFJlYWRPbmx5VmVjdG9yMyxcbiAgICB2YWx1ZTQ6IFJlYWRPbmx5VmVjdG9yMyxcbiAgICBhbW91bnQ6IG51bWJlclxuICApOiBWZWN0b3IzIHtcbiAgICBsZXQgc3F1YXJlZCA9IGFtb3VudCAqIGFtb3VudFxuICAgIGxldCBjdWJlZCA9IGFtb3VudCAqIHNxdWFyZWRcblxuICAgIGxldCB4ID1cbiAgICAgIDAuNSAqXG4gICAgICAoMi4wICogdmFsdWUyLnggK1xuICAgICAgICAoLXZhbHVlMS54ICsgdmFsdWUzLngpICogYW1vdW50ICtcbiAgICAgICAgKDIuMCAqIHZhbHVlMS54IC0gNS4wICogdmFsdWUyLnggKyA0LjAgKiB2YWx1ZTMueCAtIHZhbHVlNC54KSAqIHNxdWFyZWQgK1xuICAgICAgICAoLXZhbHVlMS54ICsgMy4wICogdmFsdWUyLnggLSAzLjAgKiB2YWx1ZTMueCArIHZhbHVlNC54KSAqIGN1YmVkKVxuXG4gICAgbGV0IHkgPVxuICAgICAgMC41ICpcbiAgICAgICgyLjAgKiB2YWx1ZTIueSArXG4gICAgICAgICgtdmFsdWUxLnkgKyB2YWx1ZTMueSkgKiBhbW91bnQgK1xuICAgICAgICAoMi4wICogdmFsdWUxLnkgLSA1LjAgKiB2YWx1ZTIueSArIDQuMCAqIHZhbHVlMy55IC0gdmFsdWU0LnkpICogc3F1YXJlZCArXG4gICAgICAgICgtdmFsdWUxLnkgKyAzLjAgKiB2YWx1ZTIueSAtIDMuMCAqIHZhbHVlMy55ICsgdmFsdWU0LnkpICogY3ViZWQpXG5cbiAgICBsZXQgeiA9XG4gICAgICAwLjUgKlxuICAgICAgKDIuMCAqIHZhbHVlMi56ICtcbiAgICAgICAgKC12YWx1ZTEueiArIHZhbHVlMy56KSAqIGFtb3VudCArXG4gICAgICAgICgyLjAgKiB2YWx1ZTEueiAtIDUuMCAqIHZhbHVlMi56ICsgNC4wICogdmFsdWUzLnogLSB2YWx1ZTQueikgKiBzcXVhcmVkICtcbiAgICAgICAgKC12YWx1ZTEueiArIDMuMCAqIHZhbHVlMi56IC0gMy4wICogdmFsdWUzLnogKyB2YWx1ZTQueikgKiBjdWJlZClcblxuICAgIHJldHVybiBuZXcgVmVjdG9yMyh4LCB5LCB6KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgd2l0aCB0aGUgY29vcmRpbmF0ZXMgb2YgXCJ2YWx1ZVwiLCBpZiB0aGUgdmVjdG9yIFwidmFsdWVcIiBpcyBpbiB0aGUgY3ViZSBkZWZpbmVkIGJ5IHRoZSB2ZWN0b3JzIFwibWluXCIgYW5kIFwibWF4XCJcbiAgICogSWYgYSBjb29yZGluYXRlIHZhbHVlIG9mIFwidmFsdWVcIiBpcyBsb3dlciB0aGFuIG9uZSBvZiB0aGUgXCJtaW5cIiBjb29yZGluYXRlLCB0aGVuIHRoaXMgXCJ2YWx1ZVwiIGNvb3JkaW5hdGUgaXMgc2V0IHdpdGggdGhlIFwibWluXCIgb25lXG4gICAqIElmIGEgY29vcmRpbmF0ZSB2YWx1ZSBvZiBcInZhbHVlXCIgaXMgZ3JlYXRlciB0aGFuIG9uZSBvZiB0aGUgXCJtYXhcIiBjb29yZGluYXRlLCB0aGVuIHRoaXMgXCJ2YWx1ZVwiIGNvb3JkaW5hdGUgaXMgc2V0IHdpdGggdGhlIFwibWF4XCIgb25lXG4gICAqIEBwYXJhbSB2YWx1ZSAtIGRlZmluZXMgdGhlIGN1cnJlbnQgdmFsdWVcbiAgICogQHBhcmFtIG1pbiAtIGRlZmluZXMgdGhlIGxvd2VyIHJhbmdlIHZhbHVlXG4gICAqIEBwYXJhbSBtYXggLSBkZWZpbmVzIHRoZSB1cHBlciByYW5nZSB2YWx1ZVxuICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgQ2xhbXAodmFsdWU6IFJlYWRPbmx5VmVjdG9yMywgbWluOiBSZWFkT25seVZlY3RvcjMsIG1heDogUmVhZE9ubHlWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgY29uc3QgdiA9IG5ldyBWZWN0b3IzKClcbiAgICBWZWN0b3IzLkNsYW1wVG9SZWYodmFsdWUsIG1pbiwgbWF4LCB2KVxuICAgIHJldHVybiB2XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhlIGNvb3JkaW5hdGVzIG9mIFwidmFsdWVcIiwgaWYgdGhlIHZlY3RvciBcInZhbHVlXCIgaXMgaW4gdGhlIGN1YmUgZGVmaW5lZCBieSB0aGUgdmVjdG9ycyBcIm1pblwiIGFuZCBcIm1heFwiXG4gICAqIElmIGEgY29vcmRpbmF0ZSB2YWx1ZSBvZiBcInZhbHVlXCIgaXMgbG93ZXIgdGhhbiBvbmUgb2YgdGhlIFwibWluXCIgY29vcmRpbmF0ZSwgdGhlbiB0aGlzIFwidmFsdWVcIiBjb29yZGluYXRlIGlzIHNldCB3aXRoIHRoZSBcIm1pblwiIG9uZVxuICAgKiBJZiBhIGNvb3JkaW5hdGUgdmFsdWUgb2YgXCJ2YWx1ZVwiIGlzIGdyZWF0ZXIgdGhhbiBvbmUgb2YgdGhlIFwibWF4XCIgY29vcmRpbmF0ZSwgdGhlbiB0aGlzIFwidmFsdWVcIiBjb29yZGluYXRlIGlzIHNldCB3aXRoIHRoZSBcIm1heFwiIG9uZVxuICAgKiBAcGFyYW0gdmFsdWUgLSBkZWZpbmVzIHRoZSBjdXJyZW50IHZhbHVlXG4gICAqIEBwYXJhbSBtaW4gLSBkZWZpbmVzIHRoZSBsb3dlciByYW5nZSB2YWx1ZVxuICAgKiBAcGFyYW0gbWF4IC0gZGVmaW5lcyB0aGUgdXBwZXIgcmFuZ2UgdmFsdWVcbiAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBDbGFtcFRvUmVmKHZhbHVlOiBSZWFkT25seVZlY3RvcjMsIG1pbjogUmVhZE9ubHlWZWN0b3IzLCBtYXg6IFJlYWRPbmx5VmVjdG9yMywgcmVzdWx0OiBWZWN0b3IzKTogdm9pZCB7XG4gICAgbGV0IHggPSB2YWx1ZS54XG4gICAgeCA9IHggPiBtYXgueCA/IG1heC54IDogeFxuICAgIHggPSB4IDwgbWluLnggPyBtaW4ueCA6IHhcblxuICAgIGxldCB5ID0gdmFsdWUueVxuICAgIHkgPSB5ID4gbWF4LnkgPyBtYXgueSA6IHlcbiAgICB5ID0geSA8IG1pbi55ID8gbWluLnkgOiB5XG5cbiAgICBsZXQgeiA9IHZhbHVlLnpcbiAgICB6ID0geiA+IG1heC56ID8gbWF4LnogOiB6XG4gICAgeiA9IHogPCBtaW4ueiA/IG1pbi56IDogelxuXG4gICAgcmVzdWx0LmNvcHlGcm9tRmxvYXRzKHgsIHksIHopXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIGxvY2F0ZWQgZm9yIFwiYW1vdW50XCIgKGZsb2F0KSBvbiB0aGUgSGVybWl0ZSBpbnRlcnBvbGF0aW9uIHNwbGluZSBkZWZpbmVkIGJ5IHRoZSB2ZWN0b3JzIFwidmFsdWUxXCIsIFwidGFuZ2VudDFcIiwgXCJ2YWx1ZTJcIiwgXCJ0YW5nZW50MlwiXG4gICAqIEBwYXJhbSB2YWx1ZTEgLSBkZWZpbmVzIHRoZSBmaXJzdCBjb250cm9sIHBvaW50XG4gICAqIEBwYXJhbSB0YW5nZW50MSAtIGRlZmluZXMgdGhlIGZpcnN0IHRhbmdlbnQgdmVjdG9yXG4gICAqIEBwYXJhbSB2YWx1ZTIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgY29udHJvbCBwb2ludFxuICAgKiBAcGFyYW0gdGFuZ2VudDIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgdGFuZ2VudCB2ZWN0b3JcbiAgICogQHBhcmFtIGFtb3VudCAtIGRlZmluZXMgdGhlIGFtb3VudCBvbiB0aGUgaW50ZXJwb2xhdGlvbiBzcGxpbmUgKGJldHdlZW4gMCBhbmQgMSlcbiAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIEhlcm1pdGUoXG4gICAgdmFsdWUxOiBSZWFkT25seVZlY3RvcjMsXG4gICAgdGFuZ2VudDE6IFJlYWRPbmx5VmVjdG9yMyxcbiAgICB2YWx1ZTI6IFJlYWRPbmx5VmVjdG9yMyxcbiAgICB0YW5nZW50MjogUmVhZE9ubHlWZWN0b3IzLFxuICAgIGFtb3VudDogbnVtYmVyXG4gICk6IFZlY3RvcjMge1xuICAgIGxldCBzcXVhcmVkID0gYW1vdW50ICogYW1vdW50XG4gICAgbGV0IGN1YmVkID0gYW1vdW50ICogc3F1YXJlZFxuICAgIGxldCBwYXJ0MSA9IDIuMCAqIGN1YmVkIC0gMy4wICogc3F1YXJlZCArIDEuMFxuICAgIGxldCBwYXJ0MiA9IC0yLjAgKiBjdWJlZCArIDMuMCAqIHNxdWFyZWRcbiAgICBsZXQgcGFydDMgPSBjdWJlZCAtIDIuMCAqIHNxdWFyZWQgKyBhbW91bnRcbiAgICBsZXQgcGFydDQgPSBjdWJlZCAtIHNxdWFyZWRcblxuICAgIGxldCB4ID0gdmFsdWUxLnggKiBwYXJ0MSArIHZhbHVlMi54ICogcGFydDIgKyB0YW5nZW50MS54ICogcGFydDMgKyB0YW5nZW50Mi54ICogcGFydDRcbiAgICBsZXQgeSA9IHZhbHVlMS55ICogcGFydDEgKyB2YWx1ZTIueSAqIHBhcnQyICsgdGFuZ2VudDEueSAqIHBhcnQzICsgdGFuZ2VudDIueSAqIHBhcnQ0XG4gICAgbGV0IHogPSB2YWx1ZTEueiAqIHBhcnQxICsgdmFsdWUyLnogKiBwYXJ0MiArIHRhbmdlbnQxLnogKiBwYXJ0MyArIHRhbmdlbnQyLnogKiBwYXJ0NFxuICAgIHJldHVybiBuZXcgVmVjdG9yMyh4LCB5LCB6KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBsb2NhdGVkIGZvciBcImFtb3VudFwiIChmbG9hdCkgb24gdGhlIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdGhlIHZlY3RvcnMgXCJzdGFydFwiIGFuZCBcImVuZFwiXG4gICAqIEBwYXJhbSBzdGFydCAtIGRlZmluZXMgdGhlIHN0YXJ0IHZhbHVlXG4gICAqIEBwYXJhbSBlbmQgLSBkZWZpbmVzIHRoZSBlbmQgdmFsdWVcbiAgICogQHBhcmFtIGFtb3VudCAtIG1heCBkZWZpbmVzIGFtb3VudCBiZXR3ZWVuIGJvdGggKGJldHdlZW4gMCBhbmQgMSlcbiAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIExlcnAoc3RhcnQ6IFJlYWRPbmx5VmVjdG9yMywgZW5kOiBSZWFkT25seVZlY3RvcjMsIGFtb3VudDogbnVtYmVyKTogVmVjdG9yMyB7XG4gICAgbGV0IHJlc3VsdCA9IG5ldyBWZWN0b3IzKDAsIDAsIDApXG4gICAgVmVjdG9yMy5MZXJwVG9SZWYoc3RhcnQsIGVuZCwgYW1vdW50LCByZXN1bHQpXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgbGluZWFyIGludGVycG9sYXRpb24gZnJvbSB0aGUgdmVjdG9yIFwic3RhcnRcIiBmb3IgXCJhbW91bnRcIiB0byB0aGUgdmVjdG9yIFwiZW5kXCJcbiAgICogQHBhcmFtIHN0YXJ0IC0gZGVmaW5lcyB0aGUgc3RhcnQgdmFsdWVcbiAgICogQHBhcmFtIGVuZCAtIGRlZmluZXMgdGhlIGVuZCB2YWx1ZVxuICAgKiBAcGFyYW0gYW1vdW50IC0gbWF4IGRlZmluZXMgYW1vdW50IGJldHdlZW4gYm90aCAoYmV0d2VlbiAwIGFuZCAxKVxuICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIExlcnBUb1JlZihzdGFydDogUmVhZE9ubHlWZWN0b3IzLCBlbmQ6IFJlYWRPbmx5VmVjdG9yMywgYW1vdW50OiBudW1iZXIsIHJlc3VsdDogVmVjdG9yMyk6IHZvaWQge1xuICAgIHJlc3VsdC54ID0gc3RhcnQueCArIChlbmQueCAtIHN0YXJ0LngpICogYW1vdW50XG4gICAgcmVzdWx0LnkgPSBzdGFydC55ICsgKGVuZC55IC0gc3RhcnQueSkgKiBhbW91bnRcbiAgICByZXN1bHQueiA9IHN0YXJ0LnogKyAoZW5kLnogLSBzdGFydC56KSAqIGFtb3VudFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRvdCBwcm9kdWN0IChmbG9hdCkgYmV0d2VlbiB0aGUgdmVjdG9ycyBcImxlZnRcIiBhbmQgXCJyaWdodFwiXG4gICAqIEBwYXJhbSBsZWZ0IC0gZGVmaW5lcyB0aGUgbGVmdCBvcGVyYW5kXG4gICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHJpZ2h0IG9wZXJhbmRcbiAgICogQHJldHVybnMgdGhlIGRvdCBwcm9kdWN0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIERvdChsZWZ0OiBSZWFkT25seVZlY3RvcjMsIHJpZ2h0OiBSZWFkT25seVZlY3RvcjMpOiBudW1iZXIge1xuICAgIHJldHVybiBsZWZ0LnggKiByaWdodC54ICsgbGVmdC55ICogcmlnaHQueSArIGxlZnQueiAqIHJpZ2h0LnpcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgYXMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdGhlIHZlY3RvcnMgXCJsZWZ0XCIgYW5kIFwicmlnaHRcIlxuICAgKiBUaGUgY3Jvc3MgcHJvZHVjdCBpcyB0aGVuIG9ydGhvZ29uYWwgdG8gYm90aCBcImxlZnRcIiBhbmQgXCJyaWdodFwiXG4gICAqIEBwYXJhbSBsZWZ0IC0gZGVmaW5lcyB0aGUgbGVmdCBvcGVyYW5kXG4gICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHJpZ2h0IG9wZXJhbmRcbiAgICogQHJldHVybnMgdGhlIGNyb3NzIHByb2R1Y3RcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgQ3Jvc3MobGVmdDogUmVhZE9ubHlWZWN0b3IzLCByaWdodDogUmVhZE9ubHlWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgbGV0IHJlc3VsdCA9IFZlY3RvcjMuWmVybygpXG4gICAgVmVjdG9yMy5Dcm9zc1RvUmVmKGxlZnQsIHJpZ2h0LCByZXN1bHQpXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhlIGNyb3NzIHByb2R1Y3Qgb2YgXCJsZWZ0XCIgYW5kIFwicmlnaHRcIlxuICAgKiBUaGUgY3Jvc3MgcHJvZHVjdCBpcyB0aGVuIG9ydGhvZ29uYWwgdG8gYm90aCBcImxlZnRcIiBhbmQgXCJyaWdodFwiXG4gICAqIEBwYXJhbSBsZWZ0IC0gZGVmaW5lcyB0aGUgbGVmdCBvcGVyYW5kXG4gICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHJpZ2h0IG9wZXJhbmRcbiAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBDcm9zc1RvUmVmKGxlZnQ6IFJlYWRPbmx5VmVjdG9yMywgcmlnaHQ6IFJlYWRPbmx5VmVjdG9yMywgcmVzdWx0OiBWZWN0b3IzKTogdm9pZCB7XG4gICAgY29uc3QgeCA9IGxlZnQueSAqIHJpZ2h0LnogLSBsZWZ0LnogKiByaWdodC55XG4gICAgY29uc3QgeSA9IGxlZnQueiAqIHJpZ2h0LnggLSBsZWZ0LnggKiByaWdodC56XG4gICAgY29uc3QgeiA9IGxlZnQueCAqIHJpZ2h0LnkgLSBsZWZ0LnkgKiByaWdodC54XG4gICAgcmVzdWx0LmNvcHlGcm9tRmxvYXRzKHgsIHksIHopXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIGFzIHRoZSBub3JtYWxpemF0aW9uIG9mIHRoZSBnaXZlbiB2ZWN0b3JcbiAgICogQHBhcmFtIHZlY3RvciAtIGRlZmluZXMgdGhlIFZlY3RvcjMgdG8gbm9ybWFsaXplXG4gICAqIEByZXR1cm5zIHRoZSBuZXcgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBOb3JtYWxpemUodmVjdG9yOiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgbGV0IHJlc3VsdCA9IFZlY3RvcjMuWmVybygpXG4gICAgVmVjdG9yMy5Ob3JtYWxpemVUb1JlZih2ZWN0b3IsIHJlc3VsdClcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGUgbm9ybWFsaXphdGlvbiBvZiB0aGUgZ2l2ZW4gZmlyc3QgdmVjdG9yXG4gICAqIEBwYXJhbSB2ZWN0b3IgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIHRvIG5vcm1hbGl6ZVxuICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIE5vcm1hbGl6ZVRvUmVmKHZlY3RvcjogVmVjdG9yMywgcmVzdWx0OiBWZWN0b3IzKTogdm9pZCB7XG4gICAgdmVjdG9yLm5vcm1hbGl6ZVRvUmVmKHJlc3VsdClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBtaW5pbWFsIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gdHdvIFZlY3RvcjNcbiAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAqIEByZXR1cm5zIHRoZSBuZXcgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBNaW5pbWl6ZShsZWZ0OiBSZWFkT25seVZlY3RvcjMsIHJpZ2h0OiBSZWFkT25seVZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICBsZXQgbWluID0gbmV3IFZlY3RvcjMobGVmdC54LCBsZWZ0LnksIGxlZnQueilcbiAgICBtaW4ubWluaW1pemVJblBsYWNlKHJpZ2h0KVxuICAgIHJldHVybiBtaW5cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBtYXhpbWFsIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gdHdvIFZlY3RvcjNcbiAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAqIEByZXR1cm5zIHRoZSBuZXcgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBNYXhpbWl6ZShsZWZ0OiBWZWN0b3IzLCByaWdodDogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIGxldCBtYXggPSBuZXcgVmVjdG9yMyhsZWZ0LngsIGxlZnQueSwgbGVmdC56KVxuICAgIG1heC5tYXhpbWl6ZUluUGxhY2UocmlnaHQpXG4gICAgcmV0dXJuIG1heFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIHZlY3RvcnMgXCJ2YWx1ZTFcIiBhbmQgXCJ2YWx1ZTJcIlxuICAgKiBAcGFyYW0gdmFsdWUxIC0gZGVmaW5lcyB0aGUgZmlyc3Qgb3BlcmFuZFxuICAgKiBAcGFyYW0gdmFsdWUyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICogQHJldHVybnMgdGhlIGRpc3RhbmNlXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIERpc3RhbmNlKHZhbHVlMTogUmVhZE9ubHlWZWN0b3IzLCB2YWx1ZTI6IFJlYWRPbmx5VmVjdG9yMyk6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguc3FydChWZWN0b3IzLkRpc3RhbmNlU3F1YXJlZCh2YWx1ZTEsIHZhbHVlMikpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB2ZWN0b3JzIFwidmFsdWUxXCIgYW5kIFwidmFsdWUyXCJcbiAgICogQHBhcmFtIHZhbHVlMSAtIGRlZmluZXMgdGhlIGZpcnN0IG9wZXJhbmRcbiAgICogQHBhcmFtIHZhbHVlMiAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAqIEByZXR1cm5zIHRoZSBzcXVhcmVkIGRpc3RhbmNlXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIERpc3RhbmNlU3F1YXJlZCh2YWx1ZTE6IFJlYWRPbmx5VmVjdG9yMywgdmFsdWUyOiBSZWFkT25seVZlY3RvcjMpOiBudW1iZXIge1xuICAgIGxldCB4ID0gdmFsdWUxLnggLSB2YWx1ZTIueFxuICAgIGxldCB5ID0gdmFsdWUxLnkgLSB2YWx1ZTIueVxuICAgIGxldCB6ID0gdmFsdWUxLnogLSB2YWx1ZTIuelxuXG4gICAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogelxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBsb2NhdGVkIGF0IHRoZSBjZW50ZXIgYmV0d2VlbiBcInZhbHVlMVwiIGFuZCBcInZhbHVlMlwiXG4gICAqIEBwYXJhbSB2YWx1ZTEgLSBkZWZpbmVzIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAqIEBwYXJhbSB2YWx1ZTIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgQ2VudGVyKHZhbHVlMTogUmVhZE9ubHlWZWN0b3IzLCB2YWx1ZTI6IFJlYWRPbmx5VmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIGxldCBjZW50ZXIgPSBWZWN0b3IzLkFkZCh2YWx1ZTEsIHZhbHVlMilcbiAgICBjZW50ZXIuc2NhbGVJblBsYWNlKDAuNSlcbiAgICByZXR1cm4gY2VudGVyXG4gIH1cblxuICAvKipcbiAgICogR2l2ZW4gdGhyZWUgb3J0aG9nb25hbCBub3JtYWxpemVkIGxlZnQtaGFuZGVkIG9yaWVudGVkIFZlY3RvcjMgYXhpcyBpbiBzcGFjZSAodGFyZ2V0IHN5c3RlbSksXG4gICAqIFJvdGF0aW9uRnJvbUF4aXMoKSByZXR1cm5zIHRoZSByb3RhdGlvbiBFdWxlciBhbmdsZXMgKGV4IDogcm90YXRpb24ueCwgcm90YXRpb24ueSwgcm90YXRpb24ueikgdG8gYXBwbHlcbiAgICogdG8gc29tZXRoaW5nIGluIG9yZGVyIHRvIHJvdGF0ZSBpdCBmcm9tIGl0cyBsb2NhbCBzeXN0ZW0gdG8gdGhlIGdpdmVuIHRhcmdldCBzeXN0ZW1cbiAgICogTm90ZTogYXhpczEsIGF4aXMyIGFuZCBheGlzMyBhcmUgbm9ybWFsaXplZCBkdXJpbmcgdGhpcyBvcGVyYXRpb25cbiAgICogQHBhcmFtIGF4aXMxIC0gZGVmaW5lcyB0aGUgZmlyc3QgYXhpc1xuICAgKiBAcGFyYW0gYXhpczIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgYXhpc1xuICAgKiBAcGFyYW0gYXhpczMgLSBkZWZpbmVzIHRoZSB0aGlyZCBheGlzXG4gICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgUm90YXRpb25Gcm9tQXhpcyhheGlzMTogVmVjdG9yMywgYXhpczI6IFZlY3RvcjMsIGF4aXMzOiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgbGV0IHJvdGF0aW9uID0gVmVjdG9yMy5aZXJvKClcbiAgICBWZWN0b3IzLlJvdGF0aW9uRnJvbUF4aXNUb1JlZihheGlzMSwgYXhpczIsIGF4aXMzLCByb3RhdGlvbilcbiAgICByZXR1cm4gcm90YXRpb25cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgc2FtZSB0aGFuIFJvdGF0aW9uRnJvbUF4aXMgYnV0IHVwZGF0ZXMgdGhlIGdpdmVuIHJlZiBWZWN0b3IzIHBhcmFtZXRlciBpbnN0ZWFkIG9mIHJldHVybmluZyBhIG5ldyBWZWN0b3IzXG4gICAqIEBwYXJhbSBheGlzMSAtIGRlZmluZXMgdGhlIGZpcnN0IGF4aXNcbiAgICogQHBhcmFtIGF4aXMyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIGF4aXNcbiAgICogQHBhcmFtIGF4aXMzIC0gZGVmaW5lcyB0aGUgdGhpcmQgYXhpc1xuICAgKiBAcGFyYW0gcmVmIC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIFJvdGF0aW9uRnJvbUF4aXNUb1JlZihheGlzMTogVmVjdG9yMywgYXhpczI6IFZlY3RvcjMsIGF4aXMzOiBWZWN0b3IzLCByZWY6IFZlY3RvcjMpOiB2b2lkIHtcbiAgICBsZXQgcXVhdCA9IE1hdGhUbXAuUXVhdGVybmlvblswXVxuICAgIFF1YXRlcm5pb24uUm90YXRpb25RdWF0ZXJuaW9uRnJvbUF4aXNUb1JlZihheGlzMSwgYXhpczIsIGF4aXMzLCBxdWF0KVxuICAgIHJlZi5jb3B5RnJvbShxdWF0LmV1bGVyQW5nbGVzKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIFZlY3RvcjNcbiAgICogQHJldHVybnMgYSBzdHJpbmcgd2l0aCB0aGUgVmVjdG9yMyBjb29yZGluYXRlcy5cbiAgICovXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiBgKCR7dGhpcy54fSwgJHt0aGlzLnl9LCAke3RoaXMuen0pYFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGNsYXNzIG5hbWVcbiAgICogQHJldHVybnMgdGhlIHN0cmluZyBcIlZlY3RvcjNcIlxuICAgKi9cbiAgcHVibGljIGdldENsYXNzTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnVmVjdG9yMydcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBWZWN0b3IzIGhhc2ggY29kZVxuICAgKiBAcmV0dXJucyBhIG51bWJlciB3aGljaCB0ZW5kcyB0byBiZSB1bmlxdWUgYmV0d2VlbiBWZWN0b3IzIGluc3RhbmNlc1xuICAgKi9cbiAgcHVibGljIGdldEhhc2hDb2RlKCk6IG51bWJlciB7XG4gICAgbGV0IGhhc2ggPSB0aGlzLnggfHwgMFxuICAgIGhhc2ggPSAoaGFzaCAqIDM5NykgXiAodGhpcy55IHx8IDApXG4gICAgaGFzaCA9IChoYXNoICogMzk3KSBeICh0aGlzLnogfHwgMClcbiAgICByZXR1cm4gaGFzaFxuICB9XG5cbiAgLy8gT3BlcmF0b3JzXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aHJlZSBlbGVtZW50cyA6IHRoZSBjb29yZGluYXRlcyBvZiB0aGUgVmVjdG9yM1xuICAgKiBAcmV0dXJucyBhIG5ldyBhcnJheSBvZiBudW1iZXJzXG4gICAqL1xuICBwdWJsaWMgYXNBcnJheSgpOiBudW1iZXJbXSB7XG4gICAgbGV0IHJlc3VsdDogbnVtYmVyW10gPSBbXVxuICAgIHRoaXMudG9BcnJheShyZXN1bHQsIDApXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFBvcHVsYXRlcyB0aGUgZ2l2ZW4gYXJyYXkgb3IgRmxvYXRBcnJheSBmcm9tIHRoZSBnaXZlbiBpbmRleCB3aXRoIHRoZSBzdWNjZXNzaXZlIGNvb3JkaW5hdGVzIG9mIHRoZSBWZWN0b3IzXG4gICAqIEBwYXJhbSBhcnJheSAtIGRlZmluZXMgdGhlIGRlc3RpbmF0aW9uIGFycmF5XG4gICAqIEBwYXJhbSBpbmRleCAtIGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgZGVzdGluYXRpb24gYXJyYXlcbiAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIHRvQXJyYXkoYXJyYXk6IEZsb2F0QXJyYXksIGluZGV4OiBudW1iZXIgPSAwKTogVmVjdG9yMyB7XG4gICAgYXJyYXlbaW5kZXhdID0gdGhpcy54XG4gICAgYXJyYXlbaW5kZXggKyAxXSA9IHRoaXMueVxuICAgIGFycmF5W2luZGV4ICsgMl0gPSB0aGlzLnpcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBjdXJyZW50IFZlY3RvcjMgaW50byBhIHF1YXRlcm5pb24gKGNvbnNpZGVyaW5nIHRoYXQgdGhlIFZlY3RvcjMgY29udGFpbnMgRXVsZXIgYW5nbGVzIHJlcHJlc2VudGF0aW9uIG9mIGEgcm90YXRpb24pXG4gICAqIEByZXR1cm5zIGEgbmV3IFF1YXRlcm5pb24gb2JqZWN0LCBjb21wdXRlZCBmcm9tIHRoZSBWZWN0b3IzIGNvb3JkaW5hdGVzXG4gICAqL1xuICBwdWJsaWMgdG9RdWF0ZXJuaW9uKCk6IFF1YXRlcm5pb24ge1xuICAgIHJldHVybiBRdWF0ZXJuaW9uLklkZW50aXR5LnNldEV1bGVyKHRoaXMueSwgdGhpcy54LCB0aGlzLnopXG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgZ2l2ZW4gdmVjdG9yIHRvIHRoZSBjdXJyZW50IFZlY3RvcjNcbiAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgYWRkSW5QbGFjZShvdGhlclZlY3RvcjogUmVhZE9ubHlWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIHRoaXMuYWRkSW5QbGFjZUZyb21GbG9hdHMob3RoZXJWZWN0b3IueCwgb3RoZXJWZWN0b3IueSwgb3RoZXJWZWN0b3IueilcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBnaXZlbiBjb29yZGluYXRlcyB0byB0aGUgY3VycmVudCBWZWN0b3IzXG4gICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgeCBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIGFkZEluUGxhY2VGcm9tRmxvYXRzKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiBWZWN0b3IzIHtcbiAgICB0aGlzLnggKz0geFxuICAgIHRoaXMueSArPSB5XG4gICAgdGhpcy56ICs9IHpcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYSBuZXcgVmVjdG9yMywgcmVzdWx0IG9mIHRoZSBhZGRpdGlvbiB0aGUgY3VycmVudCBWZWN0b3IzIGFuZCB0aGUgZ2l2ZW4gdmVjdG9yXG4gICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAqIEByZXR1cm5zIHRoZSByZXN1bHRpbmcgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIGFkZChvdGhlclZlY3RvcjogUmVhZE9ubHlWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IzKHRoaXMueCArIG90aGVyVmVjdG9yLngsIHRoaXMueSArIG90aGVyVmVjdG9yLnksIHRoaXMueiArIG90aGVyVmVjdG9yLnopXG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgY3VycmVudCBWZWN0b3IzIHRvIHRoZSBnaXZlbiBvbmUgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIHRoZSB2ZWN0b3IgXCJyZXN1bHRcIlxuICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgYWRkVG9SZWYob3RoZXJWZWN0b3I6IFJlYWRPbmx5VmVjdG9yMywgcmVzdWx0OiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIHJlc3VsdC5jb3B5RnJvbUZsb2F0cyh0aGlzLnggKyBvdGhlclZlY3Rvci54LCB0aGlzLnkgKyBvdGhlclZlY3Rvci55LCB0aGlzLnogKyBvdGhlclZlY3Rvci56KVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnRyYWN0IHRoZSBnaXZlbiB2ZWN0b3IgZnJvbSB0aGUgY3VycmVudCBWZWN0b3IzXG4gICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIHN1YnRyYWN0SW5QbGFjZShvdGhlclZlY3RvcjogUmVhZE9ubHlWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgdGhpcy54IC09IG90aGVyVmVjdG9yLnhcbiAgICB0aGlzLnkgLT0gb3RoZXJWZWN0b3IueVxuICAgIHRoaXMueiAtPSBvdGhlclZlY3Rvci56XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMsIHJlc3VsdCBvZiB0aGUgc3VidHJhY3Rpb24gb2YgdGhlIGdpdmVuIHZlY3RvciBmcm9tIHRoZSBjdXJyZW50IFZlY3RvcjNcbiAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICogQHJldHVybnMgdGhlIHJlc3VsdGluZyBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgc3VidHJhY3Qob3RoZXJWZWN0b3I6IFJlYWRPbmx5VmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMyh0aGlzLnggLSBvdGhlclZlY3Rvci54LCB0aGlzLnkgLSBvdGhlclZlY3Rvci55LCB0aGlzLnogLSBvdGhlclZlY3Rvci56KVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnRyYWN0cyB0aGUgZ2l2ZW4gdmVjdG9yIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yMyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhlIHZlY3RvciBcInJlc3VsdFwiLlxuICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgc3VidHJhY3RUb1JlZihvdGhlclZlY3RvcjogUmVhZE9ubHlWZWN0b3IzLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gdGhpcy5zdWJ0cmFjdEZyb21GbG9hdHNUb1JlZihvdGhlclZlY3Rvci54LCBvdGhlclZlY3Rvci55LCBvdGhlclZlY3Rvci56LCByZXN1bHQpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB3aXRoIHRoZSBzdWJ0cmFjdGlvbiBvZiB0aGUgZ2l2ZW4gZmxvYXRzIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yMyBjb29yZGluYXRlc1xuICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgKiBAcGFyYW0geiAtIGRlZmluZXMgdGhlIHogY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgKiBAcmV0dXJucyB0aGUgcmVzdWx0aW5nIFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBzdWJ0cmFjdEZyb21GbG9hdHMoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcik6IFZlY3RvcjMge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMyh0aGlzLnggLSB4LCB0aGlzLnkgLSB5LCB0aGlzLnogLSB6KVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnRyYWN0cyB0aGUgZ2l2ZW4gZmxvYXRzIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yMyBjb29yZGluYXRlcyBhbmQgc2V0IHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoaXMgcmVzdWx0XG4gICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgeCBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBzdWJ0cmFjdEZyb21GbG9hdHNUb1JlZih4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gcmVzdWx0LmNvcHlGcm9tRmxvYXRzKHRoaXMueCAtIHgsIHRoaXMueSAtIHksIHRoaXMueiAtIHopXG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbGllcyB0aGlzIHZlY3RvciAod2l0aCBhbiBpbXBsaWNpdCAxIGluIHRoZSA0dGggZGltZW5zaW9uKSBhbmQgbSwgYW5kIGRpdmlkZXMgYnkgcGVyc3BlY3RpdmVcbiAgICogQHBhcmFtIG1hdHJpeCAtIFRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXhcbiAgICovXG4gIHB1YmxpYyBhcHBseU1hdHJpeDQobWF0cml4OiBNYXRyaXgpIHtcbiAgICB0aGlzLmFwcGx5TWF0cml4NFRvUmVmKG1hdHJpeCwgdGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBNdWx0aXBsaWVzIHRoaXMgdmVjdG9yICh3aXRoIGFuIGltcGxpY2l0IDEgaW4gdGhlIDR0aCBkaW1lbnNpb24pIGFuZCBtLCBhbmQgZGl2aWRlcyBieSBwZXJzcGVjdGl2ZSBhbmQgc2V0IHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoaXMgcmVzdWx0XG4gICAqIEBwYXJhbSBtYXRyaXggLSBUaGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBhcHBseU1hdHJpeDRUb1JlZihtYXRyaXg6IE1hdHJpeCwgcmVzdWx0OiBWZWN0b3IzKSB7XG4gICAgY29uc3QgeyB4LCB5LCB6IH0gPSB0aGlzXG4gICAgY29uc3QgeyBtIH0gPSBtYXRyaXhcbiAgICBjb25zdCB3ID0gMSAvIChtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV0pXG5cbiAgICByZXN1bHQueCA9IChtWzBdICogeCArIG1bNF0gKiB5ICsgbVs4XSAqIHogKyBtWzEyXSkgKiB3XG4gICAgcmVzdWx0LnkgPSAobVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6ICsgbVsxM10pICogd1xuICAgIHJlc3VsdC56ID0gKG1bMl0gKiB4ICsgbVs2XSAqIHkgKyBtWzEwXSAqIHogKyBtWzE0XSkgKiB3XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogUm90YXRlcyB0aGUgY3VycmVudCBWZWN0b3IzIGJhc2VkIG9uIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXG4gICAqIEBwYXJhbSBxIC0gZGVmaW5lcyB0aGUgUXVhdGVybmlvblxuICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgcm90YXRlKHE6IFF1YXRlcm5pb24pIHtcbiAgICByZXR1cm4gdGhpcy5yb3RhdGVUb1JlZihxLCB0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIFJvdGF0ZXMgY3VycmVudCBWZWN0b3IzIGJhc2VkIG9uIHRoZSBnaXZlbiBxdWF0ZXJuaW9uLCBidXQgYXBwbGllcyB0aGUgcm90YXRpb24gdG8gdGFyZ2V0IFZlY3RvcjMuXG4gICAqIEBwYXJhbSBxIC0gZGVmaW5lcyB0aGUgUXVhdGVybmlvblxuICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IFZlY3RvcjNcbiAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIHJvdGF0ZVRvUmVmKHE6IFF1YXRlcm5pb24sIHJlc3VsdDogVmVjdG9yMykge1xuICAgIGNvbnN0IHsgeCwgeSwgeiB9ID0gdGhpc1xuICAgIGNvbnN0IHsgeDogcXgsIHk6IHF5LCB6OiBxeiwgdzogcXcgfSA9IHFcblxuICAgIC8vIGNhbGN1bGF0ZSBxdWF0ICogdmVjdG9yXG5cbiAgICBjb25zdCBpeCA9IHF3ICogeCArIHF5ICogeiAtIHF6ICogeVxuICAgIGNvbnN0IGl5ID0gcXcgKiB5ICsgcXogKiB4IC0gcXggKiB6XG4gICAgY29uc3QgaXogPSBxdyAqIHogKyBxeCAqIHkgLSBxeSAqIHhcbiAgICBjb25zdCBpdyA9IC1xeCAqIHggLSBxeSAqIHkgLSBxeiAqIHpcblxuICAgIC8vIGNhbGN1bGF0ZSByZXN1bHQgKiBpbnZlcnNlIHF1YXRcblxuICAgIHJlc3VsdC54ID0gaXggKiBxdyArIGl3ICogLXF4ICsgaXkgKiAtcXogLSBpeiAqIC1xeVxuICAgIHJlc3VsdC55ID0gaXkgKiBxdyArIGl3ICogLXF5ICsgaXogKiAtcXggLSBpeCAqIC1xelxuICAgIHJlc3VsdC56ID0gaXogKiBxdyArIGl3ICogLXF6ICsgaXggKiAtcXkgLSBpeSAqIC1xeFxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYSBuZXcgVmVjdG9yMyBzZXQgd2l0aCB0aGUgY3VycmVudCBWZWN0b3IzIG5lZ2F0ZWQgY29vcmRpbmF0ZXNcbiAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIG5lZ2F0ZSgpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjMoLXRoaXMueCwgLXRoaXMueSwgLXRoaXMueilcbiAgfVxuXG4gIC8qKlxuICAgKiBNdWx0aXBsaWVzIHRoZSBWZWN0b3IzIGNvb3JkaW5hdGVzIGJ5IHRoZSBmbG9hdCBcInNjYWxlXCJcbiAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgbXVsdGlwbGllciBmYWN0b3JcbiAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgc2NhbGVJblBsYWNlKHNjYWxlOiBudW1iZXIpOiBWZWN0b3IzIHtcbiAgICB0aGlzLnggKj0gc2NhbGVcbiAgICB0aGlzLnkgKj0gc2NhbGVcbiAgICB0aGlzLnogKj0gc2NhbGVcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgd2l0aCB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIG11bHRpcGxpZWQgYnkgdGhlIGZsb2F0IFwic2NhbGVcIlxuICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBtdWx0aXBsaWVyIGZhY3RvclxuICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgc2NhbGUoc2NhbGU6IG51bWJlcik6IFZlY3RvcjMge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMyh0aGlzLnggKiBzY2FsZSwgdGhpcy55ICogc2NhbGUsIHRoaXMueiAqIHNjYWxlKVxuICB9XG5cbiAgLyoqXG4gICAqIE11bHRpcGxpZXMgdGhlIGN1cnJlbnQgVmVjdG9yMyBjb29yZGluYXRlcyBieSB0aGUgZmxvYXQgXCJzY2FsZVwiIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgY29vcmRpbmF0ZXNcbiAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgbXVsdGlwbGllciBmYWN0b3JcbiAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgb2JqZWN0IHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIHNjYWxlVG9SZWYoc2NhbGU6IG51bWJlciwgcmVzdWx0OiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIHJlc3VsdC5jb3B5RnJvbUZsb2F0cyh0aGlzLnggKiBzY2FsZSwgdGhpcy55ICogc2NhbGUsIHRoaXMueiAqIHNjYWxlKVxuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlIHRoZSBjdXJyZW50IFZlY3RvcjMgdmFsdWVzIGJ5IGEgZmFjdG9yIGFuZCBhZGQgdGhlIHJlc3VsdCB0byBhIGdpdmVuIFZlY3RvcjNcbiAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yXG4gICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIHNjYWxlQW5kQWRkVG9SZWYoc2NhbGU6IG51bWJlciwgcmVzdWx0OiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIHJlc3VsdC5hZGRJblBsYWNlRnJvbUZsb2F0cyh0aGlzLnggKiBzY2FsZSwgdGhpcy55ICogc2NhbGUsIHRoaXMueiAqIHNjYWxlKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCBWZWN0b3IzIGFuZCB0aGUgZ2l2ZW4gdmVjdG9yIGNvb3JkaW5hdGVzIGFyZSBzdHJpY3RseSBlcXVhbFxuICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgKiBAcmV0dXJucyB0cnVlIGlmIGJvdGggdmVjdG9ycyBhcmUgZXF1YWxzXG4gICAqL1xuICBwdWJsaWMgZXF1YWxzKG90aGVyVmVjdG9yOiBSZWFkT25seVZlY3RvcjMpOiBib29sZWFuIHtcbiAgICByZXR1cm4gb3RoZXJWZWN0b3IgJiYgdGhpcy54ID09PSBvdGhlclZlY3Rvci54ICYmIHRoaXMueSA9PT0gb3RoZXJWZWN0b3IueSAmJiB0aGlzLnogPT09IG90aGVyVmVjdG9yLnpcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGN1cnJlbnQgVmVjdG9yMyBhbmQgdGhlIGdpdmVuIHZlY3RvciBjb29yZGluYXRlcyBhcmUgZGlzdGFudCBsZXNzIHRoYW4gZXBzaWxvblxuICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgKiBAcGFyYW0gZXBzaWxvbiAtIGRlZmluZXMgdGhlIG1pbmltYWwgZGlzdGFuY2UgdG8gZGVmaW5lIHZhbHVlcyBhcyBlcXVhbHNcbiAgICogQHJldHVybnMgdHJ1ZSBpZiBib3RoIHZlY3RvcnMgYXJlIGRpc3RhbnQgbGVzcyB0aGFuIGVwc2lsb25cbiAgICovXG4gIHB1YmxpYyBlcXVhbHNXaXRoRXBzaWxvbihvdGhlclZlY3RvcjogUmVhZE9ubHlWZWN0b3IzLCBlcHNpbG9uOiBudW1iZXIgPSBFcHNpbG9uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIG90aGVyVmVjdG9yICYmXG4gICAgICBTY2FsYXIuV2l0aGluRXBzaWxvbih0aGlzLngsIG90aGVyVmVjdG9yLngsIGVwc2lsb24pICYmXG4gICAgICBTY2FsYXIuV2l0aGluRXBzaWxvbih0aGlzLnksIG90aGVyVmVjdG9yLnksIGVwc2lsb24pICYmXG4gICAgICBTY2FsYXIuV2l0aGluRXBzaWxvbih0aGlzLnosIG90aGVyVmVjdG9yLnosIGVwc2lsb24pXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGVxdWFscyB0aGUgZ2l2ZW4gZmxvYXRzXG4gICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgeCBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAqIEByZXR1cm5zIHRydWUgaWYgYm90aCB2ZWN0b3JzIGFyZSBlcXVhbHNcbiAgICovXG4gIHB1YmxpYyBlcXVhbHNUb0Zsb2F0cyh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMueCA9PT0geCAmJiB0aGlzLnkgPT09IHkgJiYgdGhpcy56ID09PSB6XG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbGllcyB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGJ5IHRoZSBnaXZlbiBvbmVzXG4gICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIG11bHRpcGx5SW5QbGFjZShvdGhlclZlY3RvcjogUmVhZE9ubHlWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgdGhpcy54ICo9IG90aGVyVmVjdG9yLnhcbiAgICB0aGlzLnkgKj0gb3RoZXJWZWN0b3IueVxuICAgIHRoaXMueiAqPSBvdGhlclZlY3Rvci56XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMsIHJlc3VsdCBvZiB0aGUgbXVsdGlwbGljYXRpb24gb2YgdGhlIGN1cnJlbnQgVmVjdG9yMyBieSB0aGUgZ2l2ZW4gdmVjdG9yXG4gICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAqIEByZXR1cm5zIHRoZSBuZXcgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIG11bHRpcGx5KG90aGVyVmVjdG9yOiBSZWFkT25seVZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gdGhpcy5tdWx0aXBseUJ5RmxvYXRzKG90aGVyVmVjdG9yLngsIG90aGVyVmVjdG9yLnksIG90aGVyVmVjdG9yLnopXG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbGllcyB0aGUgY3VycmVudCBWZWN0b3IzIGJ5IHRoZSBnaXZlbiBvbmUgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIlxuICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgbXVsdGlwbHlUb1JlZihvdGhlclZlY3RvcjogUmVhZE9ubHlWZWN0b3IzLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gcmVzdWx0LmNvcHlGcm9tRmxvYXRzKHRoaXMueCAqIG90aGVyVmVjdG9yLngsIHRoaXMueSAqIG90aGVyVmVjdG9yLnksIHRoaXMueiAqIG90aGVyVmVjdG9yLnopXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIG11bGxpcGxpY2F0aW9uIG9mIHRoZSBjdXJyZW50IFZlY3RvcjMgY29vcmRpbmF0ZXMgYnkgdGhlIGdpdmVuIGZsb2F0c1xuICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgKiBAcGFyYW0geiAtIGRlZmluZXMgdGhlIHogY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBtdWx0aXBseUJ5RmxvYXRzKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjModGhpcy54ICogeCwgdGhpcy55ICogeSwgdGhpcy56ICogeilcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgZGl2aXNpb24gb2YgdGhlIGN1cnJlbnQgVmVjdG9yMyBjb29yZGluYXRlcyBieSB0aGUgZ2l2ZW4gb25lc1xuICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBkaXZpZGUob3RoZXJWZWN0b3I6IFJlYWRPbmx5VmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMyh0aGlzLnggLyBvdGhlclZlY3Rvci54LCB0aGlzLnkgLyBvdGhlclZlY3Rvci55LCB0aGlzLnogLyBvdGhlclZlY3Rvci56KVxuICB9XG5cbiAgLyoqXG4gICAqIERpdmlkZXMgdGhlIGN1cnJlbnQgVmVjdG9yMyBjb29yZGluYXRlcyBieSB0aGUgZ2l2ZW4gb25lcyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiXG4gICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBkaXZpZGVUb1JlZihvdGhlclZlY3RvcjogUmVhZE9ubHlWZWN0b3IzLCByZXN1bHQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gcmVzdWx0LmNvcHlGcm9tRmxvYXRzKHRoaXMueCAvIG90aGVyVmVjdG9yLngsIHRoaXMueSAvIG90aGVyVmVjdG9yLnksIHRoaXMueiAvIG90aGVyVmVjdG9yLnopXG4gIH1cblxuICAvKipcbiAgICogRGl2aWRlcyB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGJ5IHRoZSBnaXZlbiBvbmVzLlxuICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBkaXZpZGVJblBsYWNlKG90aGVyVmVjdG9yOiBSZWFkT25seVZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gdGhpcy5kaXZpZGVUb1JlZihvdGhlclZlY3RvciwgdGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IFZlY3RvcjMgd2l0aCB0aGUgbWluaW1hbCBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIGl0cyBhbmQgdGhlIGdpdmVuIHZlY3RvciBvbmVzXG4gICAqIEBwYXJhbSBvdGhlciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIG1pbmltaXplSW5QbGFjZShvdGhlcjogUmVhZE9ubHlWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIHRoaXMubWluaW1pemVJblBsYWNlRnJvbUZsb2F0cyhvdGhlci54LCBvdGhlci55LCBvdGhlci56KVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgVmVjdG9yMyB3aXRoIHRoZSBtYXhpbWFsIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gaXRzIGFuZCB0aGUgZ2l2ZW4gdmVjdG9yIG9uZXMuXG4gICAqIEBwYXJhbSBvdGhlciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIG1heGltaXplSW5QbGFjZShvdGhlcjogUmVhZE9ubHlWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIHRoaXMubWF4aW1pemVJblBsYWNlRnJvbUZsb2F0cyhvdGhlci54LCBvdGhlci55LCBvdGhlci56KVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgVmVjdG9yMyB3aXRoIHRoZSBtaW5pbWFsIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gaXRzIGFuZCB0aGUgZ2l2ZW4gY29vcmRpbmF0ZXNcbiAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB6IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgbWluaW1pemVJblBsYWNlRnJvbUZsb2F0cyh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogVmVjdG9yMyB7XG4gICAgaWYgKHggPCB0aGlzLngpIHtcbiAgICAgIHRoaXMueCA9IHhcbiAgICB9XG4gICAgaWYgKHkgPCB0aGlzLnkpIHtcbiAgICAgIHRoaXMueSA9IHlcbiAgICB9XG4gICAgaWYgKHogPCB0aGlzLnopIHtcbiAgICAgIHRoaXMueiA9IHpcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IFZlY3RvcjMgd2l0aCB0aGUgbWF4aW1hbCBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIGl0cyBhbmQgdGhlIGdpdmVuIGNvb3JkaW5hdGVzLlxuICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgKiBAcGFyYW0geiAtIGRlZmluZXMgdGhlIHogY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBtYXhpbWl6ZUluUGxhY2VGcm9tRmxvYXRzKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiBWZWN0b3IzIHtcbiAgICBpZiAoeCA+IHRoaXMueCkge1xuICAgICAgdGhpcy54ID0geFxuICAgIH1cbiAgICBpZiAoeSA+IHRoaXMueSkge1xuICAgICAgdGhpcy55ID0geVxuICAgIH1cbiAgICBpZiAoeiA+IHRoaXMueikge1xuICAgICAgdGhpcy56ID0gelxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYSBuZXcgVmVjdG9yMyBmcm9tIGN1cnJlbnQgVmVjdG9yMyBmbG9vcmVkIHZhbHVlc1xuICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgZmxvb3IoKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IzKE1hdGguZmxvb3IodGhpcy54KSwgTWF0aC5mbG9vcih0aGlzLnkpLCBNYXRoLmZsb29yKHRoaXMueikpXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhIG5ldyBWZWN0b3IzIGZyb20gY3VycmVudCBWZWN0b3IzIGZsb29yZWQgdmFsdWVzXG4gICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBmcmFjdCgpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjModGhpcy54IC0gTWF0aC5mbG9vcih0aGlzLngpLCB0aGlzLnkgLSBNYXRoLmZsb29yKHRoaXMueSksIHRoaXMueiAtIE1hdGguZmxvb3IodGhpcy56KSlcbiAgfVxuXG4gIC8vIFByb3BlcnRpZXNcbiAgLyoqXG4gICAqIEdldHMgdGhlIGxlbmd0aCBvZiB0aGUgVmVjdG9yM1xuICAgKiBAcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBWZWN0bzNcbiAgICovXG4gIHB1YmxpYyBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueilcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGUgVmVjdG9yM1xuICAgKiBAcmV0dXJucyBzcXVhcmVkIGxlbmd0aCBvZiB0aGUgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIGxlbmd0aFNxdWFyZWQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56XG4gIH1cblxuICAvKipcbiAgICogTm9ybWFsaXplIHRoZSBjdXJyZW50IFZlY3RvcjMuXG4gICAqIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBpcyBhbiBpbiBwbGFjZSBvcGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIG5vcm1hbGl6ZSgpOiBWZWN0b3IzIHtcbiAgICByZXR1cm4gdGhpcy5ub3JtYWxpemVGcm9tTGVuZ3RoKHRoaXMubGVuZ3RoKCkpXG4gIH1cblxuICAvKipcbiAgICogTm9ybWFsaXplIHRoZSBjdXJyZW50IFZlY3RvcjMgd2l0aCB0aGUgZ2l2ZW4gaW5wdXQgbGVuZ3RoLlxuICAgKiBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgaXMgYW4gaW4gcGxhY2Ugb3BlcmF0aW9uLlxuICAgKiBAcGFyYW0gbGVuIC0gdGhlIGxlbmd0aCBvZiB0aGUgdmVjdG9yXG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIG5vcm1hbGl6ZUZyb21MZW5ndGgobGVuOiBudW1iZXIpOiBWZWN0b3IzIHtcbiAgICBpZiAobGVuID09PSAwIHx8IGxlbiA9PT0gMS4wKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNjYWxlSW5QbGFjZSgxLjAgLyBsZW4pXG4gIH1cblxuICAvKipcbiAgICogTm9ybWFsaXplIHRoZSBjdXJyZW50IFZlY3RvcjMgdG8gYSBuZXcgdmVjdG9yXG4gICAqIEByZXR1cm5zIHRoZSBuZXcgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIG5vcm1hbGl6ZVRvTmV3KCk6IFZlY3RvcjMge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBuZXcgVmVjdG9yMygwLCAwLCAwKVxuICAgIHRoaXMubm9ybWFsaXplVG9SZWYobm9ybWFsaXplZClcbiAgICByZXR1cm4gbm9ybWFsaXplZFxuICB9XG5cbiAgLyoqXG4gICAqIE5vcm1hbGl6ZSB0aGUgY3VycmVudCBWZWN0b3IzIHRvIHRoZSByZWZlcmVuY2VcbiAgICogQHBhcmFtIHJlZmVyZW5jZSAtIGRlZmluZSB0aGUgVmVjdG9yMyB0byB1cGRhdGVcbiAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIG5vcm1hbGl6ZVRvUmVmKHJlZmVyZW5jZTogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIGxldCBsZW4gPSB0aGlzLmxlbmd0aCgpXG4gICAgaWYgKGxlbiA9PT0gMCB8fCBsZW4gPT09IDEuMCkge1xuICAgICAgcmV0dXJuIHJlZmVyZW5jZS5jb3B5RnJvbUZsb2F0cyh0aGlzLngsIHRoaXMueSwgdGhpcy56KVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNjYWxlVG9SZWYoMS4wIC8gbGVuLCByZWZlcmVuY2UpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBWZWN0b3IzIGNvcGllZCBmcm9tIHRoZSBjdXJyZW50IFZlY3RvcjNcbiAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAqL1xuICBwdWJsaWMgY2xvbmUoKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IzKHRoaXMueCwgdGhpcy55LCB0aGlzLnopXG4gIH1cblxuICAvKipcbiAgICogQ29waWVzIHRoZSBnaXZlbiB2ZWN0b3IgY29vcmRpbmF0ZXMgdG8gdGhlIGN1cnJlbnQgVmVjdG9yMyBvbmVzXG4gICAqIEBwYXJhbSBzb3VyY2UgLSBkZWZpbmVzIHRoZSBzb3VyY2UgVmVjdG9yM1xuICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBjb3B5RnJvbShzb3VyY2U6IFJlYWRPbmx5VmVjdG9yMyk6IFZlY3RvcjMge1xuICAgIHJldHVybiB0aGlzLmNvcHlGcm9tRmxvYXRzKHNvdXJjZS54LCBzb3VyY2UueSwgc291cmNlLnopXG4gIH1cblxuICAvKipcbiAgICogQ29waWVzIHRoZSBnaXZlbiBmbG9hdHMgdG8gdGhlIGN1cnJlbnQgVmVjdG9yMyBjb29yZGluYXRlc1xuICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgKiBAcGFyYW0geiAtIGRlZmluZXMgdGhlIHogY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjNcbiAgICovXG4gIHB1YmxpYyBjb3B5RnJvbUZsb2F0cyh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogVmVjdG9yMyB7XG4gICAgdGhpcy54ID0geFxuICAgIHRoaXMueSA9IHlcbiAgICB0aGlzLnogPSB6XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3BpZXMgdGhlIGdpdmVuIGZsb2F0cyB0byB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzXG4gICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgeCBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIHNldCh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogVmVjdG9yMyB7XG4gICAgcmV0dXJuIHRoaXMuY29weUZyb21GbG9hdHMoeCwgeSwgeilcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3BpZXMgdGhlIGdpdmVuIGZsb2F0IHRvIHRoZSBjdXJyZW50IFZlY3RvcjMgY29vcmRpbmF0ZXNcbiAgICogQHBhcmFtIHYgLSBkZWZpbmVzIHRoZSB4LCB5IGFuZCB6IGNvb3JkaW5hdGVzIG9mIHRoZSBvcGVyYW5kXG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgKi9cbiAgcHVibGljIHNldEFsbCh2OiBudW1iZXIpOiBWZWN0b3IzIHtcbiAgICB0aGlzLnggPSB0aGlzLnkgPSB0aGlzLnogPSB2XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Vector3.ts?')},"./packages/decentraland-ecs/src/decentraland/math/Vector4.ts":
/*!********************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/Vector4.ts ***!
  \********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar types_1 = __webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts");\nvar Scalar_1 = __webpack_require__(/*! ./Scalar */ "./packages/decentraland-ecs/src/decentraland/math/Scalar.ts");\nvar Vector3_1 = __webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts");\n/**\n * Vector4 class created for EulerAngle class conversion to Quaternion\n * @public\n */\nvar Vector4 = /** @class */ (function () {\n    /**\n     * Creates a Vector4 object from the given floats.\n     * @param x - x value of the vector\n     * @param y - y value of the vector\n     * @param z - z value of the vector\n     * @param w - w value of the vector\n     */\n    function Vector4(\n    /** x value of the vector */\n    x, \n    /** y value of the vector */\n    y, \n    /** z value of the vector */\n    z, \n    /** w value of the vector */\n    w) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n    // Statics\n    /**\n     * Returns a new Vector4 as the result of the addition of the two given vectors.\n     * @param vector1 - the first vector\n     * @param vector2 - the second vector\n     * @returns the resulting vector\n     */\n    Vector4.Add = function (vector1, vector2) {\n        return new Vector4(vector1.x, vector1.y, vector1.z, vector1.w).addInPlace(vector2);\n    };\n    /**\n     * Returns a new Vector4 set from the starting index of the given array.\n     * @param array - the array to pull values from\n     * @param offset - the offset into the array to start at\n     * @returns the new vector\n     */\n    Vector4.FromArray = function (array, offset) {\n        if (offset === void 0) { offset = 0; }\n        return new Vector4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n    };\n    /**\n     * Updates the given vector "result" from the starting index of the given array.\n     * @param array - the array to pull values from\n     * @param offset - the offset into the array to start at\n     * @param result - the vector to store the result in\n     */\n    Vector4.FromArrayToRef = function (array, offset, result) {\n        result.x = array[offset];\n        result.y = array[offset + 1];\n        result.z = array[offset + 2];\n        result.w = array[offset + 3];\n    };\n    /**\n     * Updates the given vector "result" from the starting index of the given FloatArray.\n     * @param array - the array to pull values from\n     * @param offset - the offset into the array to start at\n     * @param result - the vector to store the result in\n     */\n    Vector4.FromFloatArrayToRef = function (array, offset, result) {\n        Vector4.FromArrayToRef(array, offset, result);\n    };\n    /**\n     * Updates the given vector "result" coordinates from the given floats.\n     * @param x - float to set from\n     * @param y - float to set from\n     * @param z - float to set from\n     * @param w - float to set from\n     * @param result - the vector to the floats in\n     */\n    Vector4.FromFloatsToRef = function (x, y, z, w, result) {\n        result.x = x;\n        result.y = y;\n        result.z = z;\n        result.w = w;\n    };\n    /**\n     * Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)\n     * @returns the new vector\n     */\n    Vector4.Zero = function () {\n        return new Vector4(0.0, 0.0, 0.0, 0.0);\n    };\n    /**\n     * Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)\n     * @returns the new vector\n     */\n    Vector4.One = function () {\n        return new Vector4(1.0, 1.0, 1.0, 1.0);\n    };\n    /**\n     * Returns a new normalized Vector4 from the given one.\n     * @param vector - the vector to normalize\n     * @returns the vector\n     */\n    Vector4.Normalize = function (vector) {\n        var result = Vector4.Zero();\n        Vector4.NormalizeToRef(vector, result);\n        return result;\n    };\n    /**\n     * Updates the given vector "result" from the normalization of the given one.\n     * @param vector - the vector to normalize\n     * @param result - the vector to store the result in\n     */\n    Vector4.NormalizeToRef = function (vector, result) {\n        result.copyFrom(vector);\n        result.normalize();\n    };\n    /**\n     * Returns a vector with the minimum values from the left and right vectors\n     * @param left - left vector to minimize\n     * @param right - right vector to minimize\n     * @returns a new vector with the minimum of the left and right vector values\n     */\n    Vector4.Minimize = function (left, right) {\n        var min = new Vector4(left.x, left.y, left.z, left.w);\n        min.minimizeInPlace(right);\n        return min;\n    };\n    /**\n     * Returns a vector with the maximum values from the left and right vectors\n     * @param left - left vector to maximize\n     * @param right - right vector to maximize\n     * @returns a new vector with the maximum of the left and right vector values\n     */\n    Vector4.Maximize = function (left, right) {\n        var max = new Vector4(left.x, left.y, left.z, left.w);\n        max.maximizeInPlace(right);\n        return max;\n    };\n    /**\n     * Returns the distance (float) between the vectors "value1" and "value2".\n     * @param value1 - value to calulate the distance between\n     * @param value2 - value to calulate the distance between\n     * @returns the distance between the two vectors\n     */\n    Vector4.Distance = function (value1, value2) {\n        return Math.sqrt(Vector4.DistanceSquared(value1, value2));\n    };\n    /**\n     * Returns the squared distance (float) between the vectors "value1" and "value2".\n     * @param value1 - value to calulate the distance between\n     * @param value2 - value to calulate the distance between\n     * @returns the distance between the two vectors squared\n     */\n    Vector4.DistanceSquared = function (value1, value2) {\n        var x = value1.x - value2.x;\n        var y = value1.y - value2.y;\n        var z = value1.z - value2.z;\n        var w = value1.w - value2.w;\n        return x * x + y * y + z * z + w * w;\n    };\n    /**\n     * Returns a new Vector4 located at the center between the vectors "value1" and "value2".\n     * @param value1 - value to calulate the center between\n     * @param value2 - value to calulate the center between\n     * @returns the center between the two vectors\n     */\n    Vector4.Center = function (value1, value2) {\n        var center = Vector4.Add(value1, value2);\n        center.scaleInPlace(0.5);\n        return center;\n    };\n    /**\n     * Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector.\n     * This methods computes transformed normalized direction vectors only.\n     * @param vector - the vector to transform\n     * @param transformation - the transformation matrix to apply\n     * @returns the new vector\n     */\n    Vector4.TransformNormal = function (vector, transformation) {\n        var result = Vector4.Zero();\n        Vector4.TransformNormalToRef(vector, transformation, result);\n        return result;\n    };\n    /**\n     * Sets the given vector "result" with the result of the normal transformation by the given matrix of the given vector.\n     * This methods computes transformed normalized direction vectors only.\n     * @param vector - the vector to transform\n     * @param transformation - the transformation matrix to apply\n     * @param result - the vector to store the result in\n     */\n    Vector4.TransformNormalToRef = function (vector, transformation, result) {\n        var m = transformation.m;\n        var x = vector.x * m[0] + vector.y * m[4] + vector.z * m[8];\n        var y = vector.x * m[1] + vector.y * m[5] + vector.z * m[9];\n        var z = vector.x * m[2] + vector.y * m[6] + vector.z * m[10];\n        result.x = x;\n        result.y = y;\n        result.z = z;\n        result.w = vector.w;\n    };\n    /**\n     * Sets the given vector "result" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w).\n     * This methods computes transformed normalized direction vectors only.\n     * @param x - value to transform\n     * @param y - value to transform\n     * @param z - value to transform\n     * @param w - value to transform\n     * @param transformation - the transformation matrix to apply\n     * @param result - the vector to store the results in\n     */\n    Vector4.TransformNormalFromFloatsToRef = function (x, y, z, w, transformation, result) {\n        var m = transformation.m;\n        result.x = x * m[0] + y * m[4] + z * m[8];\n        result.y = x * m[1] + y * m[5] + z * m[9];\n        result.z = x * m[2] + y * m[6] + z * m[10];\n        result.w = w;\n    };\n    /**\n     * Returns the string with the Vector4 coordinates.\n     * @returns a string containing all the vector values\n     */\n    Vector4.prototype.toString = function () {\n        return \'{X: \' + this.x + \' Y:\' + this.y + \' Z:\' + this.z + \' W:\' + this.w + \'}\';\n    };\n    /**\n     * Returns the string "Vector4".\n     * @returns "Vector4"\n     */\n    Vector4.prototype.getClassName = function () {\n        return \'Vector4\';\n    };\n    /**\n     * Returns the Vector4 hash code.\n     * @returns a unique hash code\n     */\n    Vector4.prototype.getHashCode = function () {\n        var hash = this.x || 0;\n        hash = (hash * 397) ^ (this.y || 0);\n        hash = (hash * 397) ^ (this.z || 0);\n        hash = (hash * 397) ^ (this.w || 0);\n        return hash;\n    };\n    // Operators\n    /**\n     * Returns a new array populated with 4 elements : the Vector4 coordinates.\n     * @returns the resulting array\n     */\n    Vector4.prototype.asArray = function () {\n        var result = new Array();\n        this.toArray(result, 0);\n        return result;\n    };\n    /**\n     * Populates the given array from the given index with the Vector4 coordinates.\n     * @param array - array to populate\n     * @param index - index of the array to start at (default: 0)\n     * @returns the Vector4.\n     */\n    Vector4.prototype.toArray = function (array, index) {\n        if (index === void 0) { index = 0; }\n        array[index] = this.x;\n        array[index + 1] = this.y;\n        array[index + 2] = this.z;\n        array[index + 3] = this.w;\n        return this;\n    };\n    /**\n     * Adds the given vector to the current Vector4.\n     * @param otherVector - the vector to add\n     * @returns the updated Vector4.\n     */\n    Vector4.prototype.addInPlace = function (otherVector) {\n        this.x += otherVector.x;\n        this.y += otherVector.y;\n        this.z += otherVector.z;\n        this.w += otherVector.w;\n        return this;\n    };\n    /**\n     * Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.\n     * @param otherVector - the vector to add\n     * @returns the resulting vector\n     */\n    Vector4.prototype.add = function (otherVector) {\n        return new Vector4(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z, this.w + otherVector.w);\n    };\n    /**\n     * Updates the given vector "result" with the result of the addition of the current Vector4 and the given one.\n     * @param otherVector - the vector to add\n     * @param result - the vector to store the result\n     * @returns the current Vector4.\n     */\n    Vector4.prototype.addToRef = function (otherVector, result) {\n        result.x = this.x + otherVector.x;\n        result.y = this.y + otherVector.y;\n        result.z = this.z + otherVector.z;\n        result.w = this.w + otherVector.w;\n        return this;\n    };\n    /**\n     * Subtract in place the given vector from the current Vector4.\n     * @param otherVector - the vector to subtract\n     * @returns the updated Vector4.\n     */\n    Vector4.prototype.subtractInPlace = function (otherVector) {\n        this.x -= otherVector.x;\n        this.y -= otherVector.y;\n        this.z -= otherVector.z;\n        this.w -= otherVector.w;\n        return this;\n    };\n    /**\n     * Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.\n     * @param otherVector - the vector to add\n     * @returns the new vector with the result\n     */\n    Vector4.prototype.subtract = function (otherVector) {\n        return new Vector4(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z, this.w - otherVector.w);\n    };\n    /**\n     * Sets the given vector "result" with the result of the subtraction of the given vector from the current Vector4.\n     * @param otherVector - the vector to subtract\n     * @param result - the vector to store the result\n     * @returns the current Vector4.\n     */\n    Vector4.prototype.subtractToRef = function (otherVector, result) {\n        result.x = this.x - otherVector.x;\n        result.y = this.y - otherVector.y;\n        result.z = this.z - otherVector.z;\n        result.w = this.w - otherVector.w;\n        return this;\n    };\n    /**\n     * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n     */\n    /**\n     * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n     * @param x - value to subtract\n     * @param y - value to subtract\n     * @param z - value to subtract\n     * @param w - value to subtract\n     * @returns new vector containing the result\n     */\n    Vector4.prototype.subtractFromFloats = function (x, y, z, w) {\n        return new Vector4(this.x - x, this.y - y, this.z - z, this.w - w);\n    };\n    /**\n     * Sets the given vector "result" set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n     * @param x - value to subtract\n     * @param y - value to subtract\n     * @param z - value to subtract\n     * @param w - value to subtract\n     * @param result - the vector to store the result in\n     * @returns the current Vector4.\n     */\n    Vector4.prototype.subtractFromFloatsToRef = function (x, y, z, w, result) {\n        result.x = this.x - x;\n        result.y = this.y - y;\n        result.z = this.z - z;\n        result.w = this.w - w;\n        return this;\n    };\n    /**\n     * Returns a new Vector4 set with the current Vector4 negated coordinates.\n     * @returns a new vector with the negated values\n     */\n    Vector4.prototype.negate = function () {\n        return new Vector4(-this.x, -this.y, -this.z, -this.w);\n    };\n    /**\n     * Multiplies the current Vector4 coordinates by scale (float).\n     * @param scale - the number to scale with\n     * @returns the updated Vector4.\n     */\n    Vector4.prototype.scaleInPlace = function (scale) {\n        this.x *= scale;\n        this.y *= scale;\n        this.z *= scale;\n        this.w *= scale;\n        return this;\n    };\n    /**\n     * Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).\n     * @param scale - the number to scale with\n     * @returns a new vector with the result\n     */\n    Vector4.prototype.scale = function (scale) {\n        return new Vector4(this.x * scale, this.y * scale, this.z * scale, this.w * scale);\n    };\n    /**\n     * Sets the given vector "result" with the current Vector4 coordinates multiplied by scale (float).\n     * @param scale - the number to scale with\n     * @param result - a vector to store the result in\n     * @returns the current Vector4.\n     */\n    Vector4.prototype.scaleToRef = function (scale, result) {\n        result.x = this.x * scale;\n        result.y = this.y * scale;\n        result.z = this.z * scale;\n        result.w = this.w * scale;\n        return this;\n    };\n    /**\n     * Scale the current Vector4 values by a factor and add the result to a given Vector4\n     * @param scale - defines the scale factor\n     * @param result - defines the Vector4 object where to store the result\n     * @returns the unmodified current Vector4\n     */\n    Vector4.prototype.scaleAndAddToRef = function (scale, result) {\n        result.x += this.x * scale;\n        result.y += this.y * scale;\n        result.z += this.z * scale;\n        result.w += this.w * scale;\n        return this;\n    };\n    /**\n     * Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.\n     * @param otherVector - the vector to compare against\n     * @returns true if they are equal\n     */\n    Vector4.prototype.equals = function (otherVector) {\n        return (otherVector &&\n            this.x === otherVector.x &&\n            this.y === otherVector.y &&\n            this.z === otherVector.z &&\n            this.w === otherVector.w);\n    };\n    /**\n     * Boolean : True if the current Vector4 coordinates are each beneath the distance "epsilon" from the given vector ones.\n     * @param otherVector - vector to compare against\n     * @param epsilon - (Default: very small number)\n     * @returns true if they are equal\n     */\n    Vector4.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\n        if (epsilon === void 0) { epsilon = types_1.Epsilon; }\n        return (otherVector &&\n            Scalar_1.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n            Scalar_1.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) &&\n            Scalar_1.Scalar.WithinEpsilon(this.z, otherVector.z, epsilon) &&\n            Scalar_1.Scalar.WithinEpsilon(this.w, otherVector.w, epsilon));\n    };\n    /**\n     * Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.\n     * @param x - x value to compare against\n     * @param y - y value to compare against\n     * @param z - z value to compare against\n     * @param w - w value to compare against\n     * @returns true if equal\n     */\n    Vector4.prototype.equalsToFloats = function (x, y, z, w) {\n        return this.x === x && this.y === y && this.z === z && this.w === w;\n    };\n    /**\n     * Multiplies in place the current Vector4 by the given one.\n     * @param otherVector - vector to multiple with\n     * @returns the updated Vector4.\n     */\n    Vector4.prototype.multiplyInPlace = function (otherVector) {\n        this.x *= otherVector.x;\n        this.y *= otherVector.y;\n        this.z *= otherVector.z;\n        this.w *= otherVector.w;\n        return this;\n    };\n    /**\n     * Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.\n     * @param otherVector - vector to multiple with\n     * @returns resulting new vector\n     */\n    Vector4.prototype.multiply = function (otherVector) {\n        return new Vector4(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z, this.w * otherVector.w);\n    };\n    /**\n     * Updates the given vector "result" with the multiplication result of the current Vector4 and the given one.\n     * @param otherVector - vector to multiple with\n     * @param result - vector to store the result\n     * @returns the current Vector4.\n     */\n    Vector4.prototype.multiplyToRef = function (otherVector, result) {\n        result.x = this.x * otherVector.x;\n        result.y = this.y * otherVector.y;\n        result.z = this.z * otherVector.z;\n        result.w = this.w * otherVector.w;\n        return this;\n    };\n    /**\n     * Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.\n     * @param x - x value multiply with\n     * @param y - y value multiply with\n     * @param z - z value multiply with\n     * @param w - w value multiply with\n     * @returns resulting new vector\n     */\n    Vector4.prototype.multiplyByFloats = function (x, y, z, w) {\n        return new Vector4(this.x * x, this.y * y, this.z * z, this.w * w);\n    };\n    /**\n     * Returns a new Vector4 set with the division result of the current Vector4 by the given one.\n     * @param otherVector - vector to devide with\n     * @returns resulting new vector\n     */\n    Vector4.prototype.divide = function (otherVector) {\n        return new Vector4(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z, this.w / otherVector.w);\n    };\n    /**\n     * Updates the given vector "result" with the division result of the current Vector4 by the given one.\n     * @param otherVector - vector to devide with\n     * @param result - vector to store the result\n     * @returns the current Vector4.\n     */\n    Vector4.prototype.divideToRef = function (otherVector, result) {\n        result.x = this.x / otherVector.x;\n        result.y = this.y / otherVector.y;\n        result.z = this.z / otherVector.z;\n        result.w = this.w / otherVector.w;\n        return this;\n    };\n    /**\n     * Divides the current Vector3 coordinates by the given ones.\n     * @param otherVector - vector to devide with\n     * @returns the updated Vector3.\n     */\n    Vector4.prototype.divideInPlace = function (otherVector) {\n        return this.divideToRef(otherVector, this);\n    };\n    /**\n     * Updates the Vector4 coordinates with the minimum values between its own and the given vector ones\n     * @param other - defines the second operand\n     * @returns the current updated Vector4\n     */\n    Vector4.prototype.minimizeInPlace = function (other) {\n        if (other.x < this.x) {\n            this.x = other.x;\n        }\n        if (other.y < this.y) {\n            this.y = other.y;\n        }\n        if (other.z < this.z) {\n            this.z = other.z;\n        }\n        if (other.w < this.w) {\n            this.w = other.w;\n        }\n        return this;\n    };\n    /**\n     * Updates the Vector4 coordinates with the maximum values between its own and the given vector ones\n     * @param other - defines the second operand\n     * @returns the current updated Vector4\n     */\n    Vector4.prototype.maximizeInPlace = function (other) {\n        if (other.x > this.x) {\n            this.x = other.x;\n        }\n        if (other.y > this.y) {\n            this.y = other.y;\n        }\n        if (other.z > this.z) {\n            this.z = other.z;\n        }\n        if (other.w > this.w) {\n            this.w = other.w;\n        }\n        return this;\n    };\n    /**\n     * Gets a new Vector4 from current Vector4 floored values\n     * @returns a new Vector4\n     */\n    Vector4.prototype.floor = function () {\n        return new Vector4(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w));\n    };\n    /**\n     * Gets a new Vector4 from current Vector3 floored values\n     * @returns a new Vector4\n     */\n    Vector4.prototype.fract = function () {\n        return new Vector4(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z), this.w - Math.floor(this.w));\n    };\n    // Properties\n    /**\n     * Returns the Vector4 length (float).\n     * @returns the length\n     */\n    Vector4.prototype.length = function () {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n    };\n    /**\n     * Returns the Vector4 squared length (float).\n     * @returns the length squared\n     */\n    Vector4.prototype.lengthSquared = function () {\n        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n    };\n    // Methods\n    /**\n     * Normalizes in place the Vector4.\n     * @returns the updated Vector4.\n     */\n    Vector4.prototype.normalize = function () {\n        var len = this.length();\n        if (len === 0) {\n            return this;\n        }\n        return this.scaleInPlace(1.0 / len);\n    };\n    /**\n     * Returns a new Vector3 from the Vector4 (x, y, z) coordinates.\n     * @returns this converted to a new vector3\n     */\n    Vector4.prototype.toVector3 = function () {\n        return new Vector3_1.Vector3(this.x, this.y, this.z);\n    };\n    /**\n     * Returns a new Vector4 copied from the current one.\n     * @returns the new cloned vector\n     */\n    Vector4.prototype.clone = function () {\n        return new Vector4(this.x, this.y, this.z, this.w);\n    };\n    /**\n     * Updates the current Vector4 with the given one coordinates.\n     * @param source - the source vector to copy from\n     * @returns the updated Vector4.\n     */\n    Vector4.prototype.copyFrom = function (source) {\n        this.x = source.x;\n        this.y = source.y;\n        this.z = source.z;\n        this.w = source.w;\n        return this;\n    };\n    /**\n     * Updates the current Vector4 coordinates with the given floats.\n     * @param x - float to copy from\n     * @param y - float to copy from\n     * @param z - float to copy from\n     * @param w - float to copy from\n     * @returns the updated Vector4.\n     */\n    Vector4.prototype.copyFromFloats = function (x, y, z, w) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n        return this;\n    };\n    /**\n     * Updates the current Vector4 coordinates with the given floats.\n     * @param x - float to set from\n     * @param y - float to set from\n     * @param z - float to set from\n     * @param w - float to set from\n     * @returns the updated Vector4.\n     */\n    Vector4.prototype.set = function (x, y, z, w) {\n        return this.copyFromFloats(x, y, z, w);\n    };\n    /**\n     * Copies the given float to the current Vector3 coordinates\n     * @param v - defines the x, y, z and w coordinates of the operand\n     * @returns the current updated Vector3\n     */\n    Vector4.prototype.setAll = function (v) {\n        this.x = this.y = this.z = this.w = v;\n        return this;\n    };\n    return Vector4;\n}());\nexports.Vector4 = Vector4;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/Vector4.ts?')},"./packages/decentraland-ecs/src/decentraland/math/index.ts":
/*!******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/index.ts ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, "__esModule", { value: true });\n__export(__webpack_require__(/*! ./types */ "./packages/decentraland-ecs/src/decentraland/math/types.ts"));\n__export(__webpack_require__(/*! ./preallocatedVariables */ "./packages/decentraland-ecs/src/decentraland/math/preallocatedVariables.ts"));\n__export(__webpack_require__(/*! ./Angle */ "./packages/decentraland-ecs/src/decentraland/math/Angle.ts"));\n__export(__webpack_require__(/*! ./Arc2 */ "./packages/decentraland-ecs/src/decentraland/math/Arc2.ts"));\n__export(__webpack_require__(/*! ./Axis */ "./packages/decentraland-ecs/src/decentraland/math/Axis.ts"));\n__export(__webpack_require__(/*! ./BezierCurve */ "./packages/decentraland-ecs/src/decentraland/math/BezierCurve.ts"));\n__export(__webpack_require__(/*! ./Color3 */ "./packages/decentraland-ecs/src/decentraland/math/Color3.ts"));\n__export(__webpack_require__(/*! ./Color4 */ "./packages/decentraland-ecs/src/decentraland/math/Color4.ts"));\n__export(__webpack_require__(/*! ./Curve3d */ "./packages/decentraland-ecs/src/decentraland/math/Curve3d.ts"));\n__export(__webpack_require__(/*! ./Furstum */ "./packages/decentraland-ecs/src/decentraland/math/Furstum.ts"));\n__export(__webpack_require__(/*! ./Matrix */ "./packages/decentraland-ecs/src/decentraland/math/Matrix.ts"));\n__export(__webpack_require__(/*! ./Path2d */ "./packages/decentraland-ecs/src/decentraland/math/Path2d.ts"));\n__export(__webpack_require__(/*! ./Path3d */ "./packages/decentraland-ecs/src/decentraland/math/Path3d.ts"));\n__export(__webpack_require__(/*! ./Plane */ "./packages/decentraland-ecs/src/decentraland/math/Plane.ts"));\n__export(__webpack_require__(/*! ./Quaternion */ "./packages/decentraland-ecs/src/decentraland/math/Quaternion.ts"));\n__export(__webpack_require__(/*! ./Scalar */ "./packages/decentraland-ecs/src/decentraland/math/Scalar.ts"));\n__export(__webpack_require__(/*! ./Size */ "./packages/decentraland-ecs/src/decentraland/math/Size.ts"));\n__export(__webpack_require__(/*! ./Vector2 */ "./packages/decentraland-ecs/src/decentraland/math/Vector2.ts"));\n__export(__webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts"));\n__export(__webpack_require__(/*! ./Vector4 */ "./packages/decentraland-ecs/src/decentraland/math/Vector4.ts"));\n__export(__webpack_require__(/*! ./index */ "./packages/decentraland-ecs/src/decentraland/math/index.ts"));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGVjZW50cmFsYW5kL21hdGgvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw2QkFBdUI7QUFFdkIsNkNBQXVDO0FBRXZDLDZCQUF1QjtBQUN2Qiw0QkFBc0I7QUFDdEIsNEJBQXNCO0FBQ3RCLG1DQUE2QjtBQUM3Qiw4QkFBd0I7QUFDeEIsOEJBQXdCO0FBQ3hCLCtCQUF5QjtBQUN6QiwrQkFBeUI7QUFDekIsOEJBQXdCO0FBQ3hCLDhCQUF3QjtBQUN4Qiw4QkFBd0I7QUFDeEIsNkJBQXVCO0FBQ3ZCLGtDQUE0QjtBQUM1Qiw4QkFBd0I7QUFDeEIsNEJBQXNCO0FBQ3RCLCtCQUF5QjtBQUN6QiwrQkFBeUI7QUFDekIsK0JBQXlCO0FBQ3pCLDZCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vdHlwZXMnXG5cbmV4cG9ydCAqIGZyb20gJy4vcHJlYWxsb2NhdGVkVmFyaWFibGVzJ1xuXG5leHBvcnQgKiBmcm9tICcuL0FuZ2xlJ1xuZXhwb3J0ICogZnJvbSAnLi9BcmMyJ1xuZXhwb3J0ICogZnJvbSAnLi9BeGlzJ1xuZXhwb3J0ICogZnJvbSAnLi9CZXppZXJDdXJ2ZSdcbmV4cG9ydCAqIGZyb20gJy4vQ29sb3IzJ1xuZXhwb3J0ICogZnJvbSAnLi9Db2xvcjQnXG5leHBvcnQgKiBmcm9tICcuL0N1cnZlM2QnXG5leHBvcnQgKiBmcm9tICcuL0Z1cnN0dW0nXG5leHBvcnQgKiBmcm9tICcuL01hdHJpeCdcbmV4cG9ydCAqIGZyb20gJy4vUGF0aDJkJ1xuZXhwb3J0ICogZnJvbSAnLi9QYXRoM2QnXG5leHBvcnQgKiBmcm9tICcuL1BsYW5lJ1xuZXhwb3J0ICogZnJvbSAnLi9RdWF0ZXJuaW9uJ1xuZXhwb3J0ICogZnJvbSAnLi9TY2FsYXInXG5leHBvcnQgKiBmcm9tICcuL1NpemUnXG5leHBvcnQgKiBmcm9tICcuL1ZlY3RvcjInXG5leHBvcnQgKiBmcm9tICcuL1ZlY3RvcjMnXG5leHBvcnQgKiBmcm9tICcuL1ZlY3RvcjQnXG5leHBvcnQgKiBmcm9tICcuL2luZGV4J1xuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/index.ts?')},"./packages/decentraland-ecs/src/decentraland/math/preallocatedVariables.ts":
/*!**********************************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/preallocatedVariables.ts ***!
  \**********************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar helpers_1 = __webpack_require__(/*! ../../ecs/helpers */ "./packages/decentraland-ecs/src/ecs/helpers.ts");\nvar Vector3_1 = __webpack_require__(/*! ./Vector3 */ "./packages/decentraland-ecs/src/decentraland/math/Vector3.ts");\nvar Quaternion_1 = __webpack_require__(/*! ./Quaternion */ "./packages/decentraland-ecs/src/decentraland/math/Quaternion.ts");\nvar Matrix_1 = __webpack_require__(/*! ./Matrix */ "./packages/decentraland-ecs/src/decentraland/math/Matrix.ts");\n// Temporary pre-allocated objects for engine internal use\n// usage in any internal function :\n// var tmp = Tmp.Vector3[0];   <= gets access to the first pre-created Vector3\n// There\'s a Tmp array per object type : int, float, Vector2, Vector3, Vector4, Quaternion, Matrix\n/**\n * @internal\n * Same as Tmp but not exported to keep it only for math functions to avoid conflicts\n */\nexports.MathTmp = {\n    Vector3: helpers_1.buildArray(6, Vector3_1.Vector3.Zero),\n    Matrix: helpers_1.buildArray(2, Matrix_1.Matrix.Identity),\n    Quaternion: helpers_1.buildArray(3, Quaternion_1.Quaternion.Zero),\n    staticUp: Vector3_1.Vector3.Up(),\n    tmpMatrix: Matrix_1.Matrix.Zero()\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlYWxsb2NhdGVkVmFyaWFibGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RlY2VudHJhbGFuZC9tYXRoL3ByZWFsbG9jYXRlZFZhcmlhYmxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUE4QztBQUM5QyxxQ0FBbUM7QUFDbkMsMkNBQXlDO0FBQ3pDLG1DQUFpQztBQUVqQywwREFBMEQ7QUFDMUQsbUNBQW1DO0FBQ25DLDhFQUE4RTtBQUM5RSxrR0FBa0c7QUFFbEc7OztHQUdHO0FBQ1UsUUFBQSxPQUFPLEdBQUc7SUFDckIsT0FBTyxFQUFFLG9CQUFVLENBQUMsQ0FBQyxFQUFFLGlCQUFPLENBQUMsSUFBSSxDQUFDO0lBQ3BDLE1BQU0sRUFBRSxvQkFBVSxDQUFDLENBQUMsRUFBRSxlQUFNLENBQUMsUUFBUSxDQUFDO0lBQ3RDLFVBQVUsRUFBRSxvQkFBVSxDQUFDLENBQUMsRUFBRSx1QkFBVSxDQUFDLElBQUksQ0FBQztJQUMxQyxRQUFRLEVBQUUsaUJBQU8sQ0FBQyxFQUFFLEVBQXVCO0lBQzNDLFNBQVMsRUFBRSxlQUFNLENBQUMsSUFBSSxFQUFFO0NBQ3pCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBidWlsZEFycmF5IH0gZnJvbSAnLi4vLi4vZWNzL2hlbHBlcnMnXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9WZWN0b3IzJ1xuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4vUXVhdGVybmlvbidcbmltcG9ydCB7IE1hdHJpeCB9IGZyb20gJy4vTWF0cml4J1xuXG4vLyBUZW1wb3JhcnkgcHJlLWFsbG9jYXRlZCBvYmplY3RzIGZvciBlbmdpbmUgaW50ZXJuYWwgdXNlXG4vLyB1c2FnZSBpbiBhbnkgaW50ZXJuYWwgZnVuY3Rpb24gOlxuLy8gdmFyIHRtcCA9IFRtcC5WZWN0b3IzWzBdOyAgIDw9IGdldHMgYWNjZXNzIHRvIHRoZSBmaXJzdCBwcmUtY3JlYXRlZCBWZWN0b3IzXG4vLyBUaGVyZSdzIGEgVG1wIGFycmF5IHBlciBvYmplY3QgdHlwZSA6IGludCwgZmxvYXQsIFZlY3RvcjIsIFZlY3RvcjMsIFZlY3RvcjQsIFF1YXRlcm5pb24sIE1hdHJpeFxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICogU2FtZSBhcyBUbXAgYnV0IG5vdCBleHBvcnRlZCB0byBrZWVwIGl0IG9ubHkgZm9yIG1hdGggZnVuY3Rpb25zIHRvIGF2b2lkIGNvbmZsaWN0c1xuICovXG5leHBvcnQgY29uc3QgTWF0aFRtcCA9IHtcbiAgVmVjdG9yMzogYnVpbGRBcnJheSg2LCBWZWN0b3IzLlplcm8pLFxuICBNYXRyaXg6IGJ1aWxkQXJyYXkoMiwgTWF0cml4LklkZW50aXR5KSxcbiAgUXVhdGVybmlvbjogYnVpbGRBcnJheSgzLCBRdWF0ZXJuaW9uLlplcm8pLFxuICBzdGF0aWNVcDogVmVjdG9yMy5VcCgpIGFzIFJlYWRvbmx5PFZlY3RvcjM+LFxuICB0bXBNYXRyaXg6IE1hdHJpeC5aZXJvKClcbn1cbiJdfQ==\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/preallocatedVariables.ts?')},"./packages/decentraland-ecs/src/decentraland/math/types.ts":
/*!******************************************************************!*\
  !*** ./packages/decentraland-ecs/src/decentraland/math/types.ts ***!
  \******************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * Defines potential orientation for back face culling\n * @public\n */\nvar Orientation;\n(function (Orientation) {\n    /**\n     * Clockwise\n     */\n    Orientation[Orientation["CW"] = 0] = "CW";\n    /** Counter clockwise */\n    Orientation[Orientation["CCW"] = 1] = "CCW";\n})(Orientation = exports.Orientation || (exports.Orientation = {}));\n/**\n * Defines supported spaces\n * @public\n */\nvar Space;\n(function (Space) {\n    /** Local (object) space */\n    Space[Space["LOCAL"] = 0] = "LOCAL";\n    /** World space */\n    Space[Space["WORLD"] = 1] = "WORLD";\n    /** Bone space */\n    Space[Space["BONE"] = 2] = "BONE";\n})(Space = exports.Space || (exports.Space = {}));\n/**\n * Constant used to convert a value to gamma space\n * @public\n */\nexports.ToGammaSpace = 1 / 2.2;\n/**\n * Constant used to convert a value to linear space\n * @public\n */\nexports.ToLinearSpace = 2.2;\n/**\n * Constant used to define the minimal number value in Babylon.js\n * @public\n */\nexports.Epsilon = 0.000001;\n/**\n * Constant used to convert from Euler degrees to radians\n * @public\n */\nexports.DEG2RAD = Math.PI / 180;\n/**\n * Constant used to convert from radians to Euler degrees\n * @public\n */\nexports.RAD2DEG = 360 / (Math.PI * 2);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGVjZW50cmFsYW5kL21hdGgvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7O0dBR0c7QUFDSCxJQUFZLFdBT1g7QUFQRCxXQUFZLFdBQVc7SUFDckI7O09BRUc7SUFDSCx5Q0FBTSxDQUFBO0lBQ04sd0JBQXdCO0lBQ3hCLDJDQUFPLENBQUE7QUFDVCxDQUFDLEVBUFcsV0FBVyxHQUFYLG1CQUFXLEtBQVgsbUJBQVcsUUFPdEI7QUFFRDs7O0dBR0c7QUFDSCxJQUFZLEtBT1g7QUFQRCxXQUFZLEtBQUs7SUFDZiwyQkFBMkI7SUFDM0IsbUNBQVMsQ0FBQTtJQUNULGtCQUFrQjtJQUNsQixtQ0FBUyxDQUFBO0lBQ1QsaUJBQWlCO0lBQ2pCLGlDQUFRLENBQUE7QUFDVixDQUFDLEVBUFcsS0FBSyxHQUFMLGFBQUssS0FBTCxhQUFLLFFBT2hCO0FBV0Q7OztHQUdHO0FBQ1UsUUFBQSxZQUFZLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtBQUVuQzs7O0dBR0c7QUFDVSxRQUFBLGFBQWEsR0FBRyxHQUFHLENBQUE7QUFFaEM7OztHQUdHO0FBQ1UsUUFBQSxPQUFPLEdBQUcsUUFBUSxDQUFBO0FBRS9COzs7R0FHRztBQUNVLFFBQUEsT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFBO0FBRXBDOzs7R0FHRztBQUNVLFFBQUEsT0FBTyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERlZmluZXMgcG90ZW50aWFsIG9yaWVudGF0aW9uIGZvciBiYWNrIGZhY2UgY3VsbGluZ1xuICogQHB1YmxpY1xuICovXG5leHBvcnQgZW51bSBPcmllbnRhdGlvbiB7XG4gIC8qKlxuICAgKiBDbG9ja3dpc2VcbiAgICovXG4gIENXID0gMCxcbiAgLyoqIENvdW50ZXIgY2xvY2t3aXNlICovXG4gIENDVyA9IDFcbn1cblxuLyoqXG4gKiBEZWZpbmVzIHN1cHBvcnRlZCBzcGFjZXNcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGVudW0gU3BhY2Uge1xuICAvKiogTG9jYWwgKG9iamVjdCkgc3BhY2UgKi9cbiAgTE9DQUwgPSAwLFxuICAvKiogV29ybGQgc3BhY2UgKi9cbiAgV09STEQgPSAxLFxuICAvKiogQm9uZSBzcGFjZSAqL1xuICBCT05FID0gMlxufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgTnVsbGFibGU8VD4gPSBUIHwgbnVsbFxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIEZsb2F0QXJyYXkgPSBudW1iZXJbXVxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIGZsb2F0ID0gbnVtYmVyXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgZG91YmxlID0gbnVtYmVyXG5cbi8qKlxuICogQ29uc3RhbnQgdXNlZCB0byBjb252ZXJ0IGEgdmFsdWUgdG8gZ2FtbWEgc3BhY2VcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFRvR2FtbWFTcGFjZSA9IDEgLyAyLjJcblxuLyoqXG4gKiBDb25zdGFudCB1c2VkIHRvIGNvbnZlcnQgYSB2YWx1ZSB0byBsaW5lYXIgc3BhY2VcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFRvTGluZWFyU3BhY2UgPSAyLjJcblxuLyoqXG4gKiBDb25zdGFudCB1c2VkIHRvIGRlZmluZSB0aGUgbWluaW1hbCBudW1iZXIgdmFsdWUgaW4gQmFieWxvbi5qc1xuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgRXBzaWxvbiA9IDAuMDAwMDAxXG5cbi8qKlxuICogQ29uc3RhbnQgdXNlZCB0byBjb252ZXJ0IGZyb20gRXVsZXIgZGVncmVlcyB0byByYWRpYW5zXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBERUcyUkFEID0gTWF0aC5QSSAvIDE4MFxuXG4vKipcbiAqIENvbnN0YW50IHVzZWQgdG8gY29udmVydCBmcm9tIHJhZGlhbnMgdG8gRXVsZXIgZGVncmVlc1xuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgUkFEMkRFRyA9IDM2MCAvIChNYXRoLlBJICogMilcblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIHRoZSBzaXplIGNvbnRhaW5pbmcgd2lkdGggYW5kIGhlaWdodFxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIElTaXplIHtcbiAgLyoqXG4gICAqIFdpZHRoXG4gICAqL1xuICB3aWR0aDogbnVtYmVyXG4gIC8qKlxuICAgKiBIZWlnaGh0XG4gICAqL1xuICBoZWlnaHQ6IG51bWJlclxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/decentraland/math/types.ts?')},"./packages/decentraland-ecs/src/ecs/Component.ts":
/*!********************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/Component.ts ***!
  \********************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i["return"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar helpers_1 = __webpack_require__(/*! ./helpers */ "./packages/decentraland-ecs/src/ecs/helpers.ts");\nvar EventManager_1 = __webpack_require__(/*! ./EventManager */ "./packages/decentraland-ecs/src/ecs/EventManager.ts");\nvar UIValue_1 = __webpack_require__(/*! ./UIValue */ "./packages/decentraland-ecs/src/ecs/UIValue.ts");\nvar componentSymbol = \'__name__symbol_\';\nvar componentClassIdSymbol = \'__classId__symbol_\';\nvar componentIdSymbol = \'__component__id_\';\n/**\n * @public\n */\nvar DisposableComponentCreated = /** @class */ (function () {\n    function DisposableComponentCreated(componentId, componentName, classId) {\n        this.componentId = componentId;\n        this.componentName = componentName;\n        this.classId = classId;\n        // stub\n    }\n    DisposableComponentCreated = __decorate([\n        EventManager_1.EventConstructor()\n    ], DisposableComponentCreated);\n    return DisposableComponentCreated;\n}());\nexports.DisposableComponentCreated = DisposableComponentCreated;\n/**\n * @public\n */\nvar DisposableComponentRemoved = /** @class */ (function () {\n    function DisposableComponentRemoved(componentId) {\n        this.componentId = componentId;\n        // stub\n    }\n    DisposableComponentRemoved = __decorate([\n        EventManager_1.EventConstructor()\n    ], DisposableComponentRemoved);\n    return DisposableComponentRemoved;\n}());\nexports.DisposableComponentRemoved = DisposableComponentRemoved;\n/**\n * @public\n */\nvar DisposableComponentUpdated = /** @class */ (function () {\n    function DisposableComponentUpdated(componentId, component) {\n        this.componentId = componentId;\n        this.component = component;\n        // stub\n    }\n    DisposableComponentUpdated = __decorate([\n        EventManager_1.EventConstructor()\n    ], DisposableComponentUpdated);\n    return DisposableComponentUpdated;\n}());\nexports.DisposableComponentUpdated = DisposableComponentUpdated;\n/**\n * @public\n */\nfunction Component(componentName, classId) {\n    return function (target) {\n        if (target.isComponent) {\n            throw new TypeError("You cannot extend a component. Trying to extend " + target.originalClassName + " with: " + componentName);\n        }\n        var extendedClass = target;\n        var RegisteredComponent = function RegisteredComponent() {\n            var args = Array.prototype.slice.call(arguments);\n            var ret = new (extendedClass.bind.apply(extendedClass, __spread([void 0], args)))();\n            Object.defineProperty(ret, componentSymbol, {\n                enumerable: false,\n                writable: false,\n                configurable: false,\n                value: componentName\n            });\n            if (classId !== undefined) {\n                Object.defineProperty(ret, componentClassIdSymbol, {\n                    enumerable: false,\n                    writable: false,\n                    configurable: false,\n                    value: classId\n                });\n            }\n            return ret;\n        };\n        if (classId !== undefined) {\n            RegisteredComponent[componentClassIdSymbol] = classId;\n        }\n        RegisteredComponent[componentSymbol] = componentName;\n        RegisteredComponent.isComponent = true;\n        RegisteredComponent.originalClassName = componentName;\n        RegisteredComponent.prototype = target.prototype;\n        RegisteredComponent.prototype.constructor = target;\n        return RegisteredComponent;\n    };\n}\nexports.Component = Component;\n/**\n * @public\n */\nfunction DisposableComponent(componentName, classId) {\n    return function (target) {\n        if (target.isComponent) {\n            throw new TypeError("You cannot extend a component. Trying to extend " + target.originalClassName + " with: " + componentName);\n        }\n        if (typeof classId !== \'number\' || isNaN(classId)) {\n            throw new Error("classId: " + classId + " is an invalid integer");\n        }\n        var extendedClass = target;\n        var RegisteredComponent = function RegisteredComponent() {\n            if (!DisposableComponent.engine) {\n                throw new Error(\'You need to set a DisposableComponent.engine before creating disposable components\');\n            }\n            var args = Array.prototype.slice.call(arguments);\n            var ret = new (extendedClass.bind.apply(extendedClass, __spread([void 0], args)))();\n            var id = helpers_1.newId(\'C\');\n            Object.defineProperty(ret, componentSymbol, {\n                enumerable: false,\n                writable: false,\n                configurable: false,\n                value: componentName\n            });\n            Object.defineProperty(ret, componentIdSymbol, {\n                enumerable: false,\n                writable: false,\n                configurable: false,\n                value: id\n            });\n            if (classId !== undefined) {\n                Object.defineProperty(ret, componentClassIdSymbol, {\n                    enumerable: false,\n                    writable: false,\n                    configurable: false,\n                    value: classId\n                });\n            }\n            if (DisposableComponent.engine) {\n                DisposableComponent.engine.registerComponent(ret);\n            }\n            return ret;\n        };\n        if (classId !== undefined) {\n            RegisteredComponent[componentClassIdSymbol] = classId;\n        }\n        RegisteredComponent[componentSymbol] = componentName;\n        RegisteredComponent.isComponent = true;\n        RegisteredComponent.isDisposableComponent = true;\n        RegisteredComponent.originalClassName = componentName;\n        RegisteredComponent.prototype = target.prototype;\n        RegisteredComponent.prototype.constructor = target;\n        return RegisteredComponent;\n    };\n}\nexports.DisposableComponent = DisposableComponent;\n/** @internal */\n(function (DisposableComponent) {\n    /** @internal */\n    // tslint:disable-next-line:whitespace\n    DisposableComponent.engine = null;\n})(DisposableComponent = exports.DisposableComponent || (exports.DisposableComponent = {}));\n/**\n * @public\n */\nfunction getComponentName(component) {\n    if (!component) {\n        throw new TypeError(component + \' is not a component.\');\n    }\n    if (component[componentSymbol]) {\n        return component[componentSymbol];\n    }\n    throw new TypeError(component + \' is not a registered component.\');\n}\nexports.getComponentName = getComponentName;\n/**\n * @public\n */\nfunction getComponentClassId(component) {\n    if (!component) {\n        throw new TypeError(component + \' is not a component.\');\n    }\n    if (component[componentClassIdSymbol]) {\n        return component[componentClassIdSymbol];\n    }\n    if (!component[componentSymbol]) {\n        throw new TypeError(component + \' is not a registered component.\');\n    }\n    return null;\n}\nexports.getComponentClassId = getComponentClassId;\n/**\n * @public\n */\nfunction getComponentId(component) {\n    if (!component) {\n        throw new TypeError(component + \' is not a component.\');\n    }\n    if (component[componentIdSymbol]) {\n        return component[componentIdSymbol];\n    }\n    throw new TypeError(component + \' is not a registered disposable component.\');\n}\nexports.getComponentId = getComponentId;\n/**\n * @public\n */\nvar ObservableComponent = /** @class */ (function () {\n    function ObservableComponent() {\n        this.dirty = false;\n        this.data = {};\n        this.subscriptions = [];\n    }\n    ObservableComponent.component = function (target, propertyKey) {\n        if (delete target[propertyKey]) {\n            var componentSymbol_1 = propertyKey + \'_\' + Math.random();\n            target[componentSymbol_1] = undefined;\n            Object.defineProperty(target, componentSymbol_1, __assign(__assign({}, Object.getOwnPropertyDescriptor(target, componentSymbol_1)), { enumerable: false }));\n            Object.defineProperty(target, propertyKey.toString(), {\n                get: function () {\n                    return this[componentSymbol_1];\n                },\n                set: function (value) {\n                    var oldValue = this[componentSymbol_1];\n                    if (value) {\n                        this.data[propertyKey] = getComponentId(value);\n                    }\n                    else {\n                        this.data[propertyKey] = null;\n                    }\n                    this[componentSymbol_1] = value;\n                    if (value !== oldValue) {\n                        this.dirty = true;\n                        for (var i = 0; i < this.subscriptions.length; i++) {\n                            this.subscriptions[i](propertyKey, value, oldValue);\n                        }\n                    }\n                },\n                enumerable: true\n            });\n        }\n    };\n    ObservableComponent.field = function (target, propertyKey) {\n        if (delete target[propertyKey]) {\n            Object.defineProperty(target, propertyKey.toString(), {\n                get: function () {\n                    return this.data[propertyKey];\n                },\n                set: function (value) {\n                    var oldValue = this.data[propertyKey];\n                    this.data[propertyKey] = value;\n                    if (value !== oldValue) {\n                        this.dirty = true;\n                        for (var i = 0; i < this.subscriptions.length; i++) {\n                            this.subscriptions[i](propertyKey, value, oldValue);\n                        }\n                    }\n                },\n                enumerable: true\n            });\n        }\n    };\n    ObservableComponent.uiValue = function (target, propertyKey) {\n        if (delete target[propertyKey]) {\n            Object.defineProperty(target, propertyKey.toString(), {\n                get: function () {\n                    return this.data[propertyKey].toString();\n                },\n                set: function (value) {\n                    var oldValue = this.data[propertyKey];\n                    var finalValue = new UIValue_1.UIValue(value);\n                    this.data[propertyKey] = finalValue;\n                    if (finalValue !== oldValue) {\n                        this.dirty = true;\n                        for (var i = 0; i < this.subscriptions.length; i++) {\n                            this.subscriptions[i](propertyKey, finalValue, oldValue);\n                        }\n                    }\n                },\n                enumerable: true\n            });\n        }\n    };\n    ObservableComponent.readonly = function (target, propertyKey) {\n        if (delete target[propertyKey]) {\n            Object.defineProperty(target, propertyKey.toString(), {\n                get: function () {\n                    if (propertyKey in this.data === false) {\n                        throw new Error("The field " + propertyKey + " is uninitialized");\n                    }\n                    return this.data[propertyKey];\n                },\n                set: function (value) {\n                    if (propertyKey in this.data) {\n                        throw new Error("The field " + propertyKey + " is readonly");\n                    }\n                    this.data[propertyKey] = value;\n                    this.dirty = true;\n                },\n                enumerable: true,\n                configurable: false\n            });\n        }\n    };\n    ObservableComponent.prototype.onChange = function (fn) {\n        this.subscriptions.push(fn);\n        return this;\n    };\n    ObservableComponent.prototype.toJSON = function () {\n        return this.data;\n    };\n    return ObservableComponent;\n}());\nexports.ObservableComponent = ObservableComponent;\n/**\n * @public\n */\nfunction isDisposableComponent(component) {\n    return componentIdSymbol in component;\n}\nexports.isDisposableComponent = isDisposableComponent;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/Component.ts?')},"./packages/decentraland-ecs/src/ecs/ComponentGroup.ts":
/*!*************************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/ComponentGroup.ts ***!
  \*************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Component_1 = __webpack_require__(/*! ./Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\n/**\n * @public\n */\nvar ComponentGroup = /** @class */ (function () {\n    function ComponentGroup() {\n        var requires = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            requires[_i] = arguments[_i];\n        }\n        this.entities = [];\n        this.active = false;\n        this._requiresNames = [];\n        // validate requires list\n        if (!requires) {\n            throw new Error(\'ComponentGroup: Could not load the requires list\');\n        }\n        if (!(requires instanceof Array)) {\n            throw new Error(\'ComponentGroup: requires list is not an Array\');\n        }\n        Object.defineProperty(this, \'requires\', {\n            get: function () {\n                return requires.slice();\n            }\n        });\n        Object.defineProperty(this, \'requiresNames\', {\n            get: function () {\n                return this._requiresNames.slice();\n            }\n        });\n        var _loop_1 = function (ix) {\n            var component = requires[ix];\n            var name_1 = null;\n            if (!component) {\n                throw new Error("ComponentGroup: the required component at location " + ix + " is invalid");\n            }\n            try {\n                name_1 = Component_1.getComponentName(component);\n            }\n            catch (e) {\n                throw new Error("ComponentGroup: the required component at location " + ix + " is not registered as a @Component. Remember to provide the class of the component, not the name");\n            }\n            if (this_1._requiresNames.some(function ($) { return $ === name_1; })) {\n                throw new Error("ComponentGroup: the required component list has a repeated name " + name_1);\n            }\n            this_1._requiresNames.push(name_1);\n        };\n        var this_1 = this;\n        for (var ix = 0; ix < requires.length; ix++) {\n            _loop_1(ix);\n        }\n    }\n    ComponentGroup.prototype.hasEntity = function (entity) {\n        if (!entity.isAddedToEngine())\n            return false;\n        return this.entities.indexOf(entity) !== -1;\n    };\n    // @internal\n    ComponentGroup.prototype.addEntity = function (entity) {\n        if (!entity.isAddedToEngine()) {\n            throw new TypeError(\'ComponentGroup: Cannot add a entity that is not added to the engine\');\n        }\n        if (this.entities.indexOf(entity) === -1) {\n            // tslint:disable-next-line:semicolon\n            ;\n            this.entities.push(entity);\n        }\n    };\n    // @internal\n    ComponentGroup.prototype.removeEntity = function (entity) {\n        var id = this.entities.indexOf(entity);\n        if (id !== -1) {\n            // tslint:disable-next-line:semicolon\n            ;\n            this.entities.splice(id, 1);\n        }\n    };\n    // @internal\n    ComponentGroup.prototype.componentRemoved = function (entity, component) {\n        if (this._requiresNames.indexOf(component) !== -1) {\n            this.removeEntity(entity);\n        }\n    };\n    // @internal\n    ComponentGroup.prototype.meetsRequirements = function (entity) {\n        for (var i = 0; i < this._requiresNames.length; i++) {\n            var componentName = this._requiresNames[i];\n            if (!(componentName in entity.components)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return ComponentGroup;\n}());\nexports.ComponentGroup = ComponentGroup;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG9uZW50R3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZWNzL0NvbXBvbmVudEdyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQW9FO0FBR3BFOztHQUVHO0FBQ0g7SUFTRTtRQUFZLGtCQUF3QzthQUF4QyxVQUF3QyxFQUF4QyxxQkFBd0MsRUFBeEMsSUFBd0M7WUFBeEMsNkJBQXdDOztRQVIzQyxhQUFRLEdBQTJCLEVBQUUsQ0FBQTtRQUk5QyxXQUFNLEdBQVksS0FBSyxDQUFBO1FBRWYsbUJBQWMsR0FBYSxFQUFFLENBQUE7UUFHbkMseUJBQXlCO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixNQUFNLElBQUksS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUE7U0FDcEU7UUFDRCxJQUFJLENBQUMsQ0FBQyxRQUFRLFlBQVksS0FBSyxDQUFDLEVBQUU7WUFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFBO1NBQ2pFO1FBRUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQ3RDLEdBQUcsRUFBRTtnQkFDSCxPQUFPLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtZQUN6QixDQUFDO1NBQ0YsQ0FBQyxDQUFBO1FBRUYsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFO1lBQzNDLEdBQUcsRUFBRTtnQkFDSCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUE7WUFDcEMsQ0FBQztTQUNGLENBQUMsQ0FBQTtnQ0FFTyxFQUFFO1lBQ1QsSUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQzlCLElBQUksTUFBSSxHQUFrQixJQUFJLENBQUE7WUFFOUIsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDZCxNQUFNLElBQUksS0FBSyxDQUFDLHdEQUFzRCxFQUFFLGdCQUFhLENBQUMsQ0FBQTthQUN2RjtZQUVELElBQUk7Z0JBQ0YsTUFBSSxHQUFHLDRCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFBO2FBQ25DO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsTUFBTSxJQUFJLEtBQUssQ0FDYix3REFBc0QsRUFBRSxxR0FBa0csQ0FDM0osQ0FBQTthQUNGO1lBRUQsSUFBSSxPQUFLLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEtBQUssTUFBSSxFQUFWLENBQVUsQ0FBQyxFQUFFO2dCQUM3QyxNQUFNLElBQUksS0FBSyxDQUFDLHFFQUFtRSxNQUFNLENBQUMsQ0FBQTthQUMzRjtZQUVELE9BQUssY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFJLENBQUMsQ0FBQTs7O1FBcEJoQyxLQUFLLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUU7b0JBQWxDLEVBQUU7U0FxQlY7SUFDSCxDQUFDO0lBRUQsa0NBQVMsR0FBVCxVQUFVLE1BQWU7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUU7WUFBRSxPQUFPLEtBQUssQ0FBQTtRQUUzQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQzdDLENBQUM7SUFFRCxZQUFZO0lBQ1osa0NBQVMsR0FBVCxVQUFVLE1BQWU7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsRUFBRTtZQUM3QixNQUFNLElBQUksU0FBUyxDQUFDLHFFQUFxRSxDQUFDLENBQUE7U0FDM0Y7UUFFRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ3hDLHFDQUFxQztZQUNyQyxDQUFDO1lBQUMsSUFBSSxDQUFDLFFBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1NBQzNDO0lBQ0gsQ0FBQztJQUVELFlBQVk7SUFDWixxQ0FBWSxHQUFaLFVBQWEsTUFBZTtRQUMxQixJQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUV4QyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNiLHFDQUFxQztZQUNyQyxDQUFDO1lBQUMsSUFBSSxDQUFDLFFBQXNCLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtTQUM1QztJQUNILENBQUM7SUFFRCxZQUFZO0lBQ1oseUNBQWdCLEdBQWhCLFVBQWlCLE1BQWUsRUFBRSxTQUFpQjtRQUNqRCxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2pELElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUE7U0FDMUI7SUFDSCxDQUFDO0lBRUQsWUFBWTtJQUNaLDBDQUFpQixHQUFqQixVQUFrQixNQUFlO1FBQy9CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNuRCxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQzVDLElBQUksQ0FBQyxDQUFDLGFBQWEsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQ3pDLE9BQU8sS0FBSyxDQUFBO2FBQ2I7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQW5HRCxJQW1HQztBQW5HWSx3Q0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldENvbXBvbmVudE5hbWUsIENvbXBvbmVudENvbnN0cnVjdG9yIH0gZnJvbSAnLi9Db21wb25lbnQnXG5pbXBvcnQgeyBJRW50aXR5IH0gZnJvbSAnLi9JRW50aXR5J1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIENvbXBvbmVudEdyb3VwIHtcbiAgcmVhZG9ubHkgZW50aXRpZXM6IFJlYWRvbmx5QXJyYXk8SUVudGl0eT4gPSBbXVxuICByZWFkb25seSByZXF1aXJlcyE6IFJlYWRvbmx5QXJyYXk8Q29tcG9uZW50Q29uc3RydWN0b3I8YW55Pj5cbiAgcmVhZG9ubHkgcmVxdWlyZXNOYW1lcyE6IFJlYWRvbmx5QXJyYXk8c3RyaW5nPlxuXG4gIGFjdGl2ZTogYm9vbGVhbiA9IGZhbHNlXG5cbiAgcHJpdmF0ZSBfcmVxdWlyZXNOYW1lczogc3RyaW5nW10gPSBbXVxuXG4gIGNvbnN0cnVjdG9yKC4uLnJlcXVpcmVzOiBDb21wb25lbnRDb25zdHJ1Y3Rvcjxhbnk+W10pIHtcbiAgICAvLyB2YWxpZGF0ZSByZXF1aXJlcyBsaXN0XG4gICAgaWYgKCFyZXF1aXJlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnRHcm91cDogQ291bGQgbm90IGxvYWQgdGhlIHJlcXVpcmVzIGxpc3QnKVxuICAgIH1cbiAgICBpZiAoIShyZXF1aXJlcyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnRHcm91cDogcmVxdWlyZXMgbGlzdCBpcyBub3QgYW4gQXJyYXknKVxuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncmVxdWlyZXMnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZXMuc2xpY2UoKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3JlcXVpcmVzTmFtZXMnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWlyZXNOYW1lcy5zbGljZSgpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGZvciAobGV0IGl4ID0gMDsgaXggPCByZXF1aXJlcy5sZW5ndGg7IGl4KyspIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHJlcXVpcmVzW2l4XVxuICAgICAgbGV0IG5hbWU6IHN0cmluZyB8IG51bGwgPSBudWxsXG5cbiAgICAgIGlmICghY29tcG9uZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29tcG9uZW50R3JvdXA6IHRoZSByZXF1aXJlZCBjb21wb25lbnQgYXQgbG9jYXRpb24gJHtpeH0gaXMgaW52YWxpZGApXG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDb21wb25lbnRHcm91cDogdGhlIHJlcXVpcmVkIGNvbXBvbmVudCBhdCBsb2NhdGlvbiAke2l4fSBpcyBub3QgcmVnaXN0ZXJlZCBhcyBhIEBDb21wb25lbnQuIFJlbWVtYmVyIHRvIHByb3ZpZGUgdGhlIGNsYXNzIG9mIHRoZSBjb21wb25lbnQsIG5vdCB0aGUgbmFtZWBcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcmVxdWlyZXNOYW1lcy5zb21lKCQgPT4gJCA9PT0gbmFtZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb21wb25lbnRHcm91cDogdGhlIHJlcXVpcmVkIGNvbXBvbmVudCBsaXN0IGhhcyBhIHJlcGVhdGVkIG5hbWUgJHtuYW1lfWApXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlcXVpcmVzTmFtZXMucHVzaChuYW1lKVxuICAgIH1cbiAgfVxuXG4gIGhhc0VudGl0eShlbnRpdHk6IElFbnRpdHkpOiBib29sZWFuIHtcbiAgICBpZiAoIWVudGl0eS5pc0FkZGVkVG9FbmdpbmUoKSkgcmV0dXJuIGZhbHNlXG5cbiAgICByZXR1cm4gdGhpcy5lbnRpdGllcy5pbmRleE9mKGVudGl0eSkgIT09IC0xXG4gIH1cblxuICAvLyBAaW50ZXJuYWxcbiAgYWRkRW50aXR5KGVudGl0eTogSUVudGl0eSkge1xuICAgIGlmICghZW50aXR5LmlzQWRkZWRUb0VuZ2luZSgpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb21wb25lbnRHcm91cDogQ2Fubm90IGFkZCBhIGVudGl0eSB0aGF0IGlzIG5vdCBhZGRlZCB0byB0aGUgZW5naW5lJylcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lbnRpdGllcy5pbmRleE9mKGVudGl0eSkgPT09IC0xKSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c2VtaWNvbG9uXG4gICAgICA7KHRoaXMuZW50aXRpZXMgYXMgSUVudGl0eVtdKS5wdXNoKGVudGl0eSlcbiAgICB9XG4gIH1cblxuICAvLyBAaW50ZXJuYWxcbiAgcmVtb3ZlRW50aXR5KGVudGl0eTogSUVudGl0eSkge1xuICAgIGNvbnN0IGlkID0gdGhpcy5lbnRpdGllcy5pbmRleE9mKGVudGl0eSlcblxuICAgIGlmIChpZCAhPT0gLTEpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzZW1pY29sb25cbiAgICAgIDsodGhpcy5lbnRpdGllcyBhcyBJRW50aXR5W10pLnNwbGljZShpZCwgMSlcbiAgICB9XG4gIH1cblxuICAvLyBAaW50ZXJuYWxcbiAgY29tcG9uZW50UmVtb3ZlZChlbnRpdHk6IElFbnRpdHksIGNvbXBvbmVudDogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuX3JlcXVpcmVzTmFtZXMuaW5kZXhPZihjb21wb25lbnQpICE9PSAtMSkge1xuICAgICAgdGhpcy5yZW1vdmVFbnRpdHkoZW50aXR5KVxuICAgIH1cbiAgfVxuXG4gIC8vIEBpbnRlcm5hbFxuICBtZWV0c1JlcXVpcmVtZW50cyhlbnRpdHk6IElFbnRpdHkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3JlcXVpcmVzTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudE5hbWUgPSB0aGlzLl9yZXF1aXJlc05hbWVzW2ldXG4gICAgICBpZiAoIShjb21wb25lbnROYW1lIGluIGVudGl0eS5jb21wb25lbnRzKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/ComponentGroup.ts?')},"./packages/decentraland-ecs/src/ecs/Engine.ts":
/*!*****************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/Engine.ts ***!
  \*****************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i["return"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar IEntity_1 = __webpack_require__(/*! ./IEntity */ "./packages/decentraland-ecs/src/ecs/IEntity.ts");\nvar Component_1 = __webpack_require__(/*! ./Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nvar EventManager_1 = __webpack_require__(/*! ./EventManager */ "./packages/decentraland-ecs/src/ecs/EventManager.ts");\nvar ComponentGroup_1 = __webpack_require__(/*! ./ComponentGroup */ "./packages/decentraland-ecs/src/ecs/ComponentGroup.ts");\nvar helpers_1 = __webpack_require__(/*! ./helpers */ "./packages/decentraland-ecs/src/ecs/helpers.ts");\n/**\n * @public\n */\nvar Engine = /** @class */ (function () {\n    function Engine(rootEntity) {\n        this.eventManager = new EventManager_1.EventManager();\n        // @internal\n        this.systems = [];\n        // @internal\n        this.entityLists = {};\n        // @internal\n        this.addedSystems = [];\n        this._entities = {};\n        this._disposableComponents = {};\n        this._componentGroups = {};\n        // systems that doesn\'t require any component or handle their own logic\n        this.simpleSystems = [];\n        this.eventManager.addListener(IEntity_1.ComponentAdded, this, this.componentAddedHandler);\n        this.eventManager.addListener(IEntity_1.ComponentRemoved, this, this.componentRemovedHandler);\n        this.rootEntity = rootEntity;\n    }\n    Object.defineProperty(Engine.prototype, "entities", {\n        get: function () {\n            return this._entities;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Engine.prototype, "disposableComponents", {\n        get: function () {\n            return this._disposableComponents;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Engine.prototype.addEntity = function (entity) {\n        var parent = entity.getParent();\n        if (entity.isAddedToEngine()) {\n            return entity;\n        }\n        entity.eventManager = this.eventManager;\n        entity.engine = this;\n        this._entities[entity.uuid] = entity;\n        this.checkRequirementsAndAdd(entity);\n        if (!parent) {\n            entity.setParent(this.rootEntity);\n        }\n        else {\n            if (!parent.isAddedToEngine() && parent !== this.rootEntity) {\n                helpers_1.log(\'Engine: warning, added an entity with a parent not present in the engine. Parent id: \' + parent.uuid);\n            }\n        }\n        entity.alive = true;\n        for (var i in entity.children) {\n            var child = entity.children[i];\n            if (child) {\n                if (!child.isAddedToEngine()) {\n                    this.addEntity(child);\n                }\n            }\n        }\n        return entity;\n    };\n    Engine.prototype.removeEntity = function (entity) {\n        var id = entity.uuid;\n        if (entity.isAddedToEngine()) {\n            for (var componentName in entity.components) {\n                var componentGroups = this._componentGroups[componentName];\n                if (componentGroups) {\n                    for (var groupIndex in componentGroups) {\n                        componentGroups[groupIndex].removeEntity(entity);\n                    }\n                }\n                delete this.entityLists[componentName][id];\n            }\n            for (var i = 0; i < this.simpleSystems.length; i++) {\n                var system = this.simpleSystems[i];\n                if (system.onRemoveEntity) {\n                    system.onRemoveEntity(entity);\n                }\n            }\n            for (var i in entity.children) {\n                var child = entity.children[i];\n                if (child) {\n                    this.removeEntity(child);\n                }\n            }\n            entity.alive = false;\n            entity.eventManager = null;\n            delete this._entities[id];\n            return true;\n        }\n        else {\n            helpers_1.log(\'Engine: Trying to remove non existent entity from engine.\');\n            if (!entity.isAddedToEngine()) {\n                helpers_1.log("Engine: Entity \\"" + entity.uuid + "\\" has not been added to any engine yet.");\n            }\n            else {\n                helpers_1.log(\'Engine: Entity id: \' + id);\n            }\n            helpers_1.log("Engine: Entity\'s components:");\n            for (var componentName in entity.components) {\n                helpers_1.log(componentName);\n            }\n            return false;\n        }\n    };\n    Engine.prototype.addSystem = function (system, priority) {\n        if (priority === void 0) { priority = 0; }\n        if (this.addedSystems.indexOf(system) !== -1) {\n            helpers_1.log(\'Engine: Trying to add a system that is already added. Aborting\');\n            return system;\n        }\n        if (this.systems.length > 0) {\n            for (var i = 0; i < this.systems.length; i++) {\n                var entry = this.systems[i];\n                var isLast = i === this.systems.length - 1;\n                if (entry.priority > priority) {\n                    this.addedSystems.push(system);\n                    this.systems.splice(i, 0, { system: system, priority: priority });\n                    break;\n                }\n                else if (isLast) {\n                    this.addedSystems.push(system);\n                    this.systems.splice(i + 1, 0, { system: system, priority: priority });\n                    break;\n                }\n            }\n        }\n        else {\n            this.addedSystems.push(system);\n            this.systems.splice(1, 0, { system: system, priority: priority });\n        }\n        this.registerSystem(system);\n        return system;\n    };\n    Engine.prototype.removeSystem = function (system) {\n        var idx = this.addedSystems.indexOf(system);\n        if (idx !== -1) {\n            system.active = false;\n            if (system.deactivate) {\n                system.deactivate();\n            }\n            this.addedSystems.splice(idx, 1);\n            for (var i = 0; i < this.systems.length; i++) {\n                var sys = this.systems[i].system;\n                if (sys === system) {\n                    this.systems.splice(i, 1);\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n    Engine.prototype.update = function (dt) {\n        for (var i in this.systems) {\n            var system = this.systems[i].system;\n            if (system.active && system.update) {\n                try {\n                    system.update(dt);\n                }\n                catch (e) {\n                    helpers_1.error(e);\n                }\n            }\n        }\n        return this;\n    };\n    Engine.prototype.getEntitiesWithComponent = function (component) {\n        var componentName = typeof component === \'string\' ? component : Component_1.getComponentName(component);\n        if (componentName in this.entityLists) {\n            return this.entityLists[componentName];\n        }\n        else {\n            return (this.entityLists[componentName] = {});\n        }\n    };\n    Engine.prototype.registerComponent = function (component) {\n        var id = Component_1.getComponentId(component);\n        var name = Component_1.getComponentName(component);\n        var classId = Component_1.getComponentClassId(component);\n        this._disposableComponents[id] = component;\n        if (classId !== null) {\n            this.eventManager.fireEvent(new Component_1.DisposableComponentCreated(id, name, classId));\n            this.eventManager.fireEvent(new Component_1.DisposableComponentUpdated(id, component));\n        }\n    };\n    Engine.prototype.disposeComponent = function (component) {\n        var id = Component_1.getComponentId(component);\n        if (delete this._disposableComponents[id]) {\n            this.eventManager.fireEvent(new Component_1.DisposableComponentRemoved(id));\n            if (component.onDispose) {\n                component.onDispose();\n            }\n            return true;\n        }\n        return false;\n    };\n    Engine.prototype.updateComponent = function (component) {\n        this.eventManager.fireEvent(new Component_1.DisposableComponentUpdated(Component_1.getComponentId(component), component));\n    };\n    Engine.prototype.getComponentGroup = function () {\n        var requires = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            requires[_i] = arguments[_i];\n        }\n        // TODO: memoize?\n        var componentGroup = new (ComponentGroup_1.ComponentGroup.bind.apply(ComponentGroup_1.ComponentGroup, __spread([void 0], requires)))();\n        componentGroup.active = true;\n        var requiresNames = componentGroup.requiresNames;\n        for (var i = 0; i < requiresNames.length; i++) {\n            var componentName = requiresNames[i];\n            var componentGroups = this._componentGroups[componentName];\n            if (!componentGroups) {\n                this._componentGroups[componentName] = componentGroups = [];\n            }\n            if (componentGroups.indexOf(componentGroup) === -1) {\n                componentGroups.push(componentGroup);\n            }\n        }\n        for (var entityId in this._entities) {\n            this.checkRequirements(this._entities[entityId], componentGroup);\n        }\n        return componentGroup;\n    };\n    Engine.prototype.removeComponentGroup = function (componentGroup) {\n        if (componentGroup.active) {\n            componentGroup.active = false;\n            var requiresNames = componentGroup.requiresNames;\n            for (var i = 0; i < requiresNames.length; i++) {\n                var componentName = requiresNames[i];\n                var componentGroups = this._componentGroups[componentName];\n                if (componentGroups) {\n                    var idx = componentGroups.indexOf(componentGroup);\n                    if (idx !== -1) {\n                        componentGroups.splice(idx, 1);\n                    }\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n    Engine.prototype.registerSystem = function (system) {\n        system.active = true;\n        if (system.activate) {\n            system.activate(this);\n        }\n        this.simpleSystems.push(system);\n    };\n    Engine.prototype.checkRequirementsAndAdd = function (entity) {\n        if (!entity.isAddedToEngine())\n            return;\n        for (var componentName in entity.components) {\n            if (!(componentName in this.entityLists)) {\n                this.entityLists[componentName] = {};\n            }\n            this.entityLists[componentName][entity.uuid] = entity;\n            var componentGroups = this._componentGroups[componentName];\n            if (componentGroups) {\n                for (var systemIndex in componentGroups) {\n                    this.checkRequirements(entity, componentGroups[systemIndex]);\n                }\n            }\n        }\n        for (var i = 0; i < this.simpleSystems.length; i++) {\n            var system = this.simpleSystems[i];\n            if (system.onAddEntity) {\n                system.onAddEntity(entity);\n            }\n        }\n    };\n    Engine.prototype.checkRequirements = function (entity, system) {\n        if (system.meetsRequirements(entity)) {\n            if (!system.hasEntity(entity)) {\n                system.addEntity(entity);\n            }\n        }\n        else {\n            if (system.hasEntity(entity)) {\n                system.removeEntity(entity);\n            }\n        }\n    };\n    Engine.prototype.componentAddedHandler = function (event) {\n        var _a;\n        var entity = event.entity, componentName = event.componentName;\n        if (!entity.isAddedToEngine())\n            return;\n        if (!this.entityLists[componentName]) {\n            this.entityLists[componentName] = (_a = {}, _a[entity.uuid] = entity, _a);\n        }\n        else {\n            this.entityLists[componentName][entity.uuid] = entity;\n        }\n        var componentGroups = this._componentGroups[componentName];\n        if (componentGroups) {\n            for (var i in componentGroups) {\n                this.checkRequirements(entity, componentGroups[i]);\n            }\n        }\n    };\n    Engine.prototype.componentRemovedHandler = function (event) {\n        // In case a single component gets removed from an entity, we inform\n        // all systems that this entity lost this specific component.\n        var entity = event.entity, componentName = event.componentName;\n        if (!entity.isAddedToEngine())\n            return;\n        delete this.entityLists[componentName][entity.uuid];\n        var componentGroups = this._componentGroups[componentName];\n        if (componentGroups) {\n            for (var i in componentGroups) {\n                this.checkRequirements(entity, componentGroups[i]);\n            }\n        }\n    };\n    return Engine;\n}());\nexports.Engine = Engine;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/Engine.ts?')},"./packages/decentraland-ecs/src/ecs/Entity.ts":
/*!*****************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/Entity.ts ***!
  \*****************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Component_1 = __webpack_require__(/*! ./Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nvar IEntity_1 = __webpack_require__(/*! ./IEntity */ "./packages/decentraland-ecs/src/ecs/IEntity.ts");\nvar helpers_1 = __webpack_require__(/*! ./helpers */ "./packages/decentraland-ecs/src/ecs/helpers.ts");\n// tslint:disable:no-use-before-declare\n/**\n * @public\n */\nvar Entity = /** @class */ (function () {\n    function Entity(name) {\n        this.name = name;\n        this.children = {};\n        this.eventManager = null;\n        this.alive = false;\n        this.uuid = helpers_1.newId(\'E\');\n        this.components = {};\n        // @internal\n        this.engine = null;\n        // @internal\n        this._parent = null;\n        // stub\n    }\n    /**\n     * Adds or replaces a component in the entity.\n     * @param component - component instance.\n     */\n    Entity.prototype.addComponentOrReplace = function (component) {\n        if (typeof component === \'function\') {\n            throw new Error(\'You passed a function or class as a component, an instance of component is expected\');\n        }\n        if (typeof component !== \'object\') {\n            throw new Error("You passed a " + typeof component + ", an instance of component is expected");\n        }\n        var componentName = Component_1.getComponentName(component);\n        if (this.components[componentName]) {\n            if (this.components[componentName] === component) {\n                return component;\n            }\n            this.removeComponent(this.components[componentName], false);\n        }\n        return this.addComponent(component);\n    };\n    Entity.prototype.hasComponent = function (component) {\n        var typeOfComponent = typeof component;\n        if (typeOfComponent !== \'string\' && typeOfComponent !== \'object\' && typeOfComponent !== \'function\') {\n            throw new Error(\'Entity#has(component): component is not a class, name or instance\');\n        }\n        if (component == null)\n            return false;\n        var componentName = typeOfComponent === \'string\' ? component : Component_1.getComponentName(component);\n        var storedComponent = this.components[componentName];\n        if (!storedComponent) {\n            return false;\n        }\n        if (typeOfComponent === \'object\') {\n            return storedComponent === component;\n        }\n        if (typeOfComponent === \'function\') {\n            return storedComponent instanceof component;\n        }\n        return true;\n    };\n    Entity.prototype.getComponent = function (component) {\n        var typeOfComponent = typeof component;\n        if (typeOfComponent !== \'string\' && typeOfComponent !== \'function\') {\n            throw new Error(\'Entity#get(component): component is not a class or name\');\n        }\n        var componentName = typeOfComponent === \'string\' ? component : Component_1.getComponentName(component);\n        var storedComponent = this.components[componentName];\n        if (!storedComponent) {\n            throw new Error("Can not get component \\"" + componentName + "\\" from entity \\"" + this.identifier + "\\"");\n        }\n        if (typeOfComponent === \'function\') {\n            if (storedComponent instanceof component) {\n                return storedComponent;\n            }\n            else {\n                throw new Error("Can not get component \\"" + componentName + "\\" from entity \\"" + this.identifier + "\\" (by instance)");\n            }\n        }\n        return storedComponent;\n    };\n    Entity.prototype.getComponentOrNull = function (component) {\n        var typeOfComponent = typeof component;\n        if (typeOfComponent !== \'string\' && typeOfComponent !== \'function\') {\n            throw new Error(\'Entity#getOrNull(component): component is not a class or name\');\n        }\n        var componentName = typeOfComponent === \'string\' ? component : Component_1.getComponentName(component);\n        var storedComponent = this.components[componentName];\n        if (!storedComponent) {\n            return null;\n        }\n        if (typeOfComponent === \'function\') {\n            if (storedComponent instanceof component) {\n                return storedComponent;\n            }\n            else {\n                return null;\n            }\n        }\n        return storedComponent;\n    };\n    /**\n     * Gets a component, if it doesn\'t exist, it creates the component and returns it.\n     * @param component - component class\n     */\n    Entity.prototype.getComponentOrCreate = function (component) {\n        if (typeof component !== \'function\') {\n            throw new Error(\'Entity#getOrCreate(component): component is not a class\');\n        }\n        var ret = this.getComponentOrNull(component);\n        if (!ret) {\n            ret = new component();\n            // Safe-guard to only add registered components to entities\n            Component_1.getComponentName(ret);\n            this.addComponentOrReplace(ret);\n        }\n        return ret;\n    };\n    /**\n     * Adds a component. If the component already exist, it throws an Error.\n     * @param component - component instance.\n     */\n    Entity.prototype.addComponent = function (component) {\n        if (typeof component !== \'object\') {\n            throw new Error(\'Entity#add(component): You passed a function or class as a component, an instance of component is expected\');\n        }\n        var componentName = Component_1.getComponentName(component);\n        var classId = Component_1.getComponentClassId(component);\n        if (this.components[componentName]) {\n            throw new Error("A component of type \\"" + componentName + "\\" is already present in entity \\"" + this.identifier + "\\"");\n        }\n        this.components[componentName] = component;\n        if (this.eventManager) {\n            this.eventManager.fireEvent(new IEntity_1.ComponentAdded(this, componentName, classId));\n        }\n        var storedComponent = component;\n        if (typeof storedComponent.addedToEntity === \'function\') {\n            storedComponent.addedToEntity(this);\n        }\n        return component;\n    };\n    Entity.prototype.removeComponent = function (component, triggerRemovedEvent) {\n        if (triggerRemovedEvent === void 0) { triggerRemovedEvent = true; }\n        var typeOfComponent = typeof component;\n        if (typeOfComponent !== \'string\' && typeOfComponent !== \'function\' && typeOfComponent !== \'object\') {\n            throw new Error(\'Entity#remove(component): component is not a class, class or name\');\n        }\n        var componentName = typeOfComponent === \'string\' ? component : Component_1.getComponentName(component);\n        var storedComponent = this.components[componentName];\n        if (!storedComponent) {\n            helpers_1.log("Entity Warning: Trying to remove inexisting component \\"" + componentName + "\\" from entity \\"" + this.identifier + "\\"");\n            return;\n        }\n        if (typeOfComponent === \'function\') {\n            if (storedComponent instanceof component) {\n                delete this.components[componentName];\n                if (storedComponent) {\n                    if (triggerRemovedEvent && this.eventManager) {\n                        this.eventManager.fireEvent(new IEntity_1.ComponentRemoved(this, componentName, storedComponent));\n                    }\n                    if (typeof storedComponent.removedFromEntity === \'function\') {\n                        storedComponent.removedFromEntity(this);\n                    }\n                }\n                return;\n            }\n            else {\n                helpers_1.log("Entity Warning: Trying to remove wrong (by constructor) component \\"" + componentName + "\\" from entity \\"" + this.identifier + "\\"");\n                return;\n            }\n        }\n        delete this.components[componentName];\n        if (storedComponent) {\n            if (triggerRemovedEvent && this.eventManager) {\n                this.eventManager.fireEvent(new IEntity_1.ComponentRemoved(this, componentName, storedComponent));\n            }\n            if (typeof storedComponent.removedFromEntity === \'function\') {\n                storedComponent.removedFromEntity(this);\n            }\n        }\n        return;\n    };\n    /**\n     * Returns true if the entity is already added to the engine.\n     * Returns false if no engine was defined.\n     */\n    Entity.prototype.isAddedToEngine = function () {\n        if (this.engine && (this.uuid in this.engine.entities || this.engine.rootEntity === this)) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Sets the parent entity\n     */\n    Entity.prototype.setParent = function (_parent) {\n        var newParent = !_parent && this.engine ? this.engine.rootEntity : _parent;\n        var currentParent = this.getParent();\n        if (newParent === this) {\n            throw new Error("Failed to set parent for entity \\"" + this.identifier + "\\": An entity can\'t set itself as a its own parent");\n        }\n        if (newParent === currentParent) {\n            return this;\n        }\n        var circularAncestor = this.getCircularAncestor(newParent);\n        if (circularAncestor) {\n            throw new Error("Failed to set parent for entity \\"" + this.identifier + "\\": Circular parent references are not allowed (See entity \\"" + circularAncestor + "\\")");\n        }\n        if (currentParent) {\n            delete currentParent.children[this.uuid];\n        }\n        if (newParent !== null && newParent.uuid !== \'0\') {\n            if (!newParent.isAddedToEngine() && this.isAddedToEngine()) {\n                // tslint:disable-next-line:semicolon\n                ;\n                this.engine.removeEntity(this);\n            }\n            if (newParent.isAddedToEngine() && !this.isAddedToEngine()) {\n                // tslint:disable-next-line:semicolon\n                ;\n                newParent.engine.addEntity(this);\n            }\n        }\n        this._parent = newParent || null;\n        this.registerAsChild();\n        if (this.eventManager && this.engine) {\n            this.eventManager.fireEvent(new IEntity_1.ParentChanged(this, newParent));\n        }\n        return this;\n    };\n    /**\n     * Gets the parent entity\n     */\n    Entity.prototype.getParent = function () {\n        return this._parent;\n    };\n    Object.defineProperty(Entity.prototype, "identifier", {\n        get: function () {\n            return this.name || this.uuid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Entity.prototype.getCircularAncestor = function (ent) {\n        var root = this.engine ? this.engine.rootEntity : null;\n        var e = ent;\n        while (e && e !== root) {\n            var parent_1 = e.getParent();\n            if (parent_1 === this) {\n                return e.uuid;\n            }\n            e = parent_1;\n        }\n        return null;\n    };\n    Entity.prototype.registerAsChild = function () {\n        var parent = this.getParent();\n        if (this.uuid && parent) {\n            parent.children[this.uuid] = this;\n        }\n    };\n    return Entity;\n}());\nexports.Entity = Entity;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/Entity.ts?')},"./packages/decentraland-ecs/src/ecs/EventManager.ts":
/*!***********************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/EventManager.ts ***!
  \***********************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar helpers_1 = __webpack_require__(/*! ./helpers */ \"./packages/decentraland-ecs/src/ecs/helpers.ts\");\nvar eventNameSymbol = '__event_name__';\nvar takenEventNames = [];\nfunction getEventNameFromConstructor(ctor) {\n    if (!(eventNameSymbol in ctor) || typeof ctor[eventNameSymbol] !== 'string') {\n        throw new Error('The EventConstructor is not registered');\n    }\n    return ctor[eventNameSymbol];\n}\n/**\n * @public\n */\nvar EventManager = /** @class */ (function () {\n    function EventManager() {\n        this.listeners = {};\n    }\n    EventManager.prototype.addListener = function (eventClass, listener, listenerFunction) {\n        if (!eventClass || typeof eventClass !== 'function') {\n            throw new Error('Invalid EventConstructor');\n        }\n        var eventName = getEventNameFromConstructor(eventClass);\n        var listeners = this.listeners[eventName];\n        if (!listeners) {\n            listeners = this.listeners[eventName] = [];\n        }\n        for (var i = 0; i < listeners.length; i++) {\n            var x = listeners[i];\n            if (x.listener === listener) {\n                throw new Error('The provided listener is already registered');\n            }\n        }\n        listeners.push({\n            listener: listener,\n            fn: listenerFunction\n        });\n        return this;\n    };\n    EventManager.prototype.removeListener = function (listener, eventClass) {\n        if (!eventClass || typeof eventClass !== 'function') {\n            throw new Error('Invalid EventConstructor');\n        }\n        var eventName = getEventNameFromConstructor(eventClass);\n        var listeners = this.listeners[eventName];\n        if (!listeners) {\n            return false;\n        }\n        for (var i = 0; i < listeners.length; i++) {\n            var x = listeners[i];\n            if (x.listener === listener) {\n                listeners.splice(i, 1);\n                return true;\n            }\n        }\n        return false;\n    };\n    EventManager.prototype.fireEvent = function (event) {\n        var eventName = getEventNameFromConstructor(event.constructor);\n        var listeners = this.listeners[eventName];\n        if (listeners) {\n            for (var i = 0; i < listeners.length; i++) {\n                try {\n                    var l = listeners[i];\n                    l.fn.call(l.listener, event);\n                }\n                catch (e) {\n                    helpers_1.error(e);\n                }\n            }\n        }\n        return this;\n    };\n    return EventManager;\n}());\nexports.EventManager = EventManager;\n/**\n * @public\n */\nfunction EventConstructor() {\n    var eventName = helpers_1.newId('EV');\n    if (takenEventNames.indexOf(eventName) !== -1) {\n        throw new Error(\"The event name \" + eventName + \" is already taken\");\n    }\n    takenEventNames.push(eventName);\n    return function (target) {\n        // tslint:disable-next-line:semicolon\n        ;\n        target[eventNameSymbol] = eventName;\n        return target;\n    };\n}\nexports.EventConstructor = EventConstructor;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Vjcy9FdmVudE1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBd0M7QUFFeEMsSUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUE7QUFXeEMsSUFBTSxlQUFlLEdBQWEsRUFBRSxDQUFBO0FBRXBDLFNBQVMsMkJBQTJCLENBQUksSUFBMEI7SUFDaEUsSUFBSSxDQUFDLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUMzRSxNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUE7S0FDMUQ7SUFDRCxPQUFRLElBQUksQ0FBQyxlQUFlLENBQW1CLENBQUE7QUFDakQsQ0FBQztBQU9EOztHQUVHO0FBQ0g7SUFBQTtRQUNVLGNBQVMsR0FBOEMsRUFBRSxDQUFBO0lBdUVuRSxDQUFDO0lBckVDLGtDQUFXLEdBQVgsVUFBa0IsVUFBZ0MsRUFBRSxRQUFXLEVBQUUsZ0JBQTZDO1FBQzVHLElBQUksQ0FBQyxVQUFVLElBQUksT0FBUSxVQUFrQixLQUFLLFVBQVUsRUFBRTtZQUM1RCxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUE7U0FDNUM7UUFDRCxJQUFNLFNBQVMsR0FBRywyQkFBMkIsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUV6RCxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRXpDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUE7U0FDM0M7UUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN6QyxJQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDdEIsSUFBSSxDQUFDLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRTtnQkFDM0IsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFBO2FBQy9EO1NBQ0Y7UUFFRCxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQ2IsUUFBUSxVQUFBO1lBQ1IsRUFBRSxFQUFFLGdCQUFnQjtTQUNyQixDQUFDLENBQUE7UUFFRixPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFFRCxxQ0FBYyxHQUFkLFVBQWtCLFFBQVcsRUFBRSxVQUFrQztRQUMvRCxJQUFJLENBQUMsVUFBVSxJQUFJLE9BQVEsVUFBa0IsS0FBSyxVQUFVLEVBQUU7WUFDNUQsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFBO1NBQzVDO1FBRUQsSUFBTSxTQUFTLEdBQUcsMkJBQTJCLENBQUMsVUFBVSxDQUFDLENBQUE7UUFFekQsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUV6QyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsT0FBTyxLQUFLLENBQUE7U0FDYjtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3pDLElBQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUN0QixJQUFJLENBQUMsQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO2dCQUMzQixTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtnQkFDdEIsT0FBTyxJQUFJLENBQUE7YUFDWjtTQUNGO1FBRUQsT0FBTyxLQUFLLENBQUE7SUFDZCxDQUFDO0lBRUQsZ0NBQVMsR0FBVCxVQUE0QixLQUFRO1FBQ2xDLElBQU0sU0FBUyxHQUFHLDJCQUEyQixDQUFFLEtBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUV6RSxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRXpDLElBQUksU0FBUyxFQUFFO1lBQ2IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3pDLElBQUk7b0JBQ0YsSUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO29CQUN0QixDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFBO2lCQUM3QjtnQkFBQyxPQUFPLENBQUMsRUFBRTtvQkFDVixlQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7aUJBQ1Q7YUFDRjtTQUNGO1FBRUQsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQUFDLEFBeEVELElBd0VDO0FBeEVZLG9DQUFZO0FBMEV6Qjs7R0FFRztBQUNILFNBQWdCLGdCQUFnQjtJQUM5QixJQUFNLFNBQVMsR0FBRyxlQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFN0IsSUFBSSxlQUFlLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQzdDLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQWtCLFNBQVMsc0JBQW1CLENBQUMsQ0FBQTtLQUNoRTtJQUVELGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFL0IsT0FBTyxVQUE2QixNQUFpQjtRQUNuRCxxQ0FBcUM7UUFDckMsQ0FBQztRQUFDLE1BQWMsQ0FBQyxlQUFlLENBQUMsR0FBRyxTQUFTLENBQUE7UUFDN0MsT0FBTyxNQUFNLENBQUE7SUFDZixDQUFDLENBQUE7QUFDSCxDQUFDO0FBZEQsNENBY0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvciwgbmV3SWQgfSBmcm9tICcuL2hlbHBlcnMnXG5cbmNvbnN0IGV2ZW50TmFtZVN5bWJvbCA9ICdfX2V2ZW50X25hbWVfXydcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUV2ZW50Q29uc3RydWN0b3I8VD4ge1xuICAvLyBAaW50ZXJuYWxcbiAgW2V2ZW50TmFtZVN5bWJvbF0/OiBzdHJpbmdcbiAgbmV3ICguLi5hcmdzOiBhbnlbXSk6IFRcbn1cblxuY29uc3QgdGFrZW5FdmVudE5hbWVzOiBzdHJpbmdbXSA9IFtdXG5cbmZ1bmN0aW9uIGdldEV2ZW50TmFtZUZyb21Db25zdHJ1Y3RvcjxUPihjdG9yOiBJRXZlbnRDb25zdHJ1Y3RvcjxUPik6IHN0cmluZyB7XG4gIGlmICghKGV2ZW50TmFtZVN5bWJvbCBpbiBjdG9yKSB8fCB0eXBlb2YgY3RvcltldmVudE5hbWVTeW1ib2xdICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIEV2ZW50Q29uc3RydWN0b3IgaXMgbm90IHJlZ2lzdGVyZWQnKVxuICB9XG4gIHJldHVybiAoY3RvcltldmVudE5hbWVTeW1ib2xdIGFzIGFueSkgYXMgc3RyaW5nXG59XG5cbnR5cGUgRXZlbnRMaXN0ZW5lcjxYPiA9IHtcbiAgbGlzdGVuZXI6IFhcbiAgZm46ICh0aGlzOiBYLCBldmVudDogYW55KSA9PiB2b2lkXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRXZlbnRNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IFJlY29yZDxzdHJpbmcsIEFycmF5PEV2ZW50TGlzdGVuZXI8YW55Pj4+ID0ge31cblxuICBhZGRMaXN0ZW5lcjxULCBYPihldmVudENsYXNzOiBJRXZlbnRDb25zdHJ1Y3RvcjxUPiwgbGlzdGVuZXI6IFgsIGxpc3RlbmVyRnVuY3Rpb246ICh0aGlzOiBYLCBldmVudDogVCkgPT4gdm9pZCkge1xuICAgIGlmICghZXZlbnRDbGFzcyB8fCB0eXBlb2YgKGV2ZW50Q2xhc3MgYXMgYW55KSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEV2ZW50Q29uc3RydWN0b3InKVxuICAgIH1cbiAgICBjb25zdCBldmVudE5hbWUgPSBnZXRFdmVudE5hbWVGcm9tQ29uc3RydWN0b3IoZXZlbnRDbGFzcylcblxuICAgIGxldCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdXG5cbiAgICBpZiAoIWxpc3RlbmVycykge1xuICAgICAgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXSA9IFtdXG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHggPSBsaXN0ZW5lcnNbaV1cbiAgICAgIGlmICh4Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwcm92aWRlZCBsaXN0ZW5lciBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQnKVxuICAgICAgfVxuICAgIH1cblxuICAgIGxpc3RlbmVycy5wdXNoKHtcbiAgICAgIGxpc3RlbmVyLFxuICAgICAgZm46IGxpc3RlbmVyRnVuY3Rpb25cbiAgICB9KVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHJlbW92ZUxpc3RlbmVyPFg+KGxpc3RlbmVyOiBYLCBldmVudENsYXNzOiBJRXZlbnRDb25zdHJ1Y3Rvcjxhbnk+KTogYm9vbGVhbiB7XG4gICAgaWYgKCFldmVudENsYXNzIHx8IHR5cGVvZiAoZXZlbnRDbGFzcyBhcyBhbnkpICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgRXZlbnRDb25zdHJ1Y3RvcicpXG4gICAgfVxuXG4gICAgY29uc3QgZXZlbnROYW1lID0gZ2V0RXZlbnROYW1lRnJvbUNvbnN0cnVjdG9yKGV2ZW50Q2xhc3MpXG5cbiAgICBsZXQgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXVxuXG4gICAgaWYgKCFsaXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB4ID0gbGlzdGVuZXJzW2ldXG4gICAgICBpZiAoeC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZmlyZUV2ZW50PFQgZXh0ZW5kcyBvYmplY3Q+KGV2ZW50OiBUKSB7XG4gICAgY29uc3QgZXZlbnROYW1lID0gZ2V0RXZlbnROYW1lRnJvbUNvbnN0cnVjdG9yKChldmVudCBhcyBhbnkpLmNvbnN0cnVjdG9yKVxuXG4gICAgbGV0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV1cblxuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgbCA9IGxpc3RlbmVyc1tpXVxuICAgICAgICAgIGwuZm4uY2FsbChsLmxpc3RlbmVyLCBldmVudClcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGVycm9yKGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gRXZlbnRDb25zdHJ1Y3RvcigpOiBDbGFzc0RlY29yYXRvciB7XG4gIGNvbnN0IGV2ZW50TmFtZSA9IG5ld0lkKCdFVicpXG5cbiAgaWYgKHRha2VuRXZlbnROYW1lcy5pbmRleE9mKGV2ZW50TmFtZSkgIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgZXZlbnQgbmFtZSAke2V2ZW50TmFtZX0gaXMgYWxyZWFkeSB0YWtlbmApXG4gIH1cblxuICB0YWtlbkV2ZW50TmFtZXMucHVzaChldmVudE5hbWUpXG5cbiAgcmV0dXJuIDxURnVuY3Rpb24gZXh0ZW5kcyBGdW5jdGlvbj4odGFyZ2V0OiBURnVuY3Rpb24pOiBURnVuY3Rpb24gfCB2b2lkID0+IHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c2VtaWNvbG9uXG4gICAgOyh0YXJnZXQgYXMgYW55KVtldmVudE5hbWVTeW1ib2xdID0gZXZlbnROYW1lXG4gICAgcmV0dXJuIHRhcmdldFxuICB9XG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/EventManager.ts?")},"./packages/decentraland-ecs/src/ecs/IEntity.ts":
/*!******************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/IEntity.ts ***!
  \******************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar EventManager_1 = __webpack_require__(/*! ./EventManager */ "./packages/decentraland-ecs/src/ecs/EventManager.ts");\n/**\n * @public\n */\nvar ComponentRemoved = /** @class */ (function () {\n    function ComponentRemoved(entity, componentName, component) {\n        this.entity = entity;\n        this.componentName = componentName;\n        this.component = component;\n        // stub\n    }\n    ComponentRemoved = __decorate([\n        EventManager_1.EventConstructor()\n    ], ComponentRemoved);\n    return ComponentRemoved;\n}());\nexports.ComponentRemoved = ComponentRemoved;\n/**\n * @public\n */\nvar ComponentAdded = /** @class */ (function () {\n    function ComponentAdded(entity, componentName, classId) {\n        this.entity = entity;\n        this.componentName = componentName;\n        this.classId = classId;\n        // stub\n    }\n    ComponentAdded = __decorate([\n        EventManager_1.EventConstructor()\n    ], ComponentAdded);\n    return ComponentAdded;\n}());\nexports.ComponentAdded = ComponentAdded;\n/**\n * @public\n */\nvar ParentChanged = /** @class */ (function () {\n    function ParentChanged(entity, parent) {\n        this.entity = entity;\n        this.parent = parent;\n        // stub\n    }\n    ParentChanged = __decorate([\n        EventManager_1.EventConstructor()\n    ], ParentChanged);\n    return ParentChanged;\n}());\nexports.ParentChanged = ParentChanged;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSUVudGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lY3MvSUVudGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNBLCtDQUErRDtBQTZFL0Q7O0dBRUc7QUFFSDtJQUNFLDBCQUFtQixNQUFlLEVBQVMsYUFBcUIsRUFBUyxTQUF3QjtRQUE5RSxXQUFNLEdBQU4sTUFBTSxDQUFTO1FBQVMsa0JBQWEsR0FBYixhQUFhLENBQVE7UUFBUyxjQUFTLEdBQVQsU0FBUyxDQUFlO1FBQy9GLE9BQU87SUFDVCxDQUFDO0lBSFUsZ0JBQWdCO1FBRDVCLCtCQUFnQixFQUFFO09BQ04sZ0JBQWdCLENBSTVCO0lBQUQsdUJBQUM7Q0FBQSxBQUpELElBSUM7QUFKWSw0Q0FBZ0I7QUFNN0I7O0dBRUc7QUFFSDtJQUNFLHdCQUFtQixNQUFlLEVBQVMsYUFBcUIsRUFBUyxPQUFzQjtRQUE1RSxXQUFNLEdBQU4sTUFBTSxDQUFTO1FBQVMsa0JBQWEsR0FBYixhQUFhLENBQVE7UUFBUyxZQUFPLEdBQVAsT0FBTyxDQUFlO1FBQzdGLE9BQU87SUFDVCxDQUFDO0lBSFUsY0FBYztRQUQxQiwrQkFBZ0IsRUFBRTtPQUNOLGNBQWMsQ0FJMUI7SUFBRCxxQkFBQztDQUFBLEFBSkQsSUFJQztBQUpZLHdDQUFjO0FBTTNCOztHQUVHO0FBRUg7SUFDRSx1QkFBbUIsTUFBZSxFQUFTLE1BQXNCO1FBQTlDLFdBQU0sR0FBTixNQUFNLENBQVM7UUFBUyxXQUFNLEdBQU4sTUFBTSxDQUFnQjtRQUMvRCxPQUFPO0lBQ1QsQ0FBQztJQUhVLGFBQWE7UUFEekIsK0JBQWdCLEVBQUU7T0FDTixhQUFhLENBSXpCO0lBQUQsb0JBQUM7Q0FBQSxBQUpELElBSUM7QUFKWSxzQ0FBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudExpa2UsIENvbXBvbmVudENvbnN0cnVjdG9yIH0gZnJvbSAnLi9Db21wb25lbnQnXG5pbXBvcnQgeyBFdmVudENvbnN0cnVjdG9yLCBFdmVudE1hbmFnZXIgfSBmcm9tICcuL0V2ZW50TWFuYWdlcidcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVN5c3RlbSB7XG4gIGFjdGl2ZT86IGJvb2xlYW5cblxuICBhY3RpdmF0ZT8oZW5naW5lOiBJRW5naW5lKTogdm9pZFxuICBkZWFjdGl2YXRlPygpOiB2b2lkXG5cbiAgdXBkYXRlPyhkdDogbnVtYmVyKTogdm9pZFxuXG4gIG9uQWRkRW50aXR5PyhlbnRpdHk6IElFbnRpdHkpOiB2b2lkXG4gIG9uUmVtb3ZlRW50aXR5PyhlbnRpdHk6IElFbnRpdHkpOiB2b2lkXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIElFbmdpbmUge1xuICByb290RW50aXR5OiBJRW50aXR5XG4gIHJlYWRvbmx5IGVudGl0aWVzOiBSZWFkb25seTxSZWNvcmQ8c3RyaW5nLCBJRW50aXR5Pj5cblxuICBhZGRFbnRpdHkoZW50aXR5OiBJRW50aXR5KTogdm9pZFxuICByZW1vdmVFbnRpdHkoZW50aXR5OiBJRW50aXR5KTogdm9pZFxuICBhZGRTeXN0ZW0oc3lzdGVtOiBJU3lzdGVtLCBwcmlvcml0eTogbnVtYmVyKTogdm9pZFxuICByZW1vdmVTeXN0ZW0oc3lzdGVtOiBJU3lzdGVtKTogdm9pZFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRW50aXR5IHtcbiAgY2hpbGRyZW46IFJlY29yZDxzdHJpbmcsIElFbnRpdHk+XG4gIGV2ZW50TWFuYWdlcjogRXZlbnRNYW5hZ2VyIHwgbnVsbFxuICBhbGl2ZTogYm9vbGVhblxuICByZWFkb25seSB1dWlkOiBzdHJpbmdcbiAgcmVhZG9ubHkgY29tcG9uZW50czogUmVjb3JkPHN0cmluZywgYW55PlxuXG4gIGlzQWRkZWRUb0VuZ2luZSgpOiBib29sZWFuXG4gIGdldFBhcmVudCgpOiBJRW50aXR5IHwgbnVsbFxuICBzZXRQYXJlbnQoZTogSUVudGl0eSk6IHZvaWRcblxuICBnZXRDb21wb25lbnQ8VCA9IGFueT4oY29tcG9uZW50OiBzdHJpbmcpOiBUXG4gIGdldENvbXBvbmVudDxUPihjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPFQ+KTogVFxuICBnZXRDb21wb25lbnQ8VD4oY29tcG9uZW50OiBDb21wb25lbnRDb25zdHJ1Y3RvcjxUPiB8IHN0cmluZyk6IFRcblxuICAvKipcbiAgICogR2V0cyBhIGNvbXBvbmVudCwgaWYgaXQgZG9lc24ndCBleGlzdCwgaXQgcmV0dXJucyBudWxsLlxuICAgKiBAcGFyYW0gY29tcG9uZW50IC0gY29tcG9uZW50IGNsYXNzIG9yIG5hbWVcbiAgICovXG4gIGdldENvbXBvbmVudE9yTnVsbDxUID0gYW55Pihjb21wb25lbnQ6IHN0cmluZyk6IFQgfCBudWxsXG4gIGdldENvbXBvbmVudE9yTnVsbDxUPihjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPFQ+KTogVCB8IG51bGxcbiAgZ2V0Q29tcG9uZW50T3JOdWxsPFQ+KGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD4gfCBzdHJpbmcpOiBUIHwgbnVsbFxuXG4gIGdldENvbXBvbmVudE9yQ3JlYXRlPFQ+KGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD4gJiB7IG5ldyAoKTogVCB9KTogVFxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY29tcG9uZW50LiBJZiB0aGUgY29tcG9uZW50IGFscmVhZHkgZXhpc3QsIGl0IHRocm93cyBhbiBFcnJvci5cbiAgICogQHBhcmFtIGNvbXBvbmVudCAtIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICovXG4gIGFkZENvbXBvbmVudDxUIGV4dGVuZHMgb2JqZWN0Pihjb21wb25lbnQ6IFQpOiB2b2lkXG5cbiAgYWRkQ29tcG9uZW50T3JSZXBsYWNlPFQgZXh0ZW5kcyBvYmplY3Q+KGNvbXBvbmVudDogVCk6IHZvaWRcblxuICByZW1vdmVDb21wb25lbnQoY29tcG9uZW50OiBzdHJpbmcsIHRyaWdnZXJSZW1vdmVkRXZlbnQ/OiBib29sZWFuKTogdm9pZFxuICByZW1vdmVDb21wb25lbnQ8VCBleHRlbmRzIG9iamVjdD4oY29tcG9uZW50OiBULCB0cmlnZ2VyUmVtb3ZlZEV2ZW50PzogYm9vbGVhbik6IHZvaWRcbiAgcmVtb3ZlQ29tcG9uZW50KGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8YW55PiwgdHJpZ2dlclJlbW92ZWRFdmVudD86IGJvb2xlYW4pOiB2b2lkXG4gIHJlbW92ZUNvbXBvbmVudChjb21wb25lbnQ6IG9iamVjdCB8IHN0cmluZyB8IEZ1bmN0aW9uLCB0cmlnZ2VyUmVtb3ZlZEV2ZW50OiBhbnkpOiB2b2lkXG5cbiAgaGFzQ29tcG9uZW50PFQgPSBhbnk+KGNvbXBvbmVudDogc3RyaW5nKTogYm9vbGVhblxuICBoYXNDb21wb25lbnQ8VD4oY29tcG9uZW50OiBDb21wb25lbnRDb25zdHJ1Y3RvcjxUPik6IGJvb2xlYW5cbiAgaGFzQ29tcG9uZW50PFQgZXh0ZW5kcyBvYmplY3Q+KGNvbXBvbmVudDogVCk6IGJvb2xlYW5cbiAgaGFzQ29tcG9uZW50PFQ+KGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD4gfCBzdHJpbmcpOiBib29sZWFuXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARXZlbnRDb25zdHJ1Y3RvcigpXG5leHBvcnQgY2xhc3MgQ29tcG9uZW50UmVtb3ZlZCB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlbnRpdHk6IElFbnRpdHksIHB1YmxpYyBjb21wb25lbnROYW1lOiBzdHJpbmcsIHB1YmxpYyBjb21wb25lbnQ6IENvbXBvbmVudExpa2UpIHtcbiAgICAvLyBzdHViXG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBFdmVudENvbnN0cnVjdG9yKClcbmV4cG9ydCBjbGFzcyBDb21wb25lbnRBZGRlZCB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlbnRpdHk6IElFbnRpdHksIHB1YmxpYyBjb21wb25lbnROYW1lOiBzdHJpbmcsIHB1YmxpYyBjbGFzc0lkOiBudW1iZXIgfCBudWxsKSB7XG4gICAgLy8gc3R1YlxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARXZlbnRDb25zdHJ1Y3RvcigpXG5leHBvcnQgY2xhc3MgUGFyZW50Q2hhbmdlZCB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlbnRpdHk6IElFbnRpdHksIHB1YmxpYyBwYXJlbnQ6IElFbnRpdHkgfCBudWxsKSB7XG4gICAgLy8gc3R1YlxuICB9XG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/IEntity.ts?')},"./packages/decentraland-ecs/src/ecs/Observable.ts":
/*!*********************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/Observable.ts ***!
  \*********************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError("Generator is already executing.");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === "number") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Task_1 = __webpack_require__(/*! ./Task */ "./packages/decentraland-ecs/src/ecs/Task.ts");\n/**\n * A class serves as a medium between the observable and its observers\n * @public\n */\nvar ObserverEventState = /** @class */ (function () {\n    /**\n     * Create a new EventState\n     * @param mask - defines the mask associated with this state\n     * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\n     * @param target - defines the original target of the state\n     * @param currentTarget - defines the current target of the state\n     */\n    function ObserverEventState(mask, skipNextObservers, target, currentTarget) {\n        if (skipNextObservers === void 0) { skipNextObservers = false; }\n        this.initalize(mask, skipNextObservers, target, currentTarget);\n    }\n    /**\n     * Initialize the current event state\n     * @param mask - defines the mask associated with this state\n     * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\n     * @param target - defines the original target of the state\n     * @param currentTarget - defines the current target of the state\n     * @returns the current event state\n     */\n    ObserverEventState.prototype.initalize = function (mask, skipNextObservers, target, currentTarget) {\n        if (skipNextObservers === void 0) { skipNextObservers = false; }\n        this.mask = mask;\n        this.skipNextObservers = skipNextObservers;\n        this.target = target;\n        this.currentTarget = currentTarget;\n        return this;\n    };\n    return ObserverEventState;\n}());\nexports.ObserverEventState = ObserverEventState;\n/**\n * Represent an Observer registered to a given Observable object.\n * @public\n */\nvar Observer = /** @class */ (function () {\n    /**\n     * Creates a new observer\n     * @param callback - defines the callback to call when the observer is notified\n     * @param mask - defines the mask of the observer (used to filter notifications)\n     * @param scope - defines the current scope used to restore the JS context\n     */\n    function Observer(\n    /**\n     * Defines the callback to call when the observer is notified\n     */\n    callback, \n    /**\n     * Defines the mask of the observer (used to filter notifications)\n     */\n    mask, \n    /**\n     * Defines the current scope used to restore the JS context\n     */\n    scope) {\n        if (scope === void 0) { scope = null; }\n        this.callback = callback;\n        this.mask = mask;\n        this.scope = scope;\n        /**\n         * Gets or sets a property defining that the observer as to be unregistered after the next notification\n         */\n        this.unregisterOnNextCall = false;\n        /** For internal usage */\n        this._willBeUnregistered = false;\n    }\n    return Observer;\n}());\nexports.Observer = Observer;\n/**\n * Represent a list of observers registered to multiple Observables object.\n * @public\n */\nvar MultiObserver = /** @class */ (function () {\n    function MultiObserver() {\n        this._observers = null;\n        this._observables = null;\n    }\n    /**\n     * Raise a callback when one of the observable will notify\n     * @param observables - defines a list of observables to watch\n     * @param callback - defines the callback to call on notification\n     * @param mask - defines the mask used to filter notifications\n     * @param scope - defines the current scope used to restore the JS context\n     * @returns the new MultiObserver\n     */\n    MultiObserver.Watch = function (observables, callback, mask, scope) {\n        var e_1, _a;\n        if (mask === void 0) { mask = -1; }\n        if (scope === void 0) { scope = null; }\n        var result = new MultiObserver();\n        result._observers = new Array();\n        result._observables = observables;\n        try {\n            for (var observables_1 = __values(observables), observables_1_1 = observables_1.next(); !observables_1_1.done; observables_1_1 = observables_1.next()) {\n                var observable = observables_1_1.value;\n                var observer = observable.add(callback, mask, false, scope);\n                if (observer) {\n                    result._observers.push(observer);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (observables_1_1 && !observables_1_1.done && (_a = observables_1.return)) _a.call(observables_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return result;\n    };\n    /**\n     * Release associated resources\n     */\n    MultiObserver.prototype.dispose = function () {\n        if (this._observers && this._observables) {\n            for (var index = 0; index < this._observers.length; index++) {\n                this._observables[index].remove(this._observers[index]);\n            }\n        }\n        this._observers = null;\n        this._observables = null;\n    };\n    return MultiObserver;\n}());\nexports.MultiObserver = MultiObserver;\n/**\n * The Observable class is a simple implementation of the Observable pattern.\n *\n * There\'s one slight particularity though: a given Observable can notify its observer using a particular mask value, only the Observers registered with this mask value will be notified.\n * This enable a more fine grained execution without having to rely on multiple different Observable objects.\n * For instance you may have a given Observable that have four different types of notifications: Move (mask = 0x01), Stop (mask = 0x02), Turn Right (mask = 0X04), Turn Left (mask = 0X08).\n * A given observer can register itself with only Move and Stop (mask = 0x03), then it will only be notified when one of these two occurs and will never be for Turn Left/Right.\n *\n * @public\n */\nvar Observable = /** @class */ (function () {\n    /**\n     * Creates a new observable\n     * @param onObserverAdded - defines a callback to call when a new observer is added\n     */\n    function Observable(onObserverAdded) {\n        this._observers = new Array();\n        this._onObserverAdded = null;\n        this._eventState = new ObserverEventState(0);\n        if (onObserverAdded) {\n            this._onObserverAdded = onObserverAdded;\n        }\n    }\n    /**\n     * Create a new Observer with the specified callback\n     * @param callback - the callback that will be executed for that Observer\n     * @param mask - the mask used to filter observers\n     * @param insertFirst - if true the callback will be inserted at the first position, hence executed before the others ones. If false (default behavior) the callback will be inserted at the last position, executed after all the others already present.\n     * @param scope - optional scope for the callback to be called from\n     * @param unregisterOnFirstCall - defines if the observer as to be unregistered after the next notification\n     * @returns the new observer created for the callback\n     */\n    Observable.prototype.add = function (callback, mask, insertFirst, scope, unregisterOnFirstCall) {\n        if (mask === void 0) { mask = -1; }\n        if (insertFirst === void 0) { insertFirst = false; }\n        if (scope === void 0) { scope = null; }\n        if (unregisterOnFirstCall === void 0) { unregisterOnFirstCall = false; }\n        if (!callback) {\n            return null;\n        }\n        var observer = new Observer(callback, mask, scope);\n        observer.unregisterOnNextCall = unregisterOnFirstCall;\n        if (insertFirst) {\n            this._observers.unshift(observer);\n        }\n        else {\n            this._observers.push(observer);\n        }\n        if (this._onObserverAdded) {\n            this._onObserverAdded(observer);\n        }\n        return observer;\n    };\n    /**\n     * Create a new Observer with the specified callback and unregisters after the next notification\n     * @param callback - the callback that will be executed for that Observer\n     * @returns the new observer created for the callback\n     */\n    Observable.prototype.addOnce = function (callback) {\n        return this.add(callback, undefined, undefined, undefined, true);\n    };\n    /**\n     * Remove an Observer from the Observable object\n     * @param observer - the instance of the Observer to remove\n     * @returns false if it doesn\'t belong to this Observable\n     */\n    Observable.prototype.remove = function (observer) {\n        if (!observer) {\n            return false;\n        }\n        var index = this._observers.indexOf(observer);\n        if (index !== -1) {\n            this._deferUnregister(observer);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Remove a callback from the Observable object\n     * @param callback - the callback to remove\n     * @param scope - optional scope. If used only the callbacks with this scope will be removed\n     * @returns false if it doesn\'t belong to this Observable\n     */\n    Observable.prototype.removeCallback = function (callback, scope) {\n        for (var index = 0; index < this._observers.length; index++) {\n            if (this._observers[index].callback === callback && (!scope || scope === this._observers[index].scope)) {\n                this._deferUnregister(this._observers[index]);\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Notify all Observers by calling their respective callback with the given data\n     * Will return true if all observers were executed, false if an observer set skipNextObservers to true, then prevent the subsequent ones to execute\n     * @param eventData - defines the data to send to all observers\n     * @param mask - defines the mask of the current notification (observers with incompatible mask (ie mask & observer.mask === 0) will not be notified)\n     * @param target - defines the original target of the state\n     * @param currentTarget - defines the current target of the state\n     * @returns false if the complete observer chain was not processed (because one observer set the skipNextObservers to true)\n     */\n    Observable.prototype.notifyObservers = function (eventData, mask, target, currentTarget) {\n        var e_2, _a;\n        if (mask === void 0) { mask = -1; }\n        if (!this._observers.length) {\n            return true;\n        }\n        var state = this._eventState;\n        state.mask = mask;\n        state.target = target;\n        state.currentTarget = currentTarget;\n        state.skipNextObservers = false;\n        state.lastReturnValue = eventData;\n        try {\n            for (var _b = __values(this._observers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var obs = _c.value;\n                if (obs._willBeUnregistered) {\n                    continue;\n                }\n                if (obs.mask & mask) {\n                    if (obs.scope) {\n                        state.lastReturnValue = obs.callback.apply(obs.scope, [eventData, state]);\n                    }\n                    else {\n                        state.lastReturnValue = obs.callback(eventData, state);\n                    }\n                    if (obs.unregisterOnNextCall) {\n                        this._deferUnregister(obs);\n                    }\n                }\n                if (state.skipNextObservers) {\n                    return false;\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return true;\n    };\n    /**\n     * Calling this will execute each callback, expecting it to be a promise or return a value.\n     * If at any point in the chain one function fails, the promise will fail and the execution will not continue.\n     * This is useful when a chain of events (sometimes async events) is needed to initialize a certain object\n     * and it is crucial that all callbacks will be executed.\n     * The order of the callbacks is kept, callbacks are not executed parallel.\n     *\n     * @param eventData - The data to be sent to each callback\n     * @param mask - is used to filter observers defaults to -1\n     * @param target - defines the callback target (see EventState)\n     * @param currentTarget - defines he current object in the bubbling phase\n     * @returns will return a Promise than resolves when all callbacks executed successfully.\n     */\n    Observable.prototype.notifyObserversWithPromise = function (eventData, mask, target, currentTarget) {\n        var _this = this;\n        if (mask === void 0) { mask = -1; }\n        // create an empty promise\n        var p = Promise.resolve(eventData);\n        // no observers? return this promise.\n        if (!this._observers.length) {\n            return p;\n        }\n        var state = this._eventState;\n        state.mask = mask;\n        state.target = target;\n        state.currentTarget = currentTarget;\n        state.skipNextObservers = false;\n        // execute one callback after another (not using Promise.all, the order is important)\n        this._observers.forEach(function (obs) {\n            if (state.skipNextObservers) {\n                return;\n            }\n            if (obs._willBeUnregistered) {\n                return;\n            }\n            if (obs.mask & mask) {\n                if (obs.scope) {\n                    p = p.then(function (lastReturnedValue) {\n                        state.lastReturnValue = lastReturnedValue;\n                        return obs.callback.apply(obs.scope, [eventData, state]);\n                    });\n                }\n                else {\n                    p = p.then(function (lastReturnedValue) {\n                        state.lastReturnValue = lastReturnedValue;\n                        return obs.callback(eventData, state);\n                    });\n                }\n                if (obs.unregisterOnNextCall) {\n                    _this._deferUnregister(obs);\n                }\n            }\n        });\n        // return the eventData\n        return p.then(function () {\n            return eventData;\n        });\n    };\n    /**\n     * Notify a specific observer\n     * @param observer - defines the observer to notify\n     * @param eventData - defines the data to be sent to each callback\n     * @param mask - is used to filter observers defaults to -1\n     */\n    Observable.prototype.notifyObserver = function (observer, eventData, mask) {\n        if (mask === void 0) { mask = -1; }\n        var state = this._eventState;\n        state.mask = mask;\n        state.skipNextObservers = false;\n        observer.callback(eventData, state);\n    };\n    /**\n     * Gets a boolean indicating if the observable has at least one observer\n     * @returns true is the Observable has at least one Observer registered\n     */\n    Observable.prototype.hasObservers = function () {\n        return this._observers.length > 0;\n    };\n    /**\n     * Clear the list of observers\n     */\n    Observable.prototype.clear = function () {\n        this._observers = new Array();\n        this._onObserverAdded = null;\n    };\n    /**\n     * Clone the current observable\n     * @returns a new observable\n     */\n    Observable.prototype.clone = function () {\n        var result = new Observable();\n        result._observers = this._observers.slice(0);\n        return result;\n    };\n    /**\n     * Does this observable handles observer registered with a given mask\n     * @param mask - defines the mask to be tested\n     * @returns whether or not one observer registered with the given mask is handeled\n     */\n    Observable.prototype.hasSpecificMask = function (mask) {\n        var e_3, _a;\n        if (mask === void 0) { mask = -1; }\n        try {\n            for (var _b = __values(this._observers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var obs = _c.value;\n                if (obs.mask & mask || obs.mask === mask) {\n                    return true;\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        return false;\n    };\n    Observable.prototype._deferUnregister = function (observer) {\n        var _this = this;\n        observer.unregisterOnNextCall = false;\n        observer._willBeUnregistered = true;\n        Task_1.executeTask(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\n            return [2 /*return*/, this._remove(observer)];\n        }); }); });\n    };\n    // This should only be called when not iterating over _observers to avoid callback skipping.\n    // Removes an observer from the _observer Array.\n    Observable.prototype._remove = function (observer) {\n        if (!observer) {\n            return false;\n        }\n        var index = this._observers.indexOf(observer);\n        if (index !== -1) {\n            this._observers.splice(index, 1);\n            return true;\n        }\n        return false;\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/Observable.ts?')},"./packages/decentraland-ecs/src/ecs/Task.ts":
/*!***************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/Task.ts ***!
  \***************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar helpers_1 = __webpack_require__(/*! ./helpers */ "./packages/decentraland-ecs/src/ecs/helpers.ts");\nvar _defer = Promise.resolve().then.bind(Promise.resolve());\n/**\n * Executes an asynchronous task\n * @param task - the task to execute\n * @public\n */\nfunction executeTask(task) {\n    var result = _defer(task);\n    result.isComplete = false;\n    result\n        .then(function ($) {\n        result.isComplete = true;\n        result.result = $;\n        result.didFail = false;\n    })\n        .catch(function ($) {\n        result.isComplete = true;\n        result.error = $;\n        result.didFail = true;\n        helpers_1.error(\'executeTask: FAILED \' + $.toString(), $);\n    });\n    return result;\n}\nexports.executeTask = executeTask;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFzay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lY3MvVGFzay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFpQztBQVlqQyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtBQUU3RDs7OztHQUlHO0FBQ0gsU0FBZ0IsV0FBVyxDQUFJLElBQXNCO0lBQ25ELElBQU0sTUFBTSxHQUFrQixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFMUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUE7SUFFekIsTUFBTTtTQUNILElBQUksQ0FBQyxVQUFBLENBQUM7UUFDTCxNQUFNLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQTtRQUN4QixNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtRQUNqQixNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQTtJQUN4QixDQUFDLENBQUM7U0FDRCxLQUFLLENBQUMsVUFBQSxDQUFDO1FBQ04sTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUE7UUFDeEIsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUE7UUFDaEIsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUE7UUFDckIsZUFBSyxDQUFDLHNCQUFzQixHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUNqRCxDQUFDLENBQUMsQ0FBQTtJQUVKLE9BQU8sTUFBTSxDQUFBO0FBQ2YsQ0FBQztBQW5CRCxrQ0FtQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvciB9IGZyb20gJy4vaGVscGVycydcblxuZGVjbGFyZSB2YXIgUHJvbWlzZTogYW55XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBUYXNrUmVzdWx0PFQ+ID0gUHJvbWlzZTxUPiAmIHtcbiAgaXNDb21wbGV0ZTogYm9vbGVhblxuICBkaWRGYWlsPzogYm9vbGVhblxuICBlcnJvcj86IEVycm9yXG4gIHJlc3VsdD86IFRcbn1cblxuY29uc3QgX2RlZmVyID0gUHJvbWlzZS5yZXNvbHZlKCkudGhlbi5iaW5kKFByb21pc2UucmVzb2x2ZSgpKVxuXG4vKipcbiAqIEV4ZWN1dGVzIGFuIGFzeW5jaHJvbm91cyB0YXNrXG4gKiBAcGFyYW0gdGFzayAtIHRoZSB0YXNrIHRvIGV4ZWN1dGVcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVUYXNrPFQ+KHRhc2s6ICgpID0+IFByb21pc2U8VD4pOiBUYXNrUmVzdWx0PFQ+IHtcbiAgY29uc3QgcmVzdWx0OiBUYXNrUmVzdWx0PFQ+ID0gX2RlZmVyKHRhc2spXG5cbiAgcmVzdWx0LmlzQ29tcGxldGUgPSBmYWxzZVxuXG4gIHJlc3VsdFxuICAgIC50aGVuKCQgPT4ge1xuICAgICAgcmVzdWx0LmlzQ29tcGxldGUgPSB0cnVlXG4gICAgICByZXN1bHQucmVzdWx0ID0gJFxuICAgICAgcmVzdWx0LmRpZEZhaWwgPSBmYWxzZVxuICAgIH0pXG4gICAgLmNhdGNoKCQgPT4ge1xuICAgICAgcmVzdWx0LmlzQ29tcGxldGUgPSB0cnVlXG4gICAgICByZXN1bHQuZXJyb3IgPSAkXG4gICAgICByZXN1bHQuZGlkRmFpbCA9IHRydWVcbiAgICAgIGVycm9yKCdleGVjdXRlVGFzazogRkFJTEVEICcgKyAkLnRvU3RyaW5nKCksICQpXG4gICAgfSlcblxuICByZXR1cm4gcmVzdWx0XG59XG4iXX0=\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/Task.ts?')},"./packages/decentraland-ecs/src/ecs/UIValue.ts":
/*!******************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/UIValue.ts ***!
  \******************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @public\n */\nvar UIValueType;\n(function (UIValueType) {\n    UIValueType[UIValueType[\"PERCENT\"] = 0] = \"PERCENT\";\n    UIValueType[UIValueType[\"PIXELS\"] = 1] = \"PIXELS\";\n})(UIValueType = exports.UIValueType || (exports.UIValueType = {}));\n/**\n * @public\n */\nvar UIValue = /** @class */ (function () {\n    function UIValue(value) {\n        this.type = UIValueType.PIXELS;\n        if (typeof value === 'string') {\n            var valueAsString = value;\n            if (valueAsString.indexOf('px') > -1) {\n                this.type = UIValueType.PIXELS;\n            }\n            else if (valueAsString.indexOf('%') > -1) {\n                this.type = UIValueType.PERCENT;\n            }\n            this.value = parseFloat(valueAsString);\n        }\n        else {\n            this.value = value;\n        }\n    }\n    UIValue.prototype.toString = function () {\n        var result = this.value.toString();\n        if (this.type === UIValueType.PERCENT) {\n            result += '%';\n        }\n        else {\n            result += 'px';\n        }\n        return result;\n    };\n    return UIValue;\n}());\nexports.UIValue = UIValue;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVUlWYWx1ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lY3MvVUlWYWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztHQUVHO0FBQ0gsSUFBWSxXQUdYO0FBSEQsV0FBWSxXQUFXO0lBQ3JCLG1EQUFXLENBQUE7SUFDWCxpREFBVSxDQUFBO0FBQ1osQ0FBQyxFQUhXLFdBQVcsR0FBWCxtQkFBVyxLQUFYLG1CQUFXLFFBR3RCO0FBRUQ7O0dBRUc7QUFDSDtJQUlFLGlCQUFZLEtBQXNCO1FBQ2hDLElBQUksQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQTtRQUU5QixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM3QixJQUFJLGFBQWEsR0FBVyxLQUFLLENBQUE7WUFDakMsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUNwQyxJQUFJLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUE7YUFDL0I7aUJBQU0sSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUMxQyxJQUFJLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUE7YUFDaEM7WUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQTtTQUN2QzthQUFNO1lBQ0wsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7U0FDbkI7SUFDSCxDQUFDO0lBRUQsMEJBQVEsR0FBUjtRQUNFLElBQUksTUFBTSxHQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUE7UUFFMUMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQyxPQUFPLEVBQUU7WUFDckMsTUFBTSxJQUFJLEdBQUcsQ0FBQTtTQUNkO2FBQU07WUFDTCxNQUFNLElBQUksSUFBSSxDQUFBO1NBQ2Y7UUFFRCxPQUFPLE1BQU0sQ0FBQTtJQUNmLENBQUM7SUFDSCxjQUFDO0FBQUQsQ0FBQyxBQWhDRCxJQWdDQztBQWhDWSwwQkFBTyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZW51bSBVSVZhbHVlVHlwZSB7XG4gIFBFUkNFTlQgPSAwLFxuICBQSVhFTFMgPSAxXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgVUlWYWx1ZSB7XG4gIHZhbHVlOiBudW1iZXJcbiAgdHlwZTogVUlWYWx1ZVR5cGVcblxuICBjb25zdHJ1Y3Rvcih2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgdGhpcy50eXBlID0gVUlWYWx1ZVR5cGUuUElYRUxTXG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgbGV0IHZhbHVlQXNTdHJpbmc6IHN0cmluZyA9IHZhbHVlXG4gICAgICBpZiAodmFsdWVBc1N0cmluZy5pbmRleE9mKCdweCcpID4gLTEpIHtcbiAgICAgICAgdGhpcy50eXBlID0gVUlWYWx1ZVR5cGUuUElYRUxTXG4gICAgICB9IGVsc2UgaWYgKHZhbHVlQXNTdHJpbmcuaW5kZXhPZignJScpID4gLTEpIHtcbiAgICAgICAgdGhpcy50eXBlID0gVUlWYWx1ZVR5cGUuUEVSQ0VOVFxuICAgICAgfVxuXG4gICAgICB0aGlzLnZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZUFzU3RyaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWVcbiAgICB9XG4gIH1cblxuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIGxldCByZXN1bHQ6IHN0cmluZyA9IHRoaXMudmFsdWUudG9TdHJpbmcoKVxuXG4gICAgaWYgKHRoaXMudHlwZSA9PT0gVUlWYWx1ZVR5cGUuUEVSQ0VOVCkge1xuICAgICAgcmVzdWx0ICs9ICclJ1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgKz0gJ3B4J1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/UIValue.ts?")},"./packages/decentraland-ecs/src/ecs/helpers.ts":
/*!******************************************************!*\
  !*** ./packages/decentraland-ecs/src/ecs/helpers.ts ***!
  \******************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar lastGeneratedId = 0;\n/**\n * Log function. Only works in debug mode, otherwise it does nothing.\n * @param args - any loggable parameter\n * @public\n */\nfunction log() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (typeof dcl !== 'undefined') {\n        dcl.log.apply(dcl, __spread(args));\n    }\n    else {\n        // tslint:disable-next-line:no-console\n        console.log.apply(console, __spread(['DEBUG:'], args));\n    }\n}\nexports.log = log;\n/**\n * Error function. Prints a console error. Only works in debug mode, otherwise it does nothing.\n * @param error - string or Error object.\n * @param data - any debug information.\n * @public\n */\nfunction error(error, data) {\n    if (typeof dcl !== 'undefined') {\n        dcl.error(error, data);\n    }\n    else {\n        // tslint:disable-next-line:no-console\n        console.error('ERROR:', error, data);\n    }\n}\nexports.error = error;\n/**\n * Generates a new prefixed id\n * @beta\n */\nfunction newId(type) {\n    lastGeneratedId++;\n    if (type.length === 0)\n        throw new Error('newId(type: string): type cannot be empty');\n    return type + lastGeneratedId.toString(36);\n}\nexports.newId = newId;\n/**\n * @internal\n */\nfunction uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (Math.random() * 16) | 0;\n        var v = c === 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\nexports.uuid = uuid;\n/**\n * Returns an array of the given size filled with element built from the given constructor and the paramters\n * @param size - the number of element to construct and put in the array\n * @param itemBuilder - a callback responsible for creating new instance of item. Called once per array entry.\n * @returns a new array filled with new objects\n * @internal\n */\nfunction buildArray(size, itemBuilder) {\n    var a = [];\n    for (var i = 0; i < size; ++i) {\n        a.push(itemBuilder());\n    }\n    return a;\n}\nexports.buildArray = buildArray;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lY3MvaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSSxlQUFlLEdBQUcsQ0FBQyxDQUFBO0FBS3ZCOzs7O0dBSUc7QUFDSCxTQUFnQixHQUFHO0lBQUMsY0FBYztTQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7UUFBZCx5QkFBYzs7SUFDaEMsSUFBSSxPQUFPLEdBQUcsS0FBSyxXQUFXLEVBQUU7UUFDOUIsR0FBRyxDQUFDLEdBQUcsT0FBUCxHQUFHLFdBQVEsSUFBSSxHQUFDO0tBQ2pCO1NBQU07UUFDTCxzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLEdBQUcsT0FBWCxPQUFPLFlBQUssUUFBUSxHQUFLLElBQUksR0FBQztLQUMvQjtBQUNILENBQUM7QUFQRCxrQkFPQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsS0FBSyxDQUFDLEtBQXFCLEVBQUUsSUFBVTtJQUNyRCxJQUFJLE9BQU8sR0FBRyxLQUFLLFdBQVcsRUFBRTtRQUM5QixHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtLQUN2QjtTQUFNO1FBQ0wsc0NBQXNDO1FBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtLQUNyQztBQUNILENBQUM7QUFQRCxzQkFPQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLEtBQUssQ0FBQyxJQUFZO0lBQ2hDLGVBQWUsRUFBRSxDQUFBO0lBQ2pCLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFBO0lBQ25GLE9BQU8sSUFBSSxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDNUMsQ0FBQztBQUpELHNCQUlDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixJQUFJO0lBQ2xCLE9BQU8sc0NBQXNDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxVQUFTLENBQUM7UUFDdkUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2hDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFBO1FBQ3ZDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUN2QixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFORCxvQkFNQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQWdCLFVBQVUsQ0FBSSxJQUFZLEVBQUUsV0FBb0I7SUFDOUQsSUFBTSxDQUFDLEdBQVEsRUFBRSxDQUFBO0lBQ2pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDN0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFBO0tBQ3RCO0lBQ0QsT0FBTyxDQUFDLENBQUE7QUFDVixDQUFDO0FBTkQsZ0NBTUMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgbGFzdEdlbmVyYXRlZElkID0gMFxuXG5kZWNsYXJlIHZhciBjb25zb2xlOiBhbnlcbmRlY2xhcmUgdmFyIGRjbDogYW55XG5cbi8qKlxuICogTG9nIGZ1bmN0aW9uLiBPbmx5IHdvcmtzIGluIGRlYnVnIG1vZGUsIG90aGVyd2lzZSBpdCBkb2VzIG5vdGhpbmcuXG4gKiBAcGFyYW0gYXJncyAtIGFueSBsb2dnYWJsZSBwYXJhbWV0ZXJcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvZyguLi5hcmdzOiBhbnlbXSkge1xuICBpZiAodHlwZW9mIGRjbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkY2wubG9nKC4uLmFyZ3MpXG4gIH0gZWxzZSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZygnREVCVUc6JywgLi4uYXJncylcbiAgfVxufVxuXG4vKipcbiAqIEVycm9yIGZ1bmN0aW9uLiBQcmludHMgYSBjb25zb2xlIGVycm9yLiBPbmx5IHdvcmtzIGluIGRlYnVnIG1vZGUsIG90aGVyd2lzZSBpdCBkb2VzIG5vdGhpbmcuXG4gKiBAcGFyYW0gZXJyb3IgLSBzdHJpbmcgb3IgRXJyb3Igb2JqZWN0LlxuICogQHBhcmFtIGRhdGEgLSBhbnkgZGVidWcgaW5mb3JtYXRpb24uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlcnJvcihlcnJvcjogc3RyaW5nIHwgRXJyb3IsIGRhdGE/OiBhbnkpIHtcbiAgaWYgKHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGNsLmVycm9yKGVycm9yLCBkYXRhKVxuICB9IGVsc2Uge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgY29uc29sZS5lcnJvcignRVJST1I6JywgZXJyb3IsIGRhdGEpXG4gIH1cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBuZXcgcHJlZml4ZWQgaWRcbiAqIEBiZXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXdJZCh0eXBlOiBzdHJpbmcpIHtcbiAgbGFzdEdlbmVyYXRlZElkKytcbiAgaWYgKHR5cGUubGVuZ3RoID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ25ld0lkKHR5cGU6IHN0cmluZyk6IHR5cGUgY2Fubm90IGJlIGVtcHR5JylcbiAgcmV0dXJuIHR5cGUgKyBsYXN0R2VuZXJhdGVkSWQudG9TdHJpbmcoMzYpXG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1dWlkKCkge1xuICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbihjKSB7XG4gICAgbGV0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDBcbiAgICBsZXQgdiA9IGMgPT09ICd4JyA/IHIgOiAociAmIDB4MykgfCAweDhcbiAgICByZXR1cm4gdi50b1N0cmluZygxNilcbiAgfSlcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBnaXZlbiBzaXplIGZpbGxlZCB3aXRoIGVsZW1lbnQgYnVpbHQgZnJvbSB0aGUgZ2l2ZW4gY29uc3RydWN0b3IgYW5kIHRoZSBwYXJhbXRlcnNcbiAqIEBwYXJhbSBzaXplIC0gdGhlIG51bWJlciBvZiBlbGVtZW50IHRvIGNvbnN0cnVjdCBhbmQgcHV0IGluIHRoZSBhcnJheVxuICogQHBhcmFtIGl0ZW1CdWlsZGVyIC0gYSBjYWxsYmFjayByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIGl0ZW0uIENhbGxlZCBvbmNlIHBlciBhcnJheSBlbnRyeS5cbiAqIEByZXR1cm5zIGEgbmV3IGFycmF5IGZpbGxlZCB3aXRoIG5ldyBvYmplY3RzXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkQXJyYXk8VD4oc2l6ZTogbnVtYmVyLCBpdGVtQnVpbGRlcjogKCkgPT4gVCk6IEFycmF5PFQ+IHtcbiAgY29uc3QgYTogVFtdID0gW11cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICBhLnB1c2goaXRlbUJ1aWxkZXIoKSlcbiAgfVxuICByZXR1cm4gYVxufVxuIl19\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/ecs/helpers.ts?")},"./packages/decentraland-ecs/src/index.ts":
/*!************************************************!*\
  !*** ./packages/decentraland-ecs/src/index.ts ***!
  \************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, "__esModule", { value: true });\n// CORE DEPENDENCIES\n__export(__webpack_require__(/*! ./ecs/Engine */ "./packages/decentraland-ecs/src/ecs/Engine.ts"));\n__export(__webpack_require__(/*! ./ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts"));\n__export(__webpack_require__(/*! ./ecs/Entity */ "./packages/decentraland-ecs/src/ecs/Entity.ts"));\n__export(__webpack_require__(/*! ./ecs/IEntity */ "./packages/decentraland-ecs/src/ecs/IEntity.ts"));\n__export(__webpack_require__(/*! ./ecs/Task */ "./packages/decentraland-ecs/src/ecs/Task.ts"));\n__export(__webpack_require__(/*! ./ecs/helpers */ "./packages/decentraland-ecs/src/ecs/helpers.ts"));\n__export(__webpack_require__(/*! ./ecs/Observable */ "./packages/decentraland-ecs/src/ecs/Observable.ts"));\n__export(__webpack_require__(/*! ./ecs/UIValue */ "./packages/decentraland-ecs/src/ecs/UIValue.ts"));\n__export(__webpack_require__(/*! ./ecs/EventManager */ "./packages/decentraland-ecs/src/ecs/EventManager.ts"));\nvar Implementation_1 = __webpack_require__(/*! ./decentraland/Implementation */ "./packages/decentraland-ecs/src/decentraland/Implementation.ts");\n// ECS INITIALIZATION\nvar Engine_1 = __webpack_require__(/*! ./ecs/Engine */ "./packages/decentraland-ecs/src/ecs/Engine.ts");\nvar Entity_1 = __webpack_require__(/*! ./ecs/Entity */ "./packages/decentraland-ecs/src/ecs/Entity.ts");\nvar entity = new Entity_1.Entity(\'scene\');\nentity.uuid = \'0\';\n// Initialize engine\n/** @public */\nvar engine = new Engine_1.Engine(entity);\nexports.engine = engine;\nvar Component_1 = __webpack_require__(/*! ./ecs/Component */ "./packages/decentraland-ecs/src/ecs/Component.ts");\nComponent_1.DisposableComponent.engine = engine;\nif (typeof dcl !== \'undefined\') {\n    engine.addSystem(new Implementation_1.DecentralandSynchronizationSystem(dcl), Infinity);\n}\nvar Systems_1 = __webpack_require__(/*! ./decentraland/Systems */ "./packages/decentraland-ecs/src/decentraland/Systems.ts");\n// Initialize UUID Events system\nengine.addSystem(Systems_1.uuidEventSystem);\n// Initialize Pointer Events System\nengine.addSystem(Systems_1.pointerEventSystem);\n// Initialize Raycast Events System\nengine.addSystem(Systems_1.raycastEventSystem);\n// DECENTRALAND DEPENDENCIES\n__export(__webpack_require__(/*! ./decentraland/Types */ "./packages/decentraland-ecs/src/decentraland/Types.ts"));\n__export(__webpack_require__(/*! ./decentraland/Components */ "./packages/decentraland-ecs/src/decentraland/Components.ts"));\n__export(__webpack_require__(/*! ./decentraland/Systems */ "./packages/decentraland-ecs/src/decentraland/Systems.ts"));\n__export(__webpack_require__(/*! ./decentraland/Events */ "./packages/decentraland-ecs/src/decentraland/Events.ts"));\n__export(__webpack_require__(/*! ./decentraland/Camera */ "./packages/decentraland-ecs/src/decentraland/Camera.ts"));\n__export(__webpack_require__(/*! ./decentraland/math */ "./packages/decentraland-ecs/src/decentraland/math/index.ts"));\n__export(__webpack_require__(/*! ./decentraland/AnimationState */ "./packages/decentraland-ecs/src/decentraland/AnimationState.ts"));\n__export(__webpack_require__(/*! ./decentraland/Input */ "./packages/decentraland-ecs/src/decentraland/Input.ts"));\n__export(__webpack_require__(/*! ./decentraland/Audio */ "./packages/decentraland-ecs/src/decentraland/Audio.ts"));\n__export(__webpack_require__(/*! ./decentraland/Gizmos */ "./packages/decentraland-ecs/src/decentraland/Gizmos.ts"));\n__export(__webpack_require__(/*! ./decentraland/UIShapes */ "./packages/decentraland-ecs/src/decentraland/UIShapes.ts"));\n__export(__webpack_require__(/*! ./decentraland/AvatarShape */ "./packages/decentraland-ecs/src/decentraland/AvatarShape.ts"));\n__export(__webpack_require__(/*! ./decentraland/UIEvents */ "./packages/decentraland-ecs/src/decentraland/UIEvents.ts"));\n__export(__webpack_require__(/*! ./decentraland/MessageBus */ "./packages/decentraland-ecs/src/decentraland/MessageBus.ts"));\n__export(__webpack_require__(/*! ./decentraland/PhysicsCast */ "./packages/decentraland-ecs/src/decentraland/PhysicsCast.ts"));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxvQkFBb0I7QUFDcEIsa0NBQTRCO0FBQzVCLHFDQUErQjtBQUMvQixrQ0FBNEI7QUFDNUIsbUNBQTZCO0FBQzdCLGdDQUEwQjtBQUMxQixtQ0FBNkI7QUFDN0Isc0NBQWdDO0FBQ2hDLG1DQUE2QjtBQUM3Qix3Q0FBa0M7QUFFbEMsZ0VBQWlGO0FBRWpGLHFCQUFxQjtBQUNyQix1Q0FBcUM7QUFDckMsdUNBQXFDO0FBRXJDLElBQU0sTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUNqQztBQUFDLE1BQWMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFBO0FBRTNCLG9CQUFvQjtBQUNwQixjQUFjO0FBQ2QsSUFBTSxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7QUEwQ3hCLHdCQUFNO0FBeENmLDZDQUFxRDtBQUNyRCwrQkFBbUIsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0FBUW5DLElBQUksT0FBTyxHQUFHLEtBQUssV0FBVyxFQUFFO0lBQzlCLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxrREFBaUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQTtDQUN2RTtBQUVELGtEQUFnRztBQUVoRyxnQ0FBZ0M7QUFDaEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyx5QkFBZSxDQUFDLENBQUE7QUFDakMsbUNBQW1DO0FBQ25DLE1BQU0sQ0FBQyxTQUFTLENBQUMsNEJBQWtCLENBQUMsQ0FBQTtBQUVwQyxtQ0FBbUM7QUFDbkMsTUFBTSxDQUFDLFNBQVMsQ0FBQyw0QkFBa0IsQ0FBQyxDQUFBO0FBRXBDLDRCQUE0QjtBQUM1QiwwQ0FBb0M7QUFDcEMsK0NBQXlDO0FBQ3pDLDRDQUFzQztBQUN0QywyQ0FBcUM7QUFDckMsMkNBQXFDO0FBQ3JDLHlDQUFtQztBQUNuQyxtREFBNkM7QUFDN0MsMENBQW9DO0FBQ3BDLDBDQUFvQztBQUNwQywyQ0FBcUM7QUFDckMsNkNBQXVDO0FBQ3ZDLGdEQUEwQztBQUMxQyw2Q0FBdUM7QUFDdkMsK0NBQXlDO0FBQ3pDLGdEQUEwQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENPUkUgREVQRU5ERU5DSUVTXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9FbmdpbmUnXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9Db21wb25lbnQnXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9FbnRpdHknXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9JRW50aXR5J1xuZXhwb3J0ICogZnJvbSAnLi9lY3MvVGFzaydcbmV4cG9ydCAqIGZyb20gJy4vZWNzL2hlbHBlcnMnXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9PYnNlcnZhYmxlJ1xuZXhwb3J0ICogZnJvbSAnLi9lY3MvVUlWYWx1ZSdcbmV4cG9ydCAqIGZyb20gJy4vZWNzL0V2ZW50TWFuYWdlcidcblxuaW1wb3J0IHsgRGVjZW50cmFsYW5kU3luY2hyb25pemF0aW9uU3lzdGVtIH0gZnJvbSAnLi9kZWNlbnRyYWxhbmQvSW1wbGVtZW50YXRpb24nXG5cbi8vIEVDUyBJTklUSUFMSVpBVElPTlxuaW1wb3J0IHsgRW5naW5lIH0gZnJvbSAnLi9lY3MvRW5naW5lJ1xuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi9lY3MvRW50aXR5J1xuXG5jb25zdCBlbnRpdHkgPSBuZXcgRW50aXR5KCdzY2VuZScpXG47KGVudGl0eSBhcyBhbnkpLnV1aWQgPSAnMCdcblxuLy8gSW5pdGlhbGl6ZSBlbmdpbmVcbi8qKiBAcHVibGljICovXG5jb25zdCBlbmdpbmUgPSBuZXcgRW5naW5lKGVudGl0eSlcblxuaW1wb3J0IHsgRGlzcG9zYWJsZUNvbXBvbmVudCB9IGZyb20gJy4vZWNzL0NvbXBvbmVudCdcbkRpc3Bvc2FibGVDb21wb25lbnQuZW5naW5lID0gZW5naW5lXG5cbi8vIEluaXRpYWxpemUgRGVjZW50cmFsYW5kIGludGVyZmFjZVxuLyoqIEBpbnRlcm5hbCAqL1xuaW1wb3J0IHsgRGVjZW50cmFsYW5kSW50ZXJmYWNlIH0gZnJvbSAnLi9kZWNlbnRyYWxhbmQvVHlwZXMnXG5cbi8qKiBAaW50ZXJuYWwgKi9cbmRlY2xhcmUgbGV0IGRjbDogRGVjZW50cmFsYW5kSW50ZXJmYWNlIHwgdm9pZFxuaWYgKHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnKSB7XG4gIGVuZ2luZS5hZGRTeXN0ZW0obmV3IERlY2VudHJhbGFuZFN5bmNocm9uaXphdGlvblN5c3RlbShkY2wpLCBJbmZpbml0eSlcbn1cblxuaW1wb3J0IHsgdXVpZEV2ZW50U3lzdGVtLCBwb2ludGVyRXZlbnRTeXN0ZW0sIHJheWNhc3RFdmVudFN5c3RlbSB9IGZyb20gJy4vZGVjZW50cmFsYW5kL1N5c3RlbXMnXG5cbi8vIEluaXRpYWxpemUgVVVJRCBFdmVudHMgc3lzdGVtXG5lbmdpbmUuYWRkU3lzdGVtKHV1aWRFdmVudFN5c3RlbSlcbi8vIEluaXRpYWxpemUgUG9pbnRlciBFdmVudHMgU3lzdGVtXG5lbmdpbmUuYWRkU3lzdGVtKHBvaW50ZXJFdmVudFN5c3RlbSlcblxuLy8gSW5pdGlhbGl6ZSBSYXljYXN0IEV2ZW50cyBTeXN0ZW1cbmVuZ2luZS5hZGRTeXN0ZW0ocmF5Y2FzdEV2ZW50U3lzdGVtKVxuXG4vLyBERUNFTlRSQUxBTkQgREVQRU5ERU5DSUVTXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9UeXBlcydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL0NvbXBvbmVudHMnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9TeXN0ZW1zJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvRXZlbnRzJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvQ2FtZXJhJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvbWF0aCdcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL0FuaW1hdGlvblN0YXRlJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvSW5wdXQnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9BdWRpbydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL0dpem1vcydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL1VJU2hhcGVzJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvQXZhdGFyU2hhcGUnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9VSUV2ZW50cydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL01lc3NhZ2VCdXMnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9QaHlzaWNzQ2FzdCdcblxuZXhwb3J0IHsgZW5naW5lIH1cbiJdfQ==\n\n//# sourceURL=webpack:///./packages/decentraland-ecs/src/index.ts?')}}));var loader;(function(e){"use strict";var r=1;var d=2;var i=[];var f={baseUrl:""};var c={};function n(e){if(typeof e==="object"){for(var n in e){if(e.hasOwnProperty(n)){f[n]=e[n]}}}}e.config=n;function l(t,e,o){var n=arguments.length;if(n===1){o=t;e=["require","exports","module"];t=null}else if(n===2){if(f.toString.call(t)==="[object Array]"){o=e;e=t;t=null}else{o=e;e=["require","exports","module"]}}if(!t){i.push([e,o]);return}function r(){var e,n;if(c[t]){e=c[t].handlers;n=c[t].context}var r=c[t]=typeof o==="function"?o.apply(null,i.slice.call(arguments,0))||c[t]||{}:o;r.dclamd=d;r.context=n;for(var l=0,a=e?e.length:0;l<a;l++){e[l](r)}}u(e,r,t)}e.define=l;(function(e){e.amd={}})(l=e.define||(e.define={}));function u(r,l,a){var t=[];var o=0;var i=false;if(typeof r==="string"){if(c[r]&&c[r].dclamd===d){return c[r]}throw new Error(r+" has not been defined. Please include it as a dependency in "+a+"'s define()")}var f=r.length;var e=function(n){switch(r[n]){case"require":var e=function(e,n){return u(e,n,a)};e.toUrl=function(e){return p(e,a)};t[n]=e;o++;break;case"exports":t[n]=c[a]||(c[a]={});o++;break;case"module":t[n]={id:a,uri:p(a)};o++;break;case c[a]?c[a].context:"":t[n]=c[c[a].context];o++;break;default:s(r[n],function(e){t[n]=e;o++;if(o===f&&l){i=true;l.apply(null,t)}if(c[r[n]]){c[r[n]].dclamd=d}},a)}};for(var n=0;n<f;n++){e(n)}if(!i&&o===f&&l){l.apply(null,t)}}e.require=u;function t(e,n){return function(){return dcl.callRpc(e,n.name,i.slice.call(arguments,0))}}function s(e,a,n){e=n?p(e,n):e;if(c[e]){if(c[e].dclamd===r){a&&c[e].handlers.push(a)}else{a&&a(c[e])}return}else{c[e]={name:e,dclamd:r,handlers:[a],context:n}}if(e.indexOf("@")===0){if(typeof dcl!=="undefined"){dcl.loadModule(e).then(function(e){var n={};for(var r in e.methods){var l=e.methods[r];n[l.name]=t(e.rpcHandle,l)}a(n)})}}}if(typeof dcl!=="undefined"){dcl.onStart(function(){var e=[];for(var n in c){if(c[n]&&c[n].dclamd===r){e.push(c[n])}}if(e.length){throw new Error("These modules didn't load: "+e.map(function(e){return e.name}).join(", "))}})}function p(e,n){var r=false;switch(e){case"require":case"exports":case"module":return e}var l=(n||f.baseUrl).split("/");l.pop();var a=e.split("/");var t=a.length;while(--t){switch(e[0]){case"..":l.pop();case".":case"":a.shift();r=true}}return(l.length&&r?l.join("/")+"/":"")+a.join("/")}u.toUrl=p})(loader||(loader={}));global=typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof this!=="undefined"?this:null;if(!global)throw new Error("unknown global context");global.define=loader.define;global.dclamd=loader;eval("var SEND_ICON = './images/send-icon.png';\r\nvar ui = new UICanvas();\r\nvar myEntity = new Entity();\r\nvar uiEntity = myEntity;\r\nuiEntity.addComponentOrReplace(ui);\r\nengine.addEntity(uiEntity);\r\nvar container = new UIContainerRect(ui);\r\ncontainer.width = 1;\r\ncontainer.height = 1;\r\ncontainer.color = Color4.White(); // we set global text color here\r\ncontainer.hAlign = 'center';\r\ncontainer.vAlign = 'center';\r\n// We add separate rect container to act as a background with opacity\r\nvar bg = new UIContainerRect(container);\r\nbg.opacity = 0.2;\r\nbg.thickness = 1;\r\nbg.color = Color4.Black();\r\n// --- INVENTORY\r\nvar inventoryContainer = new UIContainerStack(container);\r\ninventoryContainer.adaptWidth = true;\r\ninventoryContainer.width = '40%';\r\ninventoryContainer.positionY = '-100px';\r\ninventoryContainer.positionX = '10px';\r\ninventoryContainer.color = Color4.Blue();\r\ninventoryContainer.hAlign = 'left';\r\ninventoryContainer.vAlign = 'top';\r\ninventoryContainer.stackOrientation = UIStackOrientation.VERTICAL;\r\nfunction generateInventoryItem(index) {\r\n    var bg = new UIContainerRect(inventoryContainer);\r\n    bg.name = \"hmmm-\" + index;\r\n    bg.thickness = 1;\r\n    bg.color = Color4.Blue();\r\n    bg.width = 1;\r\n    bg.height = 1;\r\n    bg.hAlign = 'center';\r\n    bg.vAlign = 'top';\r\n    var text = new UIText(bg);\r\n    text.name = \"hehe-\" + index;\r\n    text.value = \"Item \" + index;\r\n    text.vAlign = 'center';\r\n    text.hAlign = 'center';\r\n    text.adaptWidth = true;\r\n    text.adaptHeight = true;\r\n    text.fontSize = 10;\r\n    text.color = new Color4(1, 0, 0, 1);\r\n}\r\ngenerateInventoryItem(1);\r\ngenerateInventoryItem(2);\r\ngenerateInventoryItem(3);\r\ngenerateInventoryItem(4);\r\n// --- RIGHT SIDE OF THE UI\r\nvar inputTextState = '';\r\nvar input = new UIInputText(container);\r\ninput.color = Color4.White();\r\ninput.thickness = 1;\r\ninput.fontSize = 20;\r\ninput.fontWeight = 'normal';\r\ninput.opacity = 1.0;\r\ninput.placeholderColor = Color4.White();\r\ninput.value = inputTextState;\r\ninput.placeholder = 'write something...';\r\ninput.margin = 10;\r\ninput.color = Color4.Black();\r\ninput.focusedBackground = Color4.FromHexString('#00a4a4');\r\ninput.shadowBlur = 10;\r\ninput.shadowOffsetX = 5;\r\ninput.shadowOffsetY = 5;\r\ninput.shadowColor = Color4.FromHexString('#c7c7c7');\r\ninput.hAlign = 'right';\r\ninput.vAlign = 'top';\r\ninput.width = '40%';\r\ninput.height = '30px';\r\ninput.positionY = '-230px';\r\ninput.paddingRight = 20;\r\n// When you want to bind event listener to UI component, you have to\r\n// create new entity and add component with event listener to it\r\nvar inputEntity = new Entity();\r\ninputEntity.addComponentOrReplace(input);\r\ninputEntity.addComponentOrReplace(new OnChanged(function (data) {\r\n    inputTextState = data.value;\r\n}));\r\nengine.addEntity(inputEntity);\r\nvar sendButton = new Entity();\r\nvar sendButtonShape = new UIImage(container, new Texture(SEND_ICON));\r\nsendButtonShape.sourceWidth = 64;\r\nsendButtonShape.sourceHeight = 64;\r\nsendButtonShape.sourceTop = 0;\r\nsendButtonShape.sourceLeft = 0;\r\nsendButtonShape.width = '30px';\r\nsendButtonShape.height = '30px';\r\nsendButtonShape.hAlign = 'right';\r\nsendButtonShape.positionY = -40;\r\nsendButtonShape.positionX = -20;\r\nsendButton.addComponentOrReplace(new OnClick(function () {\r\n    if (inputTextState) {\r\n        textFromInput.value = inputTextState;\r\n        // clear text from input\r\n        input.value = '';\r\n        inputTextState = '';\r\n    }\r\n}));\r\nsendButton.addComponentOrReplace(sendButtonShape);\r\nengine.addEntity(sendButton);\r\n// --- SLIDERS\r\nvar valueFromSlider1 = new UIText(container);\r\nvalueFromSlider1.value = '0';\r\nvalueFromSlider1.vAlign = 'top';\r\nvalueFromSlider1.hAlign = 'right';\r\nvalueFromSlider1.width = '30px';\r\nvalueFromSlider1.fontSize = 30;\r\nvalueFromSlider1.color = new Color4(1, 0, 0);\r\nvar valueFromSlider2 = new UIText(container);\r\nvalueFromSlider2.positionY = '-100px';\r\nvalueFromSlider2.value = '0';\r\nvalueFromSlider2.vAlign = 'top';\r\nvalueFromSlider2.hAlign = 'right';\r\nvalueFromSlider2.width = '30px';\r\nvalueFromSlider2.fontSize = 30;\r\nvalueFromSlider2.color = Color4.Black();\r\nvar slider1 = new Entity();\r\nvar sliderShape1 = new UIScrollRect(container);\r\nsliderShape1.opacity = 1.0;\r\nsliderShape1.isVertical = true;\r\nsliderShape1.hAlign = 'right';\r\nsliderShape1.vAlign = 'top';\r\nsliderShape1.width = '20px';\r\nsliderShape1.height = '100px';\r\nsliderShape1.positionY = '0px';\r\nsliderShape1.positionX = '-60px';\r\nslider1.addComponentOrReplace(new OnChanged(function (data) {\r\n    var value = Math.round(data.value);\r\n    valueFromSlider1.value = value.toString();\r\n}));\r\nslider1.addComponentOrReplace(sliderShape1);\r\nengine.addEntity(slider1);\r\nvar slider2 = new Entity();\r\nvar sliderShape2 = new UIScrollRect(container);\r\nsliderShape2.opacity = 1.0;\r\nsliderShape2.borderColor = new Color4(1, 0, 0, 1);\r\nsliderShape2.isVertical = false;\r\nsliderShape2.isHorizontal = true;\r\nsliderShape2.hAlign = 'right';\r\nsliderShape2.vAlign = 'top';\r\nsliderShape2.width = '150px';\r\nsliderShape2.height = '20px';\r\nsliderShape2.positionY = '-130px';\r\nsliderShape2.positionX = '-40px';\r\nslider2.addComponentOrReplace(new OnChanged(function (data) {\r\n    var value = Math.round(data.value);\r\n    valueFromSlider2.value = value.toString();\r\n}));\r\nslider2.addComponentOrReplace(sliderShape2);\r\nengine.addEntity(slider2);\r\nvar topText = new UIText(container);\r\ntopText.value = 'Some text';\r\ntopText.vAlign = 'top';\r\ntopText.fontSize = 20;\r\ntopText.width = '200px';\r\ntopText.height = '25px';\r\ntopText.paddingTop = 10;\r\ntopText.outlineWidth = 1;\r\ntopText.outlineColor = Color4.FromHexString('#add8e6');\r\nvar textFromInput = new UIText(container);\r\ntextFromInput.value = 'Type text to input and press send button';\r\ntextFromInput.hAlign = 'right';\r\ntextFromInput.vAlign = 'top';\r\ntextFromInput.positionY = '-200px';\r\ntextFromInput.fontSize = 15;\r\ntextFromInput.adaptHeight = true;\r\ntextFromInput.adaptWidth = true;\r\ntextFromInput.paddingRight = 10;\r\n// --- CLOSE BUTTON\r\nvar closeButton = new Entity();\r\nvar closeShape = new UIButton(container);\r\ncloseShape.text = 'Close UI';\r\ncloseShape.fontSize = 15;\r\ncloseShape.color = Color4.Black();\r\ncloseShape.background = Color4.Yellow();\r\ncloseShape.cornerRadius = 10;\r\ncloseShape.thickness = 1;\r\ncloseShape.width = '120px';\r\ncloseShape.height = '30px';\r\ncloseShape.vAlign = 'bottom';\r\ncloseShape.positionY = '80px';\r\ncloseShape.isPointerBlocker = false;\r\ncloseButton.addComponentOrReplace(new OnClick(function () {\r\n    ui.visible = false;\r\n}));\r\ncloseButton.addComponentOrReplace(closeShape);\r\nengine.addEntity(closeButton);\r\n// -----------------------------\r\n// Let's place some trigger for opening some game UI (e.g. inventory) into the scene\r\n// This TextShape is separate thing from screen-space UI\r\nvar instructionText = new TextShape('Open inventory by clicking on the box');\r\ninstructionText.width = 5;\r\ninstructionText.fontSize = 40;\r\nvar instructions = new Entity();\r\ninstructions.addComponentOrReplace(new Transform({ position: new Vector3(5, 1.5, 5) }));\r\ninstructions.addComponentOrReplace(instructionText);\r\nengine.addEntity(instructions);\r\nvar uiTrigger = new Entity();\r\nvar transform = new Transform({ position: new Vector3(5, 1, 5), scale: new Vector3(0.3, 0.3, 0.3) });\r\nuiTrigger.addComponentOrReplace(transform);\r\nuiTrigger.addComponentOrReplace(new OnClick(function () {\r\n    ui.visible = true;\r\n}));\r\nuiTrigger.addComponentOrReplace(new BoxShape());\r\nengine.addEntity(uiTrigger);\r\n//# sourceMappingURL=data:application/json;base64,");